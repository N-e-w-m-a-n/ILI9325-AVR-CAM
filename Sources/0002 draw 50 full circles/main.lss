
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000030d6  0000316a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800082  00800082  0000318c  2**0
                  ALLOC
  3 .stab         00000420  00000000  00000000  0000318c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000ab  00000000  00000000  000035ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003657  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000218  00000000  00000000  000036f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cc4  00000000  00000000  0000390f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000759  00000000  00000000  000055d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001917  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00007644  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000544  00000000  00000000  000078c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002333  00000000  00000000  00007e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  0000a13b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 03 	jmp	0x644	; 0x644 <__ctors_end>
       4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      10:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      14:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      18:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      1c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      20:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      24:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      28:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      2c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      30:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      38:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      3c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      40:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      44:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      48:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      4c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      50:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>

00000054 <font_8x16>:
	...
      68:	18 3c 3c 3c 18 18 00 18 18 00 00 00 00 00 00 00     .<<<............
      78:	66 66 66 00 00 00 00 00 00 00 00 00 00 00 00 00     fff.............
      88:	36 36 7f 36 36 36 7f 36 36 00 00 00 00 00 18 18     66.666.66.......
      98:	3c 66 60 30 18 0c 06 66 3c 18 18 00 00 00 00 70     <f`0...f<......p
      a8:	d8 da 76 0c 18 30 6e 5b 1b 0e 00 00 00 00 00 00     ..v..0n[........
      b8:	38 6c 6c 38 60 6f 66 66 3b 00 00 00 00 00 00 00     8ll8`off;.......
      c8:	18 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      d8:	0c 18 18 30 30 30 30 30 18 18 0c 00 00 00 00 00     ...00000........
      e8:	30 18 18 0c 0c 0c 0c 0c 18 18 30 00 00 00 00 00     0.........0.....
      f8:	00 00 36 1c 7f 1c 36 00 00 00 00 00 00 00 00 00     ..6...6.........
     108:	00 00 18 18 7e 18 18 00 00 00 00 00 00 00 00 00     ....~...........
     118:	00 00 00 00 00 00 1c 1c 0c 18 00 00 00 00 00 00     ................
     128:	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 00     ...~............
     138:	00 00 00 00 00 00 1c 1c 00 00 00 00 00 00 00 06     ................
     148:	06 0c 0c 18 18 30 30 60 60 00 00 00 00 00 00 1e     .....00``.......
     158:	33 37 37 33 3b 3b 33 1e 00 00 00 00 00 00 00 0c     3773;;3.........
     168:	1c 7c 0c 0c 0c 0c 0c 0c 00 00 00 00 00 00 00 3c     .|.............<
     178:	66 66 06 0c 18 30 60 7e 00 00 00 00 00 00 00 3c     ff...0`~.......<
     188:	66 66 06 1c 06 66 66 3c 00 00 00 00 00 00 00 30     ff...ff<.......0
     198:	30 36 36 36 66 7f 06 06 00 00 00 00 00 00 00 7e     0666f..........~
     1a8:	60 60 60 7c 06 06 0c 78 00 00 00 00 00 00 00 1c     ```|...x........
     1b8:	18 30 7c 66 66 66 66 3c 00 00 00 00 00 00 00 7e     .0|ffff<.......~
     1c8:	06 0c 0c 18 18 30 30 30 00 00 00 00 00 00 00 3c     .....000.......<
     1d8:	66 66 76 3c 6e 66 66 3c 00 00 00 00 00 00 00 3c     ffv<nff<.......<
     1e8:	66 66 66 66 3e 0c 18 38 00 00 00 00 00 00 00 00     ffff>..8........
     1f8:	00 1c 1c 00 00 00 1c 1c 00 00 00 00 00 00 00 00     ................
     208:	00 1c 1c 00 00 00 1c 1c 0c 18 00 00 00 00 00 06     ................
     218:	0c 18 30 60 30 18 0c 06 00 00 00 00 00 00 00 00     ..0`0...........
     228:	00 00 7e 00 7e 00 00 00 00 00 00 00 00 00 00 60     ..~.~..........`
     238:	30 18 0c 06 0c 18 30 60 00 00 00 00 00 00 00 3c     0.....0`.......<
     248:	66 66 0c 18 18 00 18 18 00 00 00 00 00 00 00 7e     ff.............~
     258:	c3 c3 cf db db cf c0 7f 00 00 00 00 00 00 00 18     ................
     268:	3c 66 66 66 7e 66 66 66 00 00 00 00 00 00 00 7c     <fff~fff.......|
     278:	66 66 66 7c 66 66 66 7c 00 00 00 00 00 00 00 3c     fff|fff|.......<
     288:	66 66 60 60 60 66 66 3c 00 00 00 00 00 00 00 78     ff```ff<.......x
     298:	6c 66 66 66 66 66 6c 78 00 00 00 00 00 00 00 7e     lffffflx.......~
     2a8:	60 60 60 7c 60 60 60 7e 00 00 00 00 00 00 00 7e     ```|```~.......~
     2b8:	60 60 60 7c 60 60 60 60 00 00 00 00 00 00 00 3c     ```|````.......<
     2c8:	66 66 60 60 6e 66 66 3e 00 00 00 00 00 00 00 66     ff``nff>.......f
     2d8:	66 66 66 7e 66 66 66 66 00 00 00 00 00 00 00 3c     fff~ffff.......<
     2e8:	18 18 18 18 18 18 18 3c 00 00 00 00 00 00 1e 0c     .......<........
     2f8:	0c 0c 0c 0c cc cc cc 78 00 00 00 00 00 00 00 66     .......x.......f
     308:	66 6c 6c 78 6c 6c 66 66 00 00 00 00 00 00 00 60     fllxllff.......`
     318:	60 60 60 60 60 60 60 7e 00 00 00 00 00 00 00 63     ```````~.......c
     328:	63 77 6b 6b 6b 63 63 63 00 00 00 00 00 00 00 63     cwkkkccc.......c
     338:	63 73 7b 6f 67 63 63 63 00 00 00 00 00 00 00 3c     cs{ogccc.......<
     348:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 7c     fffffff<.......|
     358:	66 66 66 7c 60 60 60 60 00 00 00 00 00 00 00 3c     fff|````.......<
     368:	66 66 66 66 66 66 66 3c 0c 06 00 00 00 00 00 7c     fffffff<.......|
     378:	66 66 66 7c 6c 66 66 66 00 00 00 00 00 00 00 3c     fff|lfff.......<
     388:	66 60 30 18 0c 06 66 3c 00 00 00 00 00 00 00 7e     f`0...f<.......~
     398:	18 18 18 18 18 18 18 18 00 00 00 00 00 00 00 66     ...............f
     3a8:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 66     fffffff<.......f
     3b8:	66 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 63     ffffff<........c
     3c8:	63 63 6b 6b 6b 36 36 36 00 00 00 00 00 00 00 66     cckkk666.......f
     3d8:	66 34 18 18 2c 66 66 66 00 00 00 00 00 00 00 66     f4..,fff.......f
     3e8:	66 66 66 3c 18 18 18 18 00 00 00 00 00 00 00 7e     fff<...........~
     3f8:	06 06 0c 18 30 60 60 7e 00 00 00 00 00 00 00 3c     ....0``~.......<
     408:	30 30 30 30 30 30 30 30 30 30 3c 00 00 00 00 60     0000000000<....`
     418:	60 30 30 18 18 0c 0c 06 06 00 00 00 00 00 00 3c     `00............<
     428:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66     ..........<...<f
	...
     450:	00 00 ff 00 00 38 18 0c 00 00 00 00 00 00 00 00     .....8..........
	...
     468:	00 3c 06 06 3e 66 66 3e 00 00 00 00 00 00 00 60     .<..>ff>.......`
     478:	60 7c 66 66 66 66 66 7c 00 00 00 00 00 00 00 00     `|fffff|........
     488:	00 3c 66 60 60 60 66 3c 00 00 00 00 00 00 00 06     .<f```f<........
     498:	06 3e 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .>fffff>........
     4a8:	00 3c 66 66 7e 60 60 3c 00 00 00 00 00 00 00 1e     .<ff~``<........
     4b8:	30 30 30 7e 30 30 30 30 00 00 00 00 00 00 00 00     000~0000........
     4c8:	00 3e 66 66 66 66 66 3e 06 06 7c 00 00 00 00 60     .>fffff>..|....`
     4d8:	60 7c 66 66 66 66 66 66 00 00 00 00 00 00 18 18     `|ffffff........
     4e8:	00 78 18 18 18 18 18 7e 00 00 00 00 00 00 0c 0c     .x.....~........
     4f8:	00 3c 0c 0c 0c 0c 0c 0c 0c 0c 78 00 00 00 00 60     .<........x....`
     508:	60 66 66 6c 78 6c 66 66 00 00 00 00 00 00 00 78     `fflxlff.......x
     518:	18 18 18 18 18 18 18 7e 00 00 00 00 00 00 00 00     .......~........
     528:	00 7e 6b 6b 6b 6b 6b 63 00 00 00 00 00 00 00 00     .~kkkkkc........
     538:	00 7c 66 66 66 66 66 66 00 00 00 00 00 00 00 00     .|ffffff........
     548:	00 3c 66 66 66 66 66 3c 00 00 00 00 00 00 00 00     .<fffff<........
     558:	00 7c 66 66 66 66 66 7c 60 60 60 00 00 00 00 00     .|fffff|```.....
     568:	00 3e 66 66 66 66 66 3e 06 06 06 00 00 00 00 00     .>fffff>........
     578:	00 66 6e 70 60 60 60 60 00 00 00 00 00 00 00 00     .fnp````........
     588:	00 3e 60 60 3c 06 06 7c 00 00 00 00 00 00 00 30     .>``<..|.......0
     598:	30 7e 30 30 30 30 30 1e 00 00 00 00 00 00 00 00     0~00000.........
     5a8:	00 66 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .ffffff>........
     5b8:	00 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 00     .fffff<.........
     5c8:	00 63 6b 6b 6b 6b 36 36 00 00 00 00 00 00 00 00     .ckkkk66........
     5d8:	00 66 66 3c 18 3c 66 66 00 00 00 00 00 00 00 00     .ff<.<ff........
     5e8:	00 66 66 66 66 66 66 3c 0c 18 f0 00 00 00 00 00     .ffffff<........
     5f8:	00 7e 06 0c 18 30 60 7e 00 00 00 00 00 00 00 0c     .~...0`~........
     608:	18 18 18 30 60 30 18 18 18 0c 00 00 00 00 00 18     ...0`0..........
     618:	18 18 18 18 18 18 18 18 18 18 18 00 00 00 00 30     ...............0
     628:	18 18 18 0c 06 0c 18 18 18 30 00 00 00 00 00 71     .........0.....q
     638:	db 8e 00 00 00 00 00 00 00 00 00 00                 ............

00000644 <__ctors_end>:
     644:	11 24       	eor	r1, r1
     646:	1f be       	out	0x3f, r1	; 63
     648:	cf e5       	ldi	r28, 0x5F	; 95
     64a:	d8 e0       	ldi	r29, 0x08	; 8
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	cd bf       	out	0x3d, r28	; 61

00000650 <__do_copy_data>:
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	a0 e6       	ldi	r26, 0x60	; 96
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	e6 ed       	ldi	r30, 0xD6	; 214
     658:	f0 e3       	ldi	r31, 0x30	; 48
     65a:	02 c0       	rjmp	.+4      	; 0x660 <.do_copy_data_start>

0000065c <.do_copy_data_loop>:
     65c:	05 90       	lpm	r0, Z+
     65e:	0d 92       	st	X+, r0

00000660 <.do_copy_data_start>:
     660:	a2 38       	cpi	r26, 0x82	; 130
     662:	b1 07       	cpc	r27, r17
     664:	d9 f7       	brne	.-10     	; 0x65c <.do_copy_data_loop>

00000666 <__do_clear_bss>:
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	a2 e8       	ldi	r26, 0x82	; 130
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	01 c0       	rjmp	.+2      	; 0x670 <.do_clear_bss_start>

0000066e <.do_clear_bss_loop>:
     66e:	1d 92       	st	X+, r1

00000670 <.do_clear_bss_start>:
     670:	a7 38       	cpi	r26, 0x87	; 135
     672:	b1 07       	cpc	r27, r17
     674:	e1 f7       	brne	.-8      	; 0x66e <.do_clear_bss_loop>
     676:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
     67a:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <_exit>

0000067e <__bad_interrupt>:
     67e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000682 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     682:	20 ed       	ldi	r18, 0xD0	; 208
     684:	37 e0       	ldi	r19, 0x07	; 7
     686:	03 c0       	rjmp	.+6      	; 0x68e <delay_ms+0xc>
     688:	f9 01       	movw	r30, r18
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <delay_ms+0x8>

// my delay
//
void delay_ms (int ms) {
	
	while (ms--) _delay_ms(1);
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	4f ef       	ldi	r20, 0xFF	; 255
     692:	8f 3f       	cpi	r24, 0xFF	; 255
     694:	94 07       	cpc	r25, r20
     696:	c1 f7       	brne	.-16     	; 0x688 <delay_ms+0x6>
}
     698:	08 95       	ret

0000069a <main>:

/////////////////
//
// Main prorgam
//
int main (void) {
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	c8 56       	subi	r28, 0x68	; 104
     6bc:	d0 40       	sbci	r29, 0x00	; 0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61

	char text[100];

	// Data bridge and extern clock Camera to LCD initialization
	//
	HC245_INIT();
     6c8:	8e 9a       	sbi	0x11, 6	; 17
	EXCLK_INIT();
     6ca:	b8 9a       	sbi	0x17, 0	; 23
	//
	// and disable it both
	//
	HC245_DISABLE();
     6cc:	96 9a       	sbi	0x12, 6	; 18
	EXCLK_DISABLE();
     6ce:	c0 98       	cbi	0x18, 0	; 24
	
	// KEY switch init
	//
	KEY_SW_INIT();
     6d0:	8d 98       	cbi	0x11, 5	; 17
     6d2:	95 9a       	sbi	0x12, 5	; 18

	// ADC initialization
	//
	//ADC_INIT(0);
	
	LCD_DATA_OUPUT();
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	84 bb       	out	0x14, r24	; 20
    LCD_Init();
     6d8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <LCD_Init>

	if (KEY_SW) {
     6dc:	85 99       	sbic	0x10, 5	; 16
     6de:	33 c0       	rjmp	.+102    	; 0x746 <main+0xac>
		
		DDRD &= ~0b00001000;
     6e0:	8b 98       	cbi	0x11, 3	; 17
		PORTD &= ~0b00001000;
     6e2:	93 98       	cbi	0x12, 3	; 18
		
		while(true) {
			
			while(PIND & 0b00001000);
     6e4:	83 99       	sbic	0x10, 3	; 16
     6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <main+0x4a>
     6e8:	aa 24       	eor	r10, r10
     6ea:	bb 24       	eor	r11, r11
			for(int i=0; i<50; i++) {
				
				LCD_DrawCircle(rand()%319, rand()%239, rand()%100, rand()<<1, 1);
     6ec:	0e 94 66 15 	call	0x2acc	; 0x2acc <rand>
     6f0:	8c 01       	movw	r16, r24
     6f2:	0e 94 66 15 	call	0x2acc	; 0x2acc <rand>
     6f6:	7c 01       	movw	r14, r24
     6f8:	0e 94 66 15 	call	0x2acc	; 0x2acc <rand>
     6fc:	6c 01       	movw	r12, r24
     6fe:	0e 94 66 15 	call	0x2acc	; 0x2acc <rand>
     702:	9c 01       	movw	r18, r24
     704:	c8 01       	movw	r24, r16
     706:	6f e3       	ldi	r22, 0x3F	; 63
     708:	71 e0       	ldi	r23, 0x01	; 1
     70a:	0e 94 cc 14 	call	0x2998	; 0x2998 <__divmodhi4>
     70e:	8c 01       	movw	r16, r24
     710:	c7 01       	movw	r24, r14
     712:	6f ee       	ldi	r22, 0xEF	; 239
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	0e 94 cc 14 	call	0x2998	; 0x2998 <__divmodhi4>
     71a:	fc 01       	movw	r30, r24
     71c:	c6 01       	movw	r24, r12
     71e:	64 e6       	ldi	r22, 0x64	; 100
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	0e 94 cc 14 	call	0x2998	; 0x2998 <__divmodhi4>
     726:	ac 01       	movw	r20, r24
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	c8 01       	movw	r24, r16
     72e:	bf 01       	movw	r22, r30
     730:	01 e0       	ldi	r16, 0x01	; 1
     732:	0e 94 02 08 	call	0x1004	; 0x1004 <LCD_DrawCircle>
		PORTD &= ~0b00001000;
		
		while(true) {
			
			while(PIND & 0b00001000);
			for(int i=0; i<50; i++) {
     736:	08 94       	sec
     738:	a1 1c       	adc	r10, r1
     73a:	b1 1c       	adc	r11, r1
     73c:	22 e3       	ldi	r18, 0x32	; 50
     73e:	a2 16       	cp	r10, r18
     740:	b1 04       	cpc	r11, r1
     742:	a1 f6       	brne	.-88     	; 0x6ec <main+0x52>
     744:	cf cf       	rjmp	.-98     	; 0x6e4 <main+0x4a>
			}
		}
	}
	else {
		
		unsigned int x = 0, y = 0, in;
     746:	1a 82       	std	Y+2, r1	; 0x02
     748:	19 82       	std	Y+1, r1	; 0x01
     74a:	1c 82       	std	Y+4, r1	; 0x04
     74c:	1b 82       	std	Y+3, r1	; 0x03
		
		LCD_DrawCircle(150, 200, 80, RED, 1);
     74e:	86 e9       	ldi	r24, 0x96	; 150
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	68 ec       	ldi	r22, 0xC8	; 200
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	40 e5       	ldi	r20, 0x50	; 80
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	38 ef       	ldi	r19, 0xF8	; 248
     75e:	01 e0       	ldi	r16, 0x01	; 1
     760:	0e 94 02 08 	call	0x1004	; 0x1004 <LCD_DrawCircle>
		
		while(true) {
			
			TOUCH_Reset();
			TOUCH_Read(&x, &y);
     764:	33 e0       	ldi	r19, 0x03	; 3
     766:	63 2e       	mov	r6, r19
     768:	71 2c       	mov	r7, r1
     76a:	6c 0e       	add	r6, r28
     76c:	7d 1e       	adc	r7, r29
     76e:	4e 01       	movw	r8, r28
     770:	08 94       	sec
     772:	81 1c       	adc	r8, r1
     774:	91 1c       	adc	r9, r1
			
			DDRD &= ~0b00001000;
			PORTD &= ~0b00001000;
			in = PIND & 0b00001000;
			
			sprintf(text, "touch.. %d  X: %d, Y: %d    ", in, x, y);
     776:	25 e0       	ldi	r18, 0x05	; 5
     778:	a2 2e       	mov	r10, r18
     77a:	b1 2c       	mov	r11, r1
     77c:	ac 0e       	add	r10, r28
     77e:	bd 1e       	adc	r11, r29
     780:	90 e6       	ldi	r25, 0x60	; 96
     782:	c9 2e       	mov	r12, r25
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	d9 2e       	mov	r13, r25
     788:	80 ed       	ldi	r24, 0xD0	; 208
     78a:	e8 2e       	mov	r14, r24
     78c:	87 e0       	ldi	r24, 0x07	; 7
     78e:	f8 2e       	mov	r15, r24
		
		LCD_DrawCircle(150, 200, 80, RED, 1);
		
		while(true) {
			
			TOUCH_Reset();
     790:	0e 94 13 14 	call	0x2826	; 0x2826 <TOUCH_Reset>
			TOUCH_Read(&x, &y);
     794:	c4 01       	movw	r24, r8
     796:	b3 01       	movw	r22, r6
     798:	0e 94 20 14 	call	0x2840	; 0x2840 <TOUCH_Read>
			
			DDRD &= ~0b00001000;
     79c:	8b 98       	cbi	0x11, 3	; 17
			PORTD &= ~0b00001000;
     79e:	93 98       	cbi	0x12, 3	; 18
			in = PIND & 0b00001000;
     7a0:	80 b3       	in	r24, 0x10	; 16
			
			sprintf(text, "touch.. %d  X: %d, Y: %d    ", in, x, y);
     7a2:	ad b7       	in	r26, 0x3d	; 61
     7a4:	be b7       	in	r27, 0x3e	; 62
     7a6:	1a 97       	sbiw	r26, 0x0a	; 10
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	be bf       	out	0x3e, r27	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	ad bf       	out	0x3d, r26	; 61
     7b2:	ed b7       	in	r30, 0x3d	; 61
     7b4:	fe b7       	in	r31, 0x3e	; 62
     7b6:	31 96       	adiw	r30, 0x01	; 1
     7b8:	12 96       	adiw	r26, 0x02	; 2
     7ba:	bc 92       	st	X, r11
     7bc:	ae 92       	st	-X, r10
     7be:	11 97       	sbiw	r26, 0x01	; 1
     7c0:	d3 82       	std	Z+3, r13	; 0x03
     7c2:	c2 82       	std	Z+2, r12	; 0x02
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	88 70       	andi	r24, 0x08	; 8
     7c8:	90 70       	andi	r25, 0x00	; 0
     7ca:	95 83       	std	Z+5, r25	; 0x05
     7cc:	84 83       	std	Z+4, r24	; 0x04
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	97 83       	std	Z+7, r25	; 0x07
     7d4:	86 83       	std	Z+6, r24	; 0x06
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	91 87       	std	Z+9, r25	; 0x09
     7dc:	80 87       	std	Z+8, r24	; 0x08
     7de:	0e 94 76 15 	call	0x2aec	; 0x2aec <sprintf>
			LCD_WriteString(10,220, text, YELLOW, BLACK);
     7e2:	2d b7       	in	r18, 0x3d	; 61
     7e4:	3e b7       	in	r19, 0x3e	; 62
     7e6:	26 5f       	subi	r18, 0xF6	; 246
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	3e bf       	out	0x3e, r19	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	2d bf       	out	0x3d, r18	; 61
     7f4:	8a e0       	ldi	r24, 0x0A	; 10
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	6c ed       	ldi	r22, 0xDC	; 220
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	a5 01       	movw	r20, r10
     7fe:	20 ee       	ldi	r18, 0xE0	; 224
     800:	3f ef       	ldi	r19, 0xFF	; 255
     802:	00 e0       	ldi	r16, 0x00	; 0
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	0e 94 c9 04 	call	0x992	; 0x992 <LCD_WriteString>
     80a:	8a e0       	ldi	r24, 0x0A	; 10
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	03 c0       	rjmp	.+6      	; 0x816 <main+0x17c>
     810:	f7 01       	movw	r30, r14
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <main+0x178>

// my delay
//
void delay_ms (int ms) {
	
	while (ms--) _delay_ms(1);
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	8f 3f       	cpi	r24, 0xFF	; 255
     81c:	93 07       	cpc	r25, r19
     81e:	c1 f7       	brne	.-16     	; 0x810 <main+0x176>
     820:	b7 cf       	rjmp	.-146    	; 0x790 <main+0xf6>

00000822 <LCD_WR_DATA>:
//
// write data to LCD bus
//
void LCD_WR_DATA (unsigned int data) {

	LCD_RD_H();
     822:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     824:	de 9a       	sbi	0x1b, 6	; 27
    LCD_CS_L();  
     826:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     828:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data>>8;
     82a:	95 bb       	out	0x15, r25	; 21
	
    LCD_WR_H();
     82c:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     82e:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data&0XFF; 
     830:	85 bb       	out	0x15, r24	; 21
	
    LCD_WR_H();
     832:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     834:	dd 9a       	sbi	0x1b, 5	; 27
}
     836:	08 95       	ret

00000838 <LCD_WR_INDEX>:
//
// Write register index
//
void LCD_WR_INDEX (unsigned int index) {

    LCD_RD_H();
     838:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_L();
     83a:	de 98       	cbi	0x1b, 6	; 27
    LCD_CS_L();  
     83c:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     83e:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index>>8; 
     840:	95 bb       	out	0x15, r25	; 21

    LCD_WR_H();
     842:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     844:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index&0XFF; 
     846:	85 bb       	out	0x15, r24	; 21

    LCD_WR_H();
     848:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     84a:	dd 9a       	sbi	0x1b, 5	; 27
}
     84c:	08 95       	ret

0000084e <LCD_WR_REGISTER>:

///////////////////
//
// Write register
//
void LCD_WR_REGISTER (unsigned int index,unsigned int data) {
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	8b 01       	movw	r16, r22

    LCD_WR_INDEX(index);
     854:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_WR_INDEX>
    LCD_WR_DATA(data);
     858:	c8 01       	movw	r24, r16
     85a:	0e 94 11 04 	call	0x822	; 0x822 <LCD_WR_DATA>
}
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret

00000864 <LCD_Scroll>:

///////////////////
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {
     864:	bc 01       	movw	r22, r24
     866:	02 c0       	rjmp	.+4      	; 0x86c <LCD_Scroll+0x8>

    while (y < 0)
        y += 320;
     868:	60 5c       	subi	r22, 0xC0	; 192
     86a:	7e 4f       	sbci	r23, 0xFE	; 254
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {

    while (y < 0)
     86c:	77 fd       	sbrc	r23, 7
     86e:	fc cf       	rjmp	.-8      	; 0x868 <LCD_Scroll+0x4>
     870:	02 c0       	rjmp	.+4      	; 0x876 <LCD_Scroll+0x12>
        y += 320;
	
    while (y >= 320)
        y -= 320;
     872:	60 54       	subi	r22, 0x40	; 64
     874:	71 40       	sbci	r23, 0x01	; 1
void LCD_Scroll (int y) {

    while (y < 0)
        y += 320;
	
    while (y >= 320)
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	60 34       	cpi	r22, 0x40	; 64
     87a:	78 07       	cpc	r23, r24
     87c:	d4 f7       	brge	.-12     	; 0x872 <LCD_Scroll+0xe>
        y -= 320;
	
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, y);
     87e:	8a e6       	ldi	r24, 0x6A	; 106
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
}
     886:	08 95       	ret

00000888 <LCD_SetBounds>:

////////////////////////////////////////
//
// LCD_SetBounds(x, y, width, height);
//
void LCD_SetBounds (unsigned int x, unsigned int y, unsigned int width, unsigned int height) {
     888:	8f 92       	push	r8
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	7c 01       	movw	r14, r24
     89e:	8b 01       	movw	r16, r22
     8a0:	4a 01       	movw	r8, r20
     8a2:	59 01       	movw	r10, r18

	// my Vertical
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     8a4:	8f ee       	ldi	r24, 0xEF	; 239
     8a6:	c8 2e       	mov	r12, r24
     8a8:	d1 2c       	mov	r13, r1
     8aa:	c6 1a       	sub	r12, r22
     8ac:	d7 0a       	sbc	r13, r23
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	b6 01       	movw	r22, r12
     8b4:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_START, LCD_MAX_HEIGHT -y -height);
     8b8:	10 95       	com	r17
     8ba:	01 95       	neg	r16
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	00 51       	subi	r16, 0x10	; 16
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	0a 19       	sub	r16, r10
     8c4:	1b 09       	sbc	r17, r11
     8c6:	80 e5       	ldi	r24, 0x50	; 80
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	b8 01       	movw	r22, r16
     8cc:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_END, LCD_MAX_HEIGHT -y -1);
     8d0:	81 e5       	ldi	r24, 0x51	; 81
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// my Horizontal
	//
	LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);
     8da:	81 e2       	ldi	r24, 0x21	; 33
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	b7 01       	movw	r22, r14
     8e0:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_START, x);
     8e4:	82 e5       	ldi	r24, 0x52	; 82
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	b7 01       	movw	r22, r14
     8ea:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_END, x + width -1);
     8ee:	08 94       	sec
     8f0:	e1 08       	sbc	r14, r1
     8f2:	f1 08       	sbc	r15, r1
     8f4:	e8 0c       	add	r14, r8
     8f6:	f9 1c       	adc	r15, r9
     8f8:	83 e5       	ldi	r24, 0x53	; 83
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	b7 01       	movw	r22, r14
     8fe:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// Set Read & Write data registrer
	//
	LCD_WR_GRAM;
     902:	82 e2       	ldi	r24, 0x22	; 34
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_WR_INDEX>
}
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	08 95       	ret

00000920 <LCD_WriteChar>:

///////////////////////////////////////////////
//
// LCD_WriteChar(x, y, ichar, color, bcolor);
//
void LCD_WriteChar (unsigned int x, unsigned int y, char ichar, unsigned int color, unsigned int bcolor) {
     920:	af 92       	push	r10
     922:	bf 92       	push	r11
     924:	cf 92       	push	r12
     926:	df 92       	push	r13
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	f4 2e       	mov	r15, r20
     934:	59 01       	movw	r10, r18
     936:	68 01       	movw	r12, r16

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
     938:	48 e0       	ldi	r20, 0x08	; 8
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	20 e1       	ldi	r18, 0x10	; 16
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SetBounds>
     944:	cf 2d       	mov	r28, r15
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	cc 0f       	add	r28, r28
     94c:	dd 1f       	adc	r29, r29
     94e:	9a 95       	dec	r25
     950:	e1 f7       	brne	.-8      	; 0x94a <LCD_WriteChar+0x2a>
     952:	cc 5a       	subi	r28, 0xAC	; 172
     954:	d1 40       	sbci	r29, 0x01	; 1
     956:	00 e0       	ldi	r16, 0x00	; 0
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
     958:	fe 01       	movw	r30, r28
     95a:	f4 90       	lpm	r15, Z+
     95c:	10 e0       	ldi	r17, 0x00	; 0
		
		for(column = 0; column < 8; column++) {
			
			if (data & 0x80)
     95e:	f7 fe       	sbrs	r15, 7
     960:	02 c0       	rjmp	.+4      	; 0x966 <LCD_WriteChar+0x46>
				
				LCD_WR_DATA(color);
     962:	c5 01       	movw	r24, r10
     964:	01 c0       	rjmp	.+2      	; 0x968 <LCD_WriteChar+0x48>
			else
				LCD_WR_DATA(bcolor);
     966:	c6 01       	movw	r24, r12
     968:	0e 94 11 04 	call	0x822	; 0x822 <LCD_WR_DATA>
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
		
		for(column = 0; column < 8; column++) {
     96c:	1f 5f       	subi	r17, 0xFF	; 255
     96e:	18 30       	cpi	r17, 0x08	; 8
     970:	11 f0       	breq	.+4      	; 0x976 <LCD_WriteChar+0x56>
				
				LCD_WR_DATA(color);
			else
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
     972:	ff 0c       	add	r15, r15
     974:	f4 cf       	rjmp	.-24     	; 0x95e <LCD_WriteChar+0x3e>

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
  
	for(line = 0; line < 16; line++) {
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	21 96       	adiw	r28, 0x01	; 1
     97a:	00 31       	cpi	r16, 0x10	; 16
     97c:	69 f7       	brne	.-38     	; 0x958 <LCD_WriteChar+0x38>
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
		}
	}
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	08 95       	ret

00000992 <LCD_WriteString>:

//////////////////////////////////////////////////
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {
     992:	8f 92       	push	r8
     994:	9f 92       	push	r9
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	7c 01       	movw	r14, r24
     9ac:	4b 01       	movw	r8, r22
     9ae:	ea 01       	movw	r28, r20
     9b0:	59 01       	movw	r10, r18
     9b2:	68 01       	movw	r12, r16
     9b4:	0b c0       	rjmp	.+22     	; 0x9cc <LCD_WriteString+0x3a>

	while(*string) {
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
     9b6:	21 96       	adiw	r28, 0x01	; 1
     9b8:	c7 01       	movw	r24, r14
     9ba:	b4 01       	movw	r22, r8
     9bc:	95 01       	movw	r18, r10
     9be:	86 01       	movw	r16, r12
     9c0:	0e 94 90 04 	call	0x920	; 0x920 <LCD_WriteChar>
		x += 8;
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	e8 0e       	add	r14, r24
     9ca:	f9 1e       	adc	r15, r25
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {

	while(*string) {
     9cc:	48 81       	ld	r20, Y
     9ce:	44 23       	and	r20, r20
     9d0:	91 f7       	brne	.-28     	; 0x9b6 <LCD_WriteString+0x24>
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
		x += 8;
	}
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	08 95       	ret

000009ec <LCD_Fill>:
//
// LCD_Fill(x, y, width, height, color);
//
// color is RGB(5-6-5) format
//
void LCD_Fill (int x, int y, unsigned int width, unsigned int height, unsigned int color) {
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	78 01       	movw	r14, r16

	unsigned long index;
    int right = x + width;
     9fa:	48 0f       	add	r20, r24
     9fc:	59 1f       	adc	r21, r25
	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
    bottom = min(bottom, LCD_MAX_HEIGHT);
	
    x = max(x, 0);
     9fe:	97 ff       	sbrs	r25, 7
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <LCD_Fill+0x1a>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
    y = max(y, 0);
	
    width = right - x;
     a06:	e1 e0       	ldi	r30, 0x01	; 1
     a08:	41 34       	cpi	r20, 0x41	; 65
     a0a:	5e 07       	cpc	r21, r30
     a0c:	14 f0       	brlt	.+4      	; 0xa12 <LCD_Fill+0x26>
     a0e:	40 e4       	ldi	r20, 0x40	; 64
     a10:	51 e0       	ldi	r21, 0x01	; 1
     a12:	8a 01       	movw	r16, r20
     a14:	08 1b       	sub	r16, r24
     a16:	19 0b       	sbc	r17, r25
    height = bottom - y;
	
    if ((width <= 0) || (height <= 0) || (bottom < 0) || (y >= LCD_MAX_HEIGHT))
     a18:	79 f1       	breq	.+94     	; 0xa78 <LCD_Fill+0x8c>
//
void LCD_Fill (int x, int y, unsigned int width, unsigned int height, unsigned int color) {

	unsigned long index;
    int right = x + width;
    int bottom = y + height;
     a1a:	26 0f       	add	r18, r22
     a1c:	37 1f       	adc	r19, r23

	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
    bottom = min(bottom, LCD_MAX_HEIGHT);
     a1e:	21 3f       	cpi	r18, 0xF1	; 241
     a20:	31 05       	cpc	r19, r1
     a22:	14 f0       	brlt	.+4      	; 0xa28 <LCD_Fill+0x3c>
     a24:	20 ef       	ldi	r18, 0xF0	; 240
     a26:	30 e0       	ldi	r19, 0x00	; 0
	
    x = max(x, 0);
    y = max(y, 0);
     a28:	77 ff       	sbrs	r23, 7
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <LCD_Fill+0x44>
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
	
    width = right - x;
    height = bottom - y;
     a30:	e9 01       	movw	r28, r18
     a32:	c6 1b       	sub	r28, r22
     a34:	d7 0b       	sbc	r29, r23
	
    if ((width <= 0) || (height <= 0) || (bottom < 0) || (y >= LCD_MAX_HEIGHT))
     a36:	01 f1       	breq	.+64     	; 0xa78 <LCD_Fill+0x8c>
     a38:	37 fd       	sbrc	r19, 7
     a3a:	1e c0       	rjmp	.+60     	; 0xa78 <LCD_Fill+0x8c>
     a3c:	60 3f       	cpi	r22, 0xF0	; 240
     a3e:	71 05       	cpc	r23, r1
     a40:	dc f4       	brge	.+54     	; 0xa78 <LCD_Fill+0x8c>
        return;    

	// Set bounds
	//
	LCD_SetBounds(x, y, width, height);
     a42:	a8 01       	movw	r20, r16
     a44:	9e 01       	movw	r18, r28
     a46:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SetBounds>
	
	// LCD select enable
	//
	LCD_RD_H();
     a4a:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     a4c:	de 9a       	sbi	0x1b, 6	; 27
	LCD_CS_L();
     a4e:	dd 98       	cbi	0x1b, 5	; 27
	
	index = (unsigned long)width *height;
     a50:	be 01       	movw	r22, r28
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	98 01       	movw	r18, r16
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>

	while(index--) {
		
		LCD_WR_L();
     a60:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color>>8; 
     a62:	f5 ba       	out	0x15, r15	; 21
		
		LCD_WR_H();
     a64:	c3 98       	cbi	0x18, 3	; 24
		LCD_WR_L();
     a66:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color&0XFF; 
     a68:	e5 ba       	out	0x15, r14	; 21
		
		LCD_WR_H();
     a6a:	c3 98       	cbi	0x18, 3	; 24
     a6c:	61 50       	subi	r22, 0x01	; 1
     a6e:	70 40       	sbci	r23, 0x00	; 0
     a70:	80 40       	sbci	r24, 0x00	; 0
     a72:	90 40       	sbci	r25, 0x00	; 0
	LCD_RS_H();
	LCD_CS_L();
	
	index = (unsigned long)width *height;

	while(index--) {
     a74:	a9 f7       	brne	.-22     	; 0xa60 <LCD_Fill+0x74>
		LCD_WR_H();
	}
 
	// LCD select disable
	//
	LCD_CS_H();
     a76:	dd 9a       	sbi	0x1b, 5	; 27
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	08 95       	ret

00000a86 <LCD_Clear>:
//
// LCD_Clear(color);
//
// color is RGB(5-6-5) format
//
void LCD_Clear (unsigned int color) {
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	8c 01       	movw	r16, r24

	LCD_Fill(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT, color);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	40 e4       	ldi	r20, 0x40	; 64
     a96:	51 e0       	ldi	r21, 0x01	; 1
     a98:	20 ef       	ldi	r18, 0xF0	; 240
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Fill>
}
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	08 95       	ret

00000aa6 <LCD_Init>:
//
// LCD initialization
//
void LCD_Init (void) {

	LCD_PORT_INI();
     aa6:	8f 9a       	sbi	0x11, 7	; 17
     aa8:	d5 9a       	sbi	0x1a, 5	; 26
     aaa:	d6 9a       	sbi	0x1a, 6	; 26
     aac:	bb 9a       	sbi	0x17, 3	; 23
     aae:	d7 9a       	sbi	0x1a, 7	; 26
     ab0:	b9 9a       	sbi	0x17, 1	; 23
 
	// LCD Reset
	//
	LCD_RST_L();
     ab2:	c1 98       	cbi	0x18, 1	; 24
     ab4:	88 ee       	ldi	r24, 0xE8	; 232
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	28 ec       	ldi	r18, 0xC8	; 200
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	f9 01       	movw	r30, r18
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <LCD_Init+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac4:	d9 f7       	brne	.-10     	; 0xabc <LCD_Init+0x16>
	_delay_ms(100);
	LCD_RST_H();
     ac6:	c1 9a       	sbi	0x18, 1	; 24
     ac8:	88 ee       	ldi	r24, 0xE8	; 232
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	28 ec       	ldi	r18, 0xC8	; 200
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	f9 01       	movw	r30, r18
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <LCD_Init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad8:	d9 f7       	brne	.-10     	; 0xad0 <LCD_Init+0x2a>
	_delay_ms(100); 
	
	// SET registers
	//
	LCD_WR_REGISTER(0x00E3,0x3008); 					// Set the internal timing;   
     ada:	83 ee       	ldi	r24, 0xE3	; 227
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	68 e0       	ldi	r22, 0x08	; 8
     ae0:	70 e3       	ldi	r23, 0x30	; 48
     ae2:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00E7,0x0012); 					// Set the internal timing;   
     ae6:	87 ee       	ldi	r24, 0xE7	; 231
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	62 e1       	ldi	r22, 0x12	; 18
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00Ef,0x1231); 					// Set the internal timing;   
     af2:	8f ee       	ldi	r24, 0xEF	; 239
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	61 e3       	ldi	r22, 0x31	; 49
     af8:	72 e1       	ldi	r23, 0x12	; 18
     afa:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_START_OSC,0x0001);				// Start Oscilator
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
     b0a:	84 ef       	ldi	r24, 0xF4	; 244
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	28 ec       	ldi	r18, 0xC8	; 200
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	f9 01       	movw	r30, r18
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <LCD_Init+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b1a:	d9 f7       	brne	.-10     	; 0xb12 <LCD_Init+0x6c>
	_delay_ms(50);

    LCD_WR_REGISTER(LCD_DRIVE_OUTPUT, 0x0000);			// Set standard drive mode
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_DRIVE_WAVE, 0x0700);			// Line inversion
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	77 e0       	ldi	r23, 0x07	; 7
     b30:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// 16 bits System interface (65536 colors)
	//
	LCD_WR_REGISTER(LCD_ENTRY_MODE,0x1028); 			// [12]BRG mode, [5:4]display rotate and [3]Landscape
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	68 e2       	ldi	r22, 0x28	; 40
     b3a:	70 e1       	ldi	r23, 0x10	; 16
     b3c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_RESIZE_CTRL, 0x0000);			// No resize
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL2, 0x0202);			// Back & front porch = 2
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	72 e0       	ldi	r23, 0x02	; 2
     b54:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL3, 0x0000);			// Non-display area refresh cycle
     b58:	89 e0       	ldi	r24, 0x09	; 9
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL4, 0x0000);			// FMARK function OFF
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
				
	// Select System interface
	//
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE1, 0x0000);	// 16-bit RGB interface, internal clock (Still pictures))
     b70:	8c e0       	ldi	r24, 0x0C	; 12
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_FRM_MARKER_POS, 0x0000);		// Frame marker Position
     b7c:	8d e0       	ldi	r24, 0x0D	; 13
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE2, 0x0000);	// RGB interface polarity
     b88:	8f e0       	ldi	r24, 0x0F	; 15
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>

	// Power On sequence 
	//
	LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x0000);
     b94:	80 e1       	ldi	r24, 0x10	; 16
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0007);			// Vci x1
     ba0:	81 e1       	ldi	r24, 0x11	; 17
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	67 e0       	ldi	r22, 0x07	; 7
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x0000);
     bac:	82 e1       	ldi	r24, 0x12	; 18
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x0000);
     bb8:	83 e1       	ldi	r24, 0x13	; 19
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
     bc4:	80 ed       	ldi	r24, 0xD0	; 208
     bc6:	97 e0       	ldi	r25, 0x07	; 7
     bc8:	28 ec       	ldi	r18, 0xC8	; 200
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	f9 01       	movw	r30, r18
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <LCD_Init+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bd4:	d9 f7       	brne	.-10     	; 0xbcc <LCD_Init+0x126>
    _delay_ms(200);										// Dis-charge capacitor power voltage
    
    LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x1590);			// Power supply startup, Source driver enable
     bd6:	80 e1       	ldi	r24, 0x10	; 16
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	60 e9       	ldi	r22, 0x90	; 144
     bdc:	75 e1       	ldi	r23, 0x15	; 21
     bde:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0227);			// Step-up circuit1	Fosc/4, Step-up circuit2 Fosc/16
     be2:	81 e1       	ldi	r24, 0x11	; 17
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	67 e2       	ldi	r22, 0x27	; 39
     be8:	72 e0       	ldi	r23, 0x02	; 2
     bea:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
     bee:	84 ef       	ldi	r24, 0xF4	; 244
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	28 ec       	ldi	r18, 0xC8	; 200
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	f9 01       	movw	r30, r18
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <LCD_Init+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfe:	d9 f7       	brne	.-10     	; 0xbf6 <LCD_Init+0x150>
    _delay_ms(50);

	LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x001e);			// Internal reference voltage= Vci;
     c00:	82 e1       	ldi	r24, 0x12	; 18
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	6e e1       	ldi	r22, 0x1E	; 30
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
     c0c:	84 ef       	ldi	r24, 0xF4	; 244
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	28 ec       	ldi	r18, 0xC8	; 200
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	f9 01       	movw	r30, r18
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <LCD_Init+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	d9 f7       	brne	.-10     	; 0xc14 <LCD_Init+0x16e>
    _delay_ms(50);
	
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x1500);			// VCOM amplitude x1.04
     c1e:	83 e1       	ldi	r24, 0x13	; 19
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	75 e1       	ldi	r23, 0x15	; 21
     c26:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL7, 0x0026);			// VCOMH x0.875
     c2a:	89 e2       	ldi	r24, 0x29	; 41
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	66 e2       	ldi	r22, 0x26	; 38
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
     c36:	84 ef       	ldi	r24, 0xF4	; 244
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	28 ec       	ldi	r18, 0xC8	; 200
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	f9 01       	movw	r30, r18
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_Init+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c46:	d9 f7       	brne	.-10     	; 0xc3e <LCD_Init+0x198>
    _delay_ms(50);
    
	// Adjust the Gamma Curve
	//
	LCD_WR_REGISTER(LCD_GAMMA_CTRL1,0x0007);
     c48:	80 e3       	ldi	r24, 0x30	; 48
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	67 e0       	ldi	r22, 0x07	; 7
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL2,0x0707);
     c54:	81 e3       	ldi	r24, 0x31	; 49
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	67 e0       	ldi	r22, 0x07	; 7
     c5a:	77 e0       	ldi	r23, 0x07	; 7
     c5c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL3,0x0107);
     c60:	82 e3       	ldi	r24, 0x32	; 50
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	67 e0       	ldi	r22, 0x07	; 7
     c66:	71 e0       	ldi	r23, 0x01	; 1
     c68:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL4,0x0206);
     c6c:	85 e3       	ldi	r24, 0x35	; 53
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	66 e0       	ldi	r22, 0x06	; 6
     c72:	72 e0       	ldi	r23, 0x02	; 2
     c74:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL5,0x0406);
     c78:	86 e3       	ldi	r24, 0x36	; 54
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	66 e0       	ldi	r22, 0x06	; 6
     c7e:	74 e0       	ldi	r23, 0x04	; 4
     c80:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL6,0x0101);
     c84:	87 e3       	ldi	r24, 0x37	; 55
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	71 e0       	ldi	r23, 0x01	; 1
     c8c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL7,0x0101);
     c90:	88 e3       	ldi	r24, 0x38	; 56
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL8,0x0207);
     c9c:	89 e3       	ldi	r24, 0x39	; 57
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	67 e0       	ldi	r22, 0x07	; 7
     ca2:	72 e0       	ldi	r23, 0x02	; 2
     ca4:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL9,0x0504);
     ca8:	8c e3       	ldi	r24, 0x3C	; 60
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	64 e0       	ldi	r22, 0x04	; 4
     cae:	75 e0       	ldi	r23, 0x05	; 5
     cb0:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL10,0x0806);
     cb4:	8d e3       	ldi	r24, 0x3D	; 61
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	66 e0       	ldi	r22, 0x06	; 6
     cba:	78 e0       	ldi	r23, 0x08	; 8
     cbc:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// Set frame rate
	//
	LCD_WR_REGISTER(LCD_FRAME_RATE, 0x000F);
     cc0:	8b e2       	ldi	r24, 0x2B	; 43
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	6f e0       	ldi	r22, 0x0F	; 15
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// Set GRAM area
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS,0x0000);			// Horizontal GRAM address
     ccc:	80 e2       	ldi	r24, 0x20	; 32
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS,0x0000);			// Vertical GRAM address
     cd8:	81 e2       	ldi	r24, 0x21	; 33
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_START, 0x0000);		// Horizontal GRAM Start Address
     ce4:	80 e5       	ldi	r24, 0x50	; 80
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_END, 0x00EF);		// Horizontal GRAM End Address
     cf0:	81 e5       	ldi	r24, 0x51	; 81
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	6f ee       	ldi	r22, 0xEF	; 239
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_START, 0x0000);		// Vertical GRAM Start Address
     cfc:	82 e5       	ldi	r24, 0x52	; 82
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_END, 0x013F);			// Vertical GRAM Start Address
     d08:	83 e5       	ldi	r24, 0x53	; 83
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	6f e3       	ldi	r22, 0x3F	; 63
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// Gater scan control
	//
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL1, 0x2700);		// Gate Scan for 320 lines
     d14:	80 e6       	ldi	r24, 0x60	; 96
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	77 e2       	ldi	r23, 0x27	; 39
     d1c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL2, 0x0003);		// From G1 to G320, vertical scroll enable
     d20:	81 e6       	ldi	r24, 0x61	; 97
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	63 e0       	ldi	r22, 0x03	; 3
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, 0x0000);		// Set scrolling line to 0x00
     d2c:	8a e6       	ldi	r24, 0x6A	; 106
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// Partial display control (not used for now)
	//
	LCD_WR_REGISTER(LCD_PART_IMG1_DISP_POS, 0x0000);
     d38:	80 e8       	ldi	r24, 0x80	; 128
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_START_AD, 0x0000);
     d44:	81 e8       	ldi	r24, 0x81	; 129
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_END_AD, 0x0000);
     d50:	82 e8       	ldi	r24, 0x82	; 130
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_DISP_POS, 0x0000);
     d5c:	83 e8       	ldi	r24, 0x83	; 131
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_START_AD, 0x0000);
     d68:	84 e8       	ldi	r24, 0x84	; 132
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_END_AD, 0x0000);
     d74:	85 e8       	ldi	r24, 0x85	; 133
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>

	// Panel interface control
	//
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE1, 0x0010);		// 16 clocks per line
     d80:	80 e9       	ldi	r24, 0x90	; 144
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	60 e1       	ldi	r22, 0x10	; 16
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE2, 0x0600);		// try 0x00 // gate output non-overlap 6 clocks period
     d8c:	82 e9       	ldi	r24, 0x92	; 146
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	76 e0       	ldi	r23, 0x06	; 6
     d94:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE3, 0x0003);		// ???
     d98:	83 e9       	ldi	r24, 0x93	; 147
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	63 e0       	ldi	r22, 0x03	; 3
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE4, 0x0110);		// H1 - 16 clocks per line period, 4 DOTCLKS division ratio with RGB synchron
     da4:	85 e9       	ldi	r24, 0x95	; 149
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	60 e1       	ldi	r22, 0x10	; 16
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE5, 0x0000);		// ???
     db0:	87 e9       	ldi	r24, 0x97	; 151
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE6, 0x0000);		// ???
     dbc:	88 e9       	ldi	r24, 0x98	; 152
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	
	// Display ON with 262K color, normal display follow
	//
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL1, 0x0133); 
     dc8:	87 e0       	ldi	r24, 0x07	; 7
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	63 e3       	ldi	r22, 0x33	; 51
     dce:	71 e0       	ldi	r23, 0x01	; 1
     dd0:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_Clear(BLACK);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 43 05 	call	0xa86	; 0xa86 <LCD_Clear>
	
	// Set LCD backlight on
	//
	LCD_BL_H();	
     ddc:	97 9a       	sbi	0x12, 7	; 18

}
     dde:	08 95       	ret

00000de0 <LCD_SetPoint>:

///////////////////////////////
//
// LCD_SetPoint(x, y, color);
//
void LCD_SetPoint (unsigned int x, unsigned int y,unsigned int color) {
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	ec 01       	movw	r28, r24
     dea:	cb 01       	movw	r24, r22
     dec:	8a 01       	movw	r16, r20

	if ((x >= LCD_MAX_WIDTH) || (y >= LCD_MAX_HEIGHT))
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	c0 34       	cpi	r28, 0x40	; 64
     df2:	d2 07       	cpc	r29, r18
     df4:	b8 f4       	brcc	.+46     	; 0xe24 <LCD_SetPoint+0x44>
     df6:	60 3f       	cpi	r22, 0xF0	; 240
     df8:	71 05       	cpc	r23, r1
     dfa:	a0 f4       	brcc	.+40     	; 0xe24 <LCD_SetPoint+0x44>
		return;
	
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     dfc:	6f ee       	ldi	r22, 0xEF	; 239
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	68 1b       	sub	r22, r24
     e02:	79 0b       	sbc	r23, r25
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);   
     e0c:	81 e2       	ldi	r24, 0x21	; 33
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	be 01       	movw	r22, r28
     e12:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_WR_REGISTER>
	LCD_WR_GRAM;
     e16:	82 e2       	ldi	r24, 0x22	; 34
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_WR_INDEX>
	LCD_WR_DATA(color);
     e1e:	c8 01       	movw	r24, r16
     e20:	0e 94 11 04 	call	0x822	; 0x822 <LCD_WR_DATA>
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <LCD_DrawLine>:

/////////////////////////////////////////
//
// LCD_DrawLine(x, y, xx, yy, color);
//
void LCD_DrawLine (unsigned int x, unsigned int y, unsigned int xx, unsigned int yy, unsigned int color) {
     e2e:	2f 92       	push	r2
     e30:	3f 92       	push	r3
     e32:	4f 92       	push	r4
     e34:	5f 92       	push	r5
     e36:	6f 92       	push	r6
     e38:	7f 92       	push	r7
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	28 97       	sbiw	r28, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	2b 01       	movw	r4, r22
     e68:	1c 83       	std	Y+4, r17	; 0x04
     e6a:	0b 83       	std	Y+3, r16	; 0x03
    int xerr=0, yerr=0, delta_x, delta_y;
    int incx, incy;

    // Compute the distances in both directions
	//
    delta_x = xx - x;
     e6c:	48 1b       	sub	r20, r24
     e6e:	59 0b       	sbc	r21, r25
    delta_y = yy - y;
     e70:	26 1b       	sub	r18, r22
     e72:	37 0b       	sbc	r19, r23

    // Compute the direction of the increment,
    // an increment of 0 means either a horizontal or vertical line.
	//
    if(delta_x > 0) 
     e74:	14 16       	cp	r1, r20
     e76:	15 06       	cpc	r1, r21
     e78:	24 f4       	brge	.+8      	; 0xe82 <LCD_DrawLine+0x54>
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	27 2e       	mov	r2, r23
     e7e:	31 2c       	mov	r3, r1
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <LCD_DrawLine+0x66>
		
		incx = 1;
    else 
	if(delta_x == 0) 
     e82:	41 15       	cp	r20, r1
     e84:	51 05       	cpc	r21, r1
     e86:	21 f0       	breq	.+8      	; 0xe90 <LCD_DrawLine+0x62>
     e88:	22 24       	eor	r2, r2
     e8a:	2a 94       	dec	r2
     e8c:	32 2c       	mov	r3, r2
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <LCD_DrawLine+0x66>
     e90:	22 24       	eor	r2, r2
     e92:	33 24       	eor	r3, r3
		
		incx=0;
    else 
		incx = -1;

    if(delta_y > 0)
     e94:	12 16       	cp	r1, r18
     e96:	13 06       	cpc	r1, r19
     e98:	24 f4       	brge	.+8      	; 0xea2 <LCD_DrawLine+0x74>
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	66 2e       	mov	r6, r22
     e9e:	71 2c       	mov	r7, r1
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <LCD_DrawLine+0x86>
		
		incy = 1;
    else 
	if(delta_y == 0)
     ea2:	21 15       	cp	r18, r1
     ea4:	31 05       	cpc	r19, r1
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <LCD_DrawLine+0x82>
     ea8:	66 24       	eor	r6, r6
     eaa:	6a 94       	dec	r6
     eac:	76 2c       	mov	r7, r6
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <LCD_DrawLine+0x86>
     eb0:	66 24       	eor	r6, r6
     eb2:	77 24       	eor	r7, r7
    else 
		incy = -1;

    // Determine which distance is greater
	//
    delta_x = (delta_x < 0) ? delta_x*-1 : delta_x;	// abs(delta_x)
     eb4:	5a 01       	movw	r10, r20
     eb6:	57 ff       	sbrs	r21, 7
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <LCD_DrawLine+0x94>
     eba:	b0 94       	com	r11
     ebc:	a1 94       	neg	r10
     ebe:	b1 08       	sbc	r11, r1
     ec0:	b3 94       	inc	r11
    delta_y = (delta_y < 0) ? delta_y*-1 : delta_y;	// abs(delta_y)
     ec2:	69 01       	movw	r12, r18
     ec4:	37 ff       	sbrs	r19, 7
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <LCD_DrawLine+0xa2>
     ec8:	d0 94       	com	r13
     eca:	c1 94       	neg	r12
     ecc:	d1 08       	sbc	r13, r1
     ece:	d3 94       	inc	r13
     ed0:	d8 86       	std	Y+8, r13	; 0x08
     ed2:	cf 82       	std	Y+7, r12	; 0x07
     ed4:	ca 14       	cp	r12, r10
     ed6:	db 04       	cpc	r13, r11
     ed8:	14 f4       	brge	.+4      	; 0xede <LCD_DrawLine+0xb0>
     eda:	b8 86       	std	Y+8, r11	; 0x08
     edc:	af 82       	std	Y+7, r10	; 0x07
     ede:	ee 24       	eor	r14, r14
     ee0:	ff 24       	eor	r15, r15
     ee2:	00 e0       	ldi	r16, 0x00	; 0
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	88 24       	eor	r8, r8
     ee8:	99 24       	eor	r9, r9
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
     eea:	8f 81       	ldd	r24, Y+7	; 0x07
     eec:	98 85       	ldd	r25, Y+8	; 0x08
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	24 c0       	rjmp	.+72     	; 0xf3e <LCD_DrawLine+0x110>
		
        LCD_SetPoint(x, y, color);
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	b2 01       	movw	r22, r4
     efc:	4b 81       	ldd	r20, Y+3	; 0x03
     efe:	5c 81       	ldd	r21, Y+4	; 0x04
     f00:	0e 94 f0 06 	call	0xde0	; 0xde0 <LCD_SetPoint>
        
        xerr += delta_x;
     f04:	ea 0c       	add	r14, r10
     f06:	fb 1c       	adc	r15, r11
        yerr += delta_y;
     f08:	0c 0d       	add	r16, r12
     f0a:	1d 1d       	adc	r17, r13
		
        if(xerr > distance) {
     f0c:	ef 81       	ldd	r30, Y+7	; 0x07
     f0e:	f8 85       	ldd	r31, Y+8	; 0x08
     f10:	ee 15       	cp	r30, r14
     f12:	ff 05       	cpc	r31, r15
     f14:	44 f4       	brge	.+16     	; 0xf26 <LCD_DrawLine+0xf8>
			
            xerr -= distance;
     f16:	ee 1a       	sub	r14, r30
     f18:	ff 0a       	sbc	r15, r31
            x += incx;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	82 0d       	add	r24, r2
     f20:	93 1d       	adc	r25, r3
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
        }
		
        if(yerr > distance) {
     f26:	ef 81       	ldd	r30, Y+7	; 0x07
     f28:	f8 85       	ldd	r31, Y+8	; 0x08
     f2a:	e0 17       	cp	r30, r16
     f2c:	f1 07       	cpc	r31, r17
     f2e:	24 f4       	brge	.+8      	; 0xf38 <LCD_DrawLine+0x10a>
			
            yerr -= distance;
     f30:	0e 1b       	sub	r16, r30
     f32:	1f 0b       	sbc	r17, r31
            y += incy;
     f34:	46 0c       	add	r4, r6
     f36:	57 1c       	adc	r5, r7
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
     f38:	08 94       	sec
     f3a:	81 1c       	adc	r8, r1
     f3c:	91 1c       	adc	r9, r1
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	88 15       	cp	r24, r8
     f44:	99 05       	cpc	r25, r9
     f46:	bc f6       	brge	.-82     	; 0xef6 <LCD_DrawLine+0xc8>
			
            yerr -= distance;
            y += incy;
        }
    }
}
     f48:	28 96       	adiw	r28, 0x08	; 8
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	bf 90       	pop	r11
     f66:	af 90       	pop	r10
     f68:	9f 90       	pop	r9
     f6a:	8f 90       	pop	r8
     f6c:	7f 90       	pop	r7
     f6e:	6f 90       	pop	r6
     f70:	5f 90       	pop	r5
     f72:	4f 90       	pop	r4
     f74:	3f 90       	pop	r3
     f76:	2f 90       	pop	r2
     f78:	08 95       	ret

00000f7a <LCD_Draw4.1639>:
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {


	// Draw 4 mirrored points
	//
	void LCD_Draw4 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color) {
     f7a:	6f 92       	push	r6
     f7c:	7f 92       	push	r7
     f7e:	8f 92       	push	r8
     f80:	9f 92       	push	r9
     f82:	af 92       	push	r10
     f84:	bf 92       	push	r11
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	7a 01       	movw	r14, r20
     f98:	e9 01       	movw	r28, r18
     f9a:	68 01       	movw	r12, r16
		
		int	mx, my;
		
		mx = x - dx;
     f9c:	9c 01       	movw	r18, r24
     f9e:	3c 01       	movw	r6, r24
     fa0:	64 1a       	sub	r6, r20
     fa2:	75 0a       	sbc	r7, r21
		my = y - dy;
     fa4:	4b 01       	movw	r8, r22
     fa6:	8c 1a       	sub	r8, r28
     fa8:	9d 0a       	sbc	r9, r29
		
		x += dx;
     faa:	5a 01       	movw	r10, r20
     fac:	a2 0e       	add	r10, r18
     fae:	b3 1e       	adc	r11, r19
		y += dy;
     fb0:	8e 01       	movw	r16, r28
     fb2:	06 0f       	add	r16, r22
     fb4:	17 1f       	adc	r17, r23
		
		LCD_SetPoint(x, y, color);
     fb6:	c5 01       	movw	r24, r10
     fb8:	b8 01       	movw	r22, r16
     fba:	a6 01       	movw	r20, r12
     fbc:	0e 94 f0 06 	call	0xde0	; 0xde0 <LCD_SetPoint>
		
		if (dx != 0)
     fc0:	ef 28       	or	r14, r15
     fc2:	29 f0       	breq	.+10     	; 0xfce <LCD_Draw4.1639+0x54>
			LCD_SetPoint(mx, y, color);
     fc4:	c3 01       	movw	r24, r6
     fc6:	b8 01       	movw	r22, r16
     fc8:	a6 01       	movw	r20, r12
     fca:	0e 94 f0 06 	call	0xde0	; 0xde0 <LCD_SetPoint>
		
		if (dy != 0)
     fce:	cd 2b       	or	r28, r29
     fd0:	29 f0       	breq	.+10     	; 0xfdc <LCD_Draw4.1639+0x62>
			LCD_SetPoint(x, my, color);
     fd2:	c5 01       	movw	r24, r10
     fd4:	b4 01       	movw	r22, r8
     fd6:	a6 01       	movw	r20, r12
     fd8:	0e 94 f0 06 	call	0xde0	; 0xde0 <LCD_SetPoint>
		
		LCD_SetPoint(mx, my, color);
     fdc:	c3 01       	movw	r24, r6
     fde:	b4 01       	movw	r22, r8
     fe0:	a6 01       	movw	r20, r12
     fe2:	0e 94 f0 06 	call	0xde0	; 0xde0 <LCD_SetPoint>
	}
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	7f 90       	pop	r7
    1000:	6f 90       	pop	r6
    1002:	08 95       	ret

00001004 <LCD_DrawCircle>:

///////////////////////////////////////////////
//
// LCD_DrawCircle(x, y, radius, color, fill);
//
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {
    1004:	2f 92       	push	r2
    1006:	3f 92       	push	r3
    1008:	4f 92       	push	r4
    100a:	5f 92       	push	r5
    100c:	6f 92       	push	r6
    100e:	7f 92       	push	r7
    1010:	8f 92       	push	r8
    1012:	9f 92       	push	r9
    1014:	af 92       	push	r10
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	29 97       	sbiw	r28, 0x09	; 9
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	8c 83       	std	Y+4, r24	; 0x04
    103a:	9d 83       	std	Y+5, r25	; 0x05
    103c:	6e 83       	std	Y+6, r22	; 0x06
    103e:	7f 83       	std	Y+7, r23	; 0x07
    1040:	3a 83       	std	Y+2, r19	; 0x02
    1042:	29 83       	std	Y+1, r18	; 0x01
    1044:	0b 83       	std	Y+3, r16	; 0x03
			if (dx != dy)
				LCD_Draw4(x, y, dy, dx, color);
		}
	}

	int error = -radius;
    1046:	22 24       	eor	r2, r2
    1048:	33 24       	eor	r3, r3
    104a:	24 1a       	sub	r2, r20
    104c:	35 0a       	sbc	r3, r21
	int dx = radius;
    104e:	2a 01       	movw	r4, r20
    1050:	19 86       	std	Y+9, r1	; 0x09
    1052:	18 86       	std	Y+8, r1	; 0x08
    1054:	7f c0       	rjmp	.+254    	; 0x1154 <LCD_DrawCircle+0x150>

	// Draw 8 mirrored points
	//
	void LCD_Draw8 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color, bool fill) {
		
		if (fill) {
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	88 23       	and	r24, r24
    105a:	09 f4       	brne	.+2      	; 0x105e <LCD_DrawCircle+0x5a>
    105c:	4b c0       	rjmp	.+150    	; 0x10f4 <LCD_DrawCircle+0xf0>
			
			LCD_Fill(x-dy, y-dx, dy<< 1, 1, color);
    105e:	ec 80       	ldd	r14, Y+4	; 0x04
    1060:	fd 80       	ldd	r15, Y+5	; 0x05
    1062:	37 01       	movw	r6, r14
    1064:	e8 85       	ldd	r30, Y+8	; 0x08
    1066:	f9 85       	ldd	r31, Y+9	; 0x09
    1068:	6e 1a       	sub	r6, r30
    106a:	7f 0a       	sbc	r7, r31
    106c:	ce 80       	ldd	r12, Y+6	; 0x06
    106e:	df 80       	ldd	r13, Y+7	; 0x07
    1070:	4f 01       	movw	r8, r30
    1072:	88 0c       	add	r8, r8
    1074:	99 1c       	adc	r9, r9
    1076:	b6 01       	movw	r22, r12
    1078:	64 19       	sub	r22, r4
    107a:	75 09       	sbc	r23, r5
    107c:	c3 01       	movw	r24, r6
    107e:	a4 01       	movw	r20, r8
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	09 81       	ldd	r16, Y+1	; 0x01
    1086:	1a 81       	ldd	r17, Y+2	; 0x02
    1088:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Fill>
			LCD_Fill(x-dx, y-dy, dx<< 1, 1, color);
    108c:	e4 18       	sub	r14, r4
    108e:	f5 08       	sbc	r15, r5
    1090:	52 01       	movw	r10, r4
    1092:	aa 0c       	add	r10, r10
    1094:	bb 1c       	adc	r11, r11
    1096:	b6 01       	movw	r22, r12
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	99 85       	ldd	r25, Y+9	; 0x09
    109c:	68 1b       	sub	r22, r24
    109e:	79 0b       	sbc	r23, r25
    10a0:	c7 01       	movw	r24, r14
    10a2:	a5 01       	movw	r20, r10
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	09 81       	ldd	r16, Y+1	; 0x01
    10aa:	1a 81       	ldd	r17, Y+2	; 0x02
    10ac:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Fill>
			LCD_Fill(x-dx, y+dy, dx<< 1, 1, color);
    10b0:	68 85       	ldd	r22, Y+8	; 0x08
    10b2:	79 85       	ldd	r23, Y+9	; 0x09
    10b4:	6c 0d       	add	r22, r12
    10b6:	7d 1d       	adc	r23, r13
    10b8:	c7 01       	movw	r24, r14
    10ba:	a5 01       	movw	r20, r10
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	09 81       	ldd	r16, Y+1	; 0x01
    10c2:	1a 81       	ldd	r17, Y+2	; 0x02
    10c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Fill>
			LCD_Fill(x-dy, y+dx, dy<< 1, 1, color);
    10c8:	c4 0c       	add	r12, r4
    10ca:	d5 1c       	adc	r13, r5
    10cc:	c3 01       	movw	r24, r6
    10ce:	b6 01       	movw	r22, r12
    10d0:	a4 01       	movw	r20, r8
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	09 81       	ldd	r16, Y+1	; 0x01
    10d8:	1a 81       	ldd	r17, Y+2	; 0x02
    10da:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_Fill>
			LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	40 e4       	ldi	r20, 0x40	; 64
    10e8:	51 e0       	ldi	r21, 0x01	; 1
    10ea:	20 ef       	ldi	r18, 0xF0	; 240
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SetBounds>
    10f2:	1a c0       	rjmp	.+52     	; 0x1128 <LCD_DrawCircle+0x124>
		}
		else {
			
			LCD_Draw4(x, y, dx, dy, color);
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	6e 81       	ldd	r22, Y+6	; 0x06
    10fa:	7f 81       	ldd	r23, Y+7	; 0x07
    10fc:	a2 01       	movw	r20, r4
    10fe:	28 85       	ldd	r18, Y+8	; 0x08
    1100:	39 85       	ldd	r19, Y+9	; 0x09
    1102:	09 81       	ldd	r16, Y+1	; 0x01
    1104:	1a 81       	ldd	r17, Y+2	; 0x02
    1106:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_Draw4.1639>
			
			if (dx != dy)
    110a:	e8 85       	ldd	r30, Y+8	; 0x08
    110c:	f9 85       	ldd	r31, Y+9	; 0x09
    110e:	4e 16       	cp	r4, r30
    1110:	5f 06       	cpc	r5, r31
    1112:	51 f0       	breq	.+20     	; 0x1128 <LCD_DrawCircle+0x124>
				LCD_Draw4(x, y, dy, dx, color);
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	6e 81       	ldd	r22, Y+6	; 0x06
    111a:	7f 81       	ldd	r23, Y+7	; 0x07
    111c:	af 01       	movw	r20, r30
    111e:	92 01       	movw	r18, r4
    1120:	09 81       	ldd	r16, Y+1	; 0x01
    1122:	1a 81       	ldd	r17, Y+2	; 0x02
    1124:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_Draw4.1639>
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
		dy++;
    1128:	28 85       	ldd	r18, Y+8	; 0x08
    112a:	39 85       	ldd	r19, Y+9	; 0x09
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
    1130:	88 85       	ldd	r24, Y+8	; 0x08
    1132:	99 85       	ldd	r25, Y+9	; 0x09
    1134:	28 0e       	add	r2, r24
    1136:	39 1e       	adc	r3, r25
		dy++;
		error += dy;
    1138:	22 0e       	add	r2, r18
    113a:	33 1e       	adc	r3, r19
		
		if (error >= 0) {
    113c:	37 fc       	sbrc	r3, 7
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <LCD_DrawCircle+0x14c>
			
			dx--;
    1140:	08 94       	sec
    1142:	41 08       	sbc	r4, r1
    1144:	51 08       	sbc	r5, r1
			error -= dx<< 1;
    1146:	c2 01       	movw	r24, r4
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	28 1a       	sub	r2, r24
    114e:	39 0a       	sbc	r3, r25
    1150:	39 87       	std	Y+9, r19	; 0x09
    1152:	28 87       	std	Y+8, r18	; 0x08
	int dx = radius;
	int dy = 0;

	//	draws in 4 strips from top down and middle up + reflection about y
	//
	while (dx >= dy) {
    1154:	e8 85       	ldd	r30, Y+8	; 0x08
    1156:	f9 85       	ldd	r31, Y+9	; 0x09
    1158:	4e 16       	cp	r4, r30
    115a:	5f 06       	cpc	r5, r31
    115c:	0c f0       	brlt	.+2      	; 0x1160 <LCD_DrawCircle+0x15c>
    115e:	7b cf       	rjmp	.-266    	; 0x1056 <LCD_DrawCircle+0x52>
			
			dx--;
			error -= dx<< 1;
		}
	}
}
    1160:	29 96       	adiw	r28, 0x09	; 9
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	bf 90       	pop	r11
    117e:	af 90       	pop	r10
    1180:	9f 90       	pop	r9
    1182:	8f 90       	pop	r8
    1184:	7f 90       	pop	r7
    1186:	6f 90       	pop	r6
    1188:	5f 90       	pop	r5
    118a:	4f 90       	pop	r4
    118c:	3f 90       	pop	r3
    118e:	2f 90       	pop	r2
    1190:	08 95       	ret

00001192 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	d8 2e       	mov	r13, r24
    119e:	7a 01       	movw	r14, r20
    11a0:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    11a2:	87 ff       	sbrs	r24, 7
    11a4:	0b c0       	rjmp	.+22     	; 0x11bc <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    11a6:	87 e7       	ldi	r24, 0x77	; 119
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
		if (res > 1) return res;
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	98 f5       	brcc	.+102    	; 0x121e <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    11b8:	8f e7       	ldi	r24, 0x7F	; 127
    11ba:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    11bc:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    11be:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
	SELECT();
    11c2:	c3 98       	cbi	0x18, 3	; 24
	rcv_spi();
    11c4:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    11c8:	8d 2d       	mov	r24, r13
    11ca:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    11ce:	81 2f       	mov	r24, r17
    11d0:	99 27       	eor	r25, r25
    11d2:	aa 27       	eor	r26, r26
    11d4:	bb 27       	eor	r27, r27
    11d6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    11da:	c8 01       	movw	r24, r16
    11dc:	aa 27       	eor	r26, r26
    11de:	bb 27       	eor	r27, r27
    11e0:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    11e4:	bb 27       	eor	r27, r27
    11e6:	a1 2f       	mov	r26, r17
    11e8:	90 2f       	mov	r25, r16
    11ea:	8f 2d       	mov	r24, r15
    11ec:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    11f0:	8e 2d       	mov	r24, r14
    11f2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    11f6:	80 e4       	ldi	r24, 0x40	; 64
    11f8:	d8 16       	cp	r13, r24
    11fa:	11 f4       	brne	.+4      	; 0x1200 <send_cmd+0x6e>
    11fc:	85 e9       	ldi	r24, 0x95	; 149
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1200:	88 e4       	ldi	r24, 0x48	; 72
    1202:	d8 16       	cp	r13, r24
    1204:	11 f4       	brne	.+4      	; 0x120a <send_cmd+0x78>
    1206:	87 e8       	ldi	r24, 0x87	; 135
    1208:	01 c0       	rjmp	.+2      	; 0x120c <send_cmd+0x7a>
    120a:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    120c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
    1210:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    1212:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
	} while ((res & 0x80) && --n);
    1216:	87 ff       	sbrs	r24, 7
    1218:	02 c0       	rjmp	.+4      	; 0x121e <send_cmd+0x8c>
    121a:	11 50       	subi	r17, 0x01	; 1
    121c:	d1 f7       	brne	.-12     	; 0x1212 <send_cmd+0x80>

	return res;			/* Return with the response value */
}
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	08 95       	ret

0000122a <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	6c 01       	movw	r12, r24
    123c:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    123e:	80 91 84 00 	lds	r24, 0x0084
    1242:	83 fd       	sbrc	r24, 3
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <disk_readp+0x2a>
    1246:	39 e0       	ldi	r19, 0x09	; 9
    1248:	44 0f       	add	r20, r20
    124a:	55 1f       	adc	r21, r21
    124c:	66 1f       	adc	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	3a 95       	dec	r19
    1252:	d1 f7       	brne	.-12     	; 0x1248 <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    1254:	81 e5       	ldi	r24, 0x51	; 81
    1256:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    125a:	88 23       	and	r24, r24
    125c:	61 f5       	brne	.+88     	; 0x12b6 <disk_readp+0x8c>
    125e:	c0 e4       	ldi	r28, 0x40	; 64
    1260:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
    1262:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
		} while (rc == 0xFF && --bc);
    1266:	8f 3f       	cpi	r24, 0xFF	; 255
    1268:	19 f4       	brne	.+6      	; 0x1270 <disk_readp+0x46>
    126a:	21 97       	sbiw	r28, 0x01	; 1
    126c:	d1 f7       	brne	.-12     	; 0x1262 <disk_readp+0x38>
    126e:	23 c0       	rjmp	.+70     	; 0x12b6 <disk_readp+0x8c>

		if (rc == 0xFE) {				/* A data packet arrived */
    1270:	8e 3f       	cpi	r24, 0xFE	; 254
    1272:	09 f5       	brne	.+66     	; 0x12b6 <disk_readp+0x8c>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    1274:	e1 14       	cp	r14, r1
    1276:	f1 04       	cpc	r15, r1
    1278:	29 f0       	breq	.+10     	; 0x1284 <disk_readp+0x5a>
    127a:	e7 01       	movw	r28, r14
				do rcv_spi(); while (--ofs);
    127c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    1280:	21 97       	sbiw	r28, 0x01	; 1
    1282:	e1 f7       	brne	.-8      	; 0x127c <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    1284:	c1 14       	cp	r12, r1
    1286:	d1 04       	cpc	r13, r1
    1288:	41 f0       	breq	.+16     	; 0x129a <disk_readp+0x70>
    128a:	e8 01       	movw	r28, r16
				do {
					*buff++ = rcv_spi();
    128c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    1290:	f6 01       	movw	r30, r12
    1292:	81 93       	st	Z+, r24
    1294:	6f 01       	movw	r12, r30
				} while (--cnt);
    1296:	21 97       	sbiw	r28, 0x01	; 1
    1298:	c9 f7       	brne	.-14     	; 0x128c <disk_readp+0x62>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    129a:	cc 27       	eor	r28, r28
    129c:	dd 27       	eor	r29, r29
    129e:	ce 19       	sub	r28, r14
    12a0:	df 09       	sbc	r29, r15
    12a2:	ce 5f       	subi	r28, 0xFE	; 254
    12a4:	dd 4f       	sbci	r29, 0xFD	; 253
    12a6:	c0 1b       	sub	r28, r16
    12a8:	d1 0b       	sbc	r29, r17
					*buff++ = rcv_spi();
				} while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    12aa:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    12ae:	21 97       	sbiw	r28, 0x01	; 1
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <disk_readp+0x80>
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <disk_readp+0x8e>
    12b6:	11 e0       	ldi	r17, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
    12b8:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    12ba:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>

	return res;
}
    12be:	81 2f       	mov	r24, r17
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	08 95       	ret

000012d2 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	8c 01       	movw	r16, r24
	WORD bc;
	static WORD wc;

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	d9 f0       	breq	.+54     	; 0x1316 <disk_writep+0x44>
		bc = (WORD)sa;
    12e0:	ea 01       	movw	r28, r20
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    12e4:	f8 01       	movw	r30, r16
    12e6:	81 91       	ld	r24, Z+
    12e8:	8f 01       	movw	r16, r30
    12ea:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
			wc--; bc--;
    12ee:	80 91 82 00 	lds	r24, 0x0082
    12f2:	90 91 83 00 	lds	r25, 0x0083
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	90 93 83 00 	sts	0x0083, r25
    12fc:	80 93 82 00 	sts	0x0082, r24
    1300:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    1302:	20 97       	sbiw	r28, 0x00	; 0
    1304:	09 f4       	brne	.+2      	; 0x1308 <disk_writep+0x36>
    1306:	52 c0       	rjmp	.+164    	; 0x13ac <disk_writep+0xda>
    1308:	80 91 82 00 	lds	r24, 0x0082
    130c:	90 91 83 00 	lds	r25, 0x0083
    1310:	89 2b       	or	r24, r25
    1312:	41 f7       	brne	.-48     	; 0x12e4 <disk_writep+0x12>
    1314:	4b c0       	rjmp	.+150    	; 0x13ac <disk_writep+0xda>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1316:	41 15       	cp	r20, r1
    1318:	51 05       	cpc	r21, r1
    131a:	61 05       	cpc	r22, r1
    131c:	71 05       	cpc	r23, r1
    131e:	f9 f0       	breq	.+62     	; 0x135e <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1320:	80 91 84 00 	lds	r24, 0x0084
    1324:	83 fd       	sbrc	r24, 3
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <disk_writep+0x64>
    1328:	e9 e0       	ldi	r30, 0x09	; 9
    132a:	44 0f       	add	r20, r20
    132c:	55 1f       	adc	r21, r21
    132e:	66 1f       	adc	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	ea 95       	dec	r30
    1334:	d1 f7       	brne	.-12     	; 0x132a <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1336:	88 e5       	ldi	r24, 0x58	; 88
    1338:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    133c:	88 23       	and	r24, r24
    133e:	11 f0       	breq	.+4      	; 0x1344 <disk_writep+0x72>
    1340:	11 e0       	ldi	r17, 0x01	; 1
    1342:	35 c0       	rjmp	.+106    	; 0x13ae <disk_writep+0xdc>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
    134a:	8e ef       	ldi	r24, 0xFE	; 254
    134c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
				wc = 512;							/* Set byte counter */
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	90 93 83 00 	sts	0x0083, r25
    1358:	80 93 82 00 	sts	0x0082, r24
    135c:	27 c0       	rjmp	.+78     	; 0x13ac <disk_writep+0xda>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    135e:	c0 91 82 00 	lds	r28, 0x0082
    1362:	d0 91 83 00 	lds	r29, 0x0083
    1366:	22 96       	adiw	r28, 0x02	; 2
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <xmit_spi>
    1370:	21 97       	sbiw	r28, 0x01	; 1
    1372:	20 97       	sbiw	r28, 0x00	; 0
    1374:	d1 f7       	brne	.-12     	; 0x136a <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
    1376:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    137a:	8f 71       	andi	r24, 0x1F	; 31
    137c:	85 30       	cpi	r24, 0x05	; 5
    137e:	89 f4       	brne	.+34     	; 0x13a2 <disk_writep+0xd0>
    1380:	c8 e8       	ldi	r28, 0x88	; 136
    1382:	d3 e1       	ldi	r29, 0x13	; 19
    1384:	03 c0       	rjmp	.+6      	; 0x138c <disk_writep+0xba>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
    1386:	0e 94 67 14 	call	0x28ce	; 0x28ce <dly_100us>
    138a:	21 97       	sbiw	r28, 0x01	; 1
    138c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    1390:	8f 3f       	cpi	r24, 0xFF	; 255
    1392:	19 f0       	breq	.+6      	; 0x139a <disk_writep+0xc8>
    1394:	20 97       	sbiw	r28, 0x00	; 0
    1396:	b9 f7       	brne	.-18     	; 0x1386 <disk_writep+0xb4>
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <disk_writep+0xd0>
				if (bc) res = RES_OK;
    139a:	cd 2b       	or	r28, r29
    139c:	11 f0       	breq	.+4      	; 0x13a2 <disk_writep+0xd0>
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <disk_writep+0xd2>
    13a2:	11 e0       	ldi	r17, 0x01	; 1
			}
			DESELECT();
    13a4:	c3 9a       	sbi	0x18, 3	; 24
			rcv_spi();
    13a6:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <disk_writep+0xdc>
    13ac:	10 e0       	ldi	r17, 0x00	; 0
		}
	}

	return res;
}
    13ae:	81 2f       	mov	r24, r17
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <disk_initialize+0x12>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <disk_initialize+0x14>
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
    13d2:	80 91 84 00 	lds	r24, 0x0084
    13d6:	88 23       	and	r24, r24
    13d8:	51 f0       	breq	.+20     	; 0x13ee <disk_initialize+0x34>
    13da:	c3 99       	sbic	0x18, 3	; 24
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <disk_initialize+0x34>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	0e 94 69 09 	call	0x12d2	; 0x12d2 <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
    13ee:	0e 94 62 14 	call	0x28c4	; 0x28c4 <init_spi>
	DESELECT();
    13f2:	c3 9a       	sbi	0x18, 3	; 24
    13f4:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
    13f6:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    13fa:	11 50       	subi	r17, 0x01	; 1
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    13fe:	80 e4       	ldi	r24, 0x40	; 64
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	09 f0       	breq	.+2      	; 0x1412 <disk_initialize+0x58>
    1410:	69 c0       	rjmp	.+210    	; 0x14e4 <disk_initialize+0x12a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1412:	88 e4       	ldi	r24, 0x48	; 72
    1414:	4a ea       	ldi	r20, 0xAA	; 170
    1416:	51 e0       	ldi	r21, 0x01	; 1
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	e1 f5       	brne	.+120    	; 0x149c <disk_initialize+0xe2>
    1424:	6e 01       	movw	r12, r28
    1426:	08 94       	sec
    1428:	c1 1c       	adc	r12, r1
    142a:	d1 1c       	adc	r13, r1
    142c:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    142e:	8e 01       	movw	r16, r28
    1430:	0b 5f       	subi	r16, 0xFB	; 251
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    1438:	f7 01       	movw	r30, r14
    143a:	81 93       	st	Z+, r24
    143c:	7f 01       	movw	r14, r30
    143e:	e0 17       	cp	r30, r16
    1440:	f1 07       	cpc	r31, r17
    1442:	c1 f7       	brne	.-16     	; 0x1434 <disk_initialize+0x7a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	09 f0       	breq	.+2      	; 0x144c <disk_initialize+0x92>
    144a:	4c c0       	rjmp	.+152    	; 0x14e4 <disk_initialize+0x12a>
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	8a 3a       	cpi	r24, 0xAA	; 170
    1450:	09 f0       	breq	.+2      	; 0x1454 <disk_initialize+0x9a>
    1452:	48 c0       	rjmp	.+144    	; 0x14e4 <disk_initialize+0x12a>
    1454:	00 e1       	ldi	r16, 0x10	; 16
    1456:	17 e2       	ldi	r17, 0x27	; 39
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <disk_initialize+0xac>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    145a:	0e 94 67 14 	call	0x28ce	; 0x28ce <dly_100us>
    145e:	01 50       	subi	r16, 0x01	; 1
    1460:	10 40       	sbci	r17, 0x00	; 0
    1462:	09 f4       	brne	.+2      	; 0x1466 <disk_initialize+0xac>
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <disk_initialize+0x12a>
    1466:	89 ee       	ldi	r24, 0xE9	; 233
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e4       	ldi	r23, 0x40	; 64
    1470:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    1474:	88 23       	and	r24, r24
    1476:	89 f7       	brne	.-30     	; 0x145a <disk_initialize+0xa0>
    1478:	4c c0       	rjmp	.+152    	; 0x1512 <disk_initialize+0x158>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    147a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    147e:	f6 01       	movw	r30, r12
    1480:	81 93       	st	Z+, r24
    1482:	6f 01       	movw	r12, r30
    1484:	ee 15       	cp	r30, r14
    1486:	ff 05       	cpc	r31, r15
    1488:	c1 f7       	brne	.-16     	; 0x147a <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	86 fd       	sbrc	r24, 6
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <disk_initialize+0xdc>
    1490:	04 e0       	ldi	r16, 0x04	; 4
    1492:	f0 2e       	mov	r15, r16
    1494:	28 c0       	rjmp	.+80     	; 0x14e6 <disk_initialize+0x12c>
    1496:	1c e0       	ldi	r17, 0x0C	; 12
    1498:	f1 2e       	mov	r15, r17
    149a:	25 c0       	rjmp	.+74     	; 0x14e6 <disk_initialize+0x12c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    149c:	89 ee       	ldi	r24, 0xE9	; 233
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	28 f0       	brcs	.+10     	; 0x14b8 <disk_initialize+0xfe>
    14ae:	b1 e4       	ldi	r27, 0x41	; 65
    14b0:	eb 2e       	mov	r14, r27
    14b2:	ff 24       	eor	r15, r15
    14b4:	f3 94       	inc	r15
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <disk_initialize+0x106>
    14b8:	a9 ee       	ldi	r26, 0xE9	; 233
    14ba:	ea 2e       	mov	r14, r26
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	ff 2e       	mov	r15, r31
    14c0:	00 e1       	ldi	r16, 0x10	; 16
    14c2:	17 e2       	ldi	r17, 0x27	; 39
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    14c6:	0e 94 67 14 	call	0x28ce	; 0x28ce <dly_100us>
    14ca:	01 50       	subi	r16, 0x01	; 1
    14cc:	10 40       	sbci	r17, 0x00	; 0
    14ce:	51 f0       	breq	.+20     	; 0x14e4 <disk_initialize+0x12a>
    14d0:	8e 2d       	mov	r24, r14
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    14de:	88 23       	and	r24, r24
    14e0:	91 f7       	brne	.-28     	; 0x14c6 <disk_initialize+0x10c>
    14e2:	22 c0       	rjmp	.+68     	; 0x1528 <disk_initialize+0x16e>
    14e4:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    14e6:	f0 92 84 00 	sts	0x0084, r15
	DESELECT();
    14ea:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    14ec:	0e 94 73 14 	call	0x28e6	; 0x28e6 <rcv_spi>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	ff 20       	and	r15, r15
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <disk_initialize+0x13e>
    14f6:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1512:	8a e7       	ldi	r24, 0x7A	; 122
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    1520:	88 23       	and	r24, r24
    1522:	09 f4       	brne	.+2      	; 0x1526 <disk_initialize+0x16c>
    1524:	aa cf       	rjmp	.-172    	; 0x147a <disk_initialize+0xc0>
    1526:	de cf       	rjmp	.-68     	; 0x14e4 <disk_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1528:	80 e5       	ldi	r24, 0x50	; 80
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	52 e0       	ldi	r21, 0x02	; 2
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	0e 94 c9 08 	call	0x1192	; 0x1192 <send_cmd>
    1536:	88 23       	and	r24, r24
    1538:	a9 f6       	brne	.-86     	; 0x14e4 <disk_initialize+0x12a>
    153a:	d5 cf       	rjmp	.-86     	; 0x14e6 <disk_initialize+0x12c>

0000153c <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
    154e:	c0 91 85 00 	lds	r28, 0x0085
    1552:	d0 91 86 00 	lds	r29, 0x0086


	dj->index = 0;
    1556:	fc 01       	movw	r30, r24
    1558:	11 82       	std	Z+1, r1	; 0x01
    155a:	10 82       	st	Z, r1
	clst = dj->sclust;
    155c:	24 81       	ldd	r18, Z+4	; 0x04
    155e:	35 81       	ldd	r19, Z+5	; 0x05
    1560:	46 81       	ldd	r20, Z+6	; 0x06
    1562:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    1564:	21 30       	cpi	r18, 0x01	; 1
    1566:	31 05       	cpc	r19, r1
    1568:	41 05       	cpc	r20, r1
    156a:	51 05       	cpc	r21, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <dir_rewind+0x34>
    156e:	5b c0       	rjmp	.+182    	; 0x1626 <dir_rewind+0xea>
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	a8 85       	ldd	r26, Y+8	; 0x08
    1576:	b9 85       	ldd	r27, Y+9	; 0x09
    1578:	28 17       	cp	r18, r24
    157a:	39 07       	cpc	r19, r25
    157c:	4a 07       	cpc	r20, r26
    157e:	5b 07       	cpc	r21, r27
    1580:	08 f0       	brcs	.+2      	; 0x1584 <dir_rewind+0x48>
    1582:	51 c0       	rjmp	.+162    	; 0x1626 <dir_rewind+0xea>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1584:	21 15       	cp	r18, r1
    1586:	31 05       	cpc	r19, r1
    1588:	41 05       	cpc	r20, r1
    158a:	51 05       	cpc	r21, r1
    158c:	39 f4       	brne	.+14     	; 0x159c <dir_rewind+0x60>
    158e:	88 81       	ld	r24, Y
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	21 f4       	brne	.+8      	; 0x159c <dir_rewind+0x60>
		clst = (CLUST)fs->dirbase;
    1594:	2e 85       	ldd	r18, Y+14	; 0x0e
    1596:	3f 85       	ldd	r19, Y+15	; 0x0f
    1598:	48 89       	ldd	r20, Y+16	; 0x10
    159a:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
    159c:	f6 01       	movw	r30, r12
    159e:	20 87       	std	Z+8, r18	; 0x08
    15a0:	31 87       	std	Z+9, r19	; 0x09
    15a2:	42 87       	std	Z+10, r20	; 0x0a
    15a4:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    15a6:	21 15       	cp	r18, r1
    15a8:	31 05       	cpc	r19, r1
    15aa:	41 05       	cpc	r20, r1
    15ac:	51 05       	cpc	r21, r1
    15ae:	81 f1       	breq	.+96     	; 0x1610 <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
    15b0:	8e ef       	ldi	r24, 0xFE	; 254
    15b2:	e8 2e       	mov	r14, r24
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	f8 2e       	mov	r15, r24
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	08 2f       	mov	r16, r24
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	18 2f       	mov	r17, r24
    15c0:	e2 0e       	add	r14, r18
    15c2:	f3 1e       	adc	r15, r19
    15c4:	04 1f       	adc	r16, r20
    15c6:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	a8 85       	ldd	r26, Y+8	; 0x08
    15ce:	b9 85       	ldd	r27, Y+9	; 0x09
    15d0:	02 97       	sbiw	r24, 0x02	; 2
    15d2:	a1 09       	sbc	r26, r1
    15d4:	b1 09       	sbc	r27, r1
    15d6:	e8 16       	cp	r14, r24
    15d8:	f9 06       	cpc	r15, r25
    15da:	0a 07       	cpc	r16, r26
    15dc:	1b 07       	cpc	r17, r27
    15de:	28 f0       	brcs	.+10     	; 0x15ea <dir_rewind+0xae>
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	17 c0       	rjmp	.+46     	; 0x1618 <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
    15ea:	2a 81       	ldd	r18, Y+2	; 0x02
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	c8 01       	movw	r24, r16
    15f4:	b7 01       	movw	r22, r14
    15f6:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1600:	9b 89       	ldd	r25, Y+19	; 0x13
    1602:	ac 89       	ldd	r26, Y+20	; 0x14
    1604:	bd 89       	ldd	r27, Y+21	; 0x15
    1606:	28 0f       	add	r18, r24
    1608:	39 1f       	adc	r19, r25
    160a:	4a 1f       	adc	r20, r26
    160c:	5b 1f       	adc	r21, r27
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <dir_rewind+0xdc>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    1610:	2e 85       	ldd	r18, Y+14	; 0x0e
    1612:	3f 85       	ldd	r19, Y+15	; 0x0f
    1614:	48 89       	ldd	r20, Y+16	; 0x10
    1616:	59 89       	ldd	r21, Y+17	; 0x11
    1618:	f6 01       	movw	r30, r12
    161a:	24 87       	std	Z+12, r18	; 0x0c
    161c:	35 87       	std	Z+13, r19	; 0x0d
    161e:	46 87       	std	Z+14, r20	; 0x0e
    1620:	57 87       	std	Z+15, r21	; 0x0f
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
    1626:	81 e0       	ldi	r24, 0x01	; 1
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	08 95       	ret

0000163a <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    163a:	6f 92       	push	r6
    163c:	7f 92       	push	r7
    163e:	8f 92       	push	r8
    1640:	9f 92       	push	r9
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <get_fat+0x1e>
    1658:	00 d0       	rcall	.+0      	; 0x165a <get_fat+0x20>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	4b 01       	movw	r8, r22
    1660:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
    1662:	60 90 85 00 	lds	r6, 0x0085
    1666:	70 90 86 00 	lds	r7, 0x0086


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	88 16       	cp	r8, r24
    166e:	91 04       	cpc	r9, r1
    1670:	a1 04       	cpc	r10, r1
    1672:	b1 04       	cpc	r11, r1
    1674:	08 f4       	brcc	.+2      	; 0x1678 <get_fat+0x3e>
    1676:	b4 c0       	rjmp	.+360    	; 0x17e0 <get_fat+0x1a6>
    1678:	f3 01       	movw	r30, r6
    167a:	86 81       	ldd	r24, Z+6	; 0x06
    167c:	97 81       	ldd	r25, Z+7	; 0x07
    167e:	a0 85       	ldd	r26, Z+8	; 0x08
    1680:	b1 85       	ldd	r27, Z+9	; 0x09
    1682:	88 16       	cp	r8, r24
    1684:	99 06       	cpc	r9, r25
    1686:	aa 06       	cpc	r10, r26
    1688:	bb 06       	cpc	r11, r27
    168a:	08 f0       	brcs	.+2      	; 0x168e <get_fat+0x54>
    168c:	a9 c0       	rjmp	.+338    	; 0x17e0 <get_fat+0x1a6>
		return 1;

	switch (fs->fs_type) {
    168e:	80 81       	ld	r24, Z
    1690:	82 30       	cpi	r24, 0x02	; 2
    1692:	09 f4       	brne	.+2      	; 0x1696 <get_fat+0x5c>
    1694:	5f c0       	rjmp	.+190    	; 0x1754 <get_fat+0x11a>
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	09 f4       	brne	.+2      	; 0x169c <get_fat+0x62>
    169a:	7b c0       	rjmp	.+246    	; 0x1792 <get_fat+0x158>
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	09 f0       	breq	.+2      	; 0x16a2 <get_fat+0x68>
    16a0:	9f c0       	rjmp	.+318    	; 0x17e0 <get_fat+0x1a6>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
    16a2:	c4 01       	movw	r24, r8
    16a4:	96 95       	lsr	r25
    16a6:	87 95       	ror	r24
    16a8:	88 0d       	add	r24, r8
    16aa:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
    16ac:	9c 01       	movw	r18, r24
    16ae:	31 70       	andi	r19, 0x01	; 1
    16b0:	89 2f       	mov	r24, r25
    16b2:	99 27       	eor	r25, r25
    16b4:	86 95       	lsr	r24
    16b6:	6c 01       	movw	r12, r24
    16b8:	ee 24       	eor	r14, r14
    16ba:	ff 24       	eor	r15, r15
    16bc:	f3 01       	movw	r30, r6
    16be:	42 85       	ldd	r20, Z+10	; 0x0a
    16c0:	53 85       	ldd	r21, Z+11	; 0x0b
    16c2:	64 85       	ldd	r22, Z+12	; 0x0c
    16c4:	75 85       	ldd	r23, Z+13	; 0x0d
    16c6:	ce 01       	movw	r24, r28
    16c8:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
    16ca:	f1 e0       	ldi	r31, 0x01	; 1
    16cc:	2f 3f       	cpi	r18, 0xFF	; 255
    16ce:	3f 07       	cpc	r19, r31
    16d0:	49 f0       	breq	.+18     	; 0x16e4 <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
    16d2:	c4 0e       	add	r12, r20
    16d4:	d5 1e       	adc	r13, r21
    16d6:	e6 1e       	adc	r14, r22
    16d8:	f7 1e       	adc	r15, r23
    16da:	b7 01       	movw	r22, r14
    16dc:	a6 01       	movw	r20, r12
    16de:	02 e0       	ldi	r16, 0x02	; 2
    16e0:	10 e0       	ldi	r17, 0x00	; 0
    16e2:	1e c0       	rjmp	.+60     	; 0x1720 <get_fat+0xe6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
    16e4:	4c 0d       	add	r20, r12
    16e6:	5d 1d       	adc	r21, r13
    16e8:	6e 1d       	adc	r22, r14
    16ea:	7f 1d       	adc	r23, r15
    16ec:	2f ef       	ldi	r18, 0xFF	; 255
    16ee:	31 e0       	ldi	r19, 0x01	; 1
    16f0:	01 e0       	ldi	r16, 0x01	; 1
    16f2:	10 e0       	ldi	r17, 0x00	; 0
    16f4:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    16f8:	88 23       	and	r24, r24
    16fa:	09 f0       	breq	.+2      	; 0x16fe <get_fat+0xc4>
    16fc:	71 c0       	rjmp	.+226    	; 0x17e0 <get_fat+0x1a6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
    16fe:	f3 01       	movw	r30, r6
    1700:	42 85       	ldd	r20, Z+10	; 0x0a
    1702:	53 85       	ldd	r21, Z+11	; 0x0b
    1704:	64 85       	ldd	r22, Z+12	; 0x0c
    1706:	75 85       	ldd	r23, Z+13	; 0x0d
    1708:	4f 5f       	subi	r20, 0xFF	; 255
    170a:	5f 4f       	sbci	r21, 0xFF	; 255
    170c:	6f 4f       	sbci	r22, 0xFF	; 255
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	4c 0d       	add	r20, r12
    1712:	5d 1d       	adc	r21, r13
    1714:	6e 1d       	adc	r22, r14
    1716:	7f 1d       	adc	r23, r15
    1718:	ce 01       	movw	r24, r28
    171a:	02 96       	adiw	r24, 0x02	; 2
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    1724:	88 23       	and	r24, r24
    1726:	09 f0       	breq	.+2      	; 0x172a <get_fat+0xf0>
    1728:	5b c0       	rjmp	.+182    	; 0x17e0 <get_fat+0x1a6>
		}
		wc = LD_WORD(buf);
    172a:	69 81       	ldd	r22, Y+1	; 0x01
    172c:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    172e:	c4 01       	movw	r24, r8
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	90 70       	andi	r25, 0x00	; 0
    1734:	89 2b       	or	r24, r25
    1736:	39 f0       	breq	.+14     	; 0x1746 <get_fat+0x10c>
    1738:	a4 e0       	ldi	r26, 0x04	; 4
    173a:	76 95       	lsr	r23
    173c:	67 95       	ror	r22
    173e:	aa 95       	dec	r26
    1740:	e1 f7       	brne	.-8      	; 0x173a <get_fat+0x100>
    1742:	9b 01       	movw	r18, r22
    1744:	23 c0       	rjmp	.+70     	; 0x178c <get_fat+0x152>
    1746:	9b 01       	movw	r18, r22
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	3f 70       	andi	r19, 0x0F	; 15
    174e:	40 70       	andi	r20, 0x00	; 0
    1750:	50 70       	andi	r21, 0x00	; 0
    1752:	4a c0       	rjmp	.+148    	; 0x17e8 <get_fat+0x1ae>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    1754:	77 27       	eor	r23, r23
    1756:	6b 2d       	mov	r22, r11
    1758:	5a 2d       	mov	r21, r10
    175a:	49 2d       	mov	r20, r9
    175c:	f3 01       	movw	r30, r6
    175e:	82 85       	ldd	r24, Z+10	; 0x0a
    1760:	93 85       	ldd	r25, Z+11	; 0x0b
    1762:	a4 85       	ldd	r26, Z+12	; 0x0c
    1764:	b5 85       	ldd	r27, Z+13	; 0x0d
    1766:	48 0f       	add	r20, r24
    1768:	59 1f       	adc	r21, r25
    176a:	6a 1f       	adc	r22, r26
    176c:	7b 1f       	adc	r23, r27
    176e:	94 01       	movw	r18, r8
    1770:	30 70       	andi	r19, 0x00	; 0
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	ce 01       	movw	r24, r28
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	02 e0       	ldi	r16, 0x02	; 2
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    1782:	88 23       	and	r24, r24
    1784:	69 f5       	brne	.+90     	; 0x17e0 <get_fat+0x1a6>
		return LD_WORD(buf);
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	9c 01       	movw	r18, r24
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	2b c0       	rjmp	.+86     	; 0x17e8 <get_fat+0x1ae>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    1792:	b5 01       	movw	r22, r10
    1794:	a4 01       	movw	r20, r8
    1796:	27 e0       	ldi	r18, 0x07	; 7
    1798:	76 95       	lsr	r23
    179a:	67 95       	ror	r22
    179c:	57 95       	ror	r21
    179e:	47 95       	ror	r20
    17a0:	2a 95       	dec	r18
    17a2:	d1 f7       	brne	.-12     	; 0x1798 <get_fat+0x15e>
    17a4:	f3 01       	movw	r30, r6
    17a6:	82 85       	ldd	r24, Z+10	; 0x0a
    17a8:	93 85       	ldd	r25, Z+11	; 0x0b
    17aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    17ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    17ae:	48 0f       	add	r20, r24
    17b0:	59 1f       	adc	r21, r25
    17b2:	6a 1f       	adc	r22, r26
    17b4:	7b 1f       	adc	r23, r27
    17b6:	94 01       	movw	r18, r8
    17b8:	2f 77       	andi	r18, 0x7F	; 127
    17ba:	30 70       	andi	r19, 0x00	; 0
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	ce 01       	movw	r24, r28
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	04 e0       	ldi	r16, 0x04	; 4
    17ca:	10 e0       	ldi	r17, 0x00	; 0
    17cc:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    17d0:	88 23       	and	r24, r24
    17d2:	31 f4       	brne	.+12     	; 0x17e0 <get_fat+0x1a6>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    17d4:	29 81       	ldd	r18, Y+1	; 0x01
    17d6:	3a 81       	ldd	r19, Y+2	; 0x02
    17d8:	4b 81       	ldd	r20, Y+3	; 0x03
    17da:	5c 81       	ldd	r21, Y+4	; 0x04
    17dc:	5f 70       	andi	r21, 0x0F	; 15
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <get_fat+0x1ae>
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    17e8:	b9 01       	movw	r22, r18
    17ea:	ca 01       	movw	r24, r20
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	bf 90       	pop	r11
    1806:	af 90       	pop	r10
    1808:	9f 90       	pop	r9
    180a:	8f 90       	pop	r8
    180c:	7f 90       	pop	r7
    180e:	6f 90       	pop	r6
    1810:	08 95       	ret

00001812 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    1812:	af 92       	push	r10
    1814:	bf 92       	push	r11
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    1828:	c0 91 85 00 	lds	r28, 0x0085
    182c:	d0 91 86 00 	lds	r29, 0x0086


	i = dj->index + 1;
    1830:	fc 01       	movw	r30, r24
    1832:	c0 80       	ld	r12, Z
    1834:	d1 80       	ldd	r13, Z+1	; 0x01
    1836:	08 94       	sec
    1838:	c1 1c       	adc	r12, r1
    183a:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    183c:	c1 14       	cp	r12, r1
    183e:	d1 04       	cpc	r13, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <dir_next+0x32>
    1842:	8f c0       	rjmp	.+286    	; 0x1962 <dir_next+0x150>
    1844:	24 85       	ldd	r18, Z+12	; 0x0c
    1846:	35 85       	ldd	r19, Z+13	; 0x0d
    1848:	46 85       	ldd	r20, Z+14	; 0x0e
    184a:	57 85       	ldd	r21, Z+15	; 0x0f
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	41 05       	cpc	r20, r1
    1852:	51 05       	cpc	r21, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <dir_next+0x46>
    1856:	85 c0       	rjmp	.+266    	; 0x1962 <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    1858:	c6 01       	movw	r24, r12
    185a:	8f 70       	andi	r24, 0x0F	; 15
    185c:	90 70       	andi	r25, 0x00	; 0
    185e:	89 2b       	or	r24, r25
    1860:	09 f0       	breq	.+2      	; 0x1864 <dir_next+0x52>
    1862:	7a c0       	rjmp	.+244    	; 0x1958 <dir_next+0x146>
		dj->sect++;			/* Next sector */
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	4f 4f       	sbci	r20, 0xFF	; 255
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	24 87       	std	Z+12, r18	; 0x0c
    186e:	35 87       	std	Z+13, r19	; 0x0d
    1870:	46 87       	std	Z+14, r20	; 0x0e
    1872:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    1874:	40 85       	ldd	r20, Z+8	; 0x08
    1876:	51 85       	ldd	r21, Z+9	; 0x09
    1878:	62 85       	ldd	r22, Z+10	; 0x0a
    187a:	73 85       	ldd	r23, Z+11	; 0x0b
    187c:	41 15       	cp	r20, r1
    187e:	51 05       	cpc	r21, r1
    1880:	61 05       	cpc	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	39 f4       	brne	.+14     	; 0x1894 <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	c8 16       	cp	r12, r24
    188c:	d9 06       	cpc	r13, r25
    188e:	08 f4       	brcc	.+2      	; 0x1892 <dir_next+0x80>
    1890:	63 c0       	rjmp	.+198    	; 0x1958 <dir_next+0x146>
    1892:	67 c0       	rjmp	.+206    	; 0x1962 <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	96 01       	movw	r18, r12
    189c:	e4 e0       	ldi	r30, 0x04	; 4
    189e:	36 95       	lsr	r19
    18a0:	27 95       	ror	r18
    18a2:	ea 95       	dec	r30
    18a4:	e1 f7       	brne	.-8      	; 0x189e <dir_next+0x8c>
    18a6:	82 23       	and	r24, r18
    18a8:	93 23       	and	r25, r19
    18aa:	89 2b       	or	r24, r25
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <dir_next+0x9e>
    18ae:	54 c0       	rjmp	.+168    	; 0x1958 <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
    18b0:	cb 01       	movw	r24, r22
    18b2:	ba 01       	movw	r22, r20
    18b4:	0e 94 1d 0b 	call	0x163a	; 0x163a <get_fat>
    18b8:	9b 01       	movw	r18, r22
    18ba:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
    18bc:	62 30       	cpi	r22, 0x02	; 2
    18be:	71 05       	cpc	r23, r1
    18c0:	81 05       	cpc	r24, r1
    18c2:	91 05       	cpc	r25, r1
    18c4:	10 f4       	brcc	.+4      	; 0x18ca <dir_next+0xb8>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	4d c0       	rjmp	.+154    	; 0x1964 <dir_next+0x152>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    18ca:	8e 81       	ldd	r24, Y+6	; 0x06
    18cc:	9f 81       	ldd	r25, Y+7	; 0x07
    18ce:	a8 85       	ldd	r26, Y+8	; 0x08
    18d0:	b9 85       	ldd	r27, Y+9	; 0x09
    18d2:	28 17       	cp	r18, r24
    18d4:	39 07       	cpc	r19, r25
    18d6:	4a 07       	cpc	r20, r26
    18d8:	5b 07       	cpc	r21, r27
    18da:	08 f0       	brcs	.+2      	; 0x18de <dir_next+0xcc>
    18dc:	42 c0       	rjmp	.+132    	; 0x1962 <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    18de:	f5 01       	movw	r30, r10
    18e0:	20 87       	std	Z+8, r18	; 0x08
    18e2:	31 87       	std	Z+9, r19	; 0x09
    18e4:	42 87       	std	Z+10, r20	; 0x0a
    18e6:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    18e8:	c0 91 85 00 	lds	r28, 0x0085
    18ec:	d0 91 86 00 	lds	r29, 0x0086


	clst -= 2;
    18f0:	8e ef       	ldi	r24, 0xFE	; 254
    18f2:	e8 2e       	mov	r14, r24
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	f8 2e       	mov	r15, r24
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	08 2f       	mov	r16, r24
    18fc:	8f ef       	ldi	r24, 0xFF	; 255
    18fe:	18 2f       	mov	r17, r24
    1900:	e2 0e       	add	r14, r18
    1902:	f3 1e       	adc	r15, r19
    1904:	04 1f       	adc	r16, r20
    1906:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1908:	8e 81       	ldd	r24, Y+6	; 0x06
    190a:	9f 81       	ldd	r25, Y+7	; 0x07
    190c:	a8 85       	ldd	r26, Y+8	; 0x08
    190e:	b9 85       	ldd	r27, Y+9	; 0x09
    1910:	02 97       	sbiw	r24, 0x02	; 2
    1912:	a1 09       	sbc	r26, r1
    1914:	b1 09       	sbc	r27, r1
    1916:	e8 16       	cp	r14, r24
    1918:	f9 06       	cpc	r15, r25
    191a:	0a 07       	cpc	r16, r26
    191c:	1b 07       	cpc	r17, r27
    191e:	28 f0       	brcs	.+10     	; 0x192a <dir_next+0x118>
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	12 c0       	rjmp	.+36     	; 0x194e <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
    192a:	2a 81       	ldd	r18, Y+2	; 0x02
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	c8 01       	movw	r24, r16
    1934:	b7 01       	movw	r22, r14
    1936:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    193a:	9b 01       	movw	r18, r22
    193c:	ac 01       	movw	r20, r24
    193e:	8a 89       	ldd	r24, Y+18	; 0x12
    1940:	9b 89       	ldd	r25, Y+19	; 0x13
    1942:	ac 89       	ldd	r26, Y+20	; 0x14
    1944:	bd 89       	ldd	r27, Y+21	; 0x15
    1946:	28 0f       	add	r18, r24
    1948:	39 1f       	adc	r19, r25
    194a:	4a 1f       	adc	r20, r26
    194c:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
    194e:	f5 01       	movw	r30, r10
    1950:	24 87       	std	Z+12, r18	; 0x0c
    1952:	35 87       	std	Z+13, r19	; 0x0d
    1954:	46 87       	std	Z+14, r20	; 0x0e
    1956:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
    1958:	f5 01       	movw	r30, r10
    195a:	d1 82       	std	Z+1, r13	; 0x01
    195c:	c0 82       	st	Z, r12
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <dir_next+0x152>

	return FR_OK;
    1962:	83 e0       	ldi	r24, 0x03	; 3
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	bf 90       	pop	r11
    1976:	af 90       	pop	r10
    1978:	08 95       	ret

0000197a <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    197a:	2f 92       	push	r2
    197c:	3f 92       	push	r3
    197e:	4f 92       	push	r4
    1980:	5f 92       	push	r5
    1982:	6f 92       	push	r6
    1984:	7f 92       	push	r7
    1986:	8f 92       	push	r8
    1988:	9f 92       	push	r9
    198a:	af 92       	push	r10
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    19a0:	c0 91 85 00 	lds	r28, 0x0085
    19a4:	d0 91 86 00 	lds	r29, 0x0086


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    19a8:	20 97       	sbiw	r28, 0x00	; 0
    19aa:	11 f4       	brne	.+4      	; 0x19b0 <pf_lseek+0x36>
    19ac:	86 e0       	ldi	r24, 0x06	; 6
    19ae:	02 c1       	rjmp	.+516    	; 0x1bb4 <pf_lseek+0x23a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	80 fd       	sbrc	r24, 0
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <pf_lseek+0x40>
    19b6:	85 e0       	ldi	r24, 0x05	; 5
    19b8:	fd c0       	rjmp	.+506    	; 0x1bb4 <pf_lseek+0x23a>
    19ba:	ea 8c       	ldd	r14, Y+26	; 0x1a
    19bc:	fb 8c       	ldd	r15, Y+27	; 0x1b
    19be:	0c 8d       	ldd	r16, Y+28	; 0x1c
    19c0:	1d 8d       	ldd	r17, Y+29	; 0x1d
    19c2:	4e 2f       	mov	r20, r30
    19c4:	59 2f       	mov	r21, r25
    19c6:	cb 01       	movw	r24, r22
    19c8:	da 01       	movw	r26, r20
    19ca:	3c 01       	movw	r6, r24
    19cc:	4d 01       	movw	r8, r26
    19ce:	e6 14       	cp	r14, r6
    19d0:	f7 04       	cpc	r15, r7
    19d2:	08 05       	cpc	r16, r8
    19d4:	19 05       	cpc	r17, r9
    19d6:	10 f4       	brcc	.+4      	; 0x19dc <pf_lseek+0x62>
    19d8:	37 01       	movw	r6, r14
    19da:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
    19dc:	ee 88       	ldd	r14, Y+22	; 0x16
    19de:	ff 88       	ldd	r15, Y+23	; 0x17
    19e0:	08 8d       	ldd	r16, Y+24	; 0x18
    19e2:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
    19e4:	1e 8a       	std	Y+22, r1	; 0x16
    19e6:	1f 8a       	std	Y+23, r1	; 0x17
    19e8:	18 8e       	std	Y+24, r1	; 0x18
    19ea:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
    19ec:	61 14       	cp	r6, r1
    19ee:	71 04       	cpc	r7, r1
    19f0:	81 04       	cpc	r8, r1
    19f2:	91 04       	cpc	r9, r1
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <pf_lseek+0x7e>
    19f6:	da c0       	rjmp	.+436    	; 0x1bac <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	a8 2e       	mov	r10, r24
    19fc:	bb 24       	eor	r11, r11
    19fe:	cc 24       	eor	r12, r12
    1a00:	dd 24       	eor	r13, r13
    1a02:	b9 e0       	ldi	r27, 0x09	; 9
    1a04:	aa 0c       	add	r10, r10
    1a06:	bb 1c       	adc	r11, r11
    1a08:	cc 1c       	adc	r12, r12
    1a0a:	dd 1c       	adc	r13, r13
    1a0c:	ba 95       	dec	r27
    1a0e:	d1 f7       	brne	.-12     	; 0x1a04 <pf_lseek+0x8a>
		if (ifptr > 0 &&
    1a10:	e1 14       	cp	r14, r1
    1a12:	f1 04       	cpc	r15, r1
    1a14:	01 05       	cpc	r16, r1
    1a16:	11 05       	cpc	r17, r1
    1a18:	b1 f1       	breq	.+108    	; 0x1a86 <pf_lseek+0x10c>
    1a1a:	17 01       	movw	r2, r14
    1a1c:	28 01       	movw	r4, r16
    1a1e:	08 94       	sec
    1a20:	21 08       	sbc	r2, r1
    1a22:	31 08       	sbc	r3, r1
    1a24:	41 08       	sbc	r4, r1
    1a26:	51 08       	sbc	r5, r1
    1a28:	c4 01       	movw	r24, r8
    1a2a:	b3 01       	movw	r22, r6
    1a2c:	61 50       	subi	r22, 0x01	; 1
    1a2e:	70 40       	sbci	r23, 0x00	; 0
    1a30:	80 40       	sbci	r24, 0x00	; 0
    1a32:	90 40       	sbci	r25, 0x00	; 0
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodsi4>
    1a3c:	79 01       	movw	r14, r18
    1a3e:	8a 01       	movw	r16, r20
    1a40:	c2 01       	movw	r24, r4
    1a42:	b1 01       	movw	r22, r2
    1a44:	a6 01       	movw	r20, r12
    1a46:	95 01       	movw	r18, r10
    1a48:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodsi4>
    1a4c:	e2 16       	cp	r14, r18
    1a4e:	f3 06       	cpc	r15, r19
    1a50:	04 07       	cpc	r16, r20
    1a52:	15 07       	cpc	r17, r21
    1a54:	c0 f0       	brcs	.+48     	; 0x1a86 <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    1a56:	88 27       	eor	r24, r24
    1a58:	99 27       	eor	r25, r25
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	8a 19       	sub	r24, r10
    1a5e:	9b 09       	sbc	r25, r11
    1a60:	ac 09       	sbc	r26, r12
    1a62:	bd 09       	sbc	r27, r13
    1a64:	82 21       	and	r24, r2
    1a66:	93 21       	and	r25, r3
    1a68:	a4 21       	and	r26, r4
    1a6a:	b5 21       	and	r27, r5
    1a6c:	8e 8b       	std	Y+22, r24	; 0x16
    1a6e:	9f 8b       	std	Y+23, r25	; 0x17
    1a70:	a8 8f       	std	Y+24, r26	; 0x18
    1a72:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
    1a74:	68 1a       	sub	r6, r24
    1a76:	79 0a       	sbc	r7, r25
    1a78:	8a 0a       	sbc	r8, r26
    1a7a:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
    1a7c:	2a a1       	ldd	r18, Y+34	; 0x22
    1a7e:	3b a1       	ldd	r19, Y+35	; 0x23
    1a80:	4c a1       	ldd	r20, Y+36	; 0x24
    1a82:	5d a1       	ldd	r21, Y+37	; 0x25
    1a84:	33 c0       	rjmp	.+102    	; 0x1aec <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    1a86:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1a88:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1a8a:	48 a1       	ldd	r20, Y+32	; 0x20
    1a8c:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
    1a8e:	2a a3       	std	Y+34, r18	; 0x22
    1a90:	3b a3       	std	Y+35, r19	; 0x23
    1a92:	4c a3       	std	Y+36, r20	; 0x24
    1a94:	5d a3       	std	Y+37, r21	; 0x25
    1a96:	2a c0       	rjmp	.+84     	; 0x1aec <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    1a98:	ca 01       	movw	r24, r20
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	0e 94 1d 0b 	call	0x163a	; 0x163a <get_fat>
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    1aa4:	62 30       	cpi	r22, 0x02	; 2
    1aa6:	71 05       	cpc	r23, r1
    1aa8:	81 05       	cpc	r24, r1
    1aaa:	91 05       	cpc	r25, r1
    1aac:	08 f4       	brcc	.+2      	; 0x1ab0 <pf_lseek+0x136>
    1aae:	80 c0       	rjmp	.+256    	; 0x1bb0 <pf_lseek+0x236>
    1ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ab6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ab8:	28 17       	cp	r18, r24
    1aba:	39 07       	cpc	r19, r25
    1abc:	4a 07       	cpc	r20, r26
    1abe:	5b 07       	cpc	r21, r27
    1ac0:	08 f0       	brcs	.+2      	; 0x1ac4 <pf_lseek+0x14a>
    1ac2:	76 c0       	rjmp	.+236    	; 0x1bb0 <pf_lseek+0x236>
			fs->curr_clust = clst;
    1ac4:	2a a3       	std	Y+34, r18	; 0x22
    1ac6:	3b a3       	std	Y+35, r19	; 0x23
    1ac8:	4c a3       	std	Y+36, r20	; 0x24
    1aca:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
    1acc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ace:	9f 89       	ldd	r25, Y+23	; 0x17
    1ad0:	a8 8d       	ldd	r26, Y+24	; 0x18
    1ad2:	b9 8d       	ldd	r27, Y+25	; 0x19
    1ad4:	8a 0d       	add	r24, r10
    1ad6:	9b 1d       	adc	r25, r11
    1ad8:	ac 1d       	adc	r26, r12
    1ada:	bd 1d       	adc	r27, r13
    1adc:	8e 8b       	std	Y+22, r24	; 0x16
    1ade:	9f 8b       	std	Y+23, r25	; 0x17
    1ae0:	a8 8f       	std	Y+24, r26	; 0x18
    1ae2:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
    1ae4:	6a 18       	sub	r6, r10
    1ae6:	7b 08       	sbc	r7, r11
    1ae8:	8c 08       	sbc	r8, r12
    1aea:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1aec:	a6 14       	cp	r10, r6
    1aee:	b7 04       	cpc	r11, r7
    1af0:	c8 04       	cpc	r12, r8
    1af2:	d9 04       	cpc	r13, r9
    1af4:	88 f2       	brcs	.-94     	; 0x1a98 <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    1af6:	ee 88       	ldd	r14, Y+22	; 0x16
    1af8:	ff 88       	ldd	r15, Y+23	; 0x17
    1afa:	08 8d       	ldd	r16, Y+24	; 0x18
    1afc:	19 8d       	ldd	r17, Y+25	; 0x19
    1afe:	e6 0c       	add	r14, r6
    1b00:	f7 1c       	adc	r15, r7
    1b02:	08 1d       	adc	r16, r8
    1b04:	19 1d       	adc	r17, r9
    1b06:	ee 8a       	std	Y+22, r14	; 0x16
    1b08:	ff 8a       	std	Y+23, r15	; 0x17
    1b0a:	08 8f       	std	Y+24, r16	; 0x18
    1b0c:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1b0e:	80 90 85 00 	lds	r8, 0x0085
    1b12:	90 90 86 00 	lds	r9, 0x0086


	clst -= 2;
    1b16:	ae ef       	ldi	r26, 0xFE	; 254
    1b18:	aa 2e       	mov	r10, r26
    1b1a:	af ef       	ldi	r26, 0xFF	; 255
    1b1c:	ba 2e       	mov	r11, r26
    1b1e:	af ef       	ldi	r26, 0xFF	; 255
    1b20:	ca 2e       	mov	r12, r26
    1b22:	af ef       	ldi	r26, 0xFF	; 255
    1b24:	da 2e       	mov	r13, r26
    1b26:	a2 0e       	add	r10, r18
    1b28:	b3 1e       	adc	r11, r19
    1b2a:	c4 1e       	adc	r12, r20
    1b2c:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1b2e:	f4 01       	movw	r30, r8
    1b30:	86 81       	ldd	r24, Z+6	; 0x06
    1b32:	97 81       	ldd	r25, Z+7	; 0x07
    1b34:	a0 85       	ldd	r26, Z+8	; 0x08
    1b36:	b1 85       	ldd	r27, Z+9	; 0x09
    1b38:	02 97       	sbiw	r24, 0x02	; 2
    1b3a:	a1 09       	sbc	r26, r1
    1b3c:	b1 09       	sbc	r27, r1
    1b3e:	a8 16       	cp	r10, r24
    1b40:	b9 06       	cpc	r11, r25
    1b42:	ca 06       	cpc	r12, r26
    1b44:	db 06       	cpc	r13, r27
    1b46:	a0 f5       	brcc	.+104    	; 0x1bb0 <pf_lseek+0x236>
	return (DWORD)clst * fs->csize + fs->database;
    1b48:	22 81       	ldd	r18, Z+2	; 0x02
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	c6 01       	movw	r24, r12
    1b52:	b5 01       	movw	r22, r10
    1b54:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    1b58:	9b 01       	movw	r18, r22
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	f4 01       	movw	r30, r8
    1b5e:	82 89       	ldd	r24, Z+18	; 0x12
    1b60:	93 89       	ldd	r25, Z+19	; 0x13
    1b62:	a4 89       	ldd	r26, Z+20	; 0x14
    1b64:	b5 89       	ldd	r27, Z+21	; 0x15
    1b66:	28 0f       	add	r18, r24
    1b68:	39 1f       	adc	r19, r25
    1b6a:	4a 1f       	adc	r20, r26
    1b6c:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
    1b6e:	21 15       	cp	r18, r1
    1b70:	31 05       	cpc	r19, r1
    1b72:	41 05       	cpc	r20, r1
    1b74:	51 05       	cpc	r21, r1
    1b76:	e1 f0       	breq	.+56     	; 0x1bb0 <pf_lseek+0x236>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    1b78:	f9 e0       	ldi	r31, 0x09	; 9
    1b7a:	16 95       	lsr	r17
    1b7c:	07 95       	ror	r16
    1b7e:	f7 94       	ror	r15
    1b80:	e7 94       	ror	r14
    1b82:	fa 95       	dec	r31
    1b84:	d1 f7       	brne	.-12     	; 0x1b7a <pf_lseek+0x200>
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	aa 27       	eor	r26, r26
    1b8e:	97 fd       	sbrc	r25, 7
    1b90:	a0 95       	com	r26
    1b92:	ba 2f       	mov	r27, r26
    1b94:	e8 22       	and	r14, r24
    1b96:	f9 22       	and	r15, r25
    1b98:	0a 23       	and	r16, r26
    1b9a:	1b 23       	and	r17, r27
    1b9c:	2e 0d       	add	r18, r14
    1b9e:	3f 1d       	adc	r19, r15
    1ba0:	40 1f       	adc	r20, r16
    1ba2:	51 1f       	adc	r21, r17
    1ba4:	2e a3       	std	Y+38, r18	; 0x26
    1ba6:	3f a3       	std	Y+39, r19	; 0x27
    1ba8:	48 a7       	std	Y+40, r20	; 0x28
    1baa:	59 a7       	std	Y+41, r21	; 0x29
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <pf_lseek+0x23a>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
    1bb0:	19 82       	std	Y+1, r1	; 0x01
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	ff 90       	pop	r15
    1bbe:	ef 90       	pop	r14
    1bc0:	df 90       	pop	r13
    1bc2:	cf 90       	pop	r12
    1bc4:	bf 90       	pop	r11
    1bc6:	af 90       	pop	r10
    1bc8:	9f 90       	pop	r9
    1bca:	8f 90       	pop	r8
    1bcc:	7f 90       	pop	r7
    1bce:	6f 90       	pop	r6
    1bd0:	5f 90       	pop	r5
    1bd2:	4f 90       	pop	r4
    1bd4:	3f 90       	pop	r3
    1bd6:	2f 90       	pop	r2
    1bd8:	08 95       	ret

00001bda <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1bda:	af 92       	push	r10
    1bdc:	bf 92       	push	r11
    1bde:	cf 92       	push	r12
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	ac 97       	sbiw	r28, 0x2c	; 44
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	7c 01       	movw	r14, r24
    1c00:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1c02:	80 91 85 00 	lds	r24, 0x0085
    1c06:	90 91 86 00 	lds	r25, 0x0086
    1c0a:	89 2b       	or	r24, r25
    1c0c:	11 f4       	brne	.+4      	; 0x1c12 <pf_readdir+0x38>
    1c0e:	86 e0       	ldi	r24, 0x06	; 6
    1c10:	b0 c0       	rjmp	.+352    	; 0x1d72 <pf_readdir+0x198>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1c12:	ce 01       	movw	r24, r28
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	d7 01       	movw	r26, r14
    1c18:	13 96       	adiw	r26, 0x03	; 3
    1c1a:	9c 93       	st	X, r25
    1c1c:	8e 93       	st	-X, r24
    1c1e:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
    1c20:	61 15       	cp	r22, r1
    1c22:	71 05       	cpc	r23, r1
    1c24:	39 f0       	breq	.+14     	; 0x1c34 <pf_readdir+0x5a>
    1c26:	83 e0       	ldi	r24, 0x03	; 3
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1c28:	0d e0       	ldi	r16, 0x0D	; 13
    1c2a:	a0 2e       	mov	r10, r16
    1c2c:	b1 2c       	mov	r11, r1
    1c2e:	ac 0e       	add	r10, r28
    1c30:	bd 1e       	adc	r11, r29
    1c32:	28 c0       	rjmp	.+80     	; 0x1c84 <pf_readdir+0xaa>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
    1c34:	c7 01       	movw	r24, r14
    1c36:	0e 94 9e 0a 	call	0x153c	; 0x153c <dir_rewind>
    1c3a:	9b c0       	rjmp	.+310    	; 0x1d72 <pf_readdir+0x198>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	20 81       	ld	r18, Z
    1c40:	31 81       	ldd	r19, Z+1	; 0x01
    1c42:	2f 70       	andi	r18, 0x0F	; 15
    1c44:	30 70       	andi	r19, 0x00	; 0
    1c46:	15 e0       	ldi	r17, 0x05	; 5
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	1a 95       	dec	r17
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <pf_readdir+0x6e>
    1c50:	c5 01       	movw	r24, r10
    1c52:	00 e2       	ldi	r16, 0x20	; 32
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1c5a:	88 23       	and	r24, r24
    1c5c:	11 f0       	breq	.+4      	; 0x1c62 <pf_readdir+0x88>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	1f c0       	rjmp	.+62     	; 0x1ca0 <pf_readdir+0xc6>
		c = dir[DIR_Name];
    1c62:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1c64:	99 23       	and	r25, r25
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <pf_readdir+0x90>
    1c68:	95 c0       	rjmp	.+298    	; 0x1d94 <pf_readdir+0x1ba>
		a = dir[DIR_Attr] & AM_MASK;
    1c6a:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    1c6c:	95 3e       	cpi	r25, 0xE5	; 229
    1c6e:	29 f0       	breq	.+10     	; 0x1c7a <pf_readdir+0xa0>
    1c70:	9e 32       	cpi	r25, 0x2E	; 46
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <pf_readdir+0xa0>
    1c74:	8f 73       	andi	r24, 0x3F	; 63
    1c76:	83 ff       	sbrs	r24, 3
    1c78:	1d c0       	rjmp	.+58     	; 0x1cb4 <pf_readdir+0xda>
			break;
		res = dir_next(dj);			/* Next entry */
    1c7a:	c7 01       	movw	r24, r14
    1c7c:	0e 94 09 0c 	call	0x1812	; 0x1812 <dir_next>
		if (res != FR_OK) break;
    1c80:	88 23       	and	r24, r24
    1c82:	71 f4       	brne	.+28     	; 0x1ca0 <pf_readdir+0xc6>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    1c84:	d7 01       	movw	r26, r14
    1c86:	1c 96       	adiw	r26, 0x0c	; 12
    1c88:	4d 91       	ld	r20, X+
    1c8a:	5d 91       	ld	r21, X+
    1c8c:	6d 91       	ld	r22, X+
    1c8e:	7c 91       	ld	r23, X
    1c90:	1f 97       	sbiw	r26, 0x0f	; 15
    1c92:	41 15       	cp	r20, r1
    1c94:	51 05       	cpc	r21, r1
    1c96:	61 05       	cpc	r22, r1
    1c98:	71 05       	cpc	r23, r1
    1c9a:	81 f6       	brne	.-96     	; 0x1c3c <pf_readdir+0x62>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1c9c:	88 23       	and	r24, r24
    1c9e:	51 f0       	breq	.+20     	; 0x1cb4 <pf_readdir+0xda>
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	14 86       	std	Z+12, r1	; 0x0c
    1ca4:	15 86       	std	Z+13, r1	; 0x0d
    1ca6:	16 86       	std	Z+14, r1	; 0x0e
    1ca8:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	19 f0       	breq	.+6      	; 0x1cb4 <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <pf_readdir+0xda>
    1cb2:	5f c0       	rjmp	.+190    	; 0x1d72 <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    1cb4:	96 01       	movw	r18, r12
    1cb6:	27 5f       	subi	r18, 0xF7	; 247
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    1cba:	f7 01       	movw	r30, r14
    1cbc:	84 85       	ldd	r24, Z+12	; 0x0c
    1cbe:	95 85       	ldd	r25, Z+13	; 0x0d
    1cc0:	a6 85       	ldd	r26, Z+14	; 0x0e
    1cc2:	b7 85       	ldd	r27, Z+15	; 0x0f
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	a1 05       	cpc	r26, r1
    1cc8:	b1 05       	cpc	r27, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <pf_readdir+0xf4>
    1ccc:	43 c0       	rjmp	.+134    	; 0x1d54 <pf_readdir+0x17a>
    1cce:	fe 01       	movw	r30, r28
    1cd0:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1cd2:	ae 01       	movw	r20, r28
    1cd4:	4b 5e       	subi	r20, 0xEB	; 235
    1cd6:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
    1cd8:	80 81       	ld	r24, Z
			if (c == ' ') break;
    1cda:	80 32       	cpi	r24, 0x20	; 32
    1cdc:	51 f0       	breq	.+20     	; 0x1cf2 <pf_readdir+0x118>
			if (c == 0x05) c = 0xE5;
    1cde:	85 30       	cpi	r24, 0x05	; 5
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <pf_readdir+0x10a>
    1ce2:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    1ce4:	d9 01       	movw	r26, r18
    1ce6:	8d 93       	st	X+, r24
    1ce8:	9d 01       	movw	r18, r26
    1cea:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1cec:	e4 17       	cp	r30, r20
    1cee:	f5 07       	cpc	r31, r21
    1cf0:	99 f7       	brne	.-26     	; 0x1cd8 <pf_readdir+0xfe>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    1cf2:	8d 89       	ldd	r24, Y+21	; 0x15
    1cf4:	80 32       	cpi	r24, 0x20	; 32
    1cf6:	99 f0       	breq	.+38     	; 0x1d1e <pf_readdir+0x144>
			*p++ = '.';
    1cf8:	8e e2       	ldi	r24, 0x2E	; 46
    1cfa:	f9 01       	movw	r30, r18
    1cfc:	81 93       	st	Z+, r24
    1cfe:	9f 01       	movw	r18, r30
    1d00:	fe 01       	movw	r30, r28
    1d02:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
    1d04:	ae 01       	movw	r20, r28
    1d06:	48 5e       	subi	r20, 0xE8	; 232
    1d08:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
    1d0a:	80 81       	ld	r24, Z
				if (c == ' ') break;
    1d0c:	80 32       	cpi	r24, 0x20	; 32
    1d0e:	39 f0       	breq	.+14     	; 0x1d1e <pf_readdir+0x144>
				*p++ = c;
    1d10:	d9 01       	movw	r26, r18
    1d12:	8d 93       	st	X+, r24
    1d14:	9d 01       	movw	r18, r26
    1d16:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1d18:	e4 17       	cp	r30, r20
    1d1a:	f5 07       	cpc	r31, r21
    1d1c:	b1 f7       	brne	.-20     	; 0x1d0a <pf_readdir+0x130>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1d1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1d20:	f6 01       	movw	r30, r12
    1d22:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1d24:	fe 01       	movw	r30, r28
    1d26:	3d 96       	adiw	r30, 0x0d	; 13
    1d28:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d2a:	55 8d       	ldd	r21, Z+29	; 0x1d
    1d2c:	66 8d       	ldd	r22, Z+30	; 0x1e
    1d2e:	77 8d       	ldd	r23, Z+31	; 0x1f
    1d30:	d6 01       	movw	r26, r12
    1d32:	4d 93       	st	X+, r20
    1d34:	5d 93       	st	X+, r21
    1d36:	6d 93       	st	X+, r22
    1d38:	7c 93       	st	X, r23
    1d3a:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1d3c:	80 8d       	ldd	r24, Z+24	; 0x18
    1d3e:	91 8d       	ldd	r25, Z+25	; 0x19
    1d40:	15 96       	adiw	r26, 0x05	; 5
    1d42:	9c 93       	st	X, r25
    1d44:	8e 93       	st	-X, r24
    1d46:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1d48:	86 89       	ldd	r24, Z+22	; 0x16
    1d4a:	97 89       	ldd	r25, Z+23	; 0x17
    1d4c:	17 96       	adiw	r26, 0x07	; 7
    1d4e:	9c 93       	st	X, r25
    1d50:	8e 93       	st	-X, r24
    1d52:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
    1d54:	f9 01       	movw	r30, r18
    1d56:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1d58:	c7 01       	movw	r24, r14
    1d5a:	0e 94 09 0c 	call	0x1812	; 0x1812 <dir_next>
				if (res == FR_NO_FILE) {
    1d5e:	83 30       	cpi	r24, 0x03	; 3
    1d60:	41 f4       	brne	.+16     	; 0x1d72 <pf_readdir+0x198>
					dj->sect = 0;
    1d62:	d7 01       	movw	r26, r14
    1d64:	1c 96       	adiw	r26, 0x0c	; 12
    1d66:	1d 92       	st	X+, r1
    1d68:	1d 92       	st	X+, r1
    1d6a:	1d 92       	st	X+, r1
    1d6c:	1c 92       	st	X, r1
    1d6e:	1f 97       	sbiw	r26, 0x0f	; 15
    1d70:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
    1d72:	ac 96       	adiw	r28, 0x2c	; 44
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	df 90       	pop	r13
    1d8c:	cf 90       	pop	r12
    1d8e:	bf 90       	pop	r11
    1d90:	af 90       	pop	r10
    1d92:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	84 cf       	rjmp	.-248    	; 0x1ca0 <pf_readdir+0xc6>

00001d98 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    1d98:	6f 92       	push	r6
    1d9a:	7f 92       	push	r7
    1d9c:	8f 92       	push	r8
    1d9e:	9f 92       	push	r9
    1da0:	af 92       	push	r10
    1da2:	bf 92       	push	r11
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ec 01       	movw	r28, r24
    1db6:	6b 01       	movw	r12, r22
    1db8:	7a 01       	movw	r14, r20
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <follow_path+0x2a>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    1dbc:	08 94       	sec
    1dbe:	e1 1c       	adc	r14, r1
    1dc0:	f1 1c       	adc	r15, r1
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	80 81       	ld	r24, Z
    1dc6:	80 32       	cpi	r24, 0x20	; 32
    1dc8:	c9 f3       	breq	.-14     	; 0x1dbc <follow_path+0x24>
	if (*path == '/') path++;			/* Strip heading separator */
    1dca:	8f 32       	cpi	r24, 0x2F	; 47
    1dcc:	19 f4       	brne	.+6      	; 0x1dd4 <follow_path+0x3c>
    1dce:	08 94       	sec
    1dd0:	e1 1c       	adc	r14, r1
    1dd2:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    1dd4:	1c 82       	std	Y+4, r1	; 0x04
    1dd6:	1d 82       	std	Y+5, r1	; 0x05
    1dd8:	1e 82       	std	Y+6, r1	; 0x06
    1dda:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    1ddc:	f7 01       	movw	r30, r14
    1dde:	80 81       	ld	r24, Z
    1de0:	81 32       	cpi	r24, 0x21	; 33
    1de2:	38 f4       	brcc	.+14     	; 0x1df2 <follow_path+0x5a>
		res = dir_rewind(dj);
    1de4:	ce 01       	movw	r24, r28
    1de6:	0e 94 9e 0a 	call	0x153c	; 0x153c <dir_rewind>
    1dea:	b8 2e       	mov	r11, r24
		dir[0] = 0;
    1dec:	f6 01       	movw	r30, r12
    1dee:	10 82       	st	Z, r1
    1df0:	a5 c0       	rjmp	.+330    	; 0x1f3c <follow_path+0x1a4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1df2:	a0 e2       	ldi	r26, 0x20	; 32
    1df4:	6a 2e       	mov	r6, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1df6:	77 24       	eor	r7, r7
    1df8:	73 94       	inc	r7
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1dfa:	fb e0       	ldi	r31, 0x0B	; 11
    1dfc:	8f 2e       	mov	r8, r31
    1dfe:	91 2c       	mov	r9, r1
    1e00:	8c 0c       	add	r8, r12
    1e02:	9d 1c       	adc	r9, r13
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    1e04:	aa 81       	ldd	r26, Y+2	; 0x02
    1e06:	bb 81       	ldd	r27, Y+3	; 0x03
    1e08:	fd 01       	movw	r30, r26
    1e0a:	8b e0       	ldi	r24, 0x0B	; 11
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <follow_path+0x7a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1e10:	61 92       	st	Z+, r6
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	2f ef       	ldi	r18, 0xFF	; 255
    1e16:	8f 3f       	cpi	r24, 0xFF	; 255
    1e18:	92 07       	cpc	r25, r18
    1e1a:	d1 f7       	brne	.-12     	; 0x1e10 <follow_path+0x78>
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	aa 24       	eor	r10, r10
    1e20:	38 e0       	ldi	r19, 0x08	; 8
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <follow_path+0x90>
    1e24:	28 e0       	ldi	r18, 0x08	; 8
    1e26:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    1e28:	f7 01       	movw	r30, r14
    1e2a:	ea 0d       	add	r30, r10
    1e2c:	f1 1d       	adc	r31, r1
    1e2e:	90 81       	ld	r25, Z
    1e30:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    1e32:	91 32       	cpi	r25, 0x21	; 33
    1e34:	b0 f0       	brcs	.+44     	; 0x1e62 <follow_path+0xca>
    1e36:	9f 32       	cpi	r25, 0x2F	; 47
    1e38:	a1 f0       	breq	.+40     	; 0x1e62 <follow_path+0xca>
		if (c == '.' || i >= ni) {
    1e3a:	9e 32       	cpi	r25, 0x2E	; 46
    1e3c:	11 f0       	breq	.+4      	; 0x1e42 <follow_path+0xaa>
    1e3e:	23 17       	cp	r18, r19
    1e40:	28 f0       	brcs	.+10     	; 0x1e4c <follow_path+0xb4>
			if (ni != 8 || c != '.') break;
    1e42:	38 30       	cpi	r19, 0x08	; 8
    1e44:	71 f4       	brne	.+28     	; 0x1e62 <follow_path+0xca>
    1e46:	9e 32       	cpi	r25, 0x2E	; 46
    1e48:	69 f3       	breq	.-38     	; 0x1e24 <follow_path+0x8c>
    1e4a:	0b c0       	rjmp	.+22     	; 0x1e62 <follow_path+0xca>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1e4c:	89 2f       	mov	r24, r25
    1e4e:	81 56       	subi	r24, 0x61	; 97
    1e50:	8a 31       	cpi	r24, 0x1A	; 26
    1e52:	08 f4       	brcc	.+2      	; 0x1e56 <follow_path+0xbe>
    1e54:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    1e56:	fd 01       	movw	r30, r26
    1e58:	e2 0f       	add	r30, r18
    1e5a:	f1 1d       	adc	r31, r1
    1e5c:	90 83       	st	Z, r25
    1e5e:	2f 5f       	subi	r18, 0xFF	; 255
    1e60:	e3 cf       	rjmp	.-58     	; 0x1e28 <follow_path+0x90>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1e62:	1b 96       	adiw	r26, 0x0b	; 11
    1e64:	1c 92       	st	X, r1
    1e66:	1b 97       	sbiw	r26, 0x0b	; 11
    1e68:	91 32       	cpi	r25, 0x21	; 33
    1e6a:	10 f4       	brcc	.+4      	; 0x1e70 <follow_path+0xd8>
    1e6c:	1b 96       	adiw	r26, 0x0b	; 11
    1e6e:	7c 92       	st	X, r7
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    1e70:	ce 01       	movw	r24, r28
    1e72:	0e 94 9e 0a 	call	0x153c	; 0x153c <dir_rewind>
    1e76:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
    1e78:	88 23       	and	r24, r24
    1e7a:	d1 f5       	brne	.+116    	; 0x1ef0 <follow_path+0x158>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1e7c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e7e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e80:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e82:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e84:	28 81       	ld	r18, Y
    1e86:	39 81       	ldd	r19, Y+1	; 0x01
    1e88:	2f 70       	andi	r18, 0x0F	; 15
    1e8a:	30 70       	andi	r19, 0x00	; 0
    1e8c:	e5 e0       	ldi	r30, 0x05	; 5
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	ea 95       	dec	r30
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <follow_path+0xf6>
    1e96:	c6 01       	movw	r24, r12
    1e98:	00 e2       	ldi	r16, 0x20	; 32
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
    1e9c:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1ea0:	88 23       	and	r24, r24
    1ea2:	11 f0       	breq	.+4      	; 0x1ea8 <follow_path+0x110>
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	23 c0       	rjmp	.+70     	; 0x1eee <follow_path+0x156>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1ea8:	f6 01       	movw	r30, r12
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 23       	and	r24, r24
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <follow_path+0x11a>
    1eb0:	55 c0       	rjmp	.+170    	; 0x1f5c <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1eb2:	f4 01       	movw	r30, r8
    1eb4:	80 81       	ld	r24, Z
    1eb6:	83 fd       	sbrc	r24, 3
    1eb8:	15 c0       	rjmp	.+42     	; 0x1ee4 <follow_path+0x14c>
    1eba:	d6 01       	movw	r26, r12
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	2b e0       	ldi	r18, 0x0B	; 11
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1ec8:	21 50       	subi	r18, 0x01	; 1
    1eca:	30 40       	sbci	r19, 0x00	; 0
    1ecc:	8f ef       	ldi	r24, 0xFF	; 255
    1ece:	2f 3f       	cpi	r18, 0xFF	; 255
    1ed0:	38 07       	cpc	r19, r24
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <follow_path+0x13e>
    1ed4:	46 c0       	rjmp	.+140    	; 0x1f62 <follow_path+0x1ca>
    1ed6:	9c 91       	ld	r25, X
    1ed8:	80 81       	ld	r24, Z
    1eda:	98 17       	cp	r25, r24
    1edc:	19 f4       	brne	.+6      	; 0x1ee4 <follow_path+0x14c>
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	31 96       	adiw	r30, 0x01	; 1
    1ee2:	f2 cf       	rjmp	.-28     	; 0x1ec8 <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	0e 94 09 0c 	call	0x1812	; 0x1812 <dir_next>
	} while (res == FR_OK);
    1eea:	88 23       	and	r24, r24
    1eec:	39 f2       	breq	.-114    	; 0x1e7c <follow_path+0xe4>
    1eee:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    1ef0:	e3 e0       	ldi	r30, 0x03	; 3
    1ef2:	be 16       	cp	r11, r30
    1ef4:	19 f5       	brne	.+70     	; 0x1f3c <follow_path+0x1a4>
    1ef6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef8:	fb 81       	ldd	r31, Y+3	; 0x03
    1efa:	83 85       	ldd	r24, Z+11	; 0x0b
    1efc:	88 23       	and	r24, r24
    1efe:	e1 f0       	breq	.+56     	; 0x1f38 <follow_path+0x1a0>
    1f00:	1d c0       	rjmp	.+58     	; 0x1f3c <follow_path+0x1a4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1f02:	f4 01       	movw	r30, r8
    1f04:	80 81       	ld	r24, Z
    1f06:	84 ff       	sbrs	r24, 4
    1f08:	17 c0       	rjmp	.+46     	; 0x1f38 <follow_path+0x1a0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1f0a:	ea 0c       	add	r14, r10
    1f0c:	f1 1c       	adc	r15, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1f0e:	f6 01       	movw	r30, r12
    1f10:	84 89       	ldd	r24, Z+20	; 0x14
    1f12:	95 89       	ldd	r25, Z+21	; 0x15
    1f14:	a0 e0       	ldi	r26, 0x00	; 0
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	dc 01       	movw	r26, r24
    1f1a:	99 27       	eor	r25, r25
    1f1c:	88 27       	eor	r24, r24
    1f1e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f20:	33 8d       	ldd	r19, Z+27	; 0x1b
    1f22:	40 e0       	ldi	r20, 0x00	; 0
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	82 2b       	or	r24, r18
    1f28:	93 2b       	or	r25, r19
    1f2a:	a4 2b       	or	r26, r20
    1f2c:	b5 2b       	or	r27, r21
    1f2e:	8c 83       	std	Y+4, r24	; 0x04
    1f30:	9d 83       	std	Y+5, r25	; 0x05
    1f32:	ae 83       	std	Y+6, r26	; 0x06
    1f34:	bf 83       	std	Y+7, r27	; 0x07
    1f36:	66 cf       	rjmp	.-308    	; 0x1e04 <follow_path+0x6c>
		}
    1f38:	94 e0       	ldi	r25, 0x04	; 4
    1f3a:	b9 2e       	mov	r11, r25
	}

	return res;
}
    1f3c:	8b 2d       	mov	r24, r11
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	df 90       	pop	r13
    1f4c:	cf 90       	pop	r12
    1f4e:	bf 90       	pop	r11
    1f50:	af 90       	pop	r10
    1f52:	9f 90       	pop	r9
    1f54:	8f 90       	pop	r8
    1f56:	7f 90       	pop	r7
    1f58:	6f 90       	pop	r6
    1f5a:	08 95       	ret
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	b8 2e       	mov	r11, r24
    1f60:	ca cf       	rjmp	.-108    	; 0x1ef6 <follow_path+0x15e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    1f62:	ea 81       	ldd	r30, Y+2	; 0x02
    1f64:	fb 81       	ldd	r31, Y+3	; 0x03
    1f66:	83 85       	ldd	r24, Z+11	; 0x0b
    1f68:	88 23       	and	r24, r24
    1f6a:	59 f2       	breq	.-106    	; 0x1f02 <follow_path+0x16a>
    1f6c:	e7 cf       	rjmp	.-50     	; 0x1f3c <follow_path+0x1a4>

00001f6e <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    1f6e:	ef 92       	push	r14
    1f70:	ff 92       	push	r15
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	ac 97       	sbiw	r28, 0x2c	; 44
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	8c 01       	movw	r16, r24
    1f8c:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1f8e:	80 91 85 00 	lds	r24, 0x0085
    1f92:	90 91 86 00 	lds	r25, 0x0086
    1f96:	89 2b       	or	r24, r25
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <pf_opendir+0x30>
    1f9a:	86 e0       	ldi	r24, 0x06	; 6
    1f9c:	31 c0       	rjmp	.+98     	; 0x2000 <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	f8 01       	movw	r30, r16
    1fa4:	93 83       	std	Z+3, r25	; 0x03
    1fa6:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    1fa8:	3d e0       	ldi	r19, 0x0D	; 13
    1faa:	e3 2e       	mov	r14, r19
    1fac:	f1 2c       	mov	r15, r1
    1fae:	ec 0e       	add	r14, r28
    1fb0:	fd 1e       	adc	r15, r29
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	b7 01       	movw	r22, r14
    1fb6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    1fba:	88 23       	and	r24, r24
    1fbc:	f1 f4       	brne	.+60     	; 0x1ffa <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
    1fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc0:	88 23       	and	r24, r24
    1fc2:	c1 f0       	breq	.+48     	; 0x1ff4 <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    1fc4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fc6:	84 ff       	sbrs	r24, 4
    1fc8:	1a c0       	rjmp	.+52     	; 0x1ffe <pf_opendir+0x90>
					dj->sclust = LD_CLUST(dir);
    1fca:	f7 01       	movw	r30, r14
    1fcc:	84 89       	ldd	r24, Z+20	; 0x14
    1fce:	95 89       	ldd	r25, Z+21	; 0x15
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	99 27       	eor	r25, r25
    1fd8:	88 27       	eor	r24, r24
    1fda:	22 8d       	ldd	r18, Z+26	; 0x1a
    1fdc:	33 8d       	ldd	r19, Z+27	; 0x1b
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	82 2b       	or	r24, r18
    1fe4:	93 2b       	or	r25, r19
    1fe6:	a4 2b       	or	r26, r20
    1fe8:	b5 2b       	or	r27, r21
    1fea:	f8 01       	movw	r30, r16
    1fec:	84 83       	std	Z+4, r24	; 0x04
    1fee:	95 83       	std	Z+5, r25	; 0x05
    1ff0:	a6 83       	std	Z+6, r26	; 0x06
    1ff2:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	0e 94 9e 0a 	call	0x153c	; 0x153c <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    1ffa:	83 30       	cpi	r24, 0x03	; 3
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <pf_opendir+0x92>
    1ffe:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    2000:	ac 96       	adiw	r28, 0x2c	; 44
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	08 95       	ret

0000201a <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	ec 97       	sbiw	r28, 0x3c	; 60
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    2038:	00 91 85 00 	lds	r16, 0x0085
    203c:	10 91 86 00 	lds	r17, 0x0086


	if (!fs)						/* Check file system */
    2040:	01 15       	cp	r16, r1
    2042:	11 05       	cpc	r17, r1
    2044:	11 f4       	brne	.+4      	; 0x204a <pf_open+0x30>
    2046:	66 e0       	ldi	r22, 0x06	; 6
    2048:	40 c0       	rjmp	.+128    	; 0x20ca <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    204a:	f8 01       	movw	r30, r16
    204c:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    204e:	ce 01       	movw	r24, r28
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	98 8b       	std	Y+16, r25	; 0x10
    2054:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    2056:	6d e1       	ldi	r22, 0x1D	; 29
    2058:	e6 2e       	mov	r14, r22
    205a:	f1 2c       	mov	r15, r1
    205c:	ec 0e       	add	r14, r28
    205e:	fd 1e       	adc	r15, r29
    2060:	ce 01       	movw	r24, r28
    2062:	0d 96       	adiw	r24, 0x0d	; 13
    2064:	b7 01       	movw	r22, r14
    2066:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <follow_path>
    206a:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    206c:	88 23       	and	r24, r24
    206e:	69 f5       	brne	.+90     	; 0x20ca <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2072:	88 23       	and	r24, r24
    2074:	49 f1       	breq	.+82     	; 0x20c8 <pf_open+0xae>
    2076:	88 a5       	ldd	r24, Y+40	; 0x28
    2078:	84 fd       	sbrc	r24, 4
    207a:	26 c0       	rjmp	.+76     	; 0x20c8 <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    207c:	f7 01       	movw	r30, r14
    207e:	84 89       	ldd	r24, Z+20	; 0x14
    2080:	95 89       	ldd	r25, Z+21	; 0x15
    2082:	a0 e0       	ldi	r26, 0x00	; 0
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	dc 01       	movw	r26, r24
    2088:	99 27       	eor	r25, r25
    208a:	88 27       	eor	r24, r24
    208c:	22 8d       	ldd	r18, Z+26	; 0x1a
    208e:	33 8d       	ldd	r19, Z+27	; 0x1b
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	82 2b       	or	r24, r18
    2096:	93 2b       	or	r25, r19
    2098:	a4 2b       	or	r26, r20
    209a:	b5 2b       	or	r27, r21
    209c:	f8 01       	movw	r30, r16
    209e:	86 8f       	std	Z+30, r24	; 0x1e
    20a0:	97 8f       	std	Z+31, r25	; 0x1f
    20a2:	a0 a3       	std	Z+32, r26	; 0x20
    20a4:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    20a6:	f7 01       	movw	r30, r14
    20a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    20aa:	95 8d       	ldd	r25, Z+29	; 0x1d
    20ac:	a6 8d       	ldd	r26, Z+30	; 0x1e
    20ae:	b7 8d       	ldd	r27, Z+31	; 0x1f
    20b0:	f8 01       	movw	r30, r16
    20b2:	82 8f       	std	Z+26, r24	; 0x1a
    20b4:	93 8f       	std	Z+27, r25	; 0x1b
    20b6:	a4 8f       	std	Z+28, r26	; 0x1c
    20b8:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    20ba:	16 8a       	std	Z+22, r1	; 0x16
    20bc:	17 8a       	std	Z+23, r1	; 0x17
    20be:	10 8e       	std	Z+24, r1	; 0x18
    20c0:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	81 83       	std	Z+1, r24	; 0x01
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <pf_open+0xb0>

	return FR_OK;
    20c8:	63 e0       	ldi	r22, 0x03	; 3
}
    20ca:	86 2f       	mov	r24, r22
    20cc:	ec 96       	adiw	r28, 0x3c	; 60
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	08 95       	ret

000020e6 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    20e6:	4f 92       	push	r4
    20e8:	5f 92       	push	r5
    20ea:	6f 92       	push	r6
    20ec:	7f 92       	push	r7
    20ee:	8f 92       	push	r8
    20f0:	9f 92       	push	r9
    20f2:	af 92       	push	r10
    20f4:	bf 92       	push	r11
    20f6:	cf 92       	push	r12
    20f8:	df 92       	push	r13
    20fa:	ef 92       	push	r14
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	3c 01       	movw	r6, r24
    2108:	6b 01       	movw	r12, r22
    210a:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    210c:	c0 91 85 00 	lds	r28, 0x0085
    2110:	d0 91 86 00 	lds	r29, 0x0086


	*br = 0;
    2114:	fa 01       	movw	r30, r20
    2116:	11 82       	std	Z+1, r1	; 0x01
    2118:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    211a:	20 97       	sbiw	r28, 0x00	; 0
    211c:	11 f4       	brne	.+4      	; 0x2122 <pf_read+0x3c>
    211e:	86 e0       	ldi	r24, 0x06	; 6
    2120:	ca c0       	rjmp	.+404    	; 0x22b6 <pf_read+0x1d0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	80 fd       	sbrc	r24, 0
    2126:	02 c0       	rjmp	.+4      	; 0x212c <pf_read+0x46>
    2128:	85 e0       	ldi	r24, 0x05	; 5
    212a:	c5 c0       	rjmp	.+394    	; 0x22b6 <pf_read+0x1d0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    212c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    212e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2130:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2132:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2134:	8e 89       	ldd	r24, Y+22	; 0x16
    2136:	9f 89       	ldd	r25, Y+23	; 0x17
    2138:	a8 8d       	ldd	r26, Y+24	; 0x18
    213a:	b9 8d       	ldd	r27, Y+25	; 0x19
    213c:	28 1b       	sub	r18, r24
    213e:	39 0b       	sbc	r19, r25
    2140:	4a 0b       	sbc	r20, r26
    2142:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    2144:	cb 01       	movw	r24, r22
    2146:	a0 e0       	ldi	r26, 0x00	; 0
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	28 17       	cp	r18, r24
    214c:	39 07       	cpc	r19, r25
    214e:	4a 07       	cpc	r20, r26
    2150:	5b 07       	cpc	r21, r27
    2152:	08 f4       	brcc	.+2      	; 0x2156 <pf_read+0x70>
    2154:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    2156:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    2158:	41 2c       	mov	r4, r1
    215a:	e2 e0       	ldi	r30, 0x02	; 2
    215c:	5e 2e       	mov	r5, r30
    215e:	a3 c0       	rjmp	.+326    	; 0x22a6 <pf_read+0x1c0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    2160:	2e 89       	ldd	r18, Y+22	; 0x16
    2162:	3f 89       	ldd	r19, Y+23	; 0x17
    2164:	48 8d       	ldd	r20, Y+24	; 0x18
    2166:	59 8d       	ldd	r21, Y+25	; 0x19
    2168:	da 01       	movw	r26, r20
    216a:	c9 01       	movw	r24, r18
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	a0 70       	andi	r26, 0x00	; 0
    2170:	b0 70       	andi	r27, 0x00	; 0
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	a1 05       	cpc	r26, r1
    2176:	b1 05       	cpc	r27, r1
    2178:	09 f0       	breq	.+2      	; 0x217c <pf_read+0x96>
    217a:	60 c0       	rjmp	.+192    	; 0x223c <pf_read+0x156>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    217c:	da 01       	movw	r26, r20
    217e:	c9 01       	movw	r24, r18
    2180:	79 e0       	ldi	r23, 0x09	; 9
    2182:	b6 95       	lsr	r27
    2184:	a7 95       	ror	r26
    2186:	97 95       	ror	r25
    2188:	87 95       	ror	r24
    218a:	7a 95       	dec	r23
    218c:	d1 f7       	brne	.-12     	; 0x2182 <pf_read+0x9c>
    218e:	fa 80       	ldd	r15, Y+2	; 0x02
    2190:	fa 94       	dec	r15
    2192:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    2194:	d1 f4       	brne	.+52     	; 0x21ca <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    2196:	21 15       	cp	r18, r1
    2198:	31 05       	cpc	r19, r1
    219a:	41 05       	cpc	r20, r1
    219c:	51 05       	cpc	r21, r1
    219e:	29 f4       	brne	.+10     	; 0x21aa <pf_read+0xc4>
    21a0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    21a2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    21a4:	88 a1       	ldd	r24, Y+32	; 0x20
    21a6:	99 a1       	ldd	r25, Y+33	; 0x21
    21a8:	06 c0       	rjmp	.+12     	; 0x21b6 <pf_read+0xd0>
    21aa:	6a a1       	ldd	r22, Y+34	; 0x22
    21ac:	7b a1       	ldd	r23, Y+35	; 0x23
    21ae:	8c a1       	ldd	r24, Y+36	; 0x24
    21b0:	9d a1       	ldd	r25, Y+37	; 0x25
    21b2:	0e 94 1d 0b 	call	0x163a	; 0x163a <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    21b6:	62 30       	cpi	r22, 0x02	; 2
    21b8:	71 05       	cpc	r23, r1
    21ba:	81 05       	cpc	r24, r1
    21bc:	91 05       	cpc	r25, r1
    21be:	08 f4       	brcc	.+2      	; 0x21c2 <pf_read+0xdc>
    21c0:	78 c0       	rjmp	.+240    	; 0x22b2 <pf_read+0x1cc>
				fs->curr_clust = clst;				/* Update current cluster */
    21c2:	6a a3       	std	Y+34, r22	; 0x22
    21c4:	7b a3       	std	Y+35, r23	; 0x23
    21c6:	8c a3       	std	Y+36, r24	; 0x24
    21c8:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    21ca:	00 91 85 00 	lds	r16, 0x0085
    21ce:	10 91 86 00 	lds	r17, 0x0086


	clst -= 2;
    21d2:	2a a1       	ldd	r18, Y+34	; 0x22
    21d4:	3b a1       	ldd	r19, Y+35	; 0x23
    21d6:	4c a1       	ldd	r20, Y+36	; 0x24
    21d8:	5d a1       	ldd	r21, Y+37	; 0x25
    21da:	22 50       	subi	r18, 0x02	; 2
    21dc:	30 40       	sbci	r19, 0x00	; 0
    21de:	40 40       	sbci	r20, 0x00	; 0
    21e0:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    21e2:	f8 01       	movw	r30, r16
    21e4:	86 81       	ldd	r24, Z+6	; 0x06
    21e6:	97 81       	ldd	r25, Z+7	; 0x07
    21e8:	a0 85       	ldd	r26, Z+8	; 0x08
    21ea:	b1 85       	ldd	r27, Z+9	; 0x09
    21ec:	02 97       	sbiw	r24, 0x02	; 2
    21ee:	a1 09       	sbc	r26, r1
    21f0:	b1 09       	sbc	r27, r1
    21f2:	28 17       	cp	r18, r24
    21f4:	39 07       	cpc	r19, r25
    21f6:	4a 07       	cpc	r20, r26
    21f8:	5b 07       	cpc	r21, r27
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <pf_read+0x118>
    21fc:	5a c0       	rjmp	.+180    	; 0x22b2 <pf_read+0x1cc>
	return (DWORD)clst * fs->csize + fs->database;
    21fe:	62 81       	ldd	r22, Z+2	; 0x02
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    220a:	9b 01       	movw	r18, r22
    220c:	ac 01       	movw	r20, r24
    220e:	f8 01       	movw	r30, r16
    2210:	82 89       	ldd	r24, Z+18	; 0x12
    2212:	93 89       	ldd	r25, Z+19	; 0x13
    2214:	a4 89       	ldd	r26, Z+20	; 0x14
    2216:	b5 89       	ldd	r27, Z+21	; 0x15
    2218:	28 0f       	add	r18, r24
    221a:	39 1f       	adc	r19, r25
    221c:	4a 1f       	adc	r20, r26
    221e:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    2220:	21 15       	cp	r18, r1
    2222:	31 05       	cpc	r19, r1
    2224:	41 05       	cpc	r20, r1
    2226:	51 05       	cpc	r21, r1
    2228:	09 f4       	brne	.+2      	; 0x222c <pf_read+0x146>
    222a:	43 c0       	rjmp	.+134    	; 0x22b2 <pf_read+0x1cc>
			fs->dsect = sect + cs;
    222c:	2f 0d       	add	r18, r15
    222e:	31 1d       	adc	r19, r1
    2230:	41 1d       	adc	r20, r1
    2232:	51 1d       	adc	r21, r1
    2234:	2e a3       	std	Y+38, r18	; 0x26
    2236:	3f a3       	std	Y+39, r19	; 0x27
    2238:	48 a7       	std	Y+40, r20	; 0x28
    223a:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    223c:	2e 89       	ldd	r18, Y+22	; 0x16
    223e:	3f 89       	ldd	r19, Y+23	; 0x17
    2240:	31 70       	andi	r19, 0x01	; 1
    2242:	c2 01       	movw	r24, r4
    2244:	82 1b       	sub	r24, r18
    2246:	93 0b       	sbc	r25, r19
    2248:	76 01       	movw	r14, r12
    224a:	8c 15       	cp	r24, r12
    224c:	9d 05       	cpc	r25, r13
    224e:	08 f4       	brcc	.+2      	; 0x2252 <pf_read+0x16c>
    2250:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    2252:	61 14       	cp	r6, r1
    2254:	71 04       	cpc	r7, r1
    2256:	19 f4       	brne	.+6      	; 0x225e <pf_read+0x178>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	01 c0       	rjmp	.+2      	; 0x2260 <pf_read+0x17a>
    225e:	c5 01       	movw	r24, r10
    2260:	4e a1       	ldd	r20, Y+38	; 0x26
    2262:	5f a1       	ldd	r21, Y+39	; 0x27
    2264:	68 a5       	ldd	r22, Y+40	; 0x28
    2266:	79 a5       	ldd	r23, Y+41	; 0x29
    2268:	87 01       	movw	r16, r14
    226a:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
		if (dr) goto fr_abort;
    226e:	88 23       	and	r24, r24
    2270:	01 f5       	brne	.+64     	; 0x22b2 <pf_read+0x1cc>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    2272:	c7 01       	movw	r24, r14
    2274:	a0 e0       	ldi	r26, 0x00	; 0
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	2e 89       	ldd	r18, Y+22	; 0x16
    227a:	3f 89       	ldd	r19, Y+23	; 0x17
    227c:	48 8d       	ldd	r20, Y+24	; 0x18
    227e:	59 8d       	ldd	r21, Y+25	; 0x19
    2280:	28 0f       	add	r18, r24
    2282:	39 1f       	adc	r19, r25
    2284:	4a 1f       	adc	r20, r26
    2286:	5b 1f       	adc	r21, r27
    2288:	2e 8b       	std	Y+22, r18	; 0x16
    228a:	3f 8b       	std	Y+23, r19	; 0x17
    228c:	48 8f       	std	Y+24, r20	; 0x18
    228e:	59 8f       	std	Y+25, r21	; 0x19
    2290:	ae 0c       	add	r10, r14
    2292:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    2294:	ce 18       	sub	r12, r14
    2296:	df 08       	sbc	r13, r15
    2298:	f4 01       	movw	r30, r8
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	8e 0d       	add	r24, r14
    22a0:	9f 1d       	adc	r25, r15
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    22a6:	c1 14       	cp	r12, r1
    22a8:	d1 04       	cpc	r13, r1
    22aa:	09 f0       	breq	.+2      	; 0x22ae <pf_read+0x1c8>
    22ac:	59 cf       	rjmp	.-334    	; 0x2160 <pf_read+0x7a>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <pf_read+0x1d0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    22b2:	19 82       	std	Y+1, r1	; 0x01
    22b4:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	bf 90       	pop	r11
    22c8:	af 90       	pop	r10
    22ca:	9f 90       	pop	r9
    22cc:	8f 90       	pop	r8
    22ce:	7f 90       	pop	r7
    22d0:	6f 90       	pop	r6
    22d2:	5f 90       	pop	r5
    22d4:	4f 90       	pop	r4
    22d6:	08 95       	ret

000022d8 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    22d8:	af 92       	push	r10
    22da:	bf 92       	push	r11
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	b8 2e       	mov	r11, r24
    22ee:	a9 2e       	mov	r10, r25
    22f0:	6a 01       	movw	r12, r20
    22f2:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    22f4:	2e ef       	ldi	r18, 0xFE	; 254
    22f6:	31 e0       	ldi	r19, 0x01	; 1
    22f8:	02 e0       	ldi	r16, 0x02	; 2
    22fa:	10 e0       	ldi	r17, 0x00	; 0
    22fc:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    2300:	88 23       	and	r24, r24
    2302:	11 f0       	breq	.+4      	; 0x2308 <check_fs+0x30>
    2304:	23 e0       	ldi	r18, 0x03	; 3
    2306:	33 c0       	rjmp	.+102    	; 0x236e <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    2308:	cb 2d       	mov	r28, r11
    230a:	da 2d       	mov	r29, r10
    230c:	88 81       	ld	r24, Y
    230e:	99 81       	ldd	r25, Y+1	; 0x01
    2310:	85 55       	subi	r24, 0x55	; 85
    2312:	9a 4a       	sbci	r25, 0xAA	; 170
    2314:	11 f0       	breq	.+4      	; 0x231a <check_fs+0x42>
    2316:	22 e0       	ldi	r18, 0x02	; 2
    2318:	2a c0       	rjmp	.+84     	; 0x236e <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    231a:	8b 2d       	mov	r24, r11
    231c:	9a 2d       	mov	r25, r10
    231e:	b7 01       	movw	r22, r14
    2320:	a6 01       	movw	r20, r12
    2322:	26 e3       	ldi	r18, 0x36	; 54
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	02 e0       	ldi	r16, 0x02	; 2
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    232e:	88 23       	and	r24, r24
    2330:	39 f4       	brne	.+14     	; 0x2340 <check_fs+0x68>
    2332:	88 81       	ld	r24, Y
    2334:	99 81       	ldd	r25, Y+1	; 0x01
    2336:	86 54       	subi	r24, 0x46	; 70
    2338:	91 44       	sbci	r25, 0x41	; 65
    233a:	11 f4       	brne	.+4      	; 0x2340 <check_fs+0x68>
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	17 c0       	rjmp	.+46     	; 0x236e <check_fs+0x96>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    2340:	8b 2d       	mov	r24, r11
    2342:	9a 2d       	mov	r25, r10
    2344:	b7 01       	movw	r22, r14
    2346:	a6 01       	movw	r20, r12
    2348:	22 e5       	ldi	r18, 0x52	; 82
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	02 e0       	ldi	r16, 0x02	; 2
    234e:	10 e0       	ldi	r17, 0x00	; 0
    2350:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    2354:	88 23       	and	r24, r24
    2356:	11 f0       	breq	.+4      	; 0x235c <check_fs+0x84>
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	09 c0       	rjmp	.+18     	; 0x236e <check_fs+0x96>
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	88 81       	ld	r24, Y
    2360:	99 81       	ldd	r25, Y+1	; 0x01
    2362:	86 54       	subi	r24, 0x46	; 70
    2364:	91 44       	sbci	r25, 0x41	; 65
    2366:	09 f4       	brne	.+2      	; 0x236a <check_fs+0x92>
    2368:	21 e0       	ldi	r18, 0x01	; 1
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    236e:	82 2f       	mov	r24, r18
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	ff 90       	pop	r15
    237a:	ef 90       	pop	r14
    237c:	df 90       	pop	r13
    237e:	cf 90       	pop	r12
    2380:	bf 90       	pop	r11
    2382:	af 90       	pop	r10
    2384:	08 95       	ret

00002386 <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    2386:	4f 92       	push	r4
    2388:	5f 92       	push	r5
    238a:	6f 92       	push	r6
    238c:	7f 92       	push	r7
    238e:	8f 92       	push	r8
    2390:	9f 92       	push	r9
    2392:	af 92       	push	r10
    2394:	bf 92       	push	r11
    2396:	cf 92       	push	r12
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	fc 01       	movw	r30, r24
    23a8:	5b 01       	movw	r10, r22
    23aa:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    23ac:	c0 91 85 00 	lds	r28, 0x0085
    23b0:	d0 91 86 00 	lds	r29, 0x0086


	*bw = 0;
    23b4:	da 01       	movw	r26, r20
    23b6:	1d 92       	st	X+, r1
    23b8:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    23ba:	20 97       	sbiw	r28, 0x00	; 0
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <pf_write+0x3c>
    23be:	86 e0       	ldi	r24, 0x06	; 6
    23c0:	fd c0       	rjmp	.+506    	; 0x25bc <pf_write+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	80 fd       	sbrc	r24, 0
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <pf_write+0x48>
    23ca:	85 e0       	ldi	r24, 0x05	; 5
    23cc:	f7 c0       	rjmp	.+494    	; 0x25bc <pf_write+0x236>
    23ce:	80 74       	andi	r24, 0x40	; 64
    23d0:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    23d2:	61 15       	cp	r22, r1
    23d4:	71 05       	cpc	r23, r1
    23d6:	89 f4       	brne	.+34     	; 0x23fa <pf_write+0x74>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    23d8:	89 2b       	or	r24, r25
    23da:	59 f0       	breq	.+22     	; 0x23f2 <pf_write+0x6c>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	70 e0       	ldi	r23, 0x00	; 0
    23e8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <disk_writep>
    23ec:	88 23       	and	r24, r24
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <pf_write+0x6c>
    23f0:	e3 c0       	rjmp	.+454    	; 0x25b8 <pf_write+0x232>
		fs->flag &= ~FA__WIP;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	8f 7b       	andi	r24, 0xBF	; 191
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	dd c0       	rjmp	.+442    	; 0x25b4 <pf_write+0x22e>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    23fa:	89 2b       	or	r24, r25
    23fc:	51 f4       	brne	.+20     	; 0x2412 <pf_write+0x8c>
			fs->fptr &= 0xFFFFFE00;
    23fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2400:	9f 89       	ldd	r25, Y+23	; 0x17
    2402:	a8 8d       	ldd	r26, Y+24	; 0x18
    2404:	b9 8d       	ldd	r27, Y+25	; 0x19
    2406:	80 70       	andi	r24, 0x00	; 0
    2408:	9e 7f       	andi	r25, 0xFE	; 254
    240a:	8e 8b       	std	Y+22, r24	; 0x16
    240c:	9f 8b       	std	Y+23, r25	; 0x17
    240e:	a8 8f       	std	Y+24, r26	; 0x18
    2410:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    2412:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2414:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2416:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2418:	5d 8d       	ldd	r21, Y+29	; 0x1d
    241a:	8e 89       	ldd	r24, Y+22	; 0x16
    241c:	9f 89       	ldd	r25, Y+23	; 0x17
    241e:	a8 8d       	ldd	r26, Y+24	; 0x18
    2420:	b9 8d       	ldd	r27, Y+25	; 0x19
    2422:	28 1b       	sub	r18, r24
    2424:	39 0b       	sbc	r19, r25
    2426:	4a 0b       	sbc	r20, r26
    2428:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    242a:	c5 01       	movw	r24, r10
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	28 17       	cp	r18, r24
    2432:	39 07       	cpc	r19, r25
    2434:	4a 07       	cpc	r20, r26
    2436:	5b 07       	cpc	r21, r27
    2438:	08 f4       	brcc	.+2      	; 0x243c <pf_write+0xb6>
    243a:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    243c:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    243e:	41 2c       	mov	r4, r1
    2440:	a2 e0       	ldi	r26, 0x02	; 2
    2442:	5a 2e       	mov	r5, r26
    2444:	b3 c0       	rjmp	.+358    	; 0x25ac <pf_write+0x226>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    2446:	2e 89       	ldd	r18, Y+22	; 0x16
    2448:	3f 89       	ldd	r19, Y+23	; 0x17
    244a:	48 8d       	ldd	r20, Y+24	; 0x18
    244c:	59 8d       	ldd	r21, Y+25	; 0x19
    244e:	c9 01       	movw	r24, r18
    2450:	91 70       	andi	r25, 0x01	; 1
    2452:	89 2b       	or	r24, r25
    2454:	09 f0       	breq	.+2      	; 0x2458 <pf_write+0xd2>
    2456:	6c c0       	rjmp	.+216    	; 0x2530 <pf_write+0x1aa>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    2458:	da 01       	movw	r26, r20
    245a:	c9 01       	movw	r24, r18
    245c:	f9 e0       	ldi	r31, 0x09	; 9
    245e:	b6 95       	lsr	r27
    2460:	a7 95       	ror	r26
    2462:	97 95       	ror	r25
    2464:	87 95       	ror	r24
    2466:	fa 95       	dec	r31
    2468:	d1 f7       	brne	.-12     	; 0x245e <pf_write+0xd8>
    246a:	fa 80       	ldd	r15, Y+2	; 0x02
    246c:	fa 94       	dec	r15
    246e:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    2470:	d1 f4       	brne	.+52     	; 0x24a6 <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    2472:	21 15       	cp	r18, r1
    2474:	31 05       	cpc	r19, r1
    2476:	41 05       	cpc	r20, r1
    2478:	51 05       	cpc	r21, r1
    247a:	29 f4       	brne	.+10     	; 0x2486 <pf_write+0x100>
    247c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    247e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2480:	88 a1       	ldd	r24, Y+32	; 0x20
    2482:	99 a1       	ldd	r25, Y+33	; 0x21
    2484:	06 c0       	rjmp	.+12     	; 0x2492 <pf_write+0x10c>
    2486:	6a a1       	ldd	r22, Y+34	; 0x22
    2488:	7b a1       	ldd	r23, Y+35	; 0x23
    248a:	8c a1       	ldd	r24, Y+36	; 0x24
    248c:	9d a1       	ldd	r25, Y+37	; 0x25
    248e:	0e 94 1d 0b 	call	0x163a	; 0x163a <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    2492:	62 30       	cpi	r22, 0x02	; 2
    2494:	71 05       	cpc	r23, r1
    2496:	81 05       	cpc	r24, r1
    2498:	91 05       	cpc	r25, r1
    249a:	08 f4       	brcc	.+2      	; 0x249e <pf_write+0x118>
    249c:	8d c0       	rjmp	.+282    	; 0x25b8 <pf_write+0x232>
				fs->curr_clust = clst;				/* Update current cluster */
    249e:	6a a3       	std	Y+34, r22	; 0x22
    24a0:	7b a3       	std	Y+35, r23	; 0x23
    24a2:	8c a3       	std	Y+36, r24	; 0x24
    24a4:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    24a6:	00 91 85 00 	lds	r16, 0x0085
    24aa:	10 91 86 00 	lds	r17, 0x0086


	clst -= 2;
    24ae:	2a a1       	ldd	r18, Y+34	; 0x22
    24b0:	3b a1       	ldd	r19, Y+35	; 0x23
    24b2:	4c a1       	ldd	r20, Y+36	; 0x24
    24b4:	5d a1       	ldd	r21, Y+37	; 0x25
    24b6:	22 50       	subi	r18, 0x02	; 2
    24b8:	30 40       	sbci	r19, 0x00	; 0
    24ba:	40 40       	sbci	r20, 0x00	; 0
    24bc:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    24be:	f8 01       	movw	r30, r16
    24c0:	86 81       	ldd	r24, Z+6	; 0x06
    24c2:	97 81       	ldd	r25, Z+7	; 0x07
    24c4:	a0 85       	ldd	r26, Z+8	; 0x08
    24c6:	b1 85       	ldd	r27, Z+9	; 0x09
    24c8:	02 97       	sbiw	r24, 0x02	; 2
    24ca:	a1 09       	sbc	r26, r1
    24cc:	b1 09       	sbc	r27, r1
    24ce:	28 17       	cp	r18, r24
    24d0:	39 07       	cpc	r19, r25
    24d2:	4a 07       	cpc	r20, r26
    24d4:	5b 07       	cpc	r21, r27
    24d6:	08 f0       	brcs	.+2      	; 0x24da <pf_write+0x154>
    24d8:	6f c0       	rjmp	.+222    	; 0x25b8 <pf_write+0x232>
	return (DWORD)clst * fs->csize + fs->database;
    24da:	62 81       	ldd	r22, Z+2	; 0x02
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    24e6:	9b 01       	movw	r18, r22
    24e8:	ac 01       	movw	r20, r24
    24ea:	f8 01       	movw	r30, r16
    24ec:	82 89       	ldd	r24, Z+18	; 0x12
    24ee:	93 89       	ldd	r25, Z+19	; 0x13
    24f0:	a4 89       	ldd	r26, Z+20	; 0x14
    24f2:	b5 89       	ldd	r27, Z+21	; 0x15
    24f4:	28 0f       	add	r18, r24
    24f6:	39 1f       	adc	r19, r25
    24f8:	4a 1f       	adc	r20, r26
    24fa:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    24fc:	21 15       	cp	r18, r1
    24fe:	31 05       	cpc	r19, r1
    2500:	41 05       	cpc	r20, r1
    2502:	51 05       	cpc	r21, r1
    2504:	09 f4       	brne	.+2      	; 0x2508 <pf_write+0x182>
    2506:	58 c0       	rjmp	.+176    	; 0x25b8 <pf_write+0x232>
			fs->dsect = sect + cs;
    2508:	ba 01       	movw	r22, r20
    250a:	a9 01       	movw	r20, r18
    250c:	4f 0d       	add	r20, r15
    250e:	51 1d       	adc	r21, r1
    2510:	61 1d       	adc	r22, r1
    2512:	71 1d       	adc	r23, r1
    2514:	4e a3       	std	Y+38, r20	; 0x26
    2516:	5f a3       	std	Y+39, r21	; 0x27
    2518:	68 a7       	std	Y+40, r22	; 0x28
    251a:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 69 09 	call	0x12d2	; 0x12d2 <disk_writep>
    2524:	88 23       	and	r24, r24
    2526:	09 f0       	breq	.+2      	; 0x252a <pf_write+0x1a4>
    2528:	47 c0       	rjmp	.+142    	; 0x25b8 <pf_write+0x232>
			fs->flag |= FA__WIP;
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	80 64       	ori	r24, 0x40	; 64
    252e:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    2530:	8e 89       	ldd	r24, Y+22	; 0x16
    2532:	9f 89       	ldd	r25, Y+23	; 0x17
    2534:	91 70       	andi	r25, 0x01	; 1
    2536:	92 01       	movw	r18, r4
    2538:	28 1b       	sub	r18, r24
    253a:	39 0b       	sbc	r19, r25
    253c:	65 01       	movw	r12, r10
    253e:	2a 15       	cp	r18, r10
    2540:	3b 05       	cpc	r19, r11
    2542:	08 f4       	brcc	.+2      	; 0x2546 <pf_write+0x1c0>
    2544:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    2546:	76 01       	movw	r14, r12
    2548:	00 e0       	ldi	r16, 0x00	; 0
    254a:	10 e0       	ldi	r17, 0x00	; 0
    254c:	c4 01       	movw	r24, r8
    254e:	b8 01       	movw	r22, r16
    2550:	a7 01       	movw	r20, r14
    2552:	0e 94 69 09 	call	0x12d2	; 0x12d2 <disk_writep>
    2556:	88 23       	and	r24, r24
    2558:	79 f5       	brne	.+94     	; 0x25b8 <pf_write+0x232>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    255a:	8e 89       	ldd	r24, Y+22	; 0x16
    255c:	9f 89       	ldd	r25, Y+23	; 0x17
    255e:	a8 8d       	ldd	r26, Y+24	; 0x18
    2560:	b9 8d       	ldd	r27, Y+25	; 0x19
    2562:	8e 0d       	add	r24, r14
    2564:	9f 1d       	adc	r25, r15
    2566:	a0 1f       	adc	r26, r16
    2568:	b1 1f       	adc	r27, r17
    256a:	9c 01       	movw	r18, r24
    256c:	8e 8b       	std	Y+22, r24	; 0x16
    256e:	9f 8b       	std	Y+23, r25	; 0x17
    2570:	a8 8f       	std	Y+24, r26	; 0x18
    2572:	b9 8f       	std	Y+25, r27	; 0x19
		btw -= wcnt; *bw += wcnt;
    2574:	d3 01       	movw	r26, r6
    2576:	8d 91       	ld	r24, X+
    2578:	9c 91       	ld	r25, X
    257a:	11 97       	sbiw	r26, 0x01	; 1
    257c:	8c 0d       	add	r24, r12
    257e:	9d 1d       	adc	r25, r13
    2580:	8d 93       	st	X+, r24
    2582:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    2584:	31 70       	andi	r19, 0x01	; 1
    2586:	23 2b       	or	r18, r19
    2588:	69 f4       	brne	.+26     	; 0x25a4 <pf_write+0x21e>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	0e 94 69 09 	call	0x12d2	; 0x12d2 <disk_writep>
    259a:	88 23       	and	r24, r24
    259c:	69 f4       	brne	.+26     	; 0x25b8 <pf_write+0x232>
			fs->flag &= ~FA__WIP;
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	8f 7b       	andi	r24, 0xBF	; 191
    25a2:	89 83       	std	Y+1, r24	; 0x01
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    25a4:	8c 0c       	add	r8, r12
    25a6:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    25a8:	ac 18       	sub	r10, r12
    25aa:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    25ac:	a1 14       	cp	r10, r1
    25ae:	b1 04       	cpc	r11, r1
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <pf_write+0x22e>
    25b2:	49 cf       	rjmp	.-366    	; 0x2446 <pf_write+0xc0>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <pf_write+0x236>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    25b8:	19 82       	std	Y+1, r1	; 0x01
    25ba:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	df 90       	pop	r13
    25ca:	cf 90       	pop	r12
    25cc:	bf 90       	pop	r11
    25ce:	af 90       	pop	r10
    25d0:	9f 90       	pop	r9
    25d2:	8f 90       	pop	r8
    25d4:	7f 90       	pop	r7
    25d6:	6f 90       	pop	r6
    25d8:	5f 90       	pop	r5
    25da:	4f 90       	pop	r4
    25dc:	08 95       	ret

000025de <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    25de:	6f 92       	push	r6
    25e0:	7f 92       	push	r7
    25e2:	8f 92       	push	r8
    25e4:	9f 92       	push	r9
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	cf 92       	push	r12
    25ec:	df 92       	push	r13
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	a4 97       	sbiw	r28, 0x24	; 36
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    260c:	10 92 86 00 	sts	0x0086, r1
    2610:	10 92 85 00 	sts	0x0085, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	09 f4       	brne	.+2      	; 0x261a <pf_mount+0x3c>
    2618:	ec c0       	rjmp	.+472    	; 0x27f2 <pf_mount+0x214>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    261a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <disk_initialize>
    261e:	80 ff       	sbrs	r24, 0
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <pf_mount+0x48>
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	eb c0       	rjmp	.+470    	; 0x27fc <pf_mount+0x21e>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    2626:	4e 01       	movw	r8, r28
    2628:	08 94       	sec
    262a:	81 1c       	adc	r8, r1
    262c:	91 1c       	adc	r9, r1
    262e:	c4 01       	movw	r24, r8
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	21 f0       	breq	.+8      	; 0x2648 <pf_mount+0x6a>
    2640:	cc 24       	eor	r12, r12
    2642:	dd 24       	eor	r13, r13
    2644:	76 01       	movw	r14, r12
    2646:	1b c0       	rjmp	.+54     	; 0x267e <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    2648:	c4 01       	movw	r24, r8
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	70 e0       	ldi	r23, 0x00	; 0
    2652:	2e eb       	ldi	r18, 0xBE	; 190
    2654:	31 e0       	ldi	r19, 0x01	; 1
    2656:	00 e1       	ldi	r16, 0x10	; 16
    2658:	10 e0       	ldi	r17, 0x00	; 0
    265a:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    265e:	88 23       	and	r24, r24
    2660:	09 f0       	breq	.+2      	; 0x2664 <pf_mount+0x86>
    2662:	c9 c0       	rjmp	.+402    	; 0x27f6 <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	88 23       	and	r24, r24
    2668:	09 f4       	brne	.+2      	; 0x266c <pf_mount+0x8e>
    266a:	c7 c0       	rjmp	.+398    	; 0x27fa <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    266c:	c9 84       	ldd	r12, Y+9	; 0x09
    266e:	da 84       	ldd	r13, Y+10	; 0x0a
    2670:	eb 84       	ldd	r14, Y+11	; 0x0b
    2672:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    2674:	c4 01       	movw	r24, r8
    2676:	b7 01       	movw	r22, r14
    2678:	a6 01       	movw	r20, r12
    267a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    267e:	83 30       	cpi	r24, 0x03	; 3
    2680:	09 f4       	brne	.+2      	; 0x2684 <pf_mount+0xa6>
    2682:	b9 c0       	rjmp	.+370    	; 0x27f6 <pf_mount+0x218>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    2684:	88 23       	and	r24, r24
    2686:	09 f0       	breq	.+2      	; 0x268a <pf_mount+0xac>
    2688:	b8 c0       	rjmp	.+368    	; 0x27fa <pf_mount+0x21c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    268a:	ce 01       	movw	r24, r28
    268c:	01 96       	adiw	r24, 0x01	; 1
    268e:	b7 01       	movw	r22, r14
    2690:	a6 01       	movw	r20, r12
    2692:	2d e0       	ldi	r18, 0x0D	; 13
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	04 e2       	ldi	r16, 0x24	; 36
    2698:	10 e0       	ldi	r17, 0x00	; 0
    269a:	0e 94 15 09 	call	0x122a	; 0x122a <disk_readp>
    269e:	88 23       	and	r24, r24
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <pf_mount+0xc6>
    26a2:	a9 c0       	rjmp	.+338    	; 0x27f6 <pf_mount+0x218>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    26a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a8:	bc 01       	movw	r22, r24
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    26ae:	61 15       	cp	r22, r1
    26b0:	71 05       	cpc	r23, r1
    26b2:	81 05       	cpc	r24, r1
    26b4:	91 05       	cpc	r25, r1
    26b6:	21 f4       	brne	.+8      	; 0x26c0 <pf_mount+0xe2>
    26b8:	68 8d       	ldd	r22, Y+24	; 0x18
    26ba:	79 8d       	ldd	r23, Y+25	; 0x19
    26bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26be:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    26c0:	2c 81       	ldd	r18, Y+4	; 0x04
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    26cc:	3b 01       	movw	r6, r22
    26ce:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	9b 81       	ldd	r25, Y+3	; 0x03
    26d4:	a0 e0       	ldi	r26, 0x00	; 0
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	c8 0e       	add	r12, r24
    26da:	d9 1e       	adc	r13, r25
    26dc:	ea 1e       	adc	r14, r26
    26de:	fb 1e       	adc	r15, r27
    26e0:	f5 01       	movw	r30, r10
    26e2:	c2 86       	std	Z+10, r12	; 0x0a
    26e4:	d3 86       	std	Z+11, r13	; 0x0b
    26e6:	e4 86       	std	Z+12, r14	; 0x0c
    26e8:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    26ee:	2d 81       	ldd	r18, Y+5	; 0x05
    26f0:	3e 81       	ldd	r19, Y+6	; 0x06
    26f2:	35 83       	std	Z+5, r19	; 0x05
    26f4:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    26f6:	8f 81       	ldd	r24, Y+7	; 0x07
    26f8:	98 85       	ldd	r25, Y+8	; 0x08
    26fa:	7c 01       	movw	r14, r24
    26fc:	00 e0       	ldi	r16, 0x00	; 0
    26fe:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    2700:	e1 14       	cp	r14, r1
    2702:	f1 04       	cpc	r15, r1
    2704:	01 05       	cpc	r16, r1
    2706:	11 05       	cpc	r17, r1
    2708:	21 f4       	brne	.+8      	; 0x2712 <pf_mount+0x134>
    270a:	ec 88       	ldd	r14, Y+20	; 0x14
    270c:	fd 88       	ldd	r15, Y+21	; 0x15
    270e:	0e 89       	ldd	r16, Y+22	; 0x16
    2710:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e8 1a       	sub	r14, r24
    271c:	f9 0a       	sbc	r15, r25
    271e:	0a 0b       	sbc	r16, r26
    2720:	1b 0b       	sbc	r17, r27
    2722:	e6 18       	sub	r14, r6
    2724:	f7 08       	sbc	r15, r7
    2726:	08 09       	sbc	r16, r8
    2728:	19 09       	sbc	r17, r9
    272a:	84 e0       	ldi	r24, 0x04	; 4
    272c:	36 95       	lsr	r19
    272e:	27 95       	ror	r18
    2730:	8a 95       	dec	r24
    2732:	e1 f7       	brne	.-8      	; 0x272c <pf_mount+0x14e>
    2734:	c9 01       	movw	r24, r18
    2736:	a0 e0       	ldi	r26, 0x00	; 0
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e8 1a       	sub	r14, r24
    273c:	f9 0a       	sbc	r15, r25
    273e:	0a 0b       	sbc	r16, r26
    2740:	1b 0b       	sbc	r17, r27
    2742:	f5 01       	movw	r30, r10
    2744:	22 81       	ldd	r18, Z+2	; 0x02
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	c8 01       	movw	r24, r16
    274e:	b7 01       	movw	r22, r14
    2750:	0e 94 df 14 	call	0x29be	; 0x29be <__udivmodsi4>
    2754:	2e 5f       	subi	r18, 0xFE	; 254
    2756:	3f 4f       	sbci	r19, 0xFF	; 255
    2758:	4f 4f       	sbci	r20, 0xFF	; 255
    275a:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    275c:	f5 01       	movw	r30, r10
    275e:	26 83       	std	Z+6, r18	; 0x06
    2760:	37 83       	std	Z+7, r19	; 0x07
    2762:	40 87       	std	Z+8, r20	; 0x08
    2764:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    2766:	27 3f       	cpi	r18, 0xF7	; 247
    2768:	ff e0       	ldi	r31, 0x0F	; 15
    276a:	3f 07       	cpc	r19, r31
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	4f 07       	cpc	r20, r31
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	5f 07       	cpc	r21, r31
    2774:	10 f4       	brcc	.+4      	; 0x277a <pf_mount+0x19c>
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	01 c0       	rjmp	.+2      	; 0x277c <pf_mount+0x19e>
    277a:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    277c:	27 5f       	subi	r18, 0xF7	; 247
    277e:	3f 4f       	sbci	r19, 0xFF	; 255
    2780:	40 40       	sbci	r20, 0x00	; 0
    2782:	50 40       	sbci	r21, 0x00	; 0
    2784:	08 f0       	brcs	.+2      	; 0x2788 <pf_mount+0x1aa>
    2786:	83 e0       	ldi	r24, 0x03	; 3
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    2788:	f5 01       	movw	r30, r10
    278a:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    278c:	83 30       	cpi	r24, 0x03	; 3
    278e:	29 f4       	brne	.+10     	; 0x279a <pf_mount+0x1bc>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    2790:	88 a1       	ldd	r24, Y+32	; 0x20
    2792:	99 a1       	ldd	r25, Y+33	; 0x21
    2794:	aa a1       	ldd	r26, Y+34	; 0x22
    2796:	bb a1       	ldd	r27, Y+35	; 0x23
    2798:	09 c0       	rjmp	.+18     	; 0x27ac <pf_mount+0x1ce>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    279a:	f5 01       	movw	r30, r10
    279c:	82 85       	ldd	r24, Z+10	; 0x0a
    279e:	93 85       	ldd	r25, Z+11	; 0x0b
    27a0:	a4 85       	ldd	r26, Z+12	; 0x0c
    27a2:	b5 85       	ldd	r27, Z+13	; 0x0d
    27a4:	86 0d       	add	r24, r6
    27a6:	97 1d       	adc	r25, r7
    27a8:	a8 1d       	adc	r26, r8
    27aa:	b9 1d       	adc	r27, r9
    27ac:	86 87       	std	Z+14, r24	; 0x0e
    27ae:	97 87       	std	Z+15, r25	; 0x0f
    27b0:	a0 8b       	std	Z+16, r26	; 0x10
    27b2:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    27b4:	f5 01       	movw	r30, r10
    27b6:	84 81       	ldd	r24, Z+4	; 0x04
    27b8:	95 81       	ldd	r25, Z+5	; 0x05
    27ba:	b4 e0       	ldi	r27, 0x04	; 4
    27bc:	96 95       	lsr	r25
    27be:	87 95       	ror	r24
    27c0:	ba 95       	dec	r27
    27c2:	e1 f7       	brne	.-8      	; 0x27bc <pf_mount+0x1de>
    27c4:	a0 e0       	ldi	r26, 0x00	; 0
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	22 85       	ldd	r18, Z+10	; 0x0a
    27ca:	33 85       	ldd	r19, Z+11	; 0x0b
    27cc:	44 85       	ldd	r20, Z+12	; 0x0c
    27ce:	55 85       	ldd	r21, Z+13	; 0x0d
    27d0:	82 0f       	add	r24, r18
    27d2:	93 1f       	adc	r25, r19
    27d4:	a4 1f       	adc	r26, r20
    27d6:	b5 1f       	adc	r27, r21
    27d8:	86 0d       	add	r24, r6
    27da:	97 1d       	adc	r25, r7
    27dc:	a8 1d       	adc	r26, r8
    27de:	b9 1d       	adc	r27, r9
    27e0:	82 8b       	std	Z+18, r24	; 0x12
    27e2:	93 8b       	std	Z+19, r25	; 0x13
    27e4:	a4 8b       	std	Z+20, r26	; 0x14
    27e6:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    27e8:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    27ea:	b0 92 86 00 	sts	0x0086, r11
    27ee:	a0 92 85 00 	sts	0x0085, r10
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	03 c0       	rjmp	.+6      	; 0x27fc <pf_mount+0x21e>

	return FR_OK;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <pf_mount+0x21e>
    27fa:	87 e0       	ldi	r24, 0x07	; 7
}
    27fc:	a4 96       	adiw	r28, 0x24	; 36
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	ff 90       	pop	r15
    2812:	ef 90       	pop	r14
    2814:	df 90       	pop	r13
    2816:	cf 90       	pop	r12
    2818:	bf 90       	pop	r11
    281a:	af 90       	pop	r10
    281c:	9f 90       	pop	r9
    281e:	8f 90       	pop	r8
    2820:	7f 90       	pop	r7
    2822:	6f 90       	pop	r6
    2824:	08 95       	ret

00002826 <TOUCH_Reset>:
	
	char temp;
	
	// Init port
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);		// Disable CS
    2826:	c4 9a       	sbi	0x18, 4	; 24
	TOUCH_CS_DDR |= (1<< TOUCH_CS_BIT);		// Turns on CS pin as output
    2828:	bc 9a       	sbi	0x17, 4	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_SCK_BIT);		// Set as output
    282a:	bf 9a       	sbi	0x17, 7	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_MOSI_BIT);		// Set as output
    282c:	bd 9a       	sbi	0x17, 5	; 23
	TOUCH_SPI_PORT |= (1<< TOUCH_MISO_BIT);	// Internal pull up MISO
    282e:	c6 9a       	sbi	0x18, 6	; 24

	// Init spi as master
	//
	SPCR = (1<< SPE) | (1<< MSTR);				// Initialize SPI port every /128 clock
    2830:	80 e5       	ldi	r24, 0x50	; 80
    2832:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<< SPR0) | (1<< SPR1);
    2834:	8d b1       	in	r24, 0x0d	; 13
    2836:	83 60       	ori	r24, 0x03	; 3
    2838:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00;
    283a:	1e b8       	out	0x0e, r1	; 14
	temp = SPSR;								// Clear interrupt flag	
    283c:	8e b1       	in	r24, 0x0e	; 14
}
    283e:	08 95       	ret

00002840 <TOUCH_Read>:

////////////////////////
//
// TOUCH_Read(&x, &y);
//
void TOUCH_Read (unsigned int *x, unsigned int *y) {
    2840:	fc 01       	movw	r30, r24
    2842:	db 01       	movw	r26, r22
	
	unsigned char buf_data[4];

	// Enable touch screen CS
	//
	TOUCH_CS_PORT &= ~(1<< TOUCH_CS_BIT);
    2844:	c4 98       	cbi	0x18, 4	; 24
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2846:	80 e9       	ldi	r24, 0x90	; 144
    2848:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    284a:	77 9b       	sbis	0x0e, 7	; 14
    284c:	fe cf       	rjmp	.-4      	; 0x284a <TOUCH_Read+0xa>
	return (SPDR);						// get data
    284e:	8f b1       	in	r24, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2850:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    2852:	77 9b       	sbis	0x0e, 7	; 14
    2854:	fe cf       	rjmp	.-4      	; 0x2852 <TOUCH_Read+0x12>
	return (SPDR);						// get data
    2856:	9f b1       	in	r25, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2858:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    285a:	77 9b       	sbis	0x0e, 7	; 14
    285c:	fe cf       	rjmp	.-4      	; 0x285a <TOUCH_Read+0x1a>
	return (SPDR);						// get data
    285e:	2f b1       	in	r18, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2860:	80 ed       	ldi	r24, 0xD0	; 208
    2862:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    2864:	77 9b       	sbis	0x0e, 7	; 14
    2866:	fe cf       	rjmp	.-4      	; 0x2864 <TOUCH_Read+0x24>
	return (SPDR);						// get data
    2868:	8f b1       	in	r24, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    286a:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    286c:	77 9b       	sbis	0x0e, 7	; 14
    286e:	fe cf       	rjmp	.-4      	; 0x286c <TOUCH_Read+0x2c>
	return (SPDR);						// get data
    2870:	6f b1       	in	r22, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2872:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    2874:	77 9b       	sbis	0x0e, 7	; 14
    2876:	fe cf       	rjmp	.-4      	; 0x2874 <TOUCH_Read+0x34>
	return (SPDR);						// get data
    2878:	4f b1       	in	r20, 0x0f	; 15
	buf_data[2] = TOUCH_ReadADC(TOUCH_READ);	//Read ADC data Y-Position (7-bit byte High) data: 0ddddddd (bit11-bit5)
	buf_data[3] = TOUCH_ReadADC(TOUCH_READ);	//Read ADC data Y-Position (5-bit byte Low)  data: ddddd000 (bit)

	// Disable touch screen CS
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);
    287a:	c4 9a       	sbi	0x18, 4	; 24

	// Calculate
	//
	*x  = (unsigned int)buf_data[0] << 5;	// Shift 7 bit High
	*x |= (unsigned int)buf_data[1] >> 3;	// Shift 5 bit low
    287c:	26 95       	lsr	r18
    287e:	26 95       	lsr	r18
    2880:	26 95       	lsr	r18
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	89 2f       	mov	r24, r25
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	55 e0       	ldi	r21, 0x05	; 5
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	5a 95       	dec	r21
    2890:	e1 f7       	brne	.-8      	; 0x288a <TOUCH_Read+0x4a>
    2892:	28 2b       	or	r18, r24
    2894:	39 2b       	or	r19, r25
    2896:	31 83       	std	Z+1, r19	; 0x01
    2898:	20 83       	st	Z, r18

	*y  = (unsigned int)buf_data[2] << 5;	// Shift 7 bit High
	*y |= (unsigned int)buf_data[3] >> 3;	// Shift 5 bit low
    289a:	46 95       	lsr	r20
    289c:	46 95       	lsr	r20
    289e:	46 95       	lsr	r20
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	86 2f       	mov	r24, r22
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	25 e0       	ldi	r18, 0x05	; 5
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	2a 95       	dec	r18
    28ae:	e1 f7       	brne	.-8      	; 0x28a8 <TOUCH_Read+0x68>
    28b0:	48 2b       	or	r20, r24
    28b2:	59 2b       	or	r21, r25
    28b4:	4d 93       	st	X+, r20
    28b6:	5c 93       	st	X, r21
}
    28b8:	08 95       	ret

000028ba <TOUCH_ReadADC>:
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    28ba:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    28bc:	77 9b       	sbis	0x0e, 7	; 14
    28be:	fe cf       	rjmp	.-4      	; 0x28bc <TOUCH_ReadADC+0x2>
	return (SPDR);						// get data
    28c0:	8f b1       	in	r24, 0x0f	; 15
    28c2:	08 95       	ret

000028c4 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
    28c4:	b8 9a       	sbi	0x17, 0	; 23
	sbi	DDR_DI		; DI: output
    28c6:	ba 9a       	sbi	0x17, 2	; 23
	sbi	DDR_CK		; SCLK: output
    28c8:	b9 9a       	sbi	0x17, 1	; 23
	sbi	PORT_DO		; DO: pull-up
    28ca:	c3 9a       	sbi	0x18, 3	; 24
	ret
    28cc:	08 95       	ret

000028ce <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(80)	/* Loop counter for 8mhz*/
    28ce:	80 e5       	ldi	r24, 0x50	; 80
1:	sbiw	r30, 1		/* 10 clocks per loop */
    28d0:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    28d2:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    28d4:	31 97       	sbiw	r30, 0x01	; 1
	nop
    28d6:	00 00       	nop
	dec	r24
    28d8:	8a 95       	dec	r24
	brne	1b
    28da:	d1 f7       	brne	.-12     	; 0x28d0 <dly_100us+0x2>
	ret
    28dc:	08 95       	ret

000028de <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
    28de:	02 d0       	rcall	.+4      	; 0x28e4 <deselect>
	cbi	PORT_CS
    28e0:	c0 98       	cbi	0x18, 0	; 24
	rjmp	rcv_spi
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <rcv_spi>

000028e4 <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
    28e4:	c0 9a       	sbi	0x18, 0	; 24

000028e6 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
    28e6:	8f ef       	ldi	r24, 0xFF	; 255

000028e8 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
    28e8:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
    28ea:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
    28ec:	c2 9a       	sbi	0x18, 2	; 24
	sbrs	r24, 7		; 
    28ee:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
    28f0:	c2 98       	cbi	0x18, 2	; 24
	lsl	r24		; Get DO from MMC
    28f2:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
    28f4:	b3 99       	sbic	0x16, 3	; 22
	inc	r24		; /
    28f6:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
    28f8:	c1 9a       	sbi	0x18, 1	; 24
	cbi	PORT_CK		; /
    28fa:	c1 98       	cbi	0x18, 1	; 24
	dec	r25		; Repeat 8 times
    28fc:	9a 95       	dec	r25
	brne	1b		; /
    28fe:	a9 f7       	brne	.-22     	; 0x28ea <xmit_spi+0x2>
	ret
    2900:	08 95       	ret

00002902 <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
    2902:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
    2904:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2906:	80 93 57 00 	sts	0x0057, r24
	spm
    290a:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    290c:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    2910:	80 fd       	sbrc	r24, 0
	rjmp	1b
    2912:	fc cf       	rjmp	.-8      	; 0x290c <flash_erase+0xa>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    2914:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2916:	80 93 57 00 	sts	0x0057, r24
	spm
    291a:	e8 95       	spm

9:	ret
    291c:	08 95       	ret

0000291e <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
    291e:	0f 92       	push	r0
	push	r1
    2920:	1f 92       	push	r1
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Fill page buffer
	movw	ZL, r22
    2922:	fb 01       	movw	r30, r22
	movw	XL, r20
    2924:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
    2926:	90 e4       	ldi	r25, 0x40	; 64
1:	ld	r0, X+
    2928:	0d 90       	ld	r0, X+
	ld	r1, X+
    292a:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
    292c:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCR), r24
    292e:	80 93 57 00 	sts	0x0057, r24
	spm
    2932:	e8 95       	spm
	adiw	ZL, 2
    2934:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
    2936:	9a 95       	dec	r25
	brne	1b
    2938:	b9 f7       	brne	.-18     	; 0x2928 <flash_write+0xa>

	; Initiate write operation
	movw	ZL, r22
    293a:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
    293c:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCR), r24
    293e:	80 93 57 00 	sts	0x0057, r24
	spm
    2942:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    2944:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    2948:	80 fd       	sbrc	r24, 0
	rjmp	2b
    294a:	fc cf       	rjmp	.-8      	; 0x2944 <flash_write+0x26>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    294c:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    294e:	80 93 57 00 	sts	0x0057, r24
	spm
    2952:	e8 95       	spm

9:	pop	r1
    2954:	1f 90       	pop	r1
	pop	r0
    2956:	0f 90       	pop	r0
	ret
    2958:	08 95       	ret

0000295a <__mulsi3>:
    295a:	62 9f       	mul	r22, r18
    295c:	d0 01       	movw	r26, r0
    295e:	73 9f       	mul	r23, r19
    2960:	f0 01       	movw	r30, r0
    2962:	82 9f       	mul	r24, r18
    2964:	e0 0d       	add	r30, r0
    2966:	f1 1d       	adc	r31, r1
    2968:	64 9f       	mul	r22, r20
    296a:	e0 0d       	add	r30, r0
    296c:	f1 1d       	adc	r31, r1
    296e:	92 9f       	mul	r25, r18
    2970:	f0 0d       	add	r31, r0
    2972:	83 9f       	mul	r24, r19
    2974:	f0 0d       	add	r31, r0
    2976:	74 9f       	mul	r23, r20
    2978:	f0 0d       	add	r31, r0
    297a:	65 9f       	mul	r22, r21
    297c:	f0 0d       	add	r31, r0
    297e:	99 27       	eor	r25, r25
    2980:	72 9f       	mul	r23, r18
    2982:	b0 0d       	add	r27, r0
    2984:	e1 1d       	adc	r30, r1
    2986:	f9 1f       	adc	r31, r25
    2988:	63 9f       	mul	r22, r19
    298a:	b0 0d       	add	r27, r0
    298c:	e1 1d       	adc	r30, r1
    298e:	f9 1f       	adc	r31, r25
    2990:	bd 01       	movw	r22, r26
    2992:	cf 01       	movw	r24, r30
    2994:	11 24       	eor	r1, r1
    2996:	08 95       	ret

00002998 <__divmodhi4>:
    2998:	97 fb       	bst	r25, 7
    299a:	09 2e       	mov	r0, r25
    299c:	07 26       	eor	r0, r23
    299e:	0a d0       	rcall	.+20     	; 0x29b4 <__divmodhi4_neg1>
    29a0:	77 fd       	sbrc	r23, 7
    29a2:	04 d0       	rcall	.+8      	; 0x29ac <__divmodhi4_neg2>
    29a4:	2e d0       	rcall	.+92     	; 0x2a02 <__udivmodhi4>
    29a6:	06 d0       	rcall	.+12     	; 0x29b4 <__divmodhi4_neg1>
    29a8:	00 20       	and	r0, r0
    29aa:	1a f4       	brpl	.+6      	; 0x29b2 <__divmodhi4_exit>

000029ac <__divmodhi4_neg2>:
    29ac:	70 95       	com	r23
    29ae:	61 95       	neg	r22
    29b0:	7f 4f       	sbci	r23, 0xFF	; 255

000029b2 <__divmodhi4_exit>:
    29b2:	08 95       	ret

000029b4 <__divmodhi4_neg1>:
    29b4:	f6 f7       	brtc	.-4      	; 0x29b2 <__divmodhi4_exit>
    29b6:	90 95       	com	r25
    29b8:	81 95       	neg	r24
    29ba:	9f 4f       	sbci	r25, 0xFF	; 255
    29bc:	08 95       	ret

000029be <__udivmodsi4>:
    29be:	a1 e2       	ldi	r26, 0x21	; 33
    29c0:	1a 2e       	mov	r1, r26
    29c2:	aa 1b       	sub	r26, r26
    29c4:	bb 1b       	sub	r27, r27
    29c6:	fd 01       	movw	r30, r26
    29c8:	0d c0       	rjmp	.+26     	; 0x29e4 <__udivmodsi4_ep>

000029ca <__udivmodsi4_loop>:
    29ca:	aa 1f       	adc	r26, r26
    29cc:	bb 1f       	adc	r27, r27
    29ce:	ee 1f       	adc	r30, r30
    29d0:	ff 1f       	adc	r31, r31
    29d2:	a2 17       	cp	r26, r18
    29d4:	b3 07       	cpc	r27, r19
    29d6:	e4 07       	cpc	r30, r20
    29d8:	f5 07       	cpc	r31, r21
    29da:	20 f0       	brcs	.+8      	; 0x29e4 <__udivmodsi4_ep>
    29dc:	a2 1b       	sub	r26, r18
    29de:	b3 0b       	sbc	r27, r19
    29e0:	e4 0b       	sbc	r30, r20
    29e2:	f5 0b       	sbc	r31, r21

000029e4 <__udivmodsi4_ep>:
    29e4:	66 1f       	adc	r22, r22
    29e6:	77 1f       	adc	r23, r23
    29e8:	88 1f       	adc	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	1a 94       	dec	r1
    29ee:	69 f7       	brne	.-38     	; 0x29ca <__udivmodsi4_loop>
    29f0:	60 95       	com	r22
    29f2:	70 95       	com	r23
    29f4:	80 95       	com	r24
    29f6:	90 95       	com	r25
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	bd 01       	movw	r22, r26
    29fe:	cf 01       	movw	r24, r30
    2a00:	08 95       	ret

00002a02 <__udivmodhi4>:
    2a02:	aa 1b       	sub	r26, r26
    2a04:	bb 1b       	sub	r27, r27
    2a06:	51 e1       	ldi	r21, 0x11	; 17
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <__udivmodhi4_ep>

00002a0a <__udivmodhi4_loop>:
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	a6 17       	cp	r26, r22
    2a10:	b7 07       	cpc	r27, r23
    2a12:	10 f0       	brcs	.+4      	; 0x2a18 <__udivmodhi4_ep>
    2a14:	a6 1b       	sub	r26, r22
    2a16:	b7 0b       	sbc	r27, r23

00002a18 <__udivmodhi4_ep>:
    2a18:	88 1f       	adc	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	5a 95       	dec	r21
    2a1e:	a9 f7       	brne	.-22     	; 0x2a0a <__udivmodhi4_loop>
    2a20:	80 95       	com	r24
    2a22:	90 95       	com	r25
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	08 95       	ret

00002a2a <do_rand>:
    2a2a:	a0 e0       	ldi	r26, 0x00	; 0
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	eb e1       	ldi	r30, 0x1B	; 27
    2a30:	f5 e1       	ldi	r31, 0x15	; 21
    2a32:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__prologue_saves__+0x10>
    2a36:	ec 01       	movw	r28, r24
    2a38:	a8 80       	ld	r10, Y
    2a3a:	b9 80       	ldd	r11, Y+1	; 0x01
    2a3c:	ca 80       	ldd	r12, Y+2	; 0x02
    2a3e:	db 80       	ldd	r13, Y+3	; 0x03
    2a40:	a1 14       	cp	r10, r1
    2a42:	b1 04       	cpc	r11, r1
    2a44:	c1 04       	cpc	r12, r1
    2a46:	d1 04       	cpc	r13, r1
    2a48:	41 f4       	brne	.+16     	; 0x2a5a <do_rand+0x30>
    2a4a:	84 e2       	ldi	r24, 0x24	; 36
    2a4c:	a8 2e       	mov	r10, r24
    2a4e:	89 ed       	ldi	r24, 0xD9	; 217
    2a50:	b8 2e       	mov	r11, r24
    2a52:	8b e5       	ldi	r24, 0x5B	; 91
    2a54:	c8 2e       	mov	r12, r24
    2a56:	87 e0       	ldi	r24, 0x07	; 7
    2a58:	d8 2e       	mov	r13, r24
    2a5a:	c6 01       	movw	r24, r12
    2a5c:	b5 01       	movw	r22, r10
    2a5e:	2d e1       	ldi	r18, 0x1D	; 29
    2a60:	33 ef       	ldi	r19, 0xF3	; 243
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	0e 94 17 18 	call	0x302e	; 0x302e <__divmodsi4>
    2a6a:	27 ea       	ldi	r18, 0xA7	; 167
    2a6c:	31 e4       	ldi	r19, 0x41	; 65
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    2a76:	7b 01       	movw	r14, r22
    2a78:	8c 01       	movw	r16, r24
    2a7a:	c6 01       	movw	r24, r12
    2a7c:	b5 01       	movw	r22, r10
    2a7e:	2d e1       	ldi	r18, 0x1D	; 29
    2a80:	33 ef       	ldi	r19, 0xF3	; 243
    2a82:	41 e0       	ldi	r20, 0x01	; 1
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	0e 94 17 18 	call	0x302e	; 0x302e <__divmodsi4>
    2a8a:	ca 01       	movw	r24, r20
    2a8c:	b9 01       	movw	r22, r18
    2a8e:	2c ee       	ldi	r18, 0xEC	; 236
    2a90:	34 ef       	ldi	r19, 0xF4	; 244
    2a92:	4f ef       	ldi	r20, 0xFF	; 255
    2a94:	5f ef       	ldi	r21, 0xFF	; 255
    2a96:	0e 94 ad 14 	call	0x295a	; 0x295a <__mulsi3>
    2a9a:	6e 0d       	add	r22, r14
    2a9c:	7f 1d       	adc	r23, r15
    2a9e:	80 1f       	adc	r24, r16
    2aa0:	91 1f       	adc	r25, r17
    2aa2:	97 ff       	sbrs	r25, 7
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <do_rand+0x84>
    2aa6:	61 50       	subi	r22, 0x01	; 1
    2aa8:	70 40       	sbci	r23, 0x00	; 0
    2aaa:	80 40       	sbci	r24, 0x00	; 0
    2aac:	90 48       	sbci	r25, 0x80	; 128
    2aae:	68 83       	st	Y, r22
    2ab0:	79 83       	std	Y+1, r23	; 0x01
    2ab2:	8a 83       	std	Y+2, r24	; 0x02
    2ab4:	9b 83       	std	Y+3, r25	; 0x03
    2ab6:	9b 01       	movw	r18, r22
    2ab8:	3f 77       	andi	r19, 0x7F	; 127
    2aba:	c9 01       	movw	r24, r18
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	ea e0       	ldi	r30, 0x0A	; 10
    2ac2:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__epilogue_restores__+0x10>

00002ac6 <rand_r>:
    2ac6:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <do_rand>
    2aca:	08 95       	ret

00002acc <rand>:
    2acc:	8d e7       	ldi	r24, 0x7D	; 125
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <do_rand>
    2ad4:	08 95       	ret

00002ad6 <srand>:
    2ad6:	a0 e0       	ldi	r26, 0x00	; 0
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	80 93 7d 00 	sts	0x007D, r24
    2ade:	90 93 7e 00 	sts	0x007E, r25
    2ae2:	a0 93 7f 00 	sts	0x007F, r26
    2ae6:	b0 93 80 00 	sts	0x0080, r27
    2aea:	08 95       	ret

00002aec <sprintf>:
    2aec:	ae e0       	ldi	r26, 0x0E	; 14
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ec e7       	ldi	r30, 0x7C	; 124
    2af2:	f5 e1       	ldi	r31, 0x15	; 21
    2af4:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__prologue_saves__+0x1c>
    2af8:	0d 89       	ldd	r16, Y+21	; 0x15
    2afa:	1e 89       	ldd	r17, Y+22	; 0x16
    2afc:	86 e0       	ldi	r24, 0x06	; 6
    2afe:	8c 83       	std	Y+4, r24	; 0x04
    2b00:	1a 83       	std	Y+2, r17	; 0x02
    2b02:	09 83       	std	Y+1, r16	; 0x01
    2b04:	8f ef       	ldi	r24, 0xFF	; 255
    2b06:	9f e7       	ldi	r25, 0x7F	; 127
    2b08:	9e 83       	std	Y+6, r25	; 0x06
    2b0a:	8d 83       	std	Y+5, r24	; 0x05
    2b0c:	9e 01       	movw	r18, r28
    2b0e:	27 5e       	subi	r18, 0xE7	; 231
    2b10:	3f 4f       	sbci	r19, 0xFF	; 255
    2b12:	ce 01       	movw	r24, r28
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	6f 89       	ldd	r22, Y+23	; 0x17
    2b18:	78 8d       	ldd	r23, Y+24	; 0x18
    2b1a:	a9 01       	movw	r20, r18
    2b1c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <vfprintf>
    2b20:	2f 81       	ldd	r18, Y+7	; 0x07
    2b22:	38 85       	ldd	r19, Y+8	; 0x08
    2b24:	02 0f       	add	r16, r18
    2b26:	13 1f       	adc	r17, r19
    2b28:	f8 01       	movw	r30, r16
    2b2a:	10 82       	st	Z, r1
    2b2c:	2e 96       	adiw	r28, 0x0e	; 14
    2b2e:	e4 e0       	ldi	r30, 0x04	; 4
    2b30:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__epilogue_restores__+0x1c>

00002b34 <vfprintf>:
    2b34:	ab e0       	ldi	r26, 0x0B	; 11
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e0 ea       	ldi	r30, 0xA0	; 160
    2b3a:	f5 e1       	ldi	r31, 0x15	; 21
    2b3c:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__>
    2b40:	3c 01       	movw	r6, r24
    2b42:	2b 01       	movw	r4, r22
    2b44:	5a 01       	movw	r10, r20
    2b46:	fc 01       	movw	r30, r24
    2b48:	17 82       	std	Z+7, r1	; 0x07
    2b4a:	16 82       	std	Z+6, r1	; 0x06
    2b4c:	83 81       	ldd	r24, Z+3	; 0x03
    2b4e:	81 fd       	sbrc	r24, 1
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <vfprintf+0x24>
    2b52:	6f ef       	ldi	r22, 0xFF	; 255
    2b54:	7f ef       	ldi	r23, 0xFF	; 255
    2b56:	c6 c1       	rjmp	.+908    	; 0x2ee4 <vfprintf+0x3b0>
    2b58:	9a e0       	ldi	r25, 0x0A	; 10
    2b5a:	89 2e       	mov	r8, r25
    2b5c:	1e 01       	movw	r2, r28
    2b5e:	08 94       	sec
    2b60:	21 1c       	adc	r2, r1
    2b62:	31 1c       	adc	r3, r1
    2b64:	f3 01       	movw	r30, r6
    2b66:	23 81       	ldd	r18, Z+3	; 0x03
    2b68:	f2 01       	movw	r30, r4
    2b6a:	23 fd       	sbrc	r18, 3
    2b6c:	85 91       	lpm	r24, Z+
    2b6e:	23 ff       	sbrs	r18, 3
    2b70:	81 91       	ld	r24, Z+
    2b72:	2f 01       	movw	r4, r30
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <vfprintf+0x46>
    2b78:	b2 c1       	rjmp	.+868    	; 0x2ede <vfprintf+0x3aa>
    2b7a:	85 32       	cpi	r24, 0x25	; 37
    2b7c:	39 f4       	brne	.+14     	; 0x2b8c <vfprintf+0x58>
    2b7e:	23 fd       	sbrc	r18, 3
    2b80:	85 91       	lpm	r24, Z+
    2b82:	23 ff       	sbrs	r18, 3
    2b84:	81 91       	ld	r24, Z+
    2b86:	2f 01       	movw	r4, r30
    2b88:	85 32       	cpi	r24, 0x25	; 37
    2b8a:	29 f4       	brne	.+10     	; 0x2b96 <vfprintf+0x62>
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	b3 01       	movw	r22, r6
    2b90:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2b94:	e7 cf       	rjmp	.-50     	; 0x2b64 <vfprintf+0x30>
    2b96:	98 2f       	mov	r25, r24
    2b98:	ff 24       	eor	r15, r15
    2b9a:	ee 24       	eor	r14, r14
    2b9c:	99 24       	eor	r9, r9
    2b9e:	ff e1       	ldi	r31, 0x1F	; 31
    2ba0:	ff 15       	cp	r31, r15
    2ba2:	d0 f0       	brcs	.+52     	; 0x2bd8 <vfprintf+0xa4>
    2ba4:	9b 32       	cpi	r25, 0x2B	; 43
    2ba6:	69 f0       	breq	.+26     	; 0x2bc2 <vfprintf+0x8e>
    2ba8:	9c 32       	cpi	r25, 0x2C	; 44
    2baa:	28 f4       	brcc	.+10     	; 0x2bb6 <vfprintf+0x82>
    2bac:	90 32       	cpi	r25, 0x20	; 32
    2bae:	59 f0       	breq	.+22     	; 0x2bc6 <vfprintf+0x92>
    2bb0:	93 32       	cpi	r25, 0x23	; 35
    2bb2:	91 f4       	brne	.+36     	; 0x2bd8 <vfprintf+0xa4>
    2bb4:	0e c0       	rjmp	.+28     	; 0x2bd2 <vfprintf+0x9e>
    2bb6:	9d 32       	cpi	r25, 0x2D	; 45
    2bb8:	49 f0       	breq	.+18     	; 0x2bcc <vfprintf+0x98>
    2bba:	90 33       	cpi	r25, 0x30	; 48
    2bbc:	69 f4       	brne	.+26     	; 0x2bd8 <vfprintf+0xa4>
    2bbe:	41 e0       	ldi	r20, 0x01	; 1
    2bc0:	24 c0       	rjmp	.+72     	; 0x2c0a <vfprintf+0xd6>
    2bc2:	52 e0       	ldi	r21, 0x02	; 2
    2bc4:	f5 2a       	or	r15, r21
    2bc6:	84 e0       	ldi	r24, 0x04	; 4
    2bc8:	f8 2a       	or	r15, r24
    2bca:	28 c0       	rjmp	.+80     	; 0x2c1c <vfprintf+0xe8>
    2bcc:	98 e0       	ldi	r25, 0x08	; 8
    2bce:	f9 2a       	or	r15, r25
    2bd0:	25 c0       	rjmp	.+74     	; 0x2c1c <vfprintf+0xe8>
    2bd2:	e0 e1       	ldi	r30, 0x10	; 16
    2bd4:	fe 2a       	or	r15, r30
    2bd6:	22 c0       	rjmp	.+68     	; 0x2c1c <vfprintf+0xe8>
    2bd8:	f7 fc       	sbrc	r15, 7
    2bda:	29 c0       	rjmp	.+82     	; 0x2c2e <vfprintf+0xfa>
    2bdc:	89 2f       	mov	r24, r25
    2bde:	80 53       	subi	r24, 0x30	; 48
    2be0:	8a 30       	cpi	r24, 0x0A	; 10
    2be2:	70 f4       	brcc	.+28     	; 0x2c00 <vfprintf+0xcc>
    2be4:	f6 fe       	sbrs	r15, 6
    2be6:	05 c0       	rjmp	.+10     	; 0x2bf2 <vfprintf+0xbe>
    2be8:	98 9c       	mul	r9, r8
    2bea:	90 2c       	mov	r9, r0
    2bec:	11 24       	eor	r1, r1
    2bee:	98 0e       	add	r9, r24
    2bf0:	15 c0       	rjmp	.+42     	; 0x2c1c <vfprintf+0xe8>
    2bf2:	e8 9c       	mul	r14, r8
    2bf4:	e0 2c       	mov	r14, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	e8 0e       	add	r14, r24
    2bfa:	f0 e2       	ldi	r31, 0x20	; 32
    2bfc:	ff 2a       	or	r15, r31
    2bfe:	0e c0       	rjmp	.+28     	; 0x2c1c <vfprintf+0xe8>
    2c00:	9e 32       	cpi	r25, 0x2E	; 46
    2c02:	29 f4       	brne	.+10     	; 0x2c0e <vfprintf+0xda>
    2c04:	f6 fc       	sbrc	r15, 6
    2c06:	6b c1       	rjmp	.+726    	; 0x2ede <vfprintf+0x3aa>
    2c08:	40 e4       	ldi	r20, 0x40	; 64
    2c0a:	f4 2a       	or	r15, r20
    2c0c:	07 c0       	rjmp	.+14     	; 0x2c1c <vfprintf+0xe8>
    2c0e:	9c 36       	cpi	r25, 0x6C	; 108
    2c10:	19 f4       	brne	.+6      	; 0x2c18 <vfprintf+0xe4>
    2c12:	50 e8       	ldi	r21, 0x80	; 128
    2c14:	f5 2a       	or	r15, r21
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <vfprintf+0xe8>
    2c18:	98 36       	cpi	r25, 0x68	; 104
    2c1a:	49 f4       	brne	.+18     	; 0x2c2e <vfprintf+0xfa>
    2c1c:	f2 01       	movw	r30, r4
    2c1e:	23 fd       	sbrc	r18, 3
    2c20:	95 91       	lpm	r25, Z+
    2c22:	23 ff       	sbrs	r18, 3
    2c24:	91 91       	ld	r25, Z+
    2c26:	2f 01       	movw	r4, r30
    2c28:	99 23       	and	r25, r25
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <vfprintf+0xfa>
    2c2c:	b8 cf       	rjmp	.-144    	; 0x2b9e <vfprintf+0x6a>
    2c2e:	89 2f       	mov	r24, r25
    2c30:	85 54       	subi	r24, 0x45	; 69
    2c32:	83 30       	cpi	r24, 0x03	; 3
    2c34:	18 f0       	brcs	.+6      	; 0x2c3c <vfprintf+0x108>
    2c36:	80 52       	subi	r24, 0x20	; 32
    2c38:	83 30       	cpi	r24, 0x03	; 3
    2c3a:	38 f4       	brcc	.+14     	; 0x2c4a <vfprintf+0x116>
    2c3c:	44 e0       	ldi	r20, 0x04	; 4
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	a4 0e       	add	r10, r20
    2c42:	b5 1e       	adc	r11, r21
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	59 83       	std	Y+1, r21	; 0x01
    2c48:	0f c0       	rjmp	.+30     	; 0x2c68 <vfprintf+0x134>
    2c4a:	93 36       	cpi	r25, 0x63	; 99
    2c4c:	31 f0       	breq	.+12     	; 0x2c5a <vfprintf+0x126>
    2c4e:	93 37       	cpi	r25, 0x73	; 115
    2c50:	79 f0       	breq	.+30     	; 0x2c70 <vfprintf+0x13c>
    2c52:	93 35       	cpi	r25, 0x53	; 83
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <vfprintf+0x124>
    2c56:	56 c0       	rjmp	.+172    	; 0x2d04 <vfprintf+0x1d0>
    2c58:	20 c0       	rjmp	.+64     	; 0x2c9a <vfprintf+0x166>
    2c5a:	f5 01       	movw	r30, r10
    2c5c:	80 81       	ld	r24, Z
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	42 e0       	ldi	r20, 0x02	; 2
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	a4 0e       	add	r10, r20
    2c66:	b5 1e       	adc	r11, r21
    2c68:	61 01       	movw	r12, r2
    2c6a:	01 e0       	ldi	r16, 0x01	; 1
    2c6c:	10 e0       	ldi	r17, 0x00	; 0
    2c6e:	12 c0       	rjmp	.+36     	; 0x2c94 <vfprintf+0x160>
    2c70:	f5 01       	movw	r30, r10
    2c72:	c0 80       	ld	r12, Z
    2c74:	d1 80       	ldd	r13, Z+1	; 0x01
    2c76:	f6 fc       	sbrc	r15, 6
    2c78:	03 c0       	rjmp	.+6      	; 0x2c80 <vfprintf+0x14c>
    2c7a:	6f ef       	ldi	r22, 0xFF	; 255
    2c7c:	7f ef       	ldi	r23, 0xFF	; 255
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <vfprintf+0x150>
    2c80:	69 2d       	mov	r22, r9
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	42 e0       	ldi	r20, 0x02	; 2
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	a4 0e       	add	r10, r20
    2c8a:	b5 1e       	adc	r11, r21
    2c8c:	c6 01       	movw	r24, r12
    2c8e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <strnlen>
    2c92:	8c 01       	movw	r16, r24
    2c94:	5f e7       	ldi	r21, 0x7F	; 127
    2c96:	f5 22       	and	r15, r21
    2c98:	14 c0       	rjmp	.+40     	; 0x2cc2 <vfprintf+0x18e>
    2c9a:	f5 01       	movw	r30, r10
    2c9c:	c0 80       	ld	r12, Z
    2c9e:	d1 80       	ldd	r13, Z+1	; 0x01
    2ca0:	f6 fc       	sbrc	r15, 6
    2ca2:	03 c0       	rjmp	.+6      	; 0x2caa <vfprintf+0x176>
    2ca4:	6f ef       	ldi	r22, 0xFF	; 255
    2ca6:	7f ef       	ldi	r23, 0xFF	; 255
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <vfprintf+0x17a>
    2caa:	69 2d       	mov	r22, r9
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	42 e0       	ldi	r20, 0x02	; 2
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	a4 0e       	add	r10, r20
    2cb4:	b5 1e       	adc	r11, r21
    2cb6:	c6 01       	movw	r24, r12
    2cb8:	0e 94 77 17 	call	0x2eee	; 0x2eee <strnlen_P>
    2cbc:	8c 01       	movw	r16, r24
    2cbe:	50 e8       	ldi	r21, 0x80	; 128
    2cc0:	f5 2a       	or	r15, r21
    2cc2:	f3 fe       	sbrs	r15, 3
    2cc4:	07 c0       	rjmp	.+14     	; 0x2cd4 <vfprintf+0x1a0>
    2cc6:	1a c0       	rjmp	.+52     	; 0x2cfc <vfprintf+0x1c8>
    2cc8:	80 e2       	ldi	r24, 0x20	; 32
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	b3 01       	movw	r22, r6
    2cce:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2cd2:	ea 94       	dec	r14
    2cd4:	8e 2d       	mov	r24, r14
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	08 17       	cp	r16, r24
    2cda:	19 07       	cpc	r17, r25
    2cdc:	a8 f3       	brcs	.-22     	; 0x2cc8 <vfprintf+0x194>
    2cde:	0e c0       	rjmp	.+28     	; 0x2cfc <vfprintf+0x1c8>
    2ce0:	f6 01       	movw	r30, r12
    2ce2:	f7 fc       	sbrc	r15, 7
    2ce4:	85 91       	lpm	r24, Z+
    2ce6:	f7 fe       	sbrs	r15, 7
    2ce8:	81 91       	ld	r24, Z+
    2cea:	6f 01       	movw	r12, r30
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	b3 01       	movw	r22, r6
    2cf0:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2cf4:	e1 10       	cpse	r14, r1
    2cf6:	ea 94       	dec	r14
    2cf8:	01 50       	subi	r16, 0x01	; 1
    2cfa:	10 40       	sbci	r17, 0x00	; 0
    2cfc:	01 15       	cp	r16, r1
    2cfe:	11 05       	cpc	r17, r1
    2d00:	79 f7       	brne	.-34     	; 0x2ce0 <vfprintf+0x1ac>
    2d02:	ea c0       	rjmp	.+468    	; 0x2ed8 <vfprintf+0x3a4>
    2d04:	94 36       	cpi	r25, 0x64	; 100
    2d06:	11 f0       	breq	.+4      	; 0x2d0c <vfprintf+0x1d8>
    2d08:	99 36       	cpi	r25, 0x69	; 105
    2d0a:	69 f5       	brne	.+90     	; 0x2d66 <vfprintf+0x232>
    2d0c:	f7 fe       	sbrs	r15, 7
    2d0e:	08 c0       	rjmp	.+16     	; 0x2d20 <vfprintf+0x1ec>
    2d10:	f5 01       	movw	r30, r10
    2d12:	20 81       	ld	r18, Z
    2d14:	31 81       	ldd	r19, Z+1	; 0x01
    2d16:	42 81       	ldd	r20, Z+2	; 0x02
    2d18:	53 81       	ldd	r21, Z+3	; 0x03
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0a c0       	rjmp	.+20     	; 0x2d34 <vfprintf+0x200>
    2d20:	f5 01       	movw	r30, r10
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	9c 01       	movw	r18, r24
    2d28:	44 27       	eor	r20, r20
    2d2a:	37 fd       	sbrc	r19, 7
    2d2c:	40 95       	com	r20
    2d2e:	54 2f       	mov	r21, r20
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a8 0e       	add	r10, r24
    2d36:	b9 1e       	adc	r11, r25
    2d38:	9f e6       	ldi	r25, 0x6F	; 111
    2d3a:	f9 22       	and	r15, r25
    2d3c:	57 ff       	sbrs	r21, 7
    2d3e:	09 c0       	rjmp	.+18     	; 0x2d52 <vfprintf+0x21e>
    2d40:	50 95       	com	r21
    2d42:	40 95       	com	r20
    2d44:	30 95       	com	r19
    2d46:	21 95       	neg	r18
    2d48:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4e:	e0 e8       	ldi	r30, 0x80	; 128
    2d50:	fe 2a       	or	r15, r30
    2d52:	ca 01       	movw	r24, r20
    2d54:	b9 01       	movw	r22, r18
    2d56:	a1 01       	movw	r20, r2
    2d58:	2a e0       	ldi	r18, 0x0A	; 10
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__ultoa_invert>
    2d60:	d8 2e       	mov	r13, r24
    2d62:	d2 18       	sub	r13, r2
    2d64:	40 c0       	rjmp	.+128    	; 0x2de6 <vfprintf+0x2b2>
    2d66:	95 37       	cpi	r25, 0x75	; 117
    2d68:	29 f4       	brne	.+10     	; 0x2d74 <vfprintf+0x240>
    2d6a:	1f 2d       	mov	r17, r15
    2d6c:	1f 7e       	andi	r17, 0xEF	; 239
    2d6e:	2a e0       	ldi	r18, 0x0A	; 10
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	1d c0       	rjmp	.+58     	; 0x2dae <vfprintf+0x27a>
    2d74:	1f 2d       	mov	r17, r15
    2d76:	19 7f       	andi	r17, 0xF9	; 249
    2d78:	9f 36       	cpi	r25, 0x6F	; 111
    2d7a:	61 f0       	breq	.+24     	; 0x2d94 <vfprintf+0x260>
    2d7c:	90 37       	cpi	r25, 0x70	; 112
    2d7e:	20 f4       	brcc	.+8      	; 0x2d88 <vfprintf+0x254>
    2d80:	98 35       	cpi	r25, 0x58	; 88
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <vfprintf+0x252>
    2d84:	ac c0       	rjmp	.+344    	; 0x2ede <vfprintf+0x3aa>
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <vfprintf+0x272>
    2d88:	90 37       	cpi	r25, 0x70	; 112
    2d8a:	39 f0       	breq	.+14     	; 0x2d9a <vfprintf+0x266>
    2d8c:	98 37       	cpi	r25, 0x78	; 120
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <vfprintf+0x25e>
    2d90:	a6 c0       	rjmp	.+332    	; 0x2ede <vfprintf+0x3aa>
    2d92:	04 c0       	rjmp	.+8      	; 0x2d9c <vfprintf+0x268>
    2d94:	28 e0       	ldi	r18, 0x08	; 8
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	0a c0       	rjmp	.+20     	; 0x2dae <vfprintf+0x27a>
    2d9a:	10 61       	ori	r17, 0x10	; 16
    2d9c:	14 fd       	sbrc	r17, 4
    2d9e:	14 60       	ori	r17, 0x04	; 4
    2da0:	20 e1       	ldi	r18, 0x10	; 16
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <vfprintf+0x27a>
    2da6:	14 fd       	sbrc	r17, 4
    2da8:	16 60       	ori	r17, 0x06	; 6
    2daa:	20 e1       	ldi	r18, 0x10	; 16
    2dac:	32 e0       	ldi	r19, 0x02	; 2
    2dae:	17 ff       	sbrs	r17, 7
    2db0:	08 c0       	rjmp	.+16     	; 0x2dc2 <vfprintf+0x28e>
    2db2:	f5 01       	movw	r30, r10
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	44 e0       	ldi	r20, 0x04	; 4
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	08 c0       	rjmp	.+16     	; 0x2dd2 <vfprintf+0x29e>
    2dc2:	f5 01       	movw	r30, r10
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	bc 01       	movw	r22, r24
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	42 e0       	ldi	r20, 0x02	; 2
    2dd0:	50 e0       	ldi	r21, 0x00	; 0
    2dd2:	a4 0e       	add	r10, r20
    2dd4:	b5 1e       	adc	r11, r21
    2dd6:	a1 01       	movw	r20, r2
    2dd8:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__ultoa_invert>
    2ddc:	d8 2e       	mov	r13, r24
    2dde:	d2 18       	sub	r13, r2
    2de0:	8f e7       	ldi	r24, 0x7F	; 127
    2de2:	f8 2e       	mov	r15, r24
    2de4:	f1 22       	and	r15, r17
    2de6:	f6 fe       	sbrs	r15, 6
    2de8:	0b c0       	rjmp	.+22     	; 0x2e00 <vfprintf+0x2cc>
    2dea:	5e ef       	ldi	r21, 0xFE	; 254
    2dec:	f5 22       	and	r15, r21
    2dee:	d9 14       	cp	r13, r9
    2df0:	38 f4       	brcc	.+14     	; 0x2e00 <vfprintf+0x2cc>
    2df2:	f4 fe       	sbrs	r15, 4
    2df4:	07 c0       	rjmp	.+14     	; 0x2e04 <vfprintf+0x2d0>
    2df6:	f2 fc       	sbrc	r15, 2
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <vfprintf+0x2d0>
    2dfa:	8f ee       	ldi	r24, 0xEF	; 239
    2dfc:	f8 22       	and	r15, r24
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <vfprintf+0x2d0>
    2e00:	1d 2d       	mov	r17, r13
    2e02:	01 c0       	rjmp	.+2      	; 0x2e06 <vfprintf+0x2d2>
    2e04:	19 2d       	mov	r17, r9
    2e06:	f4 fe       	sbrs	r15, 4
    2e08:	0d c0       	rjmp	.+26     	; 0x2e24 <vfprintf+0x2f0>
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ed 0d       	add	r30, r13
    2e0e:	f1 1d       	adc	r31, r1
    2e10:	80 81       	ld	r24, Z
    2e12:	80 33       	cpi	r24, 0x30	; 48
    2e14:	19 f4       	brne	.+6      	; 0x2e1c <vfprintf+0x2e8>
    2e16:	99 ee       	ldi	r25, 0xE9	; 233
    2e18:	f9 22       	and	r15, r25
    2e1a:	08 c0       	rjmp	.+16     	; 0x2e2c <vfprintf+0x2f8>
    2e1c:	1f 5f       	subi	r17, 0xFF	; 255
    2e1e:	f2 fe       	sbrs	r15, 2
    2e20:	05 c0       	rjmp	.+10     	; 0x2e2c <vfprintf+0x2f8>
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <vfprintf+0x2f6>
    2e24:	8f 2d       	mov	r24, r15
    2e26:	86 78       	andi	r24, 0x86	; 134
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <vfprintf+0x2f8>
    2e2a:	1f 5f       	subi	r17, 0xFF	; 255
    2e2c:	0f 2d       	mov	r16, r15
    2e2e:	f3 fc       	sbrc	r15, 3
    2e30:	14 c0       	rjmp	.+40     	; 0x2e5a <vfprintf+0x326>
    2e32:	f0 fe       	sbrs	r15, 0
    2e34:	0f c0       	rjmp	.+30     	; 0x2e54 <vfprintf+0x320>
    2e36:	1e 15       	cp	r17, r14
    2e38:	10 f0       	brcs	.+4      	; 0x2e3e <vfprintf+0x30a>
    2e3a:	9d 2c       	mov	r9, r13
    2e3c:	0b c0       	rjmp	.+22     	; 0x2e54 <vfprintf+0x320>
    2e3e:	9d 2c       	mov	r9, r13
    2e40:	9e 0c       	add	r9, r14
    2e42:	91 1a       	sub	r9, r17
    2e44:	1e 2d       	mov	r17, r14
    2e46:	06 c0       	rjmp	.+12     	; 0x2e54 <vfprintf+0x320>
    2e48:	80 e2       	ldi	r24, 0x20	; 32
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	b3 01       	movw	r22, r6
    2e4e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2e52:	1f 5f       	subi	r17, 0xFF	; 255
    2e54:	1e 15       	cp	r17, r14
    2e56:	c0 f3       	brcs	.-16     	; 0x2e48 <vfprintf+0x314>
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <vfprintf+0x32e>
    2e5a:	1e 15       	cp	r17, r14
    2e5c:	10 f4       	brcc	.+4      	; 0x2e62 <vfprintf+0x32e>
    2e5e:	e1 1a       	sub	r14, r17
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <vfprintf+0x330>
    2e62:	ee 24       	eor	r14, r14
    2e64:	04 ff       	sbrs	r16, 4
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <vfprintf+0x352>
    2e68:	80 e3       	ldi	r24, 0x30	; 48
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	b3 01       	movw	r22, r6
    2e6e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2e72:	02 ff       	sbrs	r16, 2
    2e74:	1d c0       	rjmp	.+58     	; 0x2eb0 <vfprintf+0x37c>
    2e76:	01 fd       	sbrc	r16, 1
    2e78:	03 c0       	rjmp	.+6      	; 0x2e80 <vfprintf+0x34c>
    2e7a:	88 e7       	ldi	r24, 0x78	; 120
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	0e c0       	rjmp	.+28     	; 0x2e9c <vfprintf+0x368>
    2e80:	88 e5       	ldi	r24, 0x58	; 88
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	0b c0       	rjmp	.+22     	; 0x2e9c <vfprintf+0x368>
    2e86:	80 2f       	mov	r24, r16
    2e88:	86 78       	andi	r24, 0x86	; 134
    2e8a:	91 f0       	breq	.+36     	; 0x2eb0 <vfprintf+0x37c>
    2e8c:	01 ff       	sbrs	r16, 1
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <vfprintf+0x360>
    2e90:	8b e2       	ldi	r24, 0x2B	; 43
    2e92:	01 c0       	rjmp	.+2      	; 0x2e96 <vfprintf+0x362>
    2e94:	80 e2       	ldi	r24, 0x20	; 32
    2e96:	f7 fc       	sbrc	r15, 7
    2e98:	8d e2       	ldi	r24, 0x2D	; 45
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	b3 01       	movw	r22, r6
    2e9e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <vfprintf+0x37c>
    2ea4:	80 e3       	ldi	r24, 0x30	; 48
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	b3 01       	movw	r22, r6
    2eaa:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2eae:	9a 94       	dec	r9
    2eb0:	d9 14       	cp	r13, r9
    2eb2:	c0 f3       	brcs	.-16     	; 0x2ea4 <vfprintf+0x370>
    2eb4:	da 94       	dec	r13
    2eb6:	f1 01       	movw	r30, r2
    2eb8:	ed 0d       	add	r30, r13
    2eba:	f1 1d       	adc	r31, r1
    2ebc:	80 81       	ld	r24, Z
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	b3 01       	movw	r22, r6
    2ec2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2ec6:	dd 20       	and	r13, r13
    2ec8:	a9 f7       	brne	.-22     	; 0x2eb4 <vfprintf+0x380>
    2eca:	06 c0       	rjmp	.+12     	; 0x2ed8 <vfprintf+0x3a4>
    2ecc:	80 e2       	ldi	r24, 0x20	; 32
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	b3 01       	movw	r22, r6
    2ed2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2ed6:	ea 94       	dec	r14
    2ed8:	ee 20       	and	r14, r14
    2eda:	c1 f7       	brne	.-16     	; 0x2ecc <vfprintf+0x398>
    2edc:	43 ce       	rjmp	.-890    	; 0x2b64 <vfprintf+0x30>
    2ede:	f3 01       	movw	r30, r6
    2ee0:	66 81       	ldd	r22, Z+6	; 0x06
    2ee2:	77 81       	ldd	r23, Z+7	; 0x07
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	2b 96       	adiw	r28, 0x0b	; 11
    2ee8:	e2 e1       	ldi	r30, 0x12	; 18
    2eea:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__>

00002eee <strnlen_P>:
    2eee:	fc 01       	movw	r30, r24
    2ef0:	05 90       	lpm	r0, Z+
    2ef2:	61 50       	subi	r22, 0x01	; 1
    2ef4:	70 40       	sbci	r23, 0x00	; 0
    2ef6:	01 10       	cpse	r0, r1
    2ef8:	d8 f7       	brcc	.-10     	; 0x2ef0 <strnlen_P+0x2>
    2efa:	80 95       	com	r24
    2efc:	90 95       	com	r25
    2efe:	8e 0f       	add	r24, r30
    2f00:	9f 1f       	adc	r25, r31
    2f02:	08 95       	ret

00002f04 <strnlen>:
    2f04:	fc 01       	movw	r30, r24
    2f06:	61 50       	subi	r22, 0x01	; 1
    2f08:	70 40       	sbci	r23, 0x00	; 0
    2f0a:	01 90       	ld	r0, Z+
    2f0c:	01 10       	cpse	r0, r1
    2f0e:	d8 f7       	brcc	.-10     	; 0x2f06 <strnlen+0x2>
    2f10:	80 95       	com	r24
    2f12:	90 95       	com	r25
    2f14:	8e 0f       	add	r24, r30
    2f16:	9f 1f       	adc	r25, r31
    2f18:	08 95       	ret

00002f1a <fputc>:
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	8c 01       	movw	r16, r24
    2f24:	eb 01       	movw	r28, r22
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	81 ff       	sbrs	r24, 1
    2f2a:	1b c0       	rjmp	.+54     	; 0x2f62 <fputc+0x48>
    2f2c:	82 ff       	sbrs	r24, 2
    2f2e:	0d c0       	rjmp	.+26     	; 0x2f4a <fputc+0x30>
    2f30:	2e 81       	ldd	r18, Y+6	; 0x06
    2f32:	3f 81       	ldd	r19, Y+7	; 0x07
    2f34:	8c 81       	ldd	r24, Y+4	; 0x04
    2f36:	9d 81       	ldd	r25, Y+5	; 0x05
    2f38:	28 17       	cp	r18, r24
    2f3a:	39 07       	cpc	r19, r25
    2f3c:	64 f4       	brge	.+24     	; 0x2f56 <fputc+0x3c>
    2f3e:	e8 81       	ld	r30, Y
    2f40:	f9 81       	ldd	r31, Y+1	; 0x01
    2f42:	01 93       	st	Z+, r16
    2f44:	f9 83       	std	Y+1, r31	; 0x01
    2f46:	e8 83       	st	Y, r30
    2f48:	06 c0       	rjmp	.+12     	; 0x2f56 <fputc+0x3c>
    2f4a:	e8 85       	ldd	r30, Y+8	; 0x08
    2f4c:	f9 85       	ldd	r31, Y+9	; 0x09
    2f4e:	80 2f       	mov	r24, r16
    2f50:	09 95       	icall
    2f52:	89 2b       	or	r24, r25
    2f54:	31 f4       	brne	.+12     	; 0x2f62 <fputc+0x48>
    2f56:	8e 81       	ldd	r24, Y+6	; 0x06
    2f58:	9f 81       	ldd	r25, Y+7	; 0x07
    2f5a:	01 96       	adiw	r24, 0x01	; 1
    2f5c:	9f 83       	std	Y+7, r25	; 0x07
    2f5e:	8e 83       	std	Y+6, r24	; 0x06
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <fputc+0x4c>
    2f62:	0f ef       	ldi	r16, 0xFF	; 255
    2f64:	1f ef       	ldi	r17, 0xFF	; 255
    2f66:	c8 01       	movw	r24, r16
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	08 95       	ret

00002f72 <__ultoa_invert>:
    2f72:	fa 01       	movw	r30, r20
    2f74:	aa 27       	eor	r26, r26
    2f76:	28 30       	cpi	r18, 0x08	; 8
    2f78:	51 f1       	breq	.+84     	; 0x2fce <__ultoa_invert+0x5c>
    2f7a:	20 31       	cpi	r18, 0x10	; 16
    2f7c:	81 f1       	breq	.+96     	; 0x2fde <__ultoa_invert+0x6c>
    2f7e:	e8 94       	clt
    2f80:	6f 93       	push	r22
    2f82:	6e 7f       	andi	r22, 0xFE	; 254
    2f84:	6e 5f       	subi	r22, 0xFE	; 254
    2f86:	7f 4f       	sbci	r23, 0xFF	; 255
    2f88:	8f 4f       	sbci	r24, 0xFF	; 255
    2f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8c:	af 4f       	sbci	r26, 0xFF	; 255
    2f8e:	b1 e0       	ldi	r27, 0x01	; 1
    2f90:	3e d0       	rcall	.+124    	; 0x300e <__ultoa_invert+0x9c>
    2f92:	b4 e0       	ldi	r27, 0x04	; 4
    2f94:	3c d0       	rcall	.+120    	; 0x300e <__ultoa_invert+0x9c>
    2f96:	67 0f       	add	r22, r23
    2f98:	78 1f       	adc	r23, r24
    2f9a:	89 1f       	adc	r24, r25
    2f9c:	9a 1f       	adc	r25, r26
    2f9e:	a1 1d       	adc	r26, r1
    2fa0:	68 0f       	add	r22, r24
    2fa2:	79 1f       	adc	r23, r25
    2fa4:	8a 1f       	adc	r24, r26
    2fa6:	91 1d       	adc	r25, r1
    2fa8:	a1 1d       	adc	r26, r1
    2faa:	6a 0f       	add	r22, r26
    2fac:	71 1d       	adc	r23, r1
    2fae:	81 1d       	adc	r24, r1
    2fb0:	91 1d       	adc	r25, r1
    2fb2:	a1 1d       	adc	r26, r1
    2fb4:	20 d0       	rcall	.+64     	; 0x2ff6 <__ultoa_invert+0x84>
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <__ultoa_invert+0x48>
    2fb8:	68 94       	set
    2fba:	3f 91       	pop	r19
    2fbc:	2a e0       	ldi	r18, 0x0A	; 10
    2fbe:	26 9f       	mul	r18, r22
    2fc0:	11 24       	eor	r1, r1
    2fc2:	30 19       	sub	r19, r0
    2fc4:	30 5d       	subi	r19, 0xD0	; 208
    2fc6:	31 93       	st	Z+, r19
    2fc8:	de f6       	brtc	.-74     	; 0x2f80 <__ultoa_invert+0xe>
    2fca:	cf 01       	movw	r24, r30
    2fcc:	08 95       	ret
    2fce:	46 2f       	mov	r20, r22
    2fd0:	47 70       	andi	r20, 0x07	; 7
    2fd2:	40 5d       	subi	r20, 0xD0	; 208
    2fd4:	41 93       	st	Z+, r20
    2fd6:	b3 e0       	ldi	r27, 0x03	; 3
    2fd8:	0f d0       	rcall	.+30     	; 0x2ff8 <__ultoa_invert+0x86>
    2fda:	c9 f7       	brne	.-14     	; 0x2fce <__ultoa_invert+0x5c>
    2fdc:	f6 cf       	rjmp	.-20     	; 0x2fca <__ultoa_invert+0x58>
    2fde:	46 2f       	mov	r20, r22
    2fe0:	4f 70       	andi	r20, 0x0F	; 15
    2fe2:	40 5d       	subi	r20, 0xD0	; 208
    2fe4:	4a 33       	cpi	r20, 0x3A	; 58
    2fe6:	18 f0       	brcs	.+6      	; 0x2fee <__ultoa_invert+0x7c>
    2fe8:	49 5d       	subi	r20, 0xD9	; 217
    2fea:	31 fd       	sbrc	r19, 1
    2fec:	40 52       	subi	r20, 0x20	; 32
    2fee:	41 93       	st	Z+, r20
    2ff0:	02 d0       	rcall	.+4      	; 0x2ff6 <__ultoa_invert+0x84>
    2ff2:	a9 f7       	brne	.-22     	; 0x2fde <__ultoa_invert+0x6c>
    2ff4:	ea cf       	rjmp	.-44     	; 0x2fca <__ultoa_invert+0x58>
    2ff6:	b4 e0       	ldi	r27, 0x04	; 4
    2ff8:	a6 95       	lsr	r26
    2ffa:	97 95       	ror	r25
    2ffc:	87 95       	ror	r24
    2ffe:	77 95       	ror	r23
    3000:	67 95       	ror	r22
    3002:	ba 95       	dec	r27
    3004:	c9 f7       	brne	.-14     	; 0x2ff8 <__ultoa_invert+0x86>
    3006:	00 97       	sbiw	r24, 0x00	; 0
    3008:	61 05       	cpc	r22, r1
    300a:	71 05       	cpc	r23, r1
    300c:	08 95       	ret
    300e:	9b 01       	movw	r18, r22
    3010:	ac 01       	movw	r20, r24
    3012:	0a 2e       	mov	r0, r26
    3014:	06 94       	lsr	r0
    3016:	57 95       	ror	r21
    3018:	47 95       	ror	r20
    301a:	37 95       	ror	r19
    301c:	27 95       	ror	r18
    301e:	ba 95       	dec	r27
    3020:	c9 f7       	brne	.-14     	; 0x3014 <__ultoa_invert+0xa2>
    3022:	62 0f       	add	r22, r18
    3024:	73 1f       	adc	r23, r19
    3026:	84 1f       	adc	r24, r20
    3028:	95 1f       	adc	r25, r21
    302a:	a0 1d       	adc	r26, r0
    302c:	08 95       	ret

0000302e <__divmodsi4>:
    302e:	97 fb       	bst	r25, 7
    3030:	09 2e       	mov	r0, r25
    3032:	05 26       	eor	r0, r21
    3034:	0e d0       	rcall	.+28     	; 0x3052 <__divmodsi4_neg1>
    3036:	57 fd       	sbrc	r21, 7
    3038:	04 d0       	rcall	.+8      	; 0x3042 <__divmodsi4_neg2>
    303a:	c1 dc       	rcall	.-1662   	; 0x29be <__udivmodsi4>
    303c:	0a d0       	rcall	.+20     	; 0x3052 <__divmodsi4_neg1>
    303e:	00 1c       	adc	r0, r0
    3040:	38 f4       	brcc	.+14     	; 0x3050 <__divmodsi4_exit>

00003042 <__divmodsi4_neg2>:
    3042:	50 95       	com	r21
    3044:	40 95       	com	r20
    3046:	30 95       	com	r19
    3048:	21 95       	neg	r18
    304a:	3f 4f       	sbci	r19, 0xFF	; 255
    304c:	4f 4f       	sbci	r20, 0xFF	; 255
    304e:	5f 4f       	sbci	r21, 0xFF	; 255

00003050 <__divmodsi4_exit>:
    3050:	08 95       	ret

00003052 <__divmodsi4_neg1>:
    3052:	f6 f7       	brtc	.-4      	; 0x3050 <__divmodsi4_exit>
    3054:	90 95       	com	r25
    3056:	80 95       	com	r24
    3058:	70 95       	com	r23
    305a:	61 95       	neg	r22
    305c:	7f 4f       	sbci	r23, 0xFF	; 255
    305e:	8f 4f       	sbci	r24, 0xFF	; 255
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	08 95       	ret

00003064 <__prologue_saves__>:
    3064:	2f 92       	push	r2
    3066:	3f 92       	push	r3
    3068:	4f 92       	push	r4
    306a:	5f 92       	push	r5
    306c:	6f 92       	push	r6
    306e:	7f 92       	push	r7
    3070:	8f 92       	push	r8
    3072:	9f 92       	push	r9
    3074:	af 92       	push	r10
    3076:	bf 92       	push	r11
    3078:	cf 92       	push	r12
    307a:	df 92       	push	r13
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	ca 1b       	sub	r28, r26
    308e:	db 0b       	sbc	r29, r27
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	09 94       	ijmp

0000309c <__epilogue_restores__>:
    309c:	2a 88       	ldd	r2, Y+18	; 0x12
    309e:	39 88       	ldd	r3, Y+17	; 0x11
    30a0:	48 88       	ldd	r4, Y+16	; 0x10
    30a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    30ae:	b9 84       	ldd	r11, Y+9	; 0x09
    30b0:	c8 84       	ldd	r12, Y+8	; 0x08
    30b2:	df 80       	ldd	r13, Y+7	; 0x07
    30b4:	ee 80       	ldd	r14, Y+6	; 0x06
    30b6:	fd 80       	ldd	r15, Y+5	; 0x05
    30b8:	0c 81       	ldd	r16, Y+4	; 0x04
    30ba:	1b 81       	ldd	r17, Y+3	; 0x03
    30bc:	aa 81       	ldd	r26, Y+2	; 0x02
    30be:	b9 81       	ldd	r27, Y+1	; 0x01
    30c0:	ce 0f       	add	r28, r30
    30c2:	d1 1d       	adc	r29, r1
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	ed 01       	movw	r28, r26
    30d0:	08 95       	ret

000030d2 <_exit>:
    30d2:	f8 94       	cli

000030d4 <__stop_program>:
    30d4:	ff cf       	rjmp	.-2      	; 0x30d4 <__stop_program>
