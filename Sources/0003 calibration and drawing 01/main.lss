
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  000038f4  00003988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000b4  008000b4  000039dc  2**0
                  ALLOC
  3 .stab         00000420  00000000  00000000  000039dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000ab  00000000  00000000  00003dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000271  00000000  00000000  00003f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001dc0  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000750  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001aa0  00000000  00000000  000066c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  00008168  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000585  00000000  00000000  00008408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002526  00000000  00000000  0000898d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  0000aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 03 	jmp	0x644	; 0x644 <__ctors_end>
       4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      10:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      14:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      18:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      1c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      20:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      24:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      28:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      2c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      30:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      38:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      3c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      40:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      44:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      48:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      4c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      50:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>

00000054 <font_8x16>:
	...
      68:	18 3c 3c 3c 18 18 00 18 18 00 00 00 00 00 00 00     .<<<............
      78:	66 66 66 00 00 00 00 00 00 00 00 00 00 00 00 00     fff.............
      88:	36 36 7f 36 36 36 7f 36 36 00 00 00 00 00 18 18     66.666.66.......
      98:	3c 66 60 30 18 0c 06 66 3c 18 18 00 00 00 00 70     <f`0...f<......p
      a8:	d8 da 76 0c 18 30 6e 5b 1b 0e 00 00 00 00 00 00     ..v..0n[........
      b8:	38 6c 6c 38 60 6f 66 66 3b 00 00 00 00 00 00 00     8ll8`off;.......
      c8:	18 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      d8:	0c 18 18 30 30 30 30 30 18 18 0c 00 00 00 00 00     ...00000........
      e8:	30 18 18 0c 0c 0c 0c 0c 18 18 30 00 00 00 00 00     0.........0.....
      f8:	00 00 36 1c 7f 1c 36 00 00 00 00 00 00 00 00 00     ..6...6.........
     108:	00 00 18 18 7e 18 18 00 00 00 00 00 00 00 00 00     ....~...........
     118:	00 00 00 00 00 00 1c 1c 0c 18 00 00 00 00 00 00     ................
     128:	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 00     ...~............
     138:	00 00 00 00 00 00 1c 1c 00 00 00 00 00 00 00 06     ................
     148:	06 0c 0c 18 18 30 30 60 60 00 00 00 00 00 00 1e     .....00``.......
     158:	33 37 37 33 3b 3b 33 1e 00 00 00 00 00 00 00 0c     3773;;3.........
     168:	1c 7c 0c 0c 0c 0c 0c 0c 00 00 00 00 00 00 00 3c     .|.............<
     178:	66 66 06 0c 18 30 60 7e 00 00 00 00 00 00 00 3c     ff...0`~.......<
     188:	66 66 06 1c 06 66 66 3c 00 00 00 00 00 00 00 30     ff...ff<.......0
     198:	30 36 36 36 66 7f 06 06 00 00 00 00 00 00 00 7e     0666f..........~
     1a8:	60 60 60 7c 06 06 0c 78 00 00 00 00 00 00 00 1c     ```|...x........
     1b8:	18 30 7c 66 66 66 66 3c 00 00 00 00 00 00 00 7e     .0|ffff<.......~
     1c8:	06 0c 0c 18 18 30 30 30 00 00 00 00 00 00 00 3c     .....000.......<
     1d8:	66 66 76 3c 6e 66 66 3c 00 00 00 00 00 00 00 3c     ffv<nff<.......<
     1e8:	66 66 66 66 3e 0c 18 38 00 00 00 00 00 00 00 00     ffff>..8........
     1f8:	00 1c 1c 00 00 00 1c 1c 00 00 00 00 00 00 00 00     ................
     208:	00 1c 1c 00 00 00 1c 1c 0c 18 00 00 00 00 00 06     ................
     218:	0c 18 30 60 30 18 0c 06 00 00 00 00 00 00 00 00     ..0`0...........
     228:	00 00 7e 00 7e 00 00 00 00 00 00 00 00 00 00 60     ..~.~..........`
     238:	30 18 0c 06 0c 18 30 60 00 00 00 00 00 00 00 3c     0.....0`.......<
     248:	66 66 0c 18 18 00 18 18 00 00 00 00 00 00 00 7e     ff.............~
     258:	c3 c3 cf db db cf c0 7f 00 00 00 00 00 00 00 18     ................
     268:	3c 66 66 66 7e 66 66 66 00 00 00 00 00 00 00 7c     <fff~fff.......|
     278:	66 66 66 7c 66 66 66 7c 00 00 00 00 00 00 00 3c     fff|fff|.......<
     288:	66 66 60 60 60 66 66 3c 00 00 00 00 00 00 00 78     ff```ff<.......x
     298:	6c 66 66 66 66 66 6c 78 00 00 00 00 00 00 00 7e     lffffflx.......~
     2a8:	60 60 60 7c 60 60 60 7e 00 00 00 00 00 00 00 7e     ```|```~.......~
     2b8:	60 60 60 7c 60 60 60 60 00 00 00 00 00 00 00 3c     ```|````.......<
     2c8:	66 66 60 60 6e 66 66 3e 00 00 00 00 00 00 00 66     ff``nff>.......f
     2d8:	66 66 66 7e 66 66 66 66 00 00 00 00 00 00 00 3c     fff~ffff.......<
     2e8:	18 18 18 18 18 18 18 3c 00 00 00 00 00 00 1e 0c     .......<........
     2f8:	0c 0c 0c 0c cc cc cc 78 00 00 00 00 00 00 00 66     .......x.......f
     308:	66 6c 6c 78 6c 6c 66 66 00 00 00 00 00 00 00 60     fllxllff.......`
     318:	60 60 60 60 60 60 60 7e 00 00 00 00 00 00 00 63     ```````~.......c
     328:	63 77 6b 6b 6b 63 63 63 00 00 00 00 00 00 00 63     cwkkkccc.......c
     338:	63 73 7b 6f 67 63 63 63 00 00 00 00 00 00 00 3c     cs{ogccc.......<
     348:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 7c     fffffff<.......|
     358:	66 66 66 7c 60 60 60 60 00 00 00 00 00 00 00 3c     fff|````.......<
     368:	66 66 66 66 66 66 66 3c 0c 06 00 00 00 00 00 7c     fffffff<.......|
     378:	66 66 66 7c 6c 66 66 66 00 00 00 00 00 00 00 3c     fff|lfff.......<
     388:	66 60 30 18 0c 06 66 3c 00 00 00 00 00 00 00 7e     f`0...f<.......~
     398:	18 18 18 18 18 18 18 18 00 00 00 00 00 00 00 66     ...............f
     3a8:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 66     fffffff<.......f
     3b8:	66 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 63     ffffff<........c
     3c8:	63 63 6b 6b 6b 36 36 36 00 00 00 00 00 00 00 66     cckkk666.......f
     3d8:	66 34 18 18 2c 66 66 66 00 00 00 00 00 00 00 66     f4..,fff.......f
     3e8:	66 66 66 3c 18 18 18 18 00 00 00 00 00 00 00 7e     fff<...........~
     3f8:	06 06 0c 18 30 60 60 7e 00 00 00 00 00 00 00 3c     ....0``~.......<
     408:	30 30 30 30 30 30 30 30 30 30 3c 00 00 00 00 60     0000000000<....`
     418:	60 30 30 18 18 0c 0c 06 06 00 00 00 00 00 00 3c     `00............<
     428:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66     ..........<...<f
	...
     450:	00 00 ff 00 00 38 18 0c 00 00 00 00 00 00 00 00     .....8..........
	...
     468:	00 3c 06 06 3e 66 66 3e 00 00 00 00 00 00 00 60     .<..>ff>.......`
     478:	60 7c 66 66 66 66 66 7c 00 00 00 00 00 00 00 00     `|fffff|........
     488:	00 3c 66 60 60 60 66 3c 00 00 00 00 00 00 00 06     .<f```f<........
     498:	06 3e 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .>fffff>........
     4a8:	00 3c 66 66 7e 60 60 3c 00 00 00 00 00 00 00 1e     .<ff~``<........
     4b8:	30 30 30 7e 30 30 30 30 00 00 00 00 00 00 00 00     000~0000........
     4c8:	00 3e 66 66 66 66 66 3e 06 06 7c 00 00 00 00 60     .>fffff>..|....`
     4d8:	60 7c 66 66 66 66 66 66 00 00 00 00 00 00 18 18     `|ffffff........
     4e8:	00 78 18 18 18 18 18 7e 00 00 00 00 00 00 0c 0c     .x.....~........
     4f8:	00 3c 0c 0c 0c 0c 0c 0c 0c 0c 78 00 00 00 00 60     .<........x....`
     508:	60 66 66 6c 78 6c 66 66 00 00 00 00 00 00 00 78     `fflxlff.......x
     518:	18 18 18 18 18 18 18 7e 00 00 00 00 00 00 00 00     .......~........
     528:	00 7e 6b 6b 6b 6b 6b 63 00 00 00 00 00 00 00 00     .~kkkkkc........
     538:	00 7c 66 66 66 66 66 66 00 00 00 00 00 00 00 00     .|ffffff........
     548:	00 3c 66 66 66 66 66 3c 00 00 00 00 00 00 00 00     .<fffff<........
     558:	00 7c 66 66 66 66 66 7c 60 60 60 00 00 00 00 00     .|fffff|```.....
     568:	00 3e 66 66 66 66 66 3e 06 06 06 00 00 00 00 00     .>fffff>........
     578:	00 66 6e 70 60 60 60 60 00 00 00 00 00 00 00 00     .fnp````........
     588:	00 3e 60 60 3c 06 06 7c 00 00 00 00 00 00 00 30     .>``<..|.......0
     598:	30 7e 30 30 30 30 30 1e 00 00 00 00 00 00 00 00     0~00000.........
     5a8:	00 66 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .ffffff>........
     5b8:	00 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 00     .fffff<.........
     5c8:	00 63 6b 6b 6b 6b 36 36 00 00 00 00 00 00 00 00     .ckkkk66........
     5d8:	00 66 66 3c 18 3c 66 66 00 00 00 00 00 00 00 00     .ff<.<ff........
     5e8:	00 66 66 66 66 66 66 3c 0c 18 f0 00 00 00 00 00     .ffffff<........
     5f8:	00 7e 06 0c 18 30 60 7e 00 00 00 00 00 00 00 0c     .~...0`~........
     608:	18 18 18 30 60 30 18 18 18 0c 00 00 00 00 00 18     ...0`0..........
     618:	18 18 18 18 18 18 18 18 18 18 18 00 00 00 00 30     ...............0
     628:	18 18 18 0c 06 0c 18 18 18 30 00 00 00 00 00 71     .........0.....q
     638:	db 8e 00 00 00 00 00 00 00 00 00 00                 ............

00000644 <__ctors_end>:
     644:	11 24       	eor	r1, r1
     646:	1f be       	out	0x3f, r1	; 63
     648:	cf e5       	ldi	r28, 0x5F	; 95
     64a:	d8 e0       	ldi	r29, 0x08	; 8
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	cd bf       	out	0x3d, r28	; 61

00000650 <__do_copy_data>:
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	a0 e6       	ldi	r26, 0x60	; 96
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	e4 ef       	ldi	r30, 0xF4	; 244
     658:	f8 e3       	ldi	r31, 0x38	; 56
     65a:	02 c0       	rjmp	.+4      	; 0x660 <.do_copy_data_start>

0000065c <.do_copy_data_loop>:
     65c:	05 90       	lpm	r0, Z+
     65e:	0d 92       	st	X+, r0

00000660 <.do_copy_data_start>:
     660:	a4 3b       	cpi	r26, 0xB4	; 180
     662:	b1 07       	cpc	r27, r17
     664:	d9 f7       	brne	.-10     	; 0x65c <.do_copy_data_loop>

00000666 <__do_clear_bss>:
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	a4 eb       	ldi	r26, 0xB4	; 180
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	01 c0       	rjmp	.+2      	; 0x670 <.do_clear_bss_start>

0000066e <.do_clear_bss_loop>:
     66e:	1d 92       	st	X+, r1

00000670 <.do_clear_bss_start>:
     670:	a1 3c       	cpi	r26, 0xC1	; 193
     672:	b1 07       	cpc	r27, r17
     674:	e1 f7       	brne	.-8      	; 0x66e <.do_clear_bss_loop>
     676:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
     67a:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <_exit>

0000067e <__bad_interrupt>:
     67e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000682 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     682:	20 ed       	ldi	r18, 0xD0	; 208
     684:	37 e0       	ldi	r19, 0x07	; 7
     686:	03 c0       	rjmp	.+6      	; 0x68e <delay_ms+0xc>
     688:	f9 01       	movw	r30, r18
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <delay_ms+0x8>

// my delay
//
void delay_ms (int ms) {
	
	while (ms--) _delay_ms(1);
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	4f ef       	ldi	r20, 0xFF	; 255
     692:	8f 3f       	cpi	r24, 0xFF	; 255
     694:	94 07       	cpc	r25, r20
     696:	c1 f7       	brne	.-16     	; 0x688 <delay_ms+0x6>
}
     698:	08 95       	ret

0000069a <main>:

/////////////////
//
// Main prorgam
//
int main (void) {
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	c8 56       	subi	r28, 0x68	; 104
     6b4:	d0 40       	sbci	r29, 0x00	; 0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61

	char text[100];

	// Data bridge and extern clock Camera to LCD initialization
	//
	HC245_INIT();
     6c0:	8e 9a       	sbi	0x11, 6	; 17
	EXCLK_INIT();
     6c2:	b8 9a       	sbi	0x17, 0	; 23
	//
	// and disable it both
	//
	HC245_DISABLE();
     6c4:	96 9a       	sbi	0x12, 6	; 18
	EXCLK_DISABLE();
     6c6:	c0 98       	cbi	0x18, 0	; 24
	
	// KEY switch init
	//
	KEY_SW_INIT();
     6c8:	8d 98       	cbi	0x11, 5	; 17
     6ca:	95 9a       	sbi	0x12, 5	; 18
	//
	//ADC_INIT(0);
	
	// LCD initialize
	//
	LCD_DATA_OUPUT();
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	84 bb       	out	0x14, r24	; 20
    LCD_Init();
     6d0:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_Init>
	
	// TOUCH calibrate
	//
	TOUCH_Calibrate();
     6d4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <TOUCH_Calibrate>
	
	if (KEY_SW) {
     6d8:	85 99       	sbic	0x10, 5	; 16
     6da:	47 c0       	rjmp	.+142    	; 0x76a <main+0xd0>
		
		sprintf(text, "Newman's touch circles.. ");
     6dc:	8e 01       	movw	r16, r28
     6de:	0b 5f       	subi	r16, 0xFB	; 251
     6e0:	1f 4f       	sbci	r17, 0xFF	; 255
     6e2:	c8 01       	movw	r24, r16
     6e4:	60 e6       	ldi	r22, 0x60	; 96
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	0e 94 99 19 	call	0x3332	; 0x3332 <strcpy>
		LCD_WriteString(50,110, text, YELLOW, BLACK);
     6ec:	82 e3       	ldi	r24, 0x32	; 50
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	6e e6       	ldi	r22, 0x6E	; 110
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	a8 01       	movw	r20, r16
     6f6:	20 ee       	ldi	r18, 0xE0	; 224
     6f8:	3f ef       	ldi	r19, 0xFF	; 255
     6fa:	00 e0       	ldi	r16, 0x00	; 0
     6fc:	10 e0       	ldi	r17, 0x00	; 0
     6fe:	0e 94 92 04 	call	0x924	; 0x924 <LCD_WriteString>
		while(!TOUCH_DOWN);
     702:	83 99       	sbic	0x10, 3	; 16
     704:	fe cf       	rjmp	.-4      	; 0x702 <main+0x68>
     706:	2e c0       	rjmp	.+92     	; 0x764 <main+0xca>
		
		while(true) {
			
			for(int i=0; i<50; i++) {
				
				LCD_DrawCircle(rand()%319, rand()%239, rand()%100, rand()<<1, true);
     708:	0e 94 89 19 	call	0x3312	; 0x3312 <rand>
     70c:	8c 01       	movw	r16, r24
     70e:	0e 94 89 19 	call	0x3312	; 0x3312 <rand>
     712:	7c 01       	movw	r14, r24
     714:	0e 94 89 19 	call	0x3312	; 0x3312 <rand>
     718:	6c 01       	movw	r12, r24
     71a:	0e 94 89 19 	call	0x3312	; 0x3312 <rand>
     71e:	9c 01       	movw	r18, r24
     720:	c8 01       	movw	r24, r16
     722:	6f e3       	ldi	r22, 0x3F	; 63
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divmodhi4>
     72a:	8c 01       	movw	r16, r24
     72c:	c7 01       	movw	r24, r14
     72e:	6f ee       	ldi	r22, 0xEF	; 239
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divmodhi4>
     736:	fc 01       	movw	r30, r24
     738:	c6 01       	movw	r24, r12
     73a:	64 e6       	ldi	r22, 0x64	; 100
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divmodhi4>
     742:	ac 01       	movw	r20, r24
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	c8 01       	movw	r24, r16
     74a:	bf 01       	movw	r22, r30
     74c:	01 e0       	ldi	r16, 0x01	; 1
     74e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
		LCD_WriteString(50,110, text, YELLOW, BLACK);
		while(!TOUCH_DOWN);
		
		while(true) {
			
			for(int i=0; i<50; i++) {
     752:	08 94       	sec
     754:	a1 1c       	adc	r10, r1
     756:	b1 1c       	adc	r11, r1
     758:	82 e3       	ldi	r24, 0x32	; 50
     75a:	a8 16       	cp	r10, r24
     75c:	b1 04       	cpc	r11, r1
     75e:	a4 f2       	brlt	.-88     	; 0x708 <main+0x6e>
				
				LCD_DrawCircle(rand()%319, rand()%239, rand()%100, rand()<<1, true);
			}
			
			while(!TOUCH_DOWN);
     760:	83 99       	sbic	0x10, 3	; 16
     762:	fe cf       	rjmp	.-4      	; 0x760 <main+0xc6>
     764:	aa 24       	eor	r10, r10
     766:	bb 24       	eor	r11, r11
     768:	f7 cf       	rjmp	.-18     	; 0x758 <main+0xbe>
//		LCD_Fill(240, 200, 40, 40, CYAN);
//		LCD_Fill(280, 200, 40, 40, WHITE);
		
		// draw
		//
		TOUCH_Reset();
     76a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TOUCH_Reset>
		
		while(true) {
			
			while(!TOUCH_DOWN);		// Wait for touch
			TOUCH_Read(&x, &y);	// Get data
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	5e 01       	movw	r10, r28
     77a:	08 94       	sec
     77c:	a1 1c       	adc	r10, r1
     77e:	b1 1c       	adc	r11, r1
		//
		TOUCH_Reset();
		
		while(true) {
			
			while(!TOUCH_DOWN);		// Wait for touch
     780:	83 99       	sbic	0x10, 3	; 16
     782:	fe cf       	rjmp	.-4      	; 0x780 <main+0xe6>
			TOUCH_Read(&x, &y);	// Get data
     784:	c5 01       	movw	r24, r10
     786:	b7 01       	movw	r22, r14
     788:	0e 94 28 14 	call	0x2850	; 0x2850 <TOUCH_Read>
			
			if (TOUCH_DOWN) {		// If data are valid
     78c:	83 99       	sbic	0x10, 3	; 16
     78e:	f8 cf       	rjmp	.-16     	; 0x780 <main+0xe6>
				
				// do draw
				//
//				sprintf(text, "x: %d   y: %d     ", x, y);
//				LCD_WriteString(10,0, text, YELLOW, BLACK);
				LCD_DrawCircle(x, y, 1, WHITE, true);
     790:	6b 81       	ldd	r22, Y+3	; 0x03
     792:	7c 81       	ldd	r23, Y+4	; 0x04
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	2f ef       	ldi	r18, 0xFF	; 255
     79e:	3f ef       	ldi	r19, 0xFF	; 255
     7a0:	01 e0       	ldi	r16, 0x01	; 1
     7a2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
				
				
				// if right bottom corner... do clear
				//
				if (KEY_SW)
     7a6:	85 99       	sbic	0x10, 5	; 16
     7a8:	eb cf       	rjmp	.-42     	; 0x780 <main+0xe6>
					LCD_Clear(BLACK);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
     7b2:	e6 cf       	rjmp	.-52     	; 0x780 <main+0xe6>

000007b4 <LCD_WR_DATA>:
//
// write data to LCD bus
//
void LCD_WR_DATA (unsigned int data) {

	LCD_RD_H();
     7b4:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     7b6:	de 9a       	sbi	0x1b, 6	; 27
    LCD_CS_L();  
     7b8:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     7ba:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data>>8;
     7bc:	95 bb       	out	0x15, r25	; 21
	
    LCD_WR_H();
     7be:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     7c0:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data&0XFF; 
     7c2:	85 bb       	out	0x15, r24	; 21
	
    LCD_WR_H();
     7c4:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     7c6:	dd 9a       	sbi	0x1b, 5	; 27
}
     7c8:	08 95       	ret

000007ca <LCD_WR_INDEX>:
//
// Write register index
//
void LCD_WR_INDEX (unsigned int index) {

    LCD_RD_H();
     7ca:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_L();
     7cc:	de 98       	cbi	0x1b, 6	; 27
    LCD_CS_L();  
     7ce:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     7d0:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index>>8; 
     7d2:	95 bb       	out	0x15, r25	; 21

    LCD_WR_H();
     7d4:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     7d6:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index&0XFF; 
     7d8:	85 bb       	out	0x15, r24	; 21

    LCD_WR_H();
     7da:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     7dc:	dd 9a       	sbi	0x1b, 5	; 27
}
     7de:	08 95       	ret

000007e0 <LCD_WR_REGISTER>:

///////////////////
//
// Write register
//
void LCD_WR_REGISTER (unsigned int index,unsigned int data) {
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	8b 01       	movw	r16, r22

    LCD_WR_INDEX(index);
     7e6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_WR_INDEX>
    LCD_WR_DATA(data);
     7ea:	c8 01       	movw	r24, r16
     7ec:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WR_DATA>
}
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <LCD_Scroll>:

///////////////////
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {
     7f6:	bc 01       	movw	r22, r24
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <LCD_Scroll+0x8>

    while (y < 0)
        y += 320;
     7fa:	60 5c       	subi	r22, 0xC0	; 192
     7fc:	7e 4f       	sbci	r23, 0xFE	; 254
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {

    while (y < 0)
     7fe:	77 fd       	sbrc	r23, 7
     800:	fc cf       	rjmp	.-8      	; 0x7fa <LCD_Scroll+0x4>
     802:	02 c0       	rjmp	.+4      	; 0x808 <LCD_Scroll+0x12>
        y += 320;
	
    while (y >= 320)
        y -= 320;
     804:	60 54       	subi	r22, 0x40	; 64
     806:	71 40       	sbci	r23, 0x01	; 1
void LCD_Scroll (int y) {

    while (y < 0)
        y += 320;
	
    while (y >= 320)
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	60 34       	cpi	r22, 0x40	; 64
     80c:	78 07       	cpc	r23, r24
     80e:	d4 f7       	brge	.-12     	; 0x804 <LCD_Scroll+0xe>
        y -= 320;
	
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, y);
     810:	8a e6       	ldi	r24, 0x6A	; 106
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
}
     818:	08 95       	ret

0000081a <LCD_SetBounds>:

////////////////////////////////////////
//
// LCD_SetBounds(x, y, width, height);
//
void LCD_SetBounds (unsigned int x, unsigned int y, unsigned int width, unsigned int height) {
     81a:	8f 92       	push	r8
     81c:	9f 92       	push	r9
     81e:	af 92       	push	r10
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	7c 01       	movw	r14, r24
     830:	8b 01       	movw	r16, r22
     832:	4a 01       	movw	r8, r20
     834:	59 01       	movw	r10, r18

	// my Vertical
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     836:	8f ee       	ldi	r24, 0xEF	; 239
     838:	c8 2e       	mov	r12, r24
     83a:	d1 2c       	mov	r13, r1
     83c:	c6 1a       	sub	r12, r22
     83e:	d7 0a       	sbc	r13, r23
     840:	80 e2       	ldi	r24, 0x20	; 32
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	b6 01       	movw	r22, r12
     846:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_START, LCD_MAX_HEIGHT -y -height);
     84a:	10 95       	com	r17
     84c:	01 95       	neg	r16
     84e:	1f 4f       	sbci	r17, 0xFF	; 255
     850:	00 51       	subi	r16, 0x10	; 16
     852:	1f 4f       	sbci	r17, 0xFF	; 255
     854:	0a 19       	sub	r16, r10
     856:	1b 09       	sbc	r17, r11
     858:	80 e5       	ldi	r24, 0x50	; 80
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	b8 01       	movw	r22, r16
     85e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_END, LCD_MAX_HEIGHT -y -1);
     862:	81 e5       	ldi	r24, 0x51	; 81
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	b6 01       	movw	r22, r12
     868:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// my Horizontal
	//
	LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);
     86c:	81 e2       	ldi	r24, 0x21	; 33
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	b7 01       	movw	r22, r14
     872:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_START, x);
     876:	82 e5       	ldi	r24, 0x52	; 82
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	b7 01       	movw	r22, r14
     87c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_END, x + width -1);
     880:	08 94       	sec
     882:	e1 08       	sbc	r14, r1
     884:	f1 08       	sbc	r15, r1
     886:	e8 0c       	add	r14, r8
     888:	f9 1c       	adc	r15, r9
     88a:	83 e5       	ldi	r24, 0x53	; 83
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	b7 01       	movw	r22, r14
     890:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// Set Read & Write data registrer
	//
	LCD_WR_GRAM;
     894:	82 e2       	ldi	r24, 0x22	; 34
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_WR_INDEX>
}
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	8f 90       	pop	r8
     8b0:	08 95       	ret

000008b2 <LCD_WriteChar>:

///////////////////////////////////////////////
//
// LCD_WriteChar(x, y, ichar, color, bcolor);
//
void LCD_WriteChar (unsigned int x, unsigned int y, char ichar, unsigned int color, unsigned int bcolor) {
     8b2:	af 92       	push	r10
     8b4:	bf 92       	push	r11
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	f4 2e       	mov	r15, r20
     8c6:	59 01       	movw	r10, r18
     8c8:	68 01       	movw	r12, r16

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
     8ca:	48 e0       	ldi	r20, 0x08	; 8
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	20 e1       	ldi	r18, 0x10	; 16
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetBounds>
     8d6:	cf 2d       	mov	r28, r15
     8d8:	d0 e0       	ldi	r29, 0x00	; 0
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	cc 0f       	add	r28, r28
     8de:	dd 1f       	adc	r29, r29
     8e0:	9a 95       	dec	r25
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <LCD_WriteChar+0x2a>
     8e4:	cc 5a       	subi	r28, 0xAC	; 172
     8e6:	d1 40       	sbci	r29, 0x01	; 1
     8e8:	00 e0       	ldi	r16, 0x00	; 0
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
     8ea:	fe 01       	movw	r30, r28
     8ec:	f4 90       	lpm	r15, Z+
     8ee:	10 e0       	ldi	r17, 0x00	; 0
		
		for(column = 0; column < 8; column++) {
			
			if (data & 0x80)
     8f0:	f7 fe       	sbrs	r15, 7
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <LCD_WriteChar+0x46>
				
				LCD_WR_DATA(color);
     8f4:	c5 01       	movw	r24, r10
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <LCD_WriteChar+0x48>
			else
				LCD_WR_DATA(bcolor);
     8f8:	c6 01       	movw	r24, r12
     8fa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WR_DATA>
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
		
		for(column = 0; column < 8; column++) {
     8fe:	1f 5f       	subi	r17, 0xFF	; 255
     900:	18 30       	cpi	r17, 0x08	; 8
     902:	11 f0       	breq	.+4      	; 0x908 <LCD_WriteChar+0x56>
				
				LCD_WR_DATA(color);
			else
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
     904:	ff 0c       	add	r15, r15
     906:	f4 cf       	rjmp	.-24     	; 0x8f0 <LCD_WriteChar+0x3e>

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
  
	for(line = 0; line < 16; line++) {
     908:	0f 5f       	subi	r16, 0xFF	; 255
     90a:	21 96       	adiw	r28, 0x01	; 1
     90c:	00 31       	cpi	r16, 0x10	; 16
     90e:	69 f7       	brne	.-38     	; 0x8ea <LCD_WriteChar+0x38>
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
		}
	}
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	bf 90       	pop	r11
     920:	af 90       	pop	r10
     922:	08 95       	ret

00000924 <LCD_WriteString>:

//////////////////////////////////////////////////
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {
     924:	8f 92       	push	r8
     926:	9f 92       	push	r9
     928:	af 92       	push	r10
     92a:	bf 92       	push	r11
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	7c 01       	movw	r14, r24
     93e:	4b 01       	movw	r8, r22
     940:	ea 01       	movw	r28, r20
     942:	59 01       	movw	r10, r18
     944:	68 01       	movw	r12, r16
     946:	0b c0       	rjmp	.+22     	; 0x95e <LCD_WriteString+0x3a>

	while(*string) {
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
     948:	21 96       	adiw	r28, 0x01	; 1
     94a:	c7 01       	movw	r24, r14
     94c:	b4 01       	movw	r22, r8
     94e:	95 01       	movw	r18, r10
     950:	86 01       	movw	r16, r12
     952:	0e 94 59 04 	call	0x8b2	; 0x8b2 <LCD_WriteChar>
		x += 8;
     956:	88 e0       	ldi	r24, 0x08	; 8
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	e8 0e       	add	r14, r24
     95c:	f9 1e       	adc	r15, r25
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {

	while(*string) {
     95e:	48 81       	ld	r20, Y
     960:	44 23       	and	r20, r20
     962:	91 f7       	brne	.-28     	; 0x948 <LCD_WriteString+0x24>
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
		x += 8;
	}
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	08 95       	ret

0000097e <LCD_Fill>:
//
// LCD_Fill(x, y, width, height, color);
//
// color is RGB(5-6-5) format
//
void LCD_Fill (int x, int y, unsigned int width, unsigned int height, unsigned int color) {
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	78 01       	movw	r14, r16

	unsigned long index;
    int right = x + width;
     98c:	48 0f       	add	r20, r24
     98e:	59 1f       	adc	r21, r25
    int bottom = y + height;

	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
     990:	e1 e0       	ldi	r30, 0x01	; 1
     992:	41 34       	cpi	r20, 0x41	; 65
     994:	5e 07       	cpc	r21, r30
     996:	14 f0       	brlt	.+4      	; 0x99c <LCD_Fill+0x1e>
     998:	40 e4       	ldi	r20, 0x40	; 64
     99a:	51 e0       	ldi	r21, 0x01	; 1
    bottom = min(bottom, LCD_MAX_HEIGHT);
	
    x = max(x, 0);
     99c:	97 ff       	sbrs	r25, 7
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <LCD_Fill+0x26>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
    y = max(y, 0);
	
    width = right - x;
     9a4:	8a 01       	movw	r16, r20
     9a6:	08 1b       	sub	r16, r24
     9a8:	19 0b       	sbc	r17, r25
    height = bottom - y;
	
    if ((width <= 0) || (height <= 0) || (bottom < 0))
     9aa:	a9 f1       	breq	.+106    	; 0xa16 <LCD_Fill+0x98>
//
void LCD_Fill (int x, int y, unsigned int width, unsigned int height, unsigned int color) {

	unsigned long index;
    int right = x + width;
    int bottom = y + height;
     9ac:	26 0f       	add	r18, r22
     9ae:	37 1f       	adc	r19, r23

	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
    bottom = min(bottom, LCD_MAX_HEIGHT);
     9b0:	21 3f       	cpi	r18, 0xF1	; 241
     9b2:	31 05       	cpc	r19, r1
     9b4:	14 f0       	brlt	.+4      	; 0x9ba <LCD_Fill+0x3c>
     9b6:	20 ef       	ldi	r18, 0xF0	; 240
     9b8:	30 e0       	ldi	r19, 0x00	; 0
	
    x = max(x, 0);
    y = max(y, 0);
     9ba:	77 ff       	sbrs	r23, 7
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <LCD_Fill+0x44>
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
	
    width = right - x;
    height = bottom - y;
     9c2:	e9 01       	movw	r28, r18
     9c4:	c6 1b       	sub	r28, r22
     9c6:	d7 0b       	sbc	r29, r23
	
    if ((width <= 0) || (height <= 0) || (bottom < 0))
     9c8:	31 f1       	breq	.+76     	; 0xa16 <LCD_Fill+0x98>
     9ca:	37 fd       	sbrc	r19, 7
     9cc:	24 c0       	rjmp	.+72     	; 0xa16 <LCD_Fill+0x98>
		return;
	
	if ((y >= LCD_MAX_HEIGHT) || (right < 0) || (x >= LCD_MAX_WIDTH))
     9ce:	60 3f       	cpi	r22, 0xF0	; 240
     9d0:	71 05       	cpc	r23, r1
     9d2:	0c f5       	brge	.+66     	; 0xa16 <LCD_Fill+0x98>
     9d4:	57 fd       	sbrc	r21, 7
     9d6:	1f c0       	rjmp	.+62     	; 0xa16 <LCD_Fill+0x98>
     9d8:	21 e0       	ldi	r18, 0x01	; 1
     9da:	80 34       	cpi	r24, 0x40	; 64
     9dc:	92 07       	cpc	r25, r18
     9de:	dc f4       	brge	.+54     	; 0xa16 <LCD_Fill+0x98>
        return;    

	// Set bounds
	//
	LCD_SetBounds(x, y, width, height);
     9e0:	a8 01       	movw	r20, r16
     9e2:	9e 01       	movw	r18, r28
     9e4:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetBounds>
	
	// LCD select enable
	//
	LCD_RD_H();
     9e8:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     9ea:	de 9a       	sbi	0x1b, 6	; 27
	LCD_CS_L();
     9ec:	dd 98       	cbi	0x1b, 5	; 27
	
	index = (unsigned long)width *height;
     9ee:	be 01       	movw	r22, r28
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	98 01       	movw	r18, r16
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>

	while(index--) {
		
		LCD_WR_L();
     9fe:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color>>8; 
     a00:	f5 ba       	out	0x15, r15	; 21
		
		LCD_WR_H();
     a02:	c3 98       	cbi	0x18, 3	; 24
		LCD_WR_L();
     a04:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color&0XFF; 
     a06:	e5 ba       	out	0x15, r14	; 21
		
		LCD_WR_H();
     a08:	c3 98       	cbi	0x18, 3	; 24
     a0a:	61 50       	subi	r22, 0x01	; 1
     a0c:	70 40       	sbci	r23, 0x00	; 0
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	90 40       	sbci	r25, 0x00	; 0
	LCD_RS_H();
	LCD_CS_L();
	
	index = (unsigned long)width *height;

	while(index--) {
     a12:	a9 f7       	brne	.-22     	; 0x9fe <LCD_Fill+0x80>
		LCD_WR_H();
	}
 
	// LCD select disable
	//
	LCD_CS_H();
     a14:	dd 9a       	sbi	0x1b, 5	; 27
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	08 95       	ret

00000a24 <LCD_Clear>:
//
// LCD_Clear(color);
//
// color is RGB(5-6-5) format
//
void LCD_Clear (unsigned int color) {
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	8c 01       	movw	r16, r24

	LCD_Fill(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT, color);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	40 e4       	ldi	r20, 0x40	; 64
     a34:	51 e0       	ldi	r21, 0x01	; 1
     a36:	20 ef       	ldi	r18, 0xF0	; 240
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_Fill>
}
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <LCD_Init>:
//
// LCD initialization
//
void LCD_Init (void) {

	LCD_PORT_INI();
     a44:	8f 9a       	sbi	0x11, 7	; 17
     a46:	d5 9a       	sbi	0x1a, 5	; 26
     a48:	d6 9a       	sbi	0x1a, 6	; 26
     a4a:	bb 9a       	sbi	0x17, 3	; 23
     a4c:	d7 9a       	sbi	0x1a, 7	; 26
     a4e:	b9 9a       	sbi	0x17, 1	; 23
 
	// LCD Reset
	//
	LCD_RST_L();
     a50:	c1 98       	cbi	0x18, 1	; 24
     a52:	88 ee       	ldi	r24, 0xE8	; 232
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	28 ec       	ldi	r18, 0xC8	; 200
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	f9 01       	movw	r30, r18
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <LCD_Init+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a62:	d9 f7       	brne	.-10     	; 0xa5a <LCD_Init+0x16>
	_delay_ms(100);
	LCD_RST_H();
     a64:	c1 9a       	sbi	0x18, 1	; 24
     a66:	88 ee       	ldi	r24, 0xE8	; 232
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	28 ec       	ldi	r18, 0xC8	; 200
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <LCD_Init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a74:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a76:	d9 f7       	brne	.-10     	; 0xa6e <LCD_Init+0x2a>
	_delay_ms(100); 
	
	// SET registers
	//
	LCD_WR_REGISTER(0x00E3,0x3008); 					// Set the internal timing;   
     a78:	83 ee       	ldi	r24, 0xE3	; 227
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	68 e0       	ldi	r22, 0x08	; 8
     a7e:	70 e3       	ldi	r23, 0x30	; 48
     a80:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00E7,0x0012); 					// Set the internal timing;   
     a84:	87 ee       	ldi	r24, 0xE7	; 231
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	62 e1       	ldi	r22, 0x12	; 18
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00Ef,0x1231); 					// Set the internal timing;   
     a90:	8f ee       	ldi	r24, 0xEF	; 239
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	61 e3       	ldi	r22, 0x31	; 49
     a96:	72 e1       	ldi	r23, 0x12	; 18
     a98:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_START_OSC,0x0001);				// Start Oscilator
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
     aa8:	84 ef       	ldi	r24, 0xF4	; 244
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	28 ec       	ldi	r18, 0xC8	; 200
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	f9 01       	movw	r30, r18
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <LCD_Init+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ab8:	d9 f7       	brne	.-10     	; 0xab0 <LCD_Init+0x6c>
	_delay_ms(50);

    LCD_WR_REGISTER(LCD_DRIVE_OUTPUT, 0x0000);			// Set standard drive mode
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_DRIVE_WAVE, 0x0700);			// Line inversion
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	77 e0       	ldi	r23, 0x07	; 7
     ace:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// 16 bits System interface (65536 colors)
	//
	LCD_WR_REGISTER(LCD_ENTRY_MODE,0x1028); 			// [12]BRG mode, [5:4]display rotate and [3]Landscape
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	68 e2       	ldi	r22, 0x28	; 40
     ad8:	70 e1       	ldi	r23, 0x10	; 16
     ada:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_RESIZE_CTRL, 0x0000);			// No resize
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL2, 0x0202);			// Back & front porch = 2
     aea:	88 e0       	ldi	r24, 0x08	; 8
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	62 e0       	ldi	r22, 0x02	; 2
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL3, 0x0000);			// Non-display area refresh cycle
     af6:	89 e0       	ldi	r24, 0x09	; 9
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL4, 0x0000);			// FMARK function OFF
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
				
	// Select System interface
	//
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE1, 0x0000);	// 16-bit RGB interface, internal clock (Still pictures))
     b0e:	8c e0       	ldi	r24, 0x0C	; 12
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_FRM_MARKER_POS, 0x0000);		// Frame marker Position
     b1a:	8d e0       	ldi	r24, 0x0D	; 13
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE2, 0x0000);	// RGB interface polarity
     b26:	8f e0       	ldi	r24, 0x0F	; 15
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>

	// Power On sequence 
	//
	LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x0000);
     b32:	80 e1       	ldi	r24, 0x10	; 16
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0007);			// Vci x1
     b3e:	81 e1       	ldi	r24, 0x11	; 17
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	67 e0       	ldi	r22, 0x07	; 7
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x0000);
     b4a:	82 e1       	ldi	r24, 0x12	; 18
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x0000);
     b56:	83 e1       	ldi	r24, 0x13	; 19
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
     b62:	80 ed       	ldi	r24, 0xD0	; 208
     b64:	97 e0       	ldi	r25, 0x07	; 7
     b66:	28 ec       	ldi	r18, 0xC8	; 200
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	f9 01       	movw	r30, r18
     b6c:	31 97       	sbiw	r30, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCD_Init+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b72:	d9 f7       	brne	.-10     	; 0xb6a <LCD_Init+0x126>
    _delay_ms(200);										// Dis-charge capacitor power voltage
    
    LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x1590);			// Power supply startup, Source driver enable
     b74:	80 e1       	ldi	r24, 0x10	; 16
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	60 e9       	ldi	r22, 0x90	; 144
     b7a:	75 e1       	ldi	r23, 0x15	; 21
     b7c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0227);			// Step-up circuit1	Fosc/4, Step-up circuit2 Fosc/16
     b80:	81 e1       	ldi	r24, 0x11	; 17
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	67 e2       	ldi	r22, 0x27	; 39
     b86:	72 e0       	ldi	r23, 0x02	; 2
     b88:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
     b8c:	84 ef       	ldi	r24, 0xF4	; 244
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	28 ec       	ldi	r18, 0xC8	; 200
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	f9 01       	movw	r30, r18
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <LCD_Init+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9c:	d9 f7       	brne	.-10     	; 0xb94 <LCD_Init+0x150>
    _delay_ms(50);

	LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x001e);			// Internal reference voltage= Vci;
     b9e:	82 e1       	ldi	r24, 0x12	; 18
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	6e e1       	ldi	r22, 0x1E	; 30
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
     baa:	84 ef       	ldi	r24, 0xF4	; 244
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	28 ec       	ldi	r18, 0xC8	; 200
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	f9 01       	movw	r30, r18
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <LCD_Init+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bba:	d9 f7       	brne	.-10     	; 0xbb2 <LCD_Init+0x16e>
    _delay_ms(50);
	
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x1500);			// VCOM amplitude x1.04
     bbc:	83 e1       	ldi	r24, 0x13	; 19
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	75 e1       	ldi	r23, 0x15	; 21
     bc4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL7, 0x0026);			// VCOMH x0.875
     bc8:	89 e2       	ldi	r24, 0x29	; 41
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	66 e2       	ldi	r22, 0x26	; 38
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
     bd4:	84 ef       	ldi	r24, 0xF4	; 244
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	28 ec       	ldi	r18, 0xC8	; 200
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	f9 01       	movw	r30, r18
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <LCD_Init+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be4:	d9 f7       	brne	.-10     	; 0xbdc <LCD_Init+0x198>
    _delay_ms(50);
    
	// Adjust the Gamma Curve
	//
	LCD_WR_REGISTER(LCD_GAMMA_CTRL1,0x0007);
     be6:	80 e3       	ldi	r24, 0x30	; 48
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	67 e0       	ldi	r22, 0x07	; 7
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL2,0x0707);
     bf2:	81 e3       	ldi	r24, 0x31	; 49
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	67 e0       	ldi	r22, 0x07	; 7
     bf8:	77 e0       	ldi	r23, 0x07	; 7
     bfa:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL3,0x0107);
     bfe:	82 e3       	ldi	r24, 0x32	; 50
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	67 e0       	ldi	r22, 0x07	; 7
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL4,0x0206);
     c0a:	85 e3       	ldi	r24, 0x35	; 53
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	66 e0       	ldi	r22, 0x06	; 6
     c10:	72 e0       	ldi	r23, 0x02	; 2
     c12:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL5,0x0406);
     c16:	86 e3       	ldi	r24, 0x36	; 54
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	66 e0       	ldi	r22, 0x06	; 6
     c1c:	74 e0       	ldi	r23, 0x04	; 4
     c1e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL6,0x0101);
     c22:	87 e3       	ldi	r24, 0x37	; 55
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL7,0x0101);
     c2e:	88 e3       	ldi	r24, 0x38	; 56
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	71 e0       	ldi	r23, 0x01	; 1
     c36:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL8,0x0207);
     c3a:	89 e3       	ldi	r24, 0x39	; 57
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	67 e0       	ldi	r22, 0x07	; 7
     c40:	72 e0       	ldi	r23, 0x02	; 2
     c42:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL9,0x0504);
     c46:	8c e3       	ldi	r24, 0x3C	; 60
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	75 e0       	ldi	r23, 0x05	; 5
     c4e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL10,0x0806);
     c52:	8d e3       	ldi	r24, 0x3D	; 61
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	66 e0       	ldi	r22, 0x06	; 6
     c58:	78 e0       	ldi	r23, 0x08	; 8
     c5a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// Set frame rate
	//
	LCD_WR_REGISTER(LCD_FRAME_RATE, 0x000F);
     c5e:	8b e2       	ldi	r24, 0x2B	; 43
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	6f e0       	ldi	r22, 0x0F	; 15
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// Set GRAM area
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS,0x0000);			// Horizontal GRAM address
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS,0x0000);			// Vertical GRAM address
     c76:	81 e2       	ldi	r24, 0x21	; 33
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_START, 0x0000);		// Horizontal GRAM Start Address
     c82:	80 e5       	ldi	r24, 0x50	; 80
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_END, 0x00EF);		// Horizontal GRAM End Address
     c8e:	81 e5       	ldi	r24, 0x51	; 81
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	6f ee       	ldi	r22, 0xEF	; 239
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_START, 0x0000);		// Vertical GRAM Start Address
     c9a:	82 e5       	ldi	r24, 0x52	; 82
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_END, 0x013F);			// Vertical GRAM Start Address
     ca6:	83 e5       	ldi	r24, 0x53	; 83
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	6f e3       	ldi	r22, 0x3F	; 63
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// Gater scan control
	//
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL1, 0x2700);		// Gate Scan for 320 lines
     cb2:	80 e6       	ldi	r24, 0x60	; 96
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	77 e2       	ldi	r23, 0x27	; 39
     cba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL2, 0x0003);		// From G1 to G320, vertical scroll enable
     cbe:	81 e6       	ldi	r24, 0x61	; 97
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	63 e0       	ldi	r22, 0x03	; 3
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, 0x0000);		// Set scrolling line to 0x00
     cca:	8a e6       	ldi	r24, 0x6A	; 106
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// Partial display control (not used for now)
	//
	LCD_WR_REGISTER(LCD_PART_IMG1_DISP_POS, 0x0000);
     cd6:	80 e8       	ldi	r24, 0x80	; 128
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_START_AD, 0x0000);
     ce2:	81 e8       	ldi	r24, 0x81	; 129
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_END_AD, 0x0000);
     cee:	82 e8       	ldi	r24, 0x82	; 130
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_DISP_POS, 0x0000);
     cfa:	83 e8       	ldi	r24, 0x83	; 131
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_START_AD, 0x0000);
     d06:	84 e8       	ldi	r24, 0x84	; 132
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_END_AD, 0x0000);
     d12:	85 e8       	ldi	r24, 0x85	; 133
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>

	// Panel interface control
	//
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE1, 0x0010);		// 16 clocks per line
     d1e:	80 e9       	ldi	r24, 0x90	; 144
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	60 e1       	ldi	r22, 0x10	; 16
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE2, 0x0600);		// try 0x00 // gate output non-overlap 6 clocks period
     d2a:	82 e9       	ldi	r24, 0x92	; 146
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	76 e0       	ldi	r23, 0x06	; 6
     d32:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE3, 0x0003);		// ???
     d36:	83 e9       	ldi	r24, 0x93	; 147
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	63 e0       	ldi	r22, 0x03	; 3
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE4, 0x0110);		// H1 - 16 clocks per line period, 4 DOTCLKS division ratio with RGB synchron
     d42:	85 e9       	ldi	r24, 0x95	; 149
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	60 e1       	ldi	r22, 0x10	; 16
     d48:	71 e0       	ldi	r23, 0x01	; 1
     d4a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE5, 0x0000);		// ???
     d4e:	87 e9       	ldi	r24, 0x97	; 151
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE6, 0x0000);		// ???
     d5a:	88 e9       	ldi	r24, 0x98	; 152
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	
	// Display ON with 262K color, normal display follow
	//
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL1, 0x0133); 
     d66:	87 e0       	ldi	r24, 0x07	; 7
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	63 e3       	ldi	r22, 0x33	; 51
     d6c:	71 e0       	ldi	r23, 0x01	; 1
     d6e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_Clear(BLACK);
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
	
	// Set LCD backlight on
	//
	LCD_BL_H();	
     d7a:	97 9a       	sbi	0x12, 7	; 18

}
     d7c:	08 95       	ret

00000d7e <LCD_SetPoint>:

///////////////////////////////
//
// LCD_SetPoint(x, y, color);
//
void LCD_SetPoint (unsigned int x, unsigned int y,unsigned int color) {
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ec 01       	movw	r28, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	8a 01       	movw	r16, r20

	if ((x >= LCD_MAX_WIDTH) || (y >= LCD_MAX_HEIGHT))
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	c0 34       	cpi	r28, 0x40	; 64
     d90:	d2 07       	cpc	r29, r18
     d92:	b8 f4       	brcc	.+46     	; 0xdc2 <LCD_SetPoint+0x44>
     d94:	60 3f       	cpi	r22, 0xF0	; 240
     d96:	71 05       	cpc	r23, r1
     d98:	a0 f4       	brcc	.+40     	; 0xdc2 <LCD_SetPoint+0x44>
		return;
	
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     d9a:	6f ee       	ldi	r22, 0xEF	; 239
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	68 1b       	sub	r22, r24
     da0:	79 0b       	sbc	r23, r25
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);   
     daa:	81 e2       	ldi	r24, 0x21	; 33
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	be 01       	movw	r22, r28
     db0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_WR_REGISTER>
	LCD_WR_GRAM;
     db4:	82 e2       	ldi	r24, 0x22	; 34
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_WR_INDEX>
	LCD_WR_DATA(color);
     dbc:	c8 01       	movw	r24, r16
     dbe:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LCD_WR_DATA>
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	08 95       	ret

00000dcc <LCD_DrawLine>:

/////////////////////////////////////////
//
// LCD_DrawLine(x, y, xx, yy, color);
//
void LCD_DrawLine (unsigned int x, unsigned int y, unsigned int xx, unsigned int yy, unsigned int color) {
     dcc:	2f 92       	push	r2
     dce:	3f 92       	push	r3
     dd0:	4f 92       	push	r4
     dd2:	5f 92       	push	r5
     dd4:	6f 92       	push	r6
     dd6:	7f 92       	push	r7
     dd8:	8f 92       	push	r8
     dda:	9f 92       	push	r9
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	cf 92       	push	r12
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	28 97       	sbiw	r28, 0x08	; 8
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	2b 01       	movw	r4, r22
     e06:	1c 83       	std	Y+4, r17	; 0x04
     e08:	0b 83       	std	Y+3, r16	; 0x03
    int xerr=0, yerr=0, delta_x, delta_y;
    int incx, incy;

    // Compute the distances in both directions
	//
    delta_x = xx - x;
     e0a:	48 1b       	sub	r20, r24
     e0c:	59 0b       	sbc	r21, r25
    delta_y = yy - y;
     e0e:	26 1b       	sub	r18, r22
     e10:	37 0b       	sbc	r19, r23

    // Compute the direction of the increment,
    // an increment of 0 means either a horizontal or vertical line.
	//
    if(delta_x > 0) 
     e12:	14 16       	cp	r1, r20
     e14:	15 06       	cpc	r1, r21
     e16:	24 f4       	brge	.+8      	; 0xe20 <LCD_DrawLine+0x54>
     e18:	71 e0       	ldi	r23, 0x01	; 1
     e1a:	27 2e       	mov	r2, r23
     e1c:	31 2c       	mov	r3, r1
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <LCD_DrawLine+0x66>
		
		incx = 1;
    else 
	if(delta_x == 0) 
     e20:	41 15       	cp	r20, r1
     e22:	51 05       	cpc	r21, r1
     e24:	21 f0       	breq	.+8      	; 0xe2e <LCD_DrawLine+0x62>
     e26:	22 24       	eor	r2, r2
     e28:	2a 94       	dec	r2
     e2a:	32 2c       	mov	r3, r2
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <LCD_DrawLine+0x66>
     e2e:	22 24       	eor	r2, r2
     e30:	33 24       	eor	r3, r3
		
		incx=0;
    else 
		incx = -1;

    if(delta_y > 0)
     e32:	12 16       	cp	r1, r18
     e34:	13 06       	cpc	r1, r19
     e36:	24 f4       	brge	.+8      	; 0xe40 <LCD_DrawLine+0x74>
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	66 2e       	mov	r6, r22
     e3c:	71 2c       	mov	r7, r1
     e3e:	09 c0       	rjmp	.+18     	; 0xe52 <LCD_DrawLine+0x86>
		
		incy = 1;
    else 
	if(delta_y == 0)
     e40:	21 15       	cp	r18, r1
     e42:	31 05       	cpc	r19, r1
     e44:	21 f0       	breq	.+8      	; 0xe4e <LCD_DrawLine+0x82>
     e46:	66 24       	eor	r6, r6
     e48:	6a 94       	dec	r6
     e4a:	76 2c       	mov	r7, r6
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <LCD_DrawLine+0x86>
     e4e:	66 24       	eor	r6, r6
     e50:	77 24       	eor	r7, r7
    else 
		incy = -1;

    // Determine which distance is greater
	//
    delta_x = (delta_x < 0) ? delta_x*-1 : delta_x;	// abs(delta_x)
     e52:	5a 01       	movw	r10, r20
     e54:	57 ff       	sbrs	r21, 7
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <LCD_DrawLine+0x94>
     e58:	b0 94       	com	r11
     e5a:	a1 94       	neg	r10
     e5c:	b1 08       	sbc	r11, r1
     e5e:	b3 94       	inc	r11
    delta_y = (delta_y < 0) ? delta_y*-1 : delta_y;	// abs(delta_y)
     e60:	69 01       	movw	r12, r18
     e62:	37 ff       	sbrs	r19, 7
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <LCD_DrawLine+0xa2>
     e66:	d0 94       	com	r13
     e68:	c1 94       	neg	r12
     e6a:	d1 08       	sbc	r13, r1
     e6c:	d3 94       	inc	r13
     e6e:	86 01       	movw	r16, r12
     e70:	ca 14       	cp	r12, r10
     e72:	db 04       	cpc	r13, r11
     e74:	0c f4       	brge	.+2      	; 0xe78 <LCD_DrawLine+0xac>
     e76:	85 01       	movw	r16, r10
     e78:	88 24       	eor	r8, r8
     e7a:	99 24       	eor	r9, r9
     e7c:	ee 24       	eor	r14, r14
     e7e:	ff 24       	eor	r15, r15
     e80:	18 86       	std	Y+8, r1	; 0x08
     e82:	1f 82       	std	Y+7, r1	; 0x07
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
     e84:	c8 01       	movw	r24, r16
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	28 c0       	rjmp	.+80     	; 0xede <LCD_DrawLine+0x112>
		
        LCD_SetPoint(x, y, color);
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	b2 01       	movw	r22, r4
     e94:	4b 81       	ldd	r20, Y+3	; 0x03
     e96:	5c 81       	ldd	r21, Y+4	; 0x04
     e98:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_SetPoint>
        
        xerr += delta_x;
     e9c:	ea 0c       	add	r14, r10
     e9e:	fb 1c       	adc	r15, r11
        yerr += delta_y;
     ea0:	ef 81       	ldd	r30, Y+7	; 0x07
     ea2:	f8 85       	ldd	r31, Y+8	; 0x08
     ea4:	ec 0d       	add	r30, r12
     ea6:	fd 1d       	adc	r31, r13
     ea8:	f8 87       	std	Y+8, r31	; 0x08
     eaa:	ef 83       	std	Y+7, r30	; 0x07
		
        if(xerr > distance) {
     eac:	0e 15       	cp	r16, r14
     eae:	1f 05       	cpc	r17, r15
     eb0:	44 f4       	brge	.+16     	; 0xec2 <LCD_DrawLine+0xf6>
			
            xerr -= distance;
     eb2:	e0 1a       	sub	r14, r16
     eb4:	f1 0a       	sbc	r15, r17
            x += incx;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	82 0d       	add	r24, r2
     ebc:	93 1d       	adc	r25, r3
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
        }
		
        if(yerr > distance) {
     ec2:	ef 81       	ldd	r30, Y+7	; 0x07
     ec4:	f8 85       	ldd	r31, Y+8	; 0x08
     ec6:	0e 17       	cp	r16, r30
     ec8:	1f 07       	cpc	r17, r31
     eca:	34 f4       	brge	.+12     	; 0xed8 <LCD_DrawLine+0x10c>
			
            yerr -= distance;
     ecc:	e0 1b       	sub	r30, r16
     ece:	f1 0b       	sbc	r31, r17
     ed0:	f8 87       	std	Y+8, r31	; 0x08
     ed2:	ef 83       	std	Y+7, r30	; 0x07
            y += incy;
     ed4:	46 0c       	add	r4, r6
     ed6:	57 1c       	adc	r5, r7
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
     ed8:	08 94       	sec
     eda:	81 1c       	adc	r8, r1
     edc:	91 1c       	adc	r9, r1
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	88 15       	cp	r24, r8
     ee4:	99 05       	cpc	r25, r9
     ee6:	9c f6       	brge	.-90     	; 0xe8e <LCD_DrawLine+0xc2>
			
            yerr -= distance;
            y += incy;
        }
    }
}
     ee8:	28 96       	adiw	r28, 0x08	; 8
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	bf 90       	pop	r11
     f06:	af 90       	pop	r10
     f08:	9f 90       	pop	r9
     f0a:	8f 90       	pop	r8
     f0c:	7f 90       	pop	r7
     f0e:	6f 90       	pop	r6
     f10:	5f 90       	pop	r5
     f12:	4f 90       	pop	r4
     f14:	3f 90       	pop	r3
     f16:	2f 90       	pop	r2
     f18:	08 95       	ret

00000f1a <LCD_Draw4.1641>:
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {


	// Draw 4 mirrored points
	//
	void LCD_Draw4 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color) {
     f1a:	6f 92       	push	r6
     f1c:	7f 92       	push	r7
     f1e:	8f 92       	push	r8
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	7a 01       	movw	r14, r20
     f38:	e9 01       	movw	r28, r18
     f3a:	68 01       	movw	r12, r16
		
		int	mx, my;
		
		mx = x - dx;
     f3c:	9c 01       	movw	r18, r24
     f3e:	3c 01       	movw	r6, r24
     f40:	64 1a       	sub	r6, r20
     f42:	75 0a       	sbc	r7, r21
		my = y - dy;
     f44:	4b 01       	movw	r8, r22
     f46:	8c 1a       	sub	r8, r28
     f48:	9d 0a       	sbc	r9, r29
		
		x += dx;
     f4a:	5a 01       	movw	r10, r20
     f4c:	a2 0e       	add	r10, r18
     f4e:	b3 1e       	adc	r11, r19
		y += dy;
     f50:	8e 01       	movw	r16, r28
     f52:	06 0f       	add	r16, r22
     f54:	17 1f       	adc	r17, r23
		
		LCD_SetPoint(x, y, color);
     f56:	c5 01       	movw	r24, r10
     f58:	b8 01       	movw	r22, r16
     f5a:	a6 01       	movw	r20, r12
     f5c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_SetPoint>
		
		if (dx != 0)
     f60:	ef 28       	or	r14, r15
     f62:	29 f0       	breq	.+10     	; 0xf6e <LCD_Draw4.1641+0x54>
			LCD_SetPoint(mx, y, color);
     f64:	c3 01       	movw	r24, r6
     f66:	b8 01       	movw	r22, r16
     f68:	a6 01       	movw	r20, r12
     f6a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_SetPoint>
		
		if (dy != 0)
     f6e:	cd 2b       	or	r28, r29
     f70:	29 f0       	breq	.+10     	; 0xf7c <LCD_Draw4.1641+0x62>
			LCD_SetPoint(x, my, color);
     f72:	c5 01       	movw	r24, r10
     f74:	b4 01       	movw	r22, r8
     f76:	a6 01       	movw	r20, r12
     f78:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_SetPoint>
		
		LCD_SetPoint(mx, my, color);
     f7c:	c3 01       	movw	r24, r6
     f7e:	b4 01       	movw	r22, r8
     f80:	a6 01       	movw	r20, r12
     f82:	0e 94 bf 06 	call	0xd7e	; 0xd7e <LCD_SetPoint>
	}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	cf 90       	pop	r12
     f96:	bf 90       	pop	r11
     f98:	af 90       	pop	r10
     f9a:	9f 90       	pop	r9
     f9c:	8f 90       	pop	r8
     f9e:	7f 90       	pop	r7
     fa0:	6f 90       	pop	r6
     fa2:	08 95       	ret

00000fa4 <LCD_DrawCircle>:

///////////////////////////////////////////////
//
// LCD_DrawCircle(x, y, radius, color, fill);
//
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {
     fa4:	2f 92       	push	r2
     fa6:	3f 92       	push	r3
     fa8:	4f 92       	push	r4
     faa:	5f 92       	push	r5
     fac:	6f 92       	push	r6
     fae:	7f 92       	push	r7
     fb0:	8f 92       	push	r8
     fb2:	9f 92       	push	r9
     fb4:	af 92       	push	r10
     fb6:	bf 92       	push	r11
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	29 97       	sbiw	r28, 0x09	; 9
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	8c 83       	std	Y+4, r24	; 0x04
     fda:	9d 83       	std	Y+5, r25	; 0x05
     fdc:	6e 83       	std	Y+6, r22	; 0x06
     fde:	7f 83       	std	Y+7, r23	; 0x07
     fe0:	3a 83       	std	Y+2, r19	; 0x02
     fe2:	29 83       	std	Y+1, r18	; 0x01
     fe4:	0b 83       	std	Y+3, r16	; 0x03
			if (dx != dy)
				LCD_Draw4(x, y, dy, dx, color);
		}
	}

	int error = -radius;
     fe6:	22 24       	eor	r2, r2
     fe8:	33 24       	eor	r3, r3
     fea:	24 1a       	sub	r2, r20
     fec:	35 0a       	sbc	r3, r21
	int dx = radius;
     fee:	2a 01       	movw	r4, r20
     ff0:	19 86       	std	Y+9, r1	; 0x09
     ff2:	18 86       	std	Y+8, r1	; 0x08
     ff4:	7f c0       	rjmp	.+254    	; 0x10f4 <LCD_DrawCircle+0x150>

	// Draw 8 mirrored points
	//
	void LCD_Draw8 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color, bool fill) {
		
		if (fill) {
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	88 23       	and	r24, r24
     ffa:	09 f4       	brne	.+2      	; 0xffe <LCD_DrawCircle+0x5a>
     ffc:	4b c0       	rjmp	.+150    	; 0x1094 <LCD_DrawCircle+0xf0>
			
			LCD_Fill(x-dy, y-dx, dy<< 1, 1, color);
     ffe:	ec 80       	ldd	r14, Y+4	; 0x04
    1000:	fd 80       	ldd	r15, Y+5	; 0x05
    1002:	37 01       	movw	r6, r14
    1004:	e8 85       	ldd	r30, Y+8	; 0x08
    1006:	f9 85       	ldd	r31, Y+9	; 0x09
    1008:	6e 1a       	sub	r6, r30
    100a:	7f 0a       	sbc	r7, r31
    100c:	ce 80       	ldd	r12, Y+6	; 0x06
    100e:	df 80       	ldd	r13, Y+7	; 0x07
    1010:	4f 01       	movw	r8, r30
    1012:	88 0c       	add	r8, r8
    1014:	99 1c       	adc	r9, r9
    1016:	b6 01       	movw	r22, r12
    1018:	64 19       	sub	r22, r4
    101a:	75 09       	sbc	r23, r5
    101c:	c3 01       	movw	r24, r6
    101e:	a4 01       	movw	r20, r8
    1020:	21 e0       	ldi	r18, 0x01	; 1
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	09 81       	ldd	r16, Y+1	; 0x01
    1026:	1a 81       	ldd	r17, Y+2	; 0x02
    1028:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_Fill>
			LCD_Fill(x-dx, y-dy, dx<< 1, 1, color);
    102c:	e4 18       	sub	r14, r4
    102e:	f5 08       	sbc	r15, r5
    1030:	52 01       	movw	r10, r4
    1032:	aa 0c       	add	r10, r10
    1034:	bb 1c       	adc	r11, r11
    1036:	b6 01       	movw	r22, r12
    1038:	88 85       	ldd	r24, Y+8	; 0x08
    103a:	99 85       	ldd	r25, Y+9	; 0x09
    103c:	68 1b       	sub	r22, r24
    103e:	79 0b       	sbc	r23, r25
    1040:	c7 01       	movw	r24, r14
    1042:	a5 01       	movw	r20, r10
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	09 81       	ldd	r16, Y+1	; 0x01
    104a:	1a 81       	ldd	r17, Y+2	; 0x02
    104c:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_Fill>
			LCD_Fill(x-dx, y+dy, dx<< 1, 1, color);
    1050:	68 85       	ldd	r22, Y+8	; 0x08
    1052:	79 85       	ldd	r23, Y+9	; 0x09
    1054:	6c 0d       	add	r22, r12
    1056:	7d 1d       	adc	r23, r13
    1058:	c7 01       	movw	r24, r14
    105a:	a5 01       	movw	r20, r10
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	09 81       	ldd	r16, Y+1	; 0x01
    1062:	1a 81       	ldd	r17, Y+2	; 0x02
    1064:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_Fill>
			LCD_Fill(x-dy, y+dx, dy<< 1, 1, color);
    1068:	c4 0c       	add	r12, r4
    106a:	d5 1c       	adc	r13, r5
    106c:	c3 01       	movw	r24, r6
    106e:	b6 01       	movw	r22, r12
    1070:	a4 01       	movw	r20, r8
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	09 81       	ldd	r16, Y+1	; 0x01
    1078:	1a 81       	ldd	r17, Y+2	; 0x02
    107a:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_Fill>
			LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	40 e4       	ldi	r20, 0x40	; 64
    1088:	51 e0       	ldi	r21, 0x01	; 1
    108a:	20 ef       	ldi	r18, 0xF0	; 240
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_SetBounds>
    1092:	1a c0       	rjmp	.+52     	; 0x10c8 <LCD_DrawCircle+0x124>
		}
		else {
			
			LCD_Draw4(x, y, dx, dy, color);
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	6e 81       	ldd	r22, Y+6	; 0x06
    109a:	7f 81       	ldd	r23, Y+7	; 0x07
    109c:	a2 01       	movw	r20, r4
    109e:	28 85       	ldd	r18, Y+8	; 0x08
    10a0:	39 85       	ldd	r19, Y+9	; 0x09
    10a2:	09 81       	ldd	r16, Y+1	; 0x01
    10a4:	1a 81       	ldd	r17, Y+2	; 0x02
    10a6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LCD_Draw4.1641>
			
			if (dx != dy)
    10aa:	e8 85       	ldd	r30, Y+8	; 0x08
    10ac:	f9 85       	ldd	r31, Y+9	; 0x09
    10ae:	4e 16       	cp	r4, r30
    10b0:	5f 06       	cpc	r5, r31
    10b2:	51 f0       	breq	.+20     	; 0x10c8 <LCD_DrawCircle+0x124>
				LCD_Draw4(x, y, dy, dx, color);
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	6e 81       	ldd	r22, Y+6	; 0x06
    10ba:	7f 81       	ldd	r23, Y+7	; 0x07
    10bc:	af 01       	movw	r20, r30
    10be:	92 01       	movw	r18, r4
    10c0:	09 81       	ldd	r16, Y+1	; 0x01
    10c2:	1a 81       	ldd	r17, Y+2	; 0x02
    10c4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LCD_Draw4.1641>
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
		dy++;
    10c8:	28 85       	ldd	r18, Y+8	; 0x08
    10ca:	39 85       	ldd	r19, Y+9	; 0x09
    10cc:	2f 5f       	subi	r18, 0xFF	; 255
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
    10d0:	88 85       	ldd	r24, Y+8	; 0x08
    10d2:	99 85       	ldd	r25, Y+9	; 0x09
    10d4:	28 0e       	add	r2, r24
    10d6:	39 1e       	adc	r3, r25
		dy++;
		error += dy;
    10d8:	22 0e       	add	r2, r18
    10da:	33 1e       	adc	r3, r19
		
		if (error >= 0) {
    10dc:	37 fc       	sbrc	r3, 7
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <LCD_DrawCircle+0x14c>
			
			dx--;
    10e0:	08 94       	sec
    10e2:	41 08       	sbc	r4, r1
    10e4:	51 08       	sbc	r5, r1
			error -= dx<< 1;
    10e6:	c2 01       	movw	r24, r4
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	28 1a       	sub	r2, r24
    10ee:	39 0a       	sbc	r3, r25
    10f0:	39 87       	std	Y+9, r19	; 0x09
    10f2:	28 87       	std	Y+8, r18	; 0x08
	int dx = radius;
	int dy = 0;

	//	draws in 4 strips from top down and middle up + reflection about y
	//
	while (dx >= dy) {
    10f4:	e8 85       	ldd	r30, Y+8	; 0x08
    10f6:	f9 85       	ldd	r31, Y+9	; 0x09
    10f8:	4e 16       	cp	r4, r30
    10fa:	5f 06       	cpc	r5, r31
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <LCD_DrawCircle+0x15c>
    10fe:	7b cf       	rjmp	.-266    	; 0xff6 <LCD_DrawCircle+0x52>
			
			dx--;
			error -= dx<< 1;
		}
	}
}
    1100:	29 96       	adiw	r28, 0x09	; 9
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	9f 90       	pop	r9
    1122:	8f 90       	pop	r8
    1124:	7f 90       	pop	r7
    1126:	6f 90       	pop	r6
    1128:	5f 90       	pop	r5
    112a:	4f 90       	pop	r4
    112c:	3f 90       	pop	r3
    112e:	2f 90       	pop	r2
    1130:	08 95       	ret

00001132 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	d8 2e       	mov	r13, r24
    113e:	7a 01       	movw	r14, r20
    1140:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1142:	87 ff       	sbrs	r24, 7
    1144:	0b c0       	rjmp	.+22     	; 0x115c <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1146:	87 e7       	ldi	r24, 0x77	; 119
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
		if (res > 1) return res;
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	98 f5       	brcc	.+102    	; 0x11be <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1158:	8f e7       	ldi	r24, 0x7F	; 127
    115a:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    115c:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    115e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
	SELECT();
    1162:	c3 98       	cbi	0x18, 3	; 24
	rcv_spi();
    1164:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    1168:	8d 2d       	mov	r24, r13
    116a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    116e:	81 2f       	mov	r24, r17
    1170:	99 27       	eor	r25, r25
    1172:	aa 27       	eor	r26, r26
    1174:	bb 27       	eor	r27, r27
    1176:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    117a:	c8 01       	movw	r24, r16
    117c:	aa 27       	eor	r26, r26
    117e:	bb 27       	eor	r27, r27
    1180:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    1184:	bb 27       	eor	r27, r27
    1186:	a1 2f       	mov	r26, r17
    1188:	90 2f       	mov	r25, r16
    118a:	8f 2d       	mov	r24, r15
    118c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    1190:	8e 2d       	mov	r24, r14
    1192:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    1196:	80 e4       	ldi	r24, 0x40	; 64
    1198:	d8 16       	cp	r13, r24
    119a:	11 f4       	brne	.+4      	; 0x11a0 <send_cmd+0x6e>
    119c:	85 e9       	ldi	r24, 0x95	; 149
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    11a0:	88 e4       	ldi	r24, 0x48	; 72
    11a2:	d8 16       	cp	r13, r24
    11a4:	11 f4       	brne	.+4      	; 0x11aa <send_cmd+0x78>
    11a6:	87 e8       	ldi	r24, 0x87	; 135
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <send_cmd+0x7a>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    11ac:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
    11b0:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    11b2:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
	} while ((res & 0x80) && --n);
    11b6:	87 ff       	sbrs	r24, 7
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <send_cmd+0x8c>
    11ba:	11 50       	subi	r17, 0x01	; 1
    11bc:	d1 f7       	brne	.-12     	; 0x11b2 <send_cmd+0x80>

	return res;			/* Return with the response value */
}
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	08 95       	ret

000011ca <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	6c 01       	movw	r12, r24
    11dc:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    11de:	80 91 b6 00 	lds	r24, 0x00B6
    11e2:	83 fd       	sbrc	r24, 3
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <disk_readp+0x2a>
    11e6:	39 e0       	ldi	r19, 0x09	; 9
    11e8:	44 0f       	add	r20, r20
    11ea:	55 1f       	adc	r21, r21
    11ec:	66 1f       	adc	r22, r22
    11ee:	77 1f       	adc	r23, r23
    11f0:	3a 95       	dec	r19
    11f2:	d1 f7       	brne	.-12     	; 0x11e8 <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    11f4:	81 e5       	ldi	r24, 0x51	; 81
    11f6:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    11fa:	88 23       	and	r24, r24
    11fc:	61 f5       	brne	.+88     	; 0x1256 <disk_readp+0x8c>
    11fe:	c0 e4       	ldi	r28, 0x40	; 64
    1200:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
    1202:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
		} while (rc == 0xFF && --bc);
    1206:	8f 3f       	cpi	r24, 0xFF	; 255
    1208:	19 f4       	brne	.+6      	; 0x1210 <disk_readp+0x46>
    120a:	21 97       	sbiw	r28, 0x01	; 1
    120c:	d1 f7       	brne	.-12     	; 0x1202 <disk_readp+0x38>
    120e:	23 c0       	rjmp	.+70     	; 0x1256 <disk_readp+0x8c>

		if (rc == 0xFE) {				/* A data packet arrived */
    1210:	8e 3f       	cpi	r24, 0xFE	; 254
    1212:	09 f5       	brne	.+66     	; 0x1256 <disk_readp+0x8c>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    1214:	e1 14       	cp	r14, r1
    1216:	f1 04       	cpc	r15, r1
    1218:	29 f0       	breq	.+10     	; 0x1224 <disk_readp+0x5a>
    121a:	e7 01       	movw	r28, r14
				do rcv_spi(); while (--ofs);
    121c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    1220:	21 97       	sbiw	r28, 0x01	; 1
    1222:	e1 f7       	brne	.-8      	; 0x121c <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    1224:	c1 14       	cp	r12, r1
    1226:	d1 04       	cpc	r13, r1
    1228:	41 f0       	breq	.+16     	; 0x123a <disk_readp+0x70>
    122a:	e8 01       	movw	r28, r16
				do {
					*buff++ = rcv_spi();
    122c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    1230:	f6 01       	movw	r30, r12
    1232:	81 93       	st	Z+, r24
    1234:	6f 01       	movw	r12, r30
				} while (--cnt);
    1236:	21 97       	sbiw	r28, 0x01	; 1
    1238:	c9 f7       	brne	.-14     	; 0x122c <disk_readp+0x62>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    123a:	cc 27       	eor	r28, r28
    123c:	dd 27       	eor	r29, r29
    123e:	ce 19       	sub	r28, r14
    1240:	df 09       	sbc	r29, r15
    1242:	ce 5f       	subi	r28, 0xFE	; 254
    1244:	dd 4f       	sbci	r29, 0xFD	; 253
    1246:	c0 1b       	sub	r28, r16
    1248:	d1 0b       	sbc	r29, r17
					*buff++ = rcv_spi();
				} while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    124a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    124e:	21 97       	sbiw	r28, 0x01	; 1
    1250:	e1 f7       	brne	.-8      	; 0x124a <disk_readp+0x80>
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <disk_readp+0x8e>
    1256:	11 e0       	ldi	r17, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
    1258:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    125a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>

	return res;
}
    125e:	81 2f       	mov	r24, r17
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	08 95       	ret

00001272 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	8c 01       	movw	r16, r24
	WORD bc;
	static WORD wc;

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	d9 f0       	breq	.+54     	; 0x12b6 <disk_writep+0x44>
		bc = (WORD)sa;
    1280:	ea 01       	movw	r28, r20
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1284:	f8 01       	movw	r30, r16
    1286:	81 91       	ld	r24, Z+
    1288:	8f 01       	movw	r16, r30
    128a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
			wc--; bc--;
    128e:	80 91 b4 00 	lds	r24, 0x00B4
    1292:	90 91 b5 00 	lds	r25, 0x00B5
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	90 93 b5 00 	sts	0x00B5, r25
    129c:	80 93 b4 00 	sts	0x00B4, r24
    12a0:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    12a2:	20 97       	sbiw	r28, 0x00	; 0
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <disk_writep+0x36>
    12a6:	52 c0       	rjmp	.+164    	; 0x134c <disk_writep+0xda>
    12a8:	80 91 b4 00 	lds	r24, 0x00B4
    12ac:	90 91 b5 00 	lds	r25, 0x00B5
    12b0:	89 2b       	or	r24, r25
    12b2:	41 f7       	brne	.-48     	; 0x1284 <disk_writep+0x12>
    12b4:	4b c0       	rjmp	.+150    	; 0x134c <disk_writep+0xda>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    12b6:	41 15       	cp	r20, r1
    12b8:	51 05       	cpc	r21, r1
    12ba:	61 05       	cpc	r22, r1
    12bc:	71 05       	cpc	r23, r1
    12be:	f9 f0       	breq	.+62     	; 0x12fe <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    12c0:	80 91 b6 00 	lds	r24, 0x00B6
    12c4:	83 fd       	sbrc	r24, 3
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <disk_writep+0x64>
    12c8:	e9 e0       	ldi	r30, 0x09	; 9
    12ca:	44 0f       	add	r20, r20
    12cc:	55 1f       	adc	r21, r21
    12ce:	66 1f       	adc	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	ea 95       	dec	r30
    12d4:	d1 f7       	brne	.-12     	; 0x12ca <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    12d6:	88 e5       	ldi	r24, 0x58	; 88
    12d8:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    12dc:	88 23       	and	r24, r24
    12de:	11 f0       	breq	.+4      	; 0x12e4 <disk_writep+0x72>
    12e0:	11 e0       	ldi	r17, 0x01	; 1
    12e2:	35 c0       	rjmp	.+106    	; 0x134e <disk_writep+0xdc>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
    12ea:	8e ef       	ldi	r24, 0xFE	; 254
    12ec:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
				wc = 512;							/* Set byte counter */
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	92 e0       	ldi	r25, 0x02	; 2
    12f4:	90 93 b5 00 	sts	0x00B5, r25
    12f8:	80 93 b4 00 	sts	0x00B4, r24
    12fc:	27 c0       	rjmp	.+78     	; 0x134c <disk_writep+0xda>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    12fe:	c0 91 b4 00 	lds	r28, 0x00B4
    1302:	d0 91 b5 00 	lds	r29, 0x00B5
    1306:	22 96       	adiw	r28, 0x02	; 2
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xmit_spi>
    1310:	21 97       	sbiw	r28, 0x01	; 1
    1312:	20 97       	sbiw	r28, 0x00	; 0
    1314:	d1 f7       	brne	.-12     	; 0x130a <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
    1316:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    131a:	8f 71       	andi	r24, 0x1F	; 31
    131c:	85 30       	cpi	r24, 0x05	; 5
    131e:	89 f4       	brne	.+34     	; 0x1342 <disk_writep+0xd0>
    1320:	c8 e8       	ldi	r28, 0x88	; 136
    1322:	d3 e1       	ldi	r29, 0x13	; 19
    1324:	03 c0       	rjmp	.+6      	; 0x132c <disk_writep+0xba>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
    1326:	0e 94 e5 16 	call	0x2dca	; 0x2dca <dly_100us>
    132a:	21 97       	sbiw	r28, 0x01	; 1
    132c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    1330:	8f 3f       	cpi	r24, 0xFF	; 255
    1332:	19 f0       	breq	.+6      	; 0x133a <disk_writep+0xc8>
    1334:	20 97       	sbiw	r28, 0x00	; 0
    1336:	b9 f7       	brne	.-18     	; 0x1326 <disk_writep+0xb4>
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <disk_writep+0xd0>
				if (bc) res = RES_OK;
    133a:	cd 2b       	or	r28, r29
    133c:	11 f0       	breq	.+4      	; 0x1342 <disk_writep+0xd0>
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <disk_writep+0xd2>
    1342:	11 e0       	ldi	r17, 0x01	; 1
			}
			DESELECT();
    1344:	c3 9a       	sbi	0x18, 3	; 24
			rcv_spi();
    1346:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    134a:	01 c0       	rjmp	.+2      	; 0x134e <disk_writep+0xdc>
    134c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}

	return res;
}
    134e:	81 2f       	mov	r24, r17
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <disk_initialize+0x12>
    136c:	00 d0       	rcall	.+0      	; 0x136e <disk_initialize+0x14>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
    1372:	80 91 b6 00 	lds	r24, 0x00B6
    1376:	88 23       	and	r24, r24
    1378:	51 f0       	breq	.+20     	; 0x138e <disk_initialize+0x34>
    137a:	c3 99       	sbic	0x18, 3	; 24
    137c:	08 c0       	rjmp	.+16     	; 0x138e <disk_initialize+0x34>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	0e 94 39 09 	call	0x1272	; 0x1272 <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
    138e:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <init_spi>
	DESELECT();
    1392:	c3 9a       	sbi	0x18, 3	; 24
    1394:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
    1396:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    139a:	11 50       	subi	r17, 0x01	; 1
    139c:	e1 f7       	brne	.-8      	; 0x1396 <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    139e:	80 e4       	ldi	r24, 0x40	; 64
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <disk_initialize+0x58>
    13b0:	69 c0       	rjmp	.+210    	; 0x1484 <disk_initialize+0x12a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    13b2:	88 e4       	ldi	r24, 0x48	; 72
    13b4:	4a ea       	ldi	r20, 0xAA	; 170
    13b6:	51 e0       	ldi	r21, 0x01	; 1
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	e1 f5       	brne	.+120    	; 0x143c <disk_initialize+0xe2>
    13c4:	6e 01       	movw	r12, r28
    13c6:	08 94       	sec
    13c8:	c1 1c       	adc	r12, r1
    13ca:	d1 1c       	adc	r13, r1
    13cc:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    13ce:	8e 01       	movw	r16, r28
    13d0:	0b 5f       	subi	r16, 0xFB	; 251
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    13d8:	f7 01       	movw	r30, r14
    13da:	81 93       	st	Z+, r24
    13dc:	7f 01       	movw	r14, r30
    13de:	e0 17       	cp	r30, r16
    13e0:	f1 07       	cpc	r31, r17
    13e2:	c1 f7       	brne	.-16     	; 0x13d4 <disk_initialize+0x7a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	09 f0       	breq	.+2      	; 0x13ec <disk_initialize+0x92>
    13ea:	4c c0       	rjmp	.+152    	; 0x1484 <disk_initialize+0x12a>
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	8a 3a       	cpi	r24, 0xAA	; 170
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <disk_initialize+0x9a>
    13f2:	48 c0       	rjmp	.+144    	; 0x1484 <disk_initialize+0x12a>
    13f4:	00 e1       	ldi	r16, 0x10	; 16
    13f6:	17 e2       	ldi	r17, 0x27	; 39
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <disk_initialize+0xac>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    13fa:	0e 94 e5 16 	call	0x2dca	; 0x2dca <dly_100us>
    13fe:	01 50       	subi	r16, 0x01	; 1
    1400:	10 40       	sbci	r17, 0x00	; 0
    1402:	09 f4       	brne	.+2      	; 0x1406 <disk_initialize+0xac>
    1404:	3f c0       	rjmp	.+126    	; 0x1484 <disk_initialize+0x12a>
    1406:	89 ee       	ldi	r24, 0xE9	; 233
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	70 e4       	ldi	r23, 0x40	; 64
    1410:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    1414:	88 23       	and	r24, r24
    1416:	89 f7       	brne	.-30     	; 0x13fa <disk_initialize+0xa0>
    1418:	4c c0       	rjmp	.+152    	; 0x14b2 <disk_initialize+0x158>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    141a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    141e:	f6 01       	movw	r30, r12
    1420:	81 93       	st	Z+, r24
    1422:	6f 01       	movw	r12, r30
    1424:	ee 15       	cp	r30, r14
    1426:	ff 05       	cpc	r31, r15
    1428:	c1 f7       	brne	.-16     	; 0x141a <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	86 fd       	sbrc	r24, 6
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <disk_initialize+0xdc>
    1430:	04 e0       	ldi	r16, 0x04	; 4
    1432:	f0 2e       	mov	r15, r16
    1434:	28 c0       	rjmp	.+80     	; 0x1486 <disk_initialize+0x12c>
    1436:	1c e0       	ldi	r17, 0x0C	; 12
    1438:	f1 2e       	mov	r15, r17
    143a:	25 c0       	rjmp	.+74     	; 0x1486 <disk_initialize+0x12c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    143c:	89 ee       	ldi	r24, 0xE9	; 233
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    144a:	82 30       	cpi	r24, 0x02	; 2
    144c:	28 f0       	brcs	.+10     	; 0x1458 <disk_initialize+0xfe>
    144e:	b1 e4       	ldi	r27, 0x41	; 65
    1450:	eb 2e       	mov	r14, r27
    1452:	ff 24       	eor	r15, r15
    1454:	f3 94       	inc	r15
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <disk_initialize+0x106>
    1458:	a9 ee       	ldi	r26, 0xE9	; 233
    145a:	ea 2e       	mov	r14, r26
    145c:	f2 e0       	ldi	r31, 0x02	; 2
    145e:	ff 2e       	mov	r15, r31
    1460:	00 e1       	ldi	r16, 0x10	; 16
    1462:	17 e2       	ldi	r17, 0x27	; 39
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    1466:	0e 94 e5 16 	call	0x2dca	; 0x2dca <dly_100us>
    146a:	01 50       	subi	r16, 0x01	; 1
    146c:	10 40       	sbci	r17, 0x00	; 0
    146e:	51 f0       	breq	.+20     	; 0x1484 <disk_initialize+0x12a>
    1470:	8e 2d       	mov	r24, r14
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    147e:	88 23       	and	r24, r24
    1480:	91 f7       	brne	.-28     	; 0x1466 <disk_initialize+0x10c>
    1482:	22 c0       	rjmp	.+68     	; 0x14c8 <disk_initialize+0x16e>
    1484:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1486:	f0 92 b6 00 	sts	0x00B6, r15
	DESELECT();
    148a:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    148c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rcv_spi>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	ff 20       	and	r15, r15
    1494:	09 f4       	brne	.+2      	; 0x1498 <disk_initialize+0x13e>
    1496:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    14b2:	8a e7       	ldi	r24, 0x7A	; 122
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <disk_initialize+0x16c>
    14c4:	aa cf       	rjmp	.-172    	; 0x141a <disk_initialize+0xc0>
    14c6:	de cf       	rjmp	.-68     	; 0x1484 <disk_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    14c8:	80 e5       	ldi	r24, 0x50	; 80
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	52 e0       	ldi	r21, 0x02	; 2
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	0e 94 99 08 	call	0x1132	; 0x1132 <send_cmd>
    14d6:	88 23       	and	r24, r24
    14d8:	a9 f6       	brne	.-86     	; 0x1484 <disk_initialize+0x12a>
    14da:	d5 cf       	rjmp	.-86     	; 0x1486 <disk_initialize+0x12c>

000014dc <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
    14ee:	c0 91 b7 00 	lds	r28, 0x00B7
    14f2:	d0 91 b8 00 	lds	r29, 0x00B8


	dj->index = 0;
    14f6:	fc 01       	movw	r30, r24
    14f8:	11 82       	std	Z+1, r1	; 0x01
    14fa:	10 82       	st	Z, r1
	clst = dj->sclust;
    14fc:	24 81       	ldd	r18, Z+4	; 0x04
    14fe:	35 81       	ldd	r19, Z+5	; 0x05
    1500:	46 81       	ldd	r20, Z+6	; 0x06
    1502:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    1504:	21 30       	cpi	r18, 0x01	; 1
    1506:	31 05       	cpc	r19, r1
    1508:	41 05       	cpc	r20, r1
    150a:	51 05       	cpc	r21, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <dir_rewind+0x34>
    150e:	5b c0       	rjmp	.+182    	; 0x15c6 <dir_rewind+0xea>
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	9f 81       	ldd	r25, Y+7	; 0x07
    1514:	a8 85       	ldd	r26, Y+8	; 0x08
    1516:	b9 85       	ldd	r27, Y+9	; 0x09
    1518:	28 17       	cp	r18, r24
    151a:	39 07       	cpc	r19, r25
    151c:	4a 07       	cpc	r20, r26
    151e:	5b 07       	cpc	r21, r27
    1520:	08 f0       	brcs	.+2      	; 0x1524 <dir_rewind+0x48>
    1522:	51 c0       	rjmp	.+162    	; 0x15c6 <dir_rewind+0xea>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1524:	21 15       	cp	r18, r1
    1526:	31 05       	cpc	r19, r1
    1528:	41 05       	cpc	r20, r1
    152a:	51 05       	cpc	r21, r1
    152c:	39 f4       	brne	.+14     	; 0x153c <dir_rewind+0x60>
    152e:	88 81       	ld	r24, Y
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	21 f4       	brne	.+8      	; 0x153c <dir_rewind+0x60>
		clst = (CLUST)fs->dirbase;
    1534:	2e 85       	ldd	r18, Y+14	; 0x0e
    1536:	3f 85       	ldd	r19, Y+15	; 0x0f
    1538:	48 89       	ldd	r20, Y+16	; 0x10
    153a:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
    153c:	f6 01       	movw	r30, r12
    153e:	20 87       	std	Z+8, r18	; 0x08
    1540:	31 87       	std	Z+9, r19	; 0x09
    1542:	42 87       	std	Z+10, r20	; 0x0a
    1544:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    1546:	21 15       	cp	r18, r1
    1548:	31 05       	cpc	r19, r1
    154a:	41 05       	cpc	r20, r1
    154c:	51 05       	cpc	r21, r1
    154e:	81 f1       	breq	.+96     	; 0x15b0 <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
    1550:	8e ef       	ldi	r24, 0xFE	; 254
    1552:	e8 2e       	mov	r14, r24
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	f8 2e       	mov	r15, r24
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	08 2f       	mov	r16, r24
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	18 2f       	mov	r17, r24
    1560:	e2 0e       	add	r14, r18
    1562:	f3 1e       	adc	r15, r19
    1564:	04 1f       	adc	r16, r20
    1566:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1568:	8e 81       	ldd	r24, Y+6	; 0x06
    156a:	9f 81       	ldd	r25, Y+7	; 0x07
    156c:	a8 85       	ldd	r26, Y+8	; 0x08
    156e:	b9 85       	ldd	r27, Y+9	; 0x09
    1570:	02 97       	sbiw	r24, 0x02	; 2
    1572:	a1 09       	sbc	r26, r1
    1574:	b1 09       	sbc	r27, r1
    1576:	e8 16       	cp	r14, r24
    1578:	f9 06       	cpc	r15, r25
    157a:	0a 07       	cpc	r16, r26
    157c:	1b 07       	cpc	r17, r27
    157e:	28 f0       	brcs	.+10     	; 0x158a <dir_rewind+0xae>
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	17 c0       	rjmp	.+46     	; 0x15b8 <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
    158a:	2a 81       	ldd	r18, Y+2	; 0x02
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	c8 01       	movw	r24, r16
    1594:	b7 01       	movw	r22, r14
    1596:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    159a:	9b 01       	movw	r18, r22
    159c:	ac 01       	movw	r20, r24
    159e:	8a 89       	ldd	r24, Y+18	; 0x12
    15a0:	9b 89       	ldd	r25, Y+19	; 0x13
    15a2:	ac 89       	ldd	r26, Y+20	; 0x14
    15a4:	bd 89       	ldd	r27, Y+21	; 0x15
    15a6:	28 0f       	add	r18, r24
    15a8:	39 1f       	adc	r19, r25
    15aa:	4a 1f       	adc	r20, r26
    15ac:	5b 1f       	adc	r21, r27
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <dir_rewind+0xdc>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    15b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    15b2:	3f 85       	ldd	r19, Y+15	; 0x0f
    15b4:	48 89       	ldd	r20, Y+16	; 0x10
    15b6:	59 89       	ldd	r21, Y+17	; 0x11
    15b8:	f6 01       	movw	r30, r12
    15ba:	24 87       	std	Z+12, r18	; 0x0c
    15bc:	35 87       	std	Z+13, r19	; 0x0d
    15be:	46 87       	std	Z+14, r20	; 0x0e
    15c0:	57 87       	std	Z+15, r21	; 0x0f
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
    15c6:	81 e0       	ldi	r24, 0x01	; 1
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	08 95       	ret

000015da <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    15da:	6f 92       	push	r6
    15dc:	7f 92       	push	r7
    15de:	8f 92       	push	r8
    15e0:	9f 92       	push	r9
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <get_fat+0x1e>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <get_fat+0x20>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	4b 01       	movw	r8, r22
    1600:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
    1602:	60 90 b7 00 	lds	r6, 0x00B7
    1606:	70 90 b8 00 	lds	r7, 0x00B8


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	88 16       	cp	r8, r24
    160e:	91 04       	cpc	r9, r1
    1610:	a1 04       	cpc	r10, r1
    1612:	b1 04       	cpc	r11, r1
    1614:	08 f4       	brcc	.+2      	; 0x1618 <get_fat+0x3e>
    1616:	b4 c0       	rjmp	.+360    	; 0x1780 <get_fat+0x1a6>
    1618:	f3 01       	movw	r30, r6
    161a:	86 81       	ldd	r24, Z+6	; 0x06
    161c:	97 81       	ldd	r25, Z+7	; 0x07
    161e:	a0 85       	ldd	r26, Z+8	; 0x08
    1620:	b1 85       	ldd	r27, Z+9	; 0x09
    1622:	88 16       	cp	r8, r24
    1624:	99 06       	cpc	r9, r25
    1626:	aa 06       	cpc	r10, r26
    1628:	bb 06       	cpc	r11, r27
    162a:	08 f0       	brcs	.+2      	; 0x162e <get_fat+0x54>
    162c:	a9 c0       	rjmp	.+338    	; 0x1780 <get_fat+0x1a6>
		return 1;

	switch (fs->fs_type) {
    162e:	80 81       	ld	r24, Z
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	09 f4       	brne	.+2      	; 0x1636 <get_fat+0x5c>
    1634:	5f c0       	rjmp	.+190    	; 0x16f4 <get_fat+0x11a>
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	09 f4       	brne	.+2      	; 0x163c <get_fat+0x62>
    163a:	7b c0       	rjmp	.+246    	; 0x1732 <get_fat+0x158>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	09 f0       	breq	.+2      	; 0x1642 <get_fat+0x68>
    1640:	9f c0       	rjmp	.+318    	; 0x1780 <get_fat+0x1a6>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
    1642:	c4 01       	movw	r24, r8
    1644:	96 95       	lsr	r25
    1646:	87 95       	ror	r24
    1648:	88 0d       	add	r24, r8
    164a:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
    164c:	9c 01       	movw	r18, r24
    164e:	31 70       	andi	r19, 0x01	; 1
    1650:	89 2f       	mov	r24, r25
    1652:	99 27       	eor	r25, r25
    1654:	86 95       	lsr	r24
    1656:	6c 01       	movw	r12, r24
    1658:	ee 24       	eor	r14, r14
    165a:	ff 24       	eor	r15, r15
    165c:	f3 01       	movw	r30, r6
    165e:	42 85       	ldd	r20, Z+10	; 0x0a
    1660:	53 85       	ldd	r21, Z+11	; 0x0b
    1662:	64 85       	ldd	r22, Z+12	; 0x0c
    1664:	75 85       	ldd	r23, Z+13	; 0x0d
    1666:	ce 01       	movw	r24, r28
    1668:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
    166a:	f1 e0       	ldi	r31, 0x01	; 1
    166c:	2f 3f       	cpi	r18, 0xFF	; 255
    166e:	3f 07       	cpc	r19, r31
    1670:	49 f0       	breq	.+18     	; 0x1684 <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
    1672:	c4 0e       	add	r12, r20
    1674:	d5 1e       	adc	r13, r21
    1676:	e6 1e       	adc	r14, r22
    1678:	f7 1e       	adc	r15, r23
    167a:	b7 01       	movw	r22, r14
    167c:	a6 01       	movw	r20, r12
    167e:	02 e0       	ldi	r16, 0x02	; 2
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	1e c0       	rjmp	.+60     	; 0x16c0 <get_fat+0xe6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
    1684:	4c 0d       	add	r20, r12
    1686:	5d 1d       	adc	r21, r13
    1688:	6e 1d       	adc	r22, r14
    168a:	7f 1d       	adc	r23, r15
    168c:	2f ef       	ldi	r18, 0xFF	; 255
    168e:	31 e0       	ldi	r19, 0x01	; 1
    1690:	01 e0       	ldi	r16, 0x01	; 1
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    1698:	88 23       	and	r24, r24
    169a:	09 f0       	breq	.+2      	; 0x169e <get_fat+0xc4>
    169c:	71 c0       	rjmp	.+226    	; 0x1780 <get_fat+0x1a6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
    169e:	f3 01       	movw	r30, r6
    16a0:	42 85       	ldd	r20, Z+10	; 0x0a
    16a2:	53 85       	ldd	r21, Z+11	; 0x0b
    16a4:	64 85       	ldd	r22, Z+12	; 0x0c
    16a6:	75 85       	ldd	r23, Z+13	; 0x0d
    16a8:	4f 5f       	subi	r20, 0xFF	; 255
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	6f 4f       	sbci	r22, 0xFF	; 255
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	4c 0d       	add	r20, r12
    16b2:	5d 1d       	adc	r21, r13
    16b4:	6e 1d       	adc	r22, r14
    16b6:	7f 1d       	adc	r23, r15
    16b8:	ce 01       	movw	r24, r28
    16ba:	02 96       	adiw	r24, 0x02	; 2
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    16c4:	88 23       	and	r24, r24
    16c6:	09 f0       	breq	.+2      	; 0x16ca <get_fat+0xf0>
    16c8:	5b c0       	rjmp	.+182    	; 0x1780 <get_fat+0x1a6>
		}
		wc = LD_WORD(buf);
    16ca:	69 81       	ldd	r22, Y+1	; 0x01
    16cc:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    16ce:	c4 01       	movw	r24, r8
    16d0:	81 70       	andi	r24, 0x01	; 1
    16d2:	90 70       	andi	r25, 0x00	; 0
    16d4:	89 2b       	or	r24, r25
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <get_fat+0x10c>
    16d8:	a4 e0       	ldi	r26, 0x04	; 4
    16da:	76 95       	lsr	r23
    16dc:	67 95       	ror	r22
    16de:	aa 95       	dec	r26
    16e0:	e1 f7       	brne	.-8      	; 0x16da <get_fat+0x100>
    16e2:	9b 01       	movw	r18, r22
    16e4:	23 c0       	rjmp	.+70     	; 0x172c <get_fat+0x152>
    16e6:	9b 01       	movw	r18, r22
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	3f 70       	andi	r19, 0x0F	; 15
    16ee:	40 70       	andi	r20, 0x00	; 0
    16f0:	50 70       	andi	r21, 0x00	; 0
    16f2:	4a c0       	rjmp	.+148    	; 0x1788 <get_fat+0x1ae>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    16f4:	77 27       	eor	r23, r23
    16f6:	6b 2d       	mov	r22, r11
    16f8:	5a 2d       	mov	r21, r10
    16fa:	49 2d       	mov	r20, r9
    16fc:	f3 01       	movw	r30, r6
    16fe:	82 85       	ldd	r24, Z+10	; 0x0a
    1700:	93 85       	ldd	r25, Z+11	; 0x0b
    1702:	a4 85       	ldd	r26, Z+12	; 0x0c
    1704:	b5 85       	ldd	r27, Z+13	; 0x0d
    1706:	48 0f       	add	r20, r24
    1708:	59 1f       	adc	r21, r25
    170a:	6a 1f       	adc	r22, r26
    170c:	7b 1f       	adc	r23, r27
    170e:	94 01       	movw	r18, r8
    1710:	30 70       	andi	r19, 0x00	; 0
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	02 e0       	ldi	r16, 0x02	; 2
    171c:	10 e0       	ldi	r17, 0x00	; 0
    171e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    1722:	88 23       	and	r24, r24
    1724:	69 f5       	brne	.+90     	; 0x1780 <get_fat+0x1a6>
		return LD_WORD(buf);
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	9c 01       	movw	r18, r24
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	2b c0       	rjmp	.+86     	; 0x1788 <get_fat+0x1ae>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    1732:	b5 01       	movw	r22, r10
    1734:	a4 01       	movw	r20, r8
    1736:	27 e0       	ldi	r18, 0x07	; 7
    1738:	76 95       	lsr	r23
    173a:	67 95       	ror	r22
    173c:	57 95       	ror	r21
    173e:	47 95       	ror	r20
    1740:	2a 95       	dec	r18
    1742:	d1 f7       	brne	.-12     	; 0x1738 <get_fat+0x15e>
    1744:	f3 01       	movw	r30, r6
    1746:	82 85       	ldd	r24, Z+10	; 0x0a
    1748:	93 85       	ldd	r25, Z+11	; 0x0b
    174a:	a4 85       	ldd	r26, Z+12	; 0x0c
    174c:	b5 85       	ldd	r27, Z+13	; 0x0d
    174e:	48 0f       	add	r20, r24
    1750:	59 1f       	adc	r21, r25
    1752:	6a 1f       	adc	r22, r26
    1754:	7b 1f       	adc	r23, r27
    1756:	94 01       	movw	r18, r8
    1758:	2f 77       	andi	r18, 0x7F	; 127
    175a:	30 70       	andi	r19, 0x00	; 0
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	04 e0       	ldi	r16, 0x04	; 4
    176a:	10 e0       	ldi	r17, 0x00	; 0
    176c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    1770:	88 23       	and	r24, r24
    1772:	31 f4       	brne	.+12     	; 0x1780 <get_fat+0x1a6>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    1774:	29 81       	ldd	r18, Y+1	; 0x01
    1776:	3a 81       	ldd	r19, Y+2	; 0x02
    1778:	4b 81       	ldd	r20, Y+3	; 0x03
    177a:	5c 81       	ldd	r21, Y+4	; 0x04
    177c:	5f 70       	andi	r21, 0x0F	; 15
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <get_fat+0x1ae>
    1780:	21 e0       	ldi	r18, 0x01	; 1
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    1788:	b9 01       	movw	r22, r18
    178a:	ca 01       	movw	r24, r20
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	bf 90       	pop	r11
    17a6:	af 90       	pop	r10
    17a8:	9f 90       	pop	r9
    17aa:	8f 90       	pop	r8
    17ac:	7f 90       	pop	r7
    17ae:	6f 90       	pop	r6
    17b0:	08 95       	ret

000017b2 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    17b2:	af 92       	push	r10
    17b4:	bf 92       	push	r11
    17b6:	cf 92       	push	r12
    17b8:	df 92       	push	r13
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    17c8:	c0 91 b7 00 	lds	r28, 0x00B7
    17cc:	d0 91 b8 00 	lds	r29, 0x00B8


	i = dj->index + 1;
    17d0:	fc 01       	movw	r30, r24
    17d2:	c0 80       	ld	r12, Z
    17d4:	d1 80       	ldd	r13, Z+1	; 0x01
    17d6:	08 94       	sec
    17d8:	c1 1c       	adc	r12, r1
    17da:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    17dc:	c1 14       	cp	r12, r1
    17de:	d1 04       	cpc	r13, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <dir_next+0x32>
    17e2:	8f c0       	rjmp	.+286    	; 0x1902 <dir_next+0x150>
    17e4:	24 85       	ldd	r18, Z+12	; 0x0c
    17e6:	35 85       	ldd	r19, Z+13	; 0x0d
    17e8:	46 85       	ldd	r20, Z+14	; 0x0e
    17ea:	57 85       	ldd	r21, Z+15	; 0x0f
    17ec:	21 15       	cp	r18, r1
    17ee:	31 05       	cpc	r19, r1
    17f0:	41 05       	cpc	r20, r1
    17f2:	51 05       	cpc	r21, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <dir_next+0x46>
    17f6:	85 c0       	rjmp	.+266    	; 0x1902 <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    17f8:	c6 01       	movw	r24, r12
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	90 70       	andi	r25, 0x00	; 0
    17fe:	89 2b       	or	r24, r25
    1800:	09 f0       	breq	.+2      	; 0x1804 <dir_next+0x52>
    1802:	7a c0       	rjmp	.+244    	; 0x18f8 <dir_next+0x146>
		dj->sect++;			/* Next sector */
    1804:	2f 5f       	subi	r18, 0xFF	; 255
    1806:	3f 4f       	sbci	r19, 0xFF	; 255
    1808:	4f 4f       	sbci	r20, 0xFF	; 255
    180a:	5f 4f       	sbci	r21, 0xFF	; 255
    180c:	24 87       	std	Z+12, r18	; 0x0c
    180e:	35 87       	std	Z+13, r19	; 0x0d
    1810:	46 87       	std	Z+14, r20	; 0x0e
    1812:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    1814:	40 85       	ldd	r20, Z+8	; 0x08
    1816:	51 85       	ldd	r21, Z+9	; 0x09
    1818:	62 85       	ldd	r22, Z+10	; 0x0a
    181a:	73 85       	ldd	r23, Z+11	; 0x0b
    181c:	41 15       	cp	r20, r1
    181e:	51 05       	cpc	r21, r1
    1820:	61 05       	cpc	r22, r1
    1822:	71 05       	cpc	r23, r1
    1824:	39 f4       	brne	.+14     	; 0x1834 <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	c8 16       	cp	r12, r24
    182c:	d9 06       	cpc	r13, r25
    182e:	08 f4       	brcc	.+2      	; 0x1832 <dir_next+0x80>
    1830:	63 c0       	rjmp	.+198    	; 0x18f8 <dir_next+0x146>
    1832:	67 c0       	rjmp	.+206    	; 0x1902 <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	96 01       	movw	r18, r12
    183c:	e4 e0       	ldi	r30, 0x04	; 4
    183e:	36 95       	lsr	r19
    1840:	27 95       	ror	r18
    1842:	ea 95       	dec	r30
    1844:	e1 f7       	brne	.-8      	; 0x183e <dir_next+0x8c>
    1846:	82 23       	and	r24, r18
    1848:	93 23       	and	r25, r19
    184a:	89 2b       	or	r24, r25
    184c:	09 f0       	breq	.+2      	; 0x1850 <dir_next+0x9e>
    184e:	54 c0       	rjmp	.+168    	; 0x18f8 <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
    1850:	cb 01       	movw	r24, r22
    1852:	ba 01       	movw	r22, r20
    1854:	0e 94 ed 0a 	call	0x15da	; 0x15da <get_fat>
    1858:	9b 01       	movw	r18, r22
    185a:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
    185c:	62 30       	cpi	r22, 0x02	; 2
    185e:	71 05       	cpc	r23, r1
    1860:	81 05       	cpc	r24, r1
    1862:	91 05       	cpc	r25, r1
    1864:	10 f4       	brcc	.+4      	; 0x186a <dir_next+0xb8>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	4d c0       	rjmp	.+154    	; 0x1904 <dir_next+0x152>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    186a:	8e 81       	ldd	r24, Y+6	; 0x06
    186c:	9f 81       	ldd	r25, Y+7	; 0x07
    186e:	a8 85       	ldd	r26, Y+8	; 0x08
    1870:	b9 85       	ldd	r27, Y+9	; 0x09
    1872:	28 17       	cp	r18, r24
    1874:	39 07       	cpc	r19, r25
    1876:	4a 07       	cpc	r20, r26
    1878:	5b 07       	cpc	r21, r27
    187a:	08 f0       	brcs	.+2      	; 0x187e <dir_next+0xcc>
    187c:	42 c0       	rjmp	.+132    	; 0x1902 <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    187e:	f5 01       	movw	r30, r10
    1880:	20 87       	std	Z+8, r18	; 0x08
    1882:	31 87       	std	Z+9, r19	; 0x09
    1884:	42 87       	std	Z+10, r20	; 0x0a
    1886:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1888:	c0 91 b7 00 	lds	r28, 0x00B7
    188c:	d0 91 b8 00 	lds	r29, 0x00B8


	clst -= 2;
    1890:	8e ef       	ldi	r24, 0xFE	; 254
    1892:	e8 2e       	mov	r14, r24
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	f8 2e       	mov	r15, r24
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	08 2f       	mov	r16, r24
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	18 2f       	mov	r17, r24
    18a0:	e2 0e       	add	r14, r18
    18a2:	f3 1e       	adc	r15, r19
    18a4:	04 1f       	adc	r16, r20
    18a6:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	9f 81       	ldd	r25, Y+7	; 0x07
    18ac:	a8 85       	ldd	r26, Y+8	; 0x08
    18ae:	b9 85       	ldd	r27, Y+9	; 0x09
    18b0:	02 97       	sbiw	r24, 0x02	; 2
    18b2:	a1 09       	sbc	r26, r1
    18b4:	b1 09       	sbc	r27, r1
    18b6:	e8 16       	cp	r14, r24
    18b8:	f9 06       	cpc	r15, r25
    18ba:	0a 07       	cpc	r16, r26
    18bc:	1b 07       	cpc	r17, r27
    18be:	28 f0       	brcs	.+10     	; 0x18ca <dir_next+0x118>
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	12 c0       	rjmp	.+36     	; 0x18ee <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
    18ca:	2a 81       	ldd	r18, Y+2	; 0x02
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	50 e0       	ldi	r21, 0x00	; 0
    18d2:	c8 01       	movw	r24, r16
    18d4:	b7 01       	movw	r22, r14
    18d6:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    18da:	9b 01       	movw	r18, r22
    18dc:	ac 01       	movw	r20, r24
    18de:	8a 89       	ldd	r24, Y+18	; 0x12
    18e0:	9b 89       	ldd	r25, Y+19	; 0x13
    18e2:	ac 89       	ldd	r26, Y+20	; 0x14
    18e4:	bd 89       	ldd	r27, Y+21	; 0x15
    18e6:	28 0f       	add	r18, r24
    18e8:	39 1f       	adc	r19, r25
    18ea:	4a 1f       	adc	r20, r26
    18ec:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
    18ee:	f5 01       	movw	r30, r10
    18f0:	24 87       	std	Z+12, r18	; 0x0c
    18f2:	35 87       	std	Z+13, r19	; 0x0d
    18f4:	46 87       	std	Z+14, r20	; 0x0e
    18f6:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
    18f8:	f5 01       	movw	r30, r10
    18fa:	d1 82       	std	Z+1, r13	; 0x01
    18fc:	c0 82       	st	Z, r12
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <dir_next+0x152>

	return FR_OK;
    1902:	83 e0       	ldi	r24, 0x03	; 3
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	bf 90       	pop	r11
    1916:	af 90       	pop	r10
    1918:	08 95       	ret

0000191a <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    191a:	2f 92       	push	r2
    191c:	3f 92       	push	r3
    191e:	4f 92       	push	r4
    1920:	5f 92       	push	r5
    1922:	6f 92       	push	r6
    1924:	7f 92       	push	r7
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    1940:	c0 91 b7 00 	lds	r28, 0x00B7
    1944:	d0 91 b8 00 	lds	r29, 0x00B8


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1948:	20 97       	sbiw	r28, 0x00	; 0
    194a:	11 f4       	brne	.+4      	; 0x1950 <pf_lseek+0x36>
    194c:	86 e0       	ldi	r24, 0x06	; 6
    194e:	02 c1       	rjmp	.+516    	; 0x1b54 <pf_lseek+0x23a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	80 fd       	sbrc	r24, 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <pf_lseek+0x40>
    1956:	85 e0       	ldi	r24, 0x05	; 5
    1958:	fd c0       	rjmp	.+506    	; 0x1b54 <pf_lseek+0x23a>
    195a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    195c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    195e:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1960:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1962:	4e 2f       	mov	r20, r30
    1964:	59 2f       	mov	r21, r25
    1966:	cb 01       	movw	r24, r22
    1968:	da 01       	movw	r26, r20
    196a:	3c 01       	movw	r6, r24
    196c:	4d 01       	movw	r8, r26
    196e:	e6 14       	cp	r14, r6
    1970:	f7 04       	cpc	r15, r7
    1972:	08 05       	cpc	r16, r8
    1974:	19 05       	cpc	r17, r9
    1976:	10 f4       	brcc	.+4      	; 0x197c <pf_lseek+0x62>
    1978:	37 01       	movw	r6, r14
    197a:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
    197c:	ee 88       	ldd	r14, Y+22	; 0x16
    197e:	ff 88       	ldd	r15, Y+23	; 0x17
    1980:	08 8d       	ldd	r16, Y+24	; 0x18
    1982:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
    1984:	1e 8a       	std	Y+22, r1	; 0x16
    1986:	1f 8a       	std	Y+23, r1	; 0x17
    1988:	18 8e       	std	Y+24, r1	; 0x18
    198a:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
    198c:	61 14       	cp	r6, r1
    198e:	71 04       	cpc	r7, r1
    1990:	81 04       	cpc	r8, r1
    1992:	91 04       	cpc	r9, r1
    1994:	09 f4       	brne	.+2      	; 0x1998 <pf_lseek+0x7e>
    1996:	da c0       	rjmp	.+436    	; 0x1b4c <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	a8 2e       	mov	r10, r24
    199c:	bb 24       	eor	r11, r11
    199e:	cc 24       	eor	r12, r12
    19a0:	dd 24       	eor	r13, r13
    19a2:	b9 e0       	ldi	r27, 0x09	; 9
    19a4:	aa 0c       	add	r10, r10
    19a6:	bb 1c       	adc	r11, r11
    19a8:	cc 1c       	adc	r12, r12
    19aa:	dd 1c       	adc	r13, r13
    19ac:	ba 95       	dec	r27
    19ae:	d1 f7       	brne	.-12     	; 0x19a4 <pf_lseek+0x8a>
		if (ifptr > 0 &&
    19b0:	e1 14       	cp	r14, r1
    19b2:	f1 04       	cpc	r15, r1
    19b4:	01 05       	cpc	r16, r1
    19b6:	11 05       	cpc	r17, r1
    19b8:	b1 f1       	breq	.+108    	; 0x1a26 <pf_lseek+0x10c>
    19ba:	17 01       	movw	r2, r14
    19bc:	28 01       	movw	r4, r16
    19be:	08 94       	sec
    19c0:	21 08       	sbc	r2, r1
    19c2:	31 08       	sbc	r3, r1
    19c4:	41 08       	sbc	r4, r1
    19c6:	51 08       	sbc	r5, r1
    19c8:	c4 01       	movw	r24, r8
    19ca:	b3 01       	movw	r22, r6
    19cc:	61 50       	subi	r22, 0x01	; 1
    19ce:	70 40       	sbci	r23, 0x00	; 0
    19d0:	80 40       	sbci	r24, 0x00	; 0
    19d2:	90 40       	sbci	r25, 0x00	; 0
    19d4:	a6 01       	movw	r20, r12
    19d6:	95 01       	movw	r18, r10
    19d8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__udivmodsi4>
    19dc:	79 01       	movw	r14, r18
    19de:	8a 01       	movw	r16, r20
    19e0:	c2 01       	movw	r24, r4
    19e2:	b1 01       	movw	r22, r2
    19e4:	a6 01       	movw	r20, r12
    19e6:	95 01       	movw	r18, r10
    19e8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__udivmodsi4>
    19ec:	e2 16       	cp	r14, r18
    19ee:	f3 06       	cpc	r15, r19
    19f0:	04 07       	cpc	r16, r20
    19f2:	15 07       	cpc	r17, r21
    19f4:	c0 f0       	brcs	.+48     	; 0x1a26 <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    19f6:	88 27       	eor	r24, r24
    19f8:	99 27       	eor	r25, r25
    19fa:	dc 01       	movw	r26, r24
    19fc:	8a 19       	sub	r24, r10
    19fe:	9b 09       	sbc	r25, r11
    1a00:	ac 09       	sbc	r26, r12
    1a02:	bd 09       	sbc	r27, r13
    1a04:	82 21       	and	r24, r2
    1a06:	93 21       	and	r25, r3
    1a08:	a4 21       	and	r26, r4
    1a0a:	b5 21       	and	r27, r5
    1a0c:	8e 8b       	std	Y+22, r24	; 0x16
    1a0e:	9f 8b       	std	Y+23, r25	; 0x17
    1a10:	a8 8f       	std	Y+24, r26	; 0x18
    1a12:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
    1a14:	68 1a       	sub	r6, r24
    1a16:	79 0a       	sbc	r7, r25
    1a18:	8a 0a       	sbc	r8, r26
    1a1a:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
    1a1c:	2a a1       	ldd	r18, Y+34	; 0x22
    1a1e:	3b a1       	ldd	r19, Y+35	; 0x23
    1a20:	4c a1       	ldd	r20, Y+36	; 0x24
    1a22:	5d a1       	ldd	r21, Y+37	; 0x25
    1a24:	33 c0       	rjmp	.+102    	; 0x1a8c <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    1a26:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1a28:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1a2a:	48 a1       	ldd	r20, Y+32	; 0x20
    1a2c:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
    1a2e:	2a a3       	std	Y+34, r18	; 0x22
    1a30:	3b a3       	std	Y+35, r19	; 0x23
    1a32:	4c a3       	std	Y+36, r20	; 0x24
    1a34:	5d a3       	std	Y+37, r21	; 0x25
    1a36:	2a c0       	rjmp	.+84     	; 0x1a8c <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    1a38:	ca 01       	movw	r24, r20
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	0e 94 ed 0a 	call	0x15da	; 0x15da <get_fat>
    1a40:	9b 01       	movw	r18, r22
    1a42:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    1a44:	62 30       	cpi	r22, 0x02	; 2
    1a46:	71 05       	cpc	r23, r1
    1a48:	81 05       	cpc	r24, r1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <pf_lseek+0x136>
    1a4e:	80 c0       	rjmp	.+256    	; 0x1b50 <pf_lseek+0x236>
    1a50:	8e 81       	ldd	r24, Y+6	; 0x06
    1a52:	9f 81       	ldd	r25, Y+7	; 0x07
    1a54:	a8 85       	ldd	r26, Y+8	; 0x08
    1a56:	b9 85       	ldd	r27, Y+9	; 0x09
    1a58:	28 17       	cp	r18, r24
    1a5a:	39 07       	cpc	r19, r25
    1a5c:	4a 07       	cpc	r20, r26
    1a5e:	5b 07       	cpc	r21, r27
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <pf_lseek+0x14a>
    1a62:	76 c0       	rjmp	.+236    	; 0x1b50 <pf_lseek+0x236>
			fs->curr_clust = clst;
    1a64:	2a a3       	std	Y+34, r18	; 0x22
    1a66:	3b a3       	std	Y+35, r19	; 0x23
    1a68:	4c a3       	std	Y+36, r20	; 0x24
    1a6a:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
    1a6c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a6e:	9f 89       	ldd	r25, Y+23	; 0x17
    1a70:	a8 8d       	ldd	r26, Y+24	; 0x18
    1a72:	b9 8d       	ldd	r27, Y+25	; 0x19
    1a74:	8a 0d       	add	r24, r10
    1a76:	9b 1d       	adc	r25, r11
    1a78:	ac 1d       	adc	r26, r12
    1a7a:	bd 1d       	adc	r27, r13
    1a7c:	8e 8b       	std	Y+22, r24	; 0x16
    1a7e:	9f 8b       	std	Y+23, r25	; 0x17
    1a80:	a8 8f       	std	Y+24, r26	; 0x18
    1a82:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
    1a84:	6a 18       	sub	r6, r10
    1a86:	7b 08       	sbc	r7, r11
    1a88:	8c 08       	sbc	r8, r12
    1a8a:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1a8c:	a6 14       	cp	r10, r6
    1a8e:	b7 04       	cpc	r11, r7
    1a90:	c8 04       	cpc	r12, r8
    1a92:	d9 04       	cpc	r13, r9
    1a94:	88 f2       	brcs	.-94     	; 0x1a38 <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    1a96:	ee 88       	ldd	r14, Y+22	; 0x16
    1a98:	ff 88       	ldd	r15, Y+23	; 0x17
    1a9a:	08 8d       	ldd	r16, Y+24	; 0x18
    1a9c:	19 8d       	ldd	r17, Y+25	; 0x19
    1a9e:	e6 0c       	add	r14, r6
    1aa0:	f7 1c       	adc	r15, r7
    1aa2:	08 1d       	adc	r16, r8
    1aa4:	19 1d       	adc	r17, r9
    1aa6:	ee 8a       	std	Y+22, r14	; 0x16
    1aa8:	ff 8a       	std	Y+23, r15	; 0x17
    1aaa:	08 8f       	std	Y+24, r16	; 0x18
    1aac:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1aae:	80 90 b7 00 	lds	r8, 0x00B7
    1ab2:	90 90 b8 00 	lds	r9, 0x00B8


	clst -= 2;
    1ab6:	ae ef       	ldi	r26, 0xFE	; 254
    1ab8:	aa 2e       	mov	r10, r26
    1aba:	af ef       	ldi	r26, 0xFF	; 255
    1abc:	ba 2e       	mov	r11, r26
    1abe:	af ef       	ldi	r26, 0xFF	; 255
    1ac0:	ca 2e       	mov	r12, r26
    1ac2:	af ef       	ldi	r26, 0xFF	; 255
    1ac4:	da 2e       	mov	r13, r26
    1ac6:	a2 0e       	add	r10, r18
    1ac8:	b3 1e       	adc	r11, r19
    1aca:	c4 1e       	adc	r12, r20
    1acc:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1ace:	f4 01       	movw	r30, r8
    1ad0:	86 81       	ldd	r24, Z+6	; 0x06
    1ad2:	97 81       	ldd	r25, Z+7	; 0x07
    1ad4:	a0 85       	ldd	r26, Z+8	; 0x08
    1ad6:	b1 85       	ldd	r27, Z+9	; 0x09
    1ad8:	02 97       	sbiw	r24, 0x02	; 2
    1ada:	a1 09       	sbc	r26, r1
    1adc:	b1 09       	sbc	r27, r1
    1ade:	a8 16       	cp	r10, r24
    1ae0:	b9 06       	cpc	r11, r25
    1ae2:	ca 06       	cpc	r12, r26
    1ae4:	db 06       	cpc	r13, r27
    1ae6:	a0 f5       	brcc	.+104    	; 0x1b50 <pf_lseek+0x236>
	return (DWORD)clst * fs->csize + fs->database;
    1ae8:	22 81       	ldd	r18, Z+2	; 0x02
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	c6 01       	movw	r24, r12
    1af2:	b5 01       	movw	r22, r10
    1af4:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    1af8:	9b 01       	movw	r18, r22
    1afa:	ac 01       	movw	r20, r24
    1afc:	f4 01       	movw	r30, r8
    1afe:	82 89       	ldd	r24, Z+18	; 0x12
    1b00:	93 89       	ldd	r25, Z+19	; 0x13
    1b02:	a4 89       	ldd	r26, Z+20	; 0x14
    1b04:	b5 89       	ldd	r27, Z+21	; 0x15
    1b06:	28 0f       	add	r18, r24
    1b08:	39 1f       	adc	r19, r25
    1b0a:	4a 1f       	adc	r20, r26
    1b0c:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
    1b0e:	21 15       	cp	r18, r1
    1b10:	31 05       	cpc	r19, r1
    1b12:	41 05       	cpc	r20, r1
    1b14:	51 05       	cpc	r21, r1
    1b16:	e1 f0       	breq	.+56     	; 0x1b50 <pf_lseek+0x236>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    1b18:	f9 e0       	ldi	r31, 0x09	; 9
    1b1a:	16 95       	lsr	r17
    1b1c:	07 95       	ror	r16
    1b1e:	f7 94       	ror	r15
    1b20:	e7 94       	ror	r14
    1b22:	fa 95       	dec	r31
    1b24:	d1 f7       	brne	.-12     	; 0x1b1a <pf_lseek+0x200>
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	aa 27       	eor	r26, r26
    1b2e:	97 fd       	sbrc	r25, 7
    1b30:	a0 95       	com	r26
    1b32:	ba 2f       	mov	r27, r26
    1b34:	e8 22       	and	r14, r24
    1b36:	f9 22       	and	r15, r25
    1b38:	0a 23       	and	r16, r26
    1b3a:	1b 23       	and	r17, r27
    1b3c:	2e 0d       	add	r18, r14
    1b3e:	3f 1d       	adc	r19, r15
    1b40:	40 1f       	adc	r20, r16
    1b42:	51 1f       	adc	r21, r17
    1b44:	2e a3       	std	Y+38, r18	; 0x26
    1b46:	3f a3       	std	Y+39, r19	; 0x27
    1b48:	48 a7       	std	Y+40, r20	; 0x28
    1b4a:	59 a7       	std	Y+41, r21	; 0x29
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <pf_lseek+0x23a>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
    1b50:	19 82       	std	Y+1, r1	; 0x01
    1b52:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	9f 90       	pop	r9
    1b6a:	8f 90       	pop	r8
    1b6c:	7f 90       	pop	r7
    1b6e:	6f 90       	pop	r6
    1b70:	5f 90       	pop	r5
    1b72:	4f 90       	pop	r4
    1b74:	3f 90       	pop	r3
    1b76:	2f 90       	pop	r2
    1b78:	08 95       	ret

00001b7a <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1b7a:	af 92       	push	r10
    1b7c:	bf 92       	push	r11
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	ac 97       	sbiw	r28, 0x2c	; 44
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1ba2:	80 91 b7 00 	lds	r24, 0x00B7
    1ba6:	90 91 b8 00 	lds	r25, 0x00B8
    1baa:	89 2b       	or	r24, r25
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <pf_readdir+0x38>
    1bae:	86 e0       	ldi	r24, 0x06	; 6
    1bb0:	b0 c0       	rjmp	.+352    	; 0x1d12 <pf_readdir+0x198>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	d7 01       	movw	r26, r14
    1bb8:	13 96       	adiw	r26, 0x03	; 3
    1bba:	9c 93       	st	X, r25
    1bbc:	8e 93       	st	-X, r24
    1bbe:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
    1bc0:	61 15       	cp	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	39 f0       	breq	.+14     	; 0x1bd4 <pf_readdir+0x5a>
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1bc8:	0d e0       	ldi	r16, 0x0D	; 13
    1bca:	a0 2e       	mov	r10, r16
    1bcc:	b1 2c       	mov	r11, r1
    1bce:	ac 0e       	add	r10, r28
    1bd0:	bd 1e       	adc	r11, r29
    1bd2:	28 c0       	rjmp	.+80     	; 0x1c24 <pf_readdir+0xaa>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <dir_rewind>
    1bda:	9b c0       	rjmp	.+310    	; 0x1d12 <pf_readdir+0x198>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1bdc:	f7 01       	movw	r30, r14
    1bde:	20 81       	ld	r18, Z
    1be0:	31 81       	ldd	r19, Z+1	; 0x01
    1be2:	2f 70       	andi	r18, 0x0F	; 15
    1be4:	30 70       	andi	r19, 0x00	; 0
    1be6:	15 e0       	ldi	r17, 0x05	; 5
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	1a 95       	dec	r17
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <pf_readdir+0x6e>
    1bf0:	c5 01       	movw	r24, r10
    1bf2:	00 e2       	ldi	r16, 0x20	; 32
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
    1bf6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1bfa:	88 23       	and	r24, r24
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <pf_readdir+0x88>
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	1f c0       	rjmp	.+62     	; 0x1c40 <pf_readdir+0xc6>
		c = dir[DIR_Name];
    1c02:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1c04:	99 23       	and	r25, r25
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <pf_readdir+0x90>
    1c08:	95 c0       	rjmp	.+298    	; 0x1d34 <pf_readdir+0x1ba>
		a = dir[DIR_Attr] & AM_MASK;
    1c0a:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    1c0c:	95 3e       	cpi	r25, 0xE5	; 229
    1c0e:	29 f0       	breq	.+10     	; 0x1c1a <pf_readdir+0xa0>
    1c10:	9e 32       	cpi	r25, 0x2E	; 46
    1c12:	19 f0       	breq	.+6      	; 0x1c1a <pf_readdir+0xa0>
    1c14:	8f 73       	andi	r24, 0x3F	; 63
    1c16:	83 ff       	sbrs	r24, 3
    1c18:	1d c0       	rjmp	.+58     	; 0x1c54 <pf_readdir+0xda>
			break;
		res = dir_next(dj);			/* Next entry */
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <dir_next>
		if (res != FR_OK) break;
    1c20:	88 23       	and	r24, r24
    1c22:	71 f4       	brne	.+28     	; 0x1c40 <pf_readdir+0xc6>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    1c24:	d7 01       	movw	r26, r14
    1c26:	1c 96       	adiw	r26, 0x0c	; 12
    1c28:	4d 91       	ld	r20, X+
    1c2a:	5d 91       	ld	r21, X+
    1c2c:	6d 91       	ld	r22, X+
    1c2e:	7c 91       	ld	r23, X
    1c30:	1f 97       	sbiw	r26, 0x0f	; 15
    1c32:	41 15       	cp	r20, r1
    1c34:	51 05       	cpc	r21, r1
    1c36:	61 05       	cpc	r22, r1
    1c38:	71 05       	cpc	r23, r1
    1c3a:	81 f6       	brne	.-96     	; 0x1bdc <pf_readdir+0x62>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1c3c:	88 23       	and	r24, r24
    1c3e:	51 f0       	breq	.+20     	; 0x1c54 <pf_readdir+0xda>
    1c40:	f7 01       	movw	r30, r14
    1c42:	14 86       	std	Z+12, r1	; 0x0c
    1c44:	15 86       	std	Z+13, r1	; 0x0d
    1c46:	16 86       	std	Z+14, r1	; 0x0e
    1c48:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	19 f0       	breq	.+6      	; 0x1c54 <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    1c4e:	88 23       	and	r24, r24
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <pf_readdir+0xda>
    1c52:	5f c0       	rjmp	.+190    	; 0x1d12 <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    1c54:	96 01       	movw	r18, r12
    1c56:	27 5f       	subi	r18, 0xF7	; 247
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    1c5a:	f7 01       	movw	r30, r14
    1c5c:	84 85       	ldd	r24, Z+12	; 0x0c
    1c5e:	95 85       	ldd	r25, Z+13	; 0x0d
    1c60:	a6 85       	ldd	r26, Z+14	; 0x0e
    1c62:	b7 85       	ldd	r27, Z+15	; 0x0f
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	a1 05       	cpc	r26, r1
    1c68:	b1 05       	cpc	r27, r1
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <pf_readdir+0xf4>
    1c6c:	43 c0       	rjmp	.+134    	; 0x1cf4 <pf_readdir+0x17a>
    1c6e:	fe 01       	movw	r30, r28
    1c70:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1c72:	ae 01       	movw	r20, r28
    1c74:	4b 5e       	subi	r20, 0xEB	; 235
    1c76:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
    1c78:	80 81       	ld	r24, Z
			if (c == ' ') break;
    1c7a:	80 32       	cpi	r24, 0x20	; 32
    1c7c:	51 f0       	breq	.+20     	; 0x1c92 <pf_readdir+0x118>
			if (c == 0x05) c = 0xE5;
    1c7e:	85 30       	cpi	r24, 0x05	; 5
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <pf_readdir+0x10a>
    1c82:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    1c84:	d9 01       	movw	r26, r18
    1c86:	8d 93       	st	X+, r24
    1c88:	9d 01       	movw	r18, r26
    1c8a:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1c8c:	e4 17       	cp	r30, r20
    1c8e:	f5 07       	cpc	r31, r21
    1c90:	99 f7       	brne	.-26     	; 0x1c78 <pf_readdir+0xfe>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    1c92:	8d 89       	ldd	r24, Y+21	; 0x15
    1c94:	80 32       	cpi	r24, 0x20	; 32
    1c96:	99 f0       	breq	.+38     	; 0x1cbe <pf_readdir+0x144>
			*p++ = '.';
    1c98:	8e e2       	ldi	r24, 0x2E	; 46
    1c9a:	f9 01       	movw	r30, r18
    1c9c:	81 93       	st	Z+, r24
    1c9e:	9f 01       	movw	r18, r30
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
    1ca4:	ae 01       	movw	r20, r28
    1ca6:	48 5e       	subi	r20, 0xE8	; 232
    1ca8:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
    1caa:	80 81       	ld	r24, Z
				if (c == ' ') break;
    1cac:	80 32       	cpi	r24, 0x20	; 32
    1cae:	39 f0       	breq	.+14     	; 0x1cbe <pf_readdir+0x144>
				*p++ = c;
    1cb0:	d9 01       	movw	r26, r18
    1cb2:	8d 93       	st	X+, r24
    1cb4:	9d 01       	movw	r18, r26
    1cb6:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1cb8:	e4 17       	cp	r30, r20
    1cba:	f5 07       	cpc	r31, r21
    1cbc:	b1 f7       	brne	.-20     	; 0x1caa <pf_readdir+0x130>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1cbe:	88 8d       	ldd	r24, Y+24	; 0x18
    1cc0:	f6 01       	movw	r30, r12
    1cc2:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	3d 96       	adiw	r30, 0x0d	; 13
    1cc8:	44 8d       	ldd	r20, Z+28	; 0x1c
    1cca:	55 8d       	ldd	r21, Z+29	; 0x1d
    1ccc:	66 8d       	ldd	r22, Z+30	; 0x1e
    1cce:	77 8d       	ldd	r23, Z+31	; 0x1f
    1cd0:	d6 01       	movw	r26, r12
    1cd2:	4d 93       	st	X+, r20
    1cd4:	5d 93       	st	X+, r21
    1cd6:	6d 93       	st	X+, r22
    1cd8:	7c 93       	st	X, r23
    1cda:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1cdc:	80 8d       	ldd	r24, Z+24	; 0x18
    1cde:	91 8d       	ldd	r25, Z+25	; 0x19
    1ce0:	15 96       	adiw	r26, 0x05	; 5
    1ce2:	9c 93       	st	X, r25
    1ce4:	8e 93       	st	-X, r24
    1ce6:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1ce8:	86 89       	ldd	r24, Z+22	; 0x16
    1cea:	97 89       	ldd	r25, Z+23	; 0x17
    1cec:	17 96       	adiw	r26, 0x07	; 7
    1cee:	9c 93       	st	X, r25
    1cf0:	8e 93       	st	-X, r24
    1cf2:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
    1cf4:	f9 01       	movw	r30, r18
    1cf6:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1cf8:	c7 01       	movw	r24, r14
    1cfa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <dir_next>
				if (res == FR_NO_FILE) {
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	41 f4       	brne	.+16     	; 0x1d12 <pf_readdir+0x198>
					dj->sect = 0;
    1d02:	d7 01       	movw	r26, r14
    1d04:	1c 96       	adiw	r26, 0x0c	; 12
    1d06:	1d 92       	st	X+, r1
    1d08:	1d 92       	st	X+, r1
    1d0a:	1d 92       	st	X+, r1
    1d0c:	1c 92       	st	X, r1
    1d0e:	1f 97       	sbiw	r26, 0x0f	; 15
    1d10:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
    1d12:	ac 96       	adiw	r28, 0x2c	; 44
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	bf 90       	pop	r11
    1d30:	af 90       	pop	r10
    1d32:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	84 cf       	rjmp	.-248    	; 0x1c40 <pf_readdir+0xc6>

00001d38 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    1d38:	6f 92       	push	r6
    1d3a:	7f 92       	push	r7
    1d3c:	8f 92       	push	r8
    1d3e:	9f 92       	push	r9
    1d40:	af 92       	push	r10
    1d42:	bf 92       	push	r11
    1d44:	cf 92       	push	r12
    1d46:	df 92       	push	r13
    1d48:	ef 92       	push	r14
    1d4a:	ff 92       	push	r15
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	ec 01       	movw	r28, r24
    1d56:	6b 01       	movw	r12, r22
    1d58:	7a 01       	movw	r14, r20
    1d5a:	03 c0       	rjmp	.+6      	; 0x1d62 <follow_path+0x2a>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    1d5c:	08 94       	sec
    1d5e:	e1 1c       	adc	r14, r1
    1d60:	f1 1c       	adc	r15, r1
    1d62:	f7 01       	movw	r30, r14
    1d64:	80 81       	ld	r24, Z
    1d66:	80 32       	cpi	r24, 0x20	; 32
    1d68:	c9 f3       	breq	.-14     	; 0x1d5c <follow_path+0x24>
	if (*path == '/') path++;			/* Strip heading separator */
    1d6a:	8f 32       	cpi	r24, 0x2F	; 47
    1d6c:	19 f4       	brne	.+6      	; 0x1d74 <follow_path+0x3c>
    1d6e:	08 94       	sec
    1d70:	e1 1c       	adc	r14, r1
    1d72:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    1d74:	1c 82       	std	Y+4, r1	; 0x04
    1d76:	1d 82       	std	Y+5, r1	; 0x05
    1d78:	1e 82       	std	Y+6, r1	; 0x06
    1d7a:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    1d7c:	f7 01       	movw	r30, r14
    1d7e:	80 81       	ld	r24, Z
    1d80:	81 32       	cpi	r24, 0x21	; 33
    1d82:	38 f4       	brcc	.+14     	; 0x1d92 <follow_path+0x5a>
		res = dir_rewind(dj);
    1d84:	ce 01       	movw	r24, r28
    1d86:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <dir_rewind>
    1d8a:	b8 2e       	mov	r11, r24
		dir[0] = 0;
    1d8c:	f6 01       	movw	r30, r12
    1d8e:	10 82       	st	Z, r1
    1d90:	a5 c0       	rjmp	.+330    	; 0x1edc <follow_path+0x1a4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1d92:	a0 e2       	ldi	r26, 0x20	; 32
    1d94:	6a 2e       	mov	r6, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1d96:	77 24       	eor	r7, r7
    1d98:	73 94       	inc	r7
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1d9a:	fb e0       	ldi	r31, 0x0B	; 11
    1d9c:	8f 2e       	mov	r8, r31
    1d9e:	91 2c       	mov	r9, r1
    1da0:	8c 0c       	add	r8, r12
    1da2:	9d 1c       	adc	r9, r13
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    1da4:	aa 81       	ldd	r26, Y+2	; 0x02
    1da6:	bb 81       	ldd	r27, Y+3	; 0x03
    1da8:	fd 01       	movw	r30, r26
    1daa:	8b e0       	ldi	r24, 0x0B	; 11
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <follow_path+0x7a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1db0:	61 92       	st	Z+, r6
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	2f ef       	ldi	r18, 0xFF	; 255
    1db6:	8f 3f       	cpi	r24, 0xFF	; 255
    1db8:	92 07       	cpc	r25, r18
    1dba:	d1 f7       	brne	.-12     	; 0x1db0 <follow_path+0x78>
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	aa 24       	eor	r10, r10
    1dc0:	38 e0       	ldi	r19, 0x08	; 8
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <follow_path+0x90>
    1dc4:	28 e0       	ldi	r18, 0x08	; 8
    1dc6:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    1dc8:	f7 01       	movw	r30, r14
    1dca:	ea 0d       	add	r30, r10
    1dcc:	f1 1d       	adc	r31, r1
    1dce:	90 81       	ld	r25, Z
    1dd0:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    1dd2:	91 32       	cpi	r25, 0x21	; 33
    1dd4:	b0 f0       	brcs	.+44     	; 0x1e02 <follow_path+0xca>
    1dd6:	9f 32       	cpi	r25, 0x2F	; 47
    1dd8:	a1 f0       	breq	.+40     	; 0x1e02 <follow_path+0xca>
		if (c == '.' || i >= ni) {
    1dda:	9e 32       	cpi	r25, 0x2E	; 46
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <follow_path+0xaa>
    1dde:	23 17       	cp	r18, r19
    1de0:	28 f0       	brcs	.+10     	; 0x1dec <follow_path+0xb4>
			if (ni != 8 || c != '.') break;
    1de2:	38 30       	cpi	r19, 0x08	; 8
    1de4:	71 f4       	brne	.+28     	; 0x1e02 <follow_path+0xca>
    1de6:	9e 32       	cpi	r25, 0x2E	; 46
    1de8:	69 f3       	breq	.-38     	; 0x1dc4 <follow_path+0x8c>
    1dea:	0b c0       	rjmp	.+22     	; 0x1e02 <follow_path+0xca>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1dec:	89 2f       	mov	r24, r25
    1dee:	81 56       	subi	r24, 0x61	; 97
    1df0:	8a 31       	cpi	r24, 0x1A	; 26
    1df2:	08 f4       	brcc	.+2      	; 0x1df6 <follow_path+0xbe>
    1df4:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    1df6:	fd 01       	movw	r30, r26
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f1 1d       	adc	r31, r1
    1dfc:	90 83       	st	Z, r25
    1dfe:	2f 5f       	subi	r18, 0xFF	; 255
    1e00:	e3 cf       	rjmp	.-58     	; 0x1dc8 <follow_path+0x90>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1e02:	1b 96       	adiw	r26, 0x0b	; 11
    1e04:	1c 92       	st	X, r1
    1e06:	1b 97       	sbiw	r26, 0x0b	; 11
    1e08:	91 32       	cpi	r25, 0x21	; 33
    1e0a:	10 f4       	brcc	.+4      	; 0x1e10 <follow_path+0xd8>
    1e0c:	1b 96       	adiw	r26, 0x0b	; 11
    1e0e:	7c 92       	st	X, r7
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    1e10:	ce 01       	movw	r24, r28
    1e12:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <dir_rewind>
    1e16:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
    1e18:	88 23       	and	r24, r24
    1e1a:	d1 f5       	brne	.+116    	; 0x1e90 <follow_path+0x158>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1e1c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e1e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e20:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e22:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e24:	28 81       	ld	r18, Y
    1e26:	39 81       	ldd	r19, Y+1	; 0x01
    1e28:	2f 70       	andi	r18, 0x0F	; 15
    1e2a:	30 70       	andi	r19, 0x00	; 0
    1e2c:	e5 e0       	ldi	r30, 0x05	; 5
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	ea 95       	dec	r30
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <follow_path+0xf6>
    1e36:	c6 01       	movw	r24, r12
    1e38:	00 e2       	ldi	r16, 0x20	; 32
    1e3a:	10 e0       	ldi	r17, 0x00	; 0
    1e3c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1e40:	88 23       	and	r24, r24
    1e42:	11 f0       	breq	.+4      	; 0x1e48 <follow_path+0x110>
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	23 c0       	rjmp	.+70     	; 0x1e8e <follow_path+0x156>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1e48:	f6 01       	movw	r30, r12
    1e4a:	80 81       	ld	r24, Z
    1e4c:	88 23       	and	r24, r24
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <follow_path+0x11a>
    1e50:	55 c0       	rjmp	.+170    	; 0x1efc <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1e52:	f4 01       	movw	r30, r8
    1e54:	80 81       	ld	r24, Z
    1e56:	83 fd       	sbrc	r24, 3
    1e58:	15 c0       	rjmp	.+42     	; 0x1e84 <follow_path+0x14c>
    1e5a:	d6 01       	movw	r26, r12
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e60:	9c 01       	movw	r18, r24
    1e62:	f9 01       	movw	r30, r18
    1e64:	2b e0       	ldi	r18, 0x0B	; 11
    1e66:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1e68:	21 50       	subi	r18, 0x01	; 1
    1e6a:	30 40       	sbci	r19, 0x00	; 0
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	2f 3f       	cpi	r18, 0xFF	; 255
    1e70:	38 07       	cpc	r19, r24
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <follow_path+0x13e>
    1e74:	46 c0       	rjmp	.+140    	; 0x1f02 <follow_path+0x1ca>
    1e76:	9c 91       	ld	r25, X
    1e78:	80 81       	ld	r24, Z
    1e7a:	98 17       	cp	r25, r24
    1e7c:	19 f4       	brne	.+6      	; 0x1e84 <follow_path+0x14c>
    1e7e:	11 96       	adiw	r26, 0x01	; 1
    1e80:	31 96       	adiw	r30, 0x01	; 1
    1e82:	f2 cf       	rjmp	.-28     	; 0x1e68 <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    1e84:	ce 01       	movw	r24, r28
    1e86:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <dir_next>
	} while (res == FR_OK);
    1e8a:	88 23       	and	r24, r24
    1e8c:	39 f2       	breq	.-114    	; 0x1e1c <follow_path+0xe4>
    1e8e:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    1e90:	e3 e0       	ldi	r30, 0x03	; 3
    1e92:	be 16       	cp	r11, r30
    1e94:	19 f5       	brne	.+70     	; 0x1edc <follow_path+0x1a4>
    1e96:	ea 81       	ldd	r30, Y+2	; 0x02
    1e98:	fb 81       	ldd	r31, Y+3	; 0x03
    1e9a:	83 85       	ldd	r24, Z+11	; 0x0b
    1e9c:	88 23       	and	r24, r24
    1e9e:	e1 f0       	breq	.+56     	; 0x1ed8 <follow_path+0x1a0>
    1ea0:	1d c0       	rjmp	.+58     	; 0x1edc <follow_path+0x1a4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1ea2:	f4 01       	movw	r30, r8
    1ea4:	80 81       	ld	r24, Z
    1ea6:	84 ff       	sbrs	r24, 4
    1ea8:	17 c0       	rjmp	.+46     	; 0x1ed8 <follow_path+0x1a0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1eaa:	ea 0c       	add	r14, r10
    1eac:	f1 1c       	adc	r15, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1eae:	f6 01       	movw	r30, r12
    1eb0:	84 89       	ldd	r24, Z+20	; 0x14
    1eb2:	95 89       	ldd	r25, Z+21	; 0x15
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	dc 01       	movw	r26, r24
    1eba:	99 27       	eor	r25, r25
    1ebc:	88 27       	eor	r24, r24
    1ebe:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ec0:	33 8d       	ldd	r19, Z+27	; 0x1b
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	82 2b       	or	r24, r18
    1ec8:	93 2b       	or	r25, r19
    1eca:	a4 2b       	or	r26, r20
    1ecc:	b5 2b       	or	r27, r21
    1ece:	8c 83       	std	Y+4, r24	; 0x04
    1ed0:	9d 83       	std	Y+5, r25	; 0x05
    1ed2:	ae 83       	std	Y+6, r26	; 0x06
    1ed4:	bf 83       	std	Y+7, r27	; 0x07
    1ed6:	66 cf       	rjmp	.-308    	; 0x1da4 <follow_path+0x6c>
		}
    1ed8:	94 e0       	ldi	r25, 0x04	; 4
    1eda:	b9 2e       	mov	r11, r25
	}

	return res;
}
    1edc:	8b 2d       	mov	r24, r11
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	df 90       	pop	r13
    1eec:	cf 90       	pop	r12
    1eee:	bf 90       	pop	r11
    1ef0:	af 90       	pop	r10
    1ef2:	9f 90       	pop	r9
    1ef4:	8f 90       	pop	r8
    1ef6:	7f 90       	pop	r7
    1ef8:	6f 90       	pop	r6
    1efa:	08 95       	ret
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	b8 2e       	mov	r11, r24
    1f00:	ca cf       	rjmp	.-108    	; 0x1e96 <follow_path+0x15e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    1f02:	ea 81       	ldd	r30, Y+2	; 0x02
    1f04:	fb 81       	ldd	r31, Y+3	; 0x03
    1f06:	83 85       	ldd	r24, Z+11	; 0x0b
    1f08:	88 23       	and	r24, r24
    1f0a:	59 f2       	breq	.-106    	; 0x1ea2 <follow_path+0x16a>
    1f0c:	e7 cf       	rjmp	.-50     	; 0x1edc <follow_path+0x1a4>

00001f0e <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	ac 97       	sbiw	r28, 0x2c	; 44
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	8c 01       	movw	r16, r24
    1f2c:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1f2e:	80 91 b7 00 	lds	r24, 0x00B7
    1f32:	90 91 b8 00 	lds	r25, 0x00B8
    1f36:	89 2b       	or	r24, r25
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <pf_opendir+0x30>
    1f3a:	86 e0       	ldi	r24, 0x06	; 6
    1f3c:	31 c0       	rjmp	.+98     	; 0x1fa0 <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	f8 01       	movw	r30, r16
    1f44:	93 83       	std	Z+3, r25	; 0x03
    1f46:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    1f48:	3d e0       	ldi	r19, 0x0D	; 13
    1f4a:	e3 2e       	mov	r14, r19
    1f4c:	f1 2c       	mov	r15, r1
    1f4e:	ec 0e       	add	r14, r28
    1f50:	fd 1e       	adc	r15, r29
    1f52:	c8 01       	movw	r24, r16
    1f54:	b7 01       	movw	r22, r14
    1f56:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    1f5a:	88 23       	and	r24, r24
    1f5c:	f1 f4       	brne	.+60     	; 0x1f9a <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	88 23       	and	r24, r24
    1f62:	c1 f0       	breq	.+48     	; 0x1f94 <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    1f64:	88 8d       	ldd	r24, Y+24	; 0x18
    1f66:	84 ff       	sbrs	r24, 4
    1f68:	1a c0       	rjmp	.+52     	; 0x1f9e <pf_opendir+0x90>
					dj->sclust = LD_CLUST(dir);
    1f6a:	f7 01       	movw	r30, r14
    1f6c:	84 89       	ldd	r24, Z+20	; 0x14
    1f6e:	95 89       	ldd	r25, Z+21	; 0x15
    1f70:	a0 e0       	ldi	r26, 0x00	; 0
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	dc 01       	movw	r26, r24
    1f76:	99 27       	eor	r25, r25
    1f78:	88 27       	eor	r24, r24
    1f7a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f7c:	33 8d       	ldd	r19, Z+27	; 0x1b
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	82 2b       	or	r24, r18
    1f84:	93 2b       	or	r25, r19
    1f86:	a4 2b       	or	r26, r20
    1f88:	b5 2b       	or	r27, r21
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	84 83       	std	Z+4, r24	; 0x04
    1f8e:	95 83       	std	Z+5, r25	; 0x05
    1f90:	a6 83       	std	Z+6, r26	; 0x06
    1f92:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    1f94:	c8 01       	movw	r24, r16
    1f96:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <pf_opendir+0x92>
    1f9e:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    1fa0:	ac 96       	adiw	r28, 0x2c	; 44
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	08 95       	ret

00001fba <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	ec 97       	sbiw	r28, 0x3c	; 60
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1fd8:	00 91 b7 00 	lds	r16, 0x00B7
    1fdc:	10 91 b8 00 	lds	r17, 0x00B8


	if (!fs)						/* Check file system */
    1fe0:	01 15       	cp	r16, r1
    1fe2:	11 05       	cpc	r17, r1
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <pf_open+0x30>
    1fe6:	66 e0       	ldi	r22, 0x06	; 6
    1fe8:	40 c0       	rjmp	.+128    	; 0x206a <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    1fea:	f8 01       	movw	r30, r16
    1fec:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	98 8b       	std	Y+16, r25	; 0x10
    1ff4:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    1ff6:	6d e1       	ldi	r22, 0x1D	; 29
    1ff8:	e6 2e       	mov	r14, r22
    1ffa:	f1 2c       	mov	r15, r1
    1ffc:	ec 0e       	add	r14, r28
    1ffe:	fd 1e       	adc	r15, r29
    2000:	ce 01       	movw	r24, r28
    2002:	0d 96       	adiw	r24, 0x0d	; 13
    2004:	b7 01       	movw	r22, r14
    2006:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <follow_path>
    200a:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    200c:	88 23       	and	r24, r24
    200e:	69 f5       	brne	.+90     	; 0x206a <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2010:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2012:	88 23       	and	r24, r24
    2014:	49 f1       	breq	.+82     	; 0x2068 <pf_open+0xae>
    2016:	88 a5       	ldd	r24, Y+40	; 0x28
    2018:	84 fd       	sbrc	r24, 4
    201a:	26 c0       	rjmp	.+76     	; 0x2068 <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    201c:	f7 01       	movw	r30, r14
    201e:	84 89       	ldd	r24, Z+20	; 0x14
    2020:	95 89       	ldd	r25, Z+21	; 0x15
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	dc 01       	movw	r26, r24
    2028:	99 27       	eor	r25, r25
    202a:	88 27       	eor	r24, r24
    202c:	22 8d       	ldd	r18, Z+26	; 0x1a
    202e:	33 8d       	ldd	r19, Z+27	; 0x1b
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	82 2b       	or	r24, r18
    2036:	93 2b       	or	r25, r19
    2038:	a4 2b       	or	r26, r20
    203a:	b5 2b       	or	r27, r21
    203c:	f8 01       	movw	r30, r16
    203e:	86 8f       	std	Z+30, r24	; 0x1e
    2040:	97 8f       	std	Z+31, r25	; 0x1f
    2042:	a0 a3       	std	Z+32, r26	; 0x20
    2044:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2046:	f7 01       	movw	r30, r14
    2048:	84 8d       	ldd	r24, Z+28	; 0x1c
    204a:	95 8d       	ldd	r25, Z+29	; 0x1d
    204c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    204e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2050:	f8 01       	movw	r30, r16
    2052:	82 8f       	std	Z+26, r24	; 0x1a
    2054:	93 8f       	std	Z+27, r25	; 0x1b
    2056:	a4 8f       	std	Z+28, r26	; 0x1c
    2058:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    205a:	16 8a       	std	Z+22, r1	; 0x16
    205c:	17 8a       	std	Z+23, r1	; 0x17
    205e:	10 8e       	std	Z+24, r1	; 0x18
    2060:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	81 83       	std	Z+1, r24	; 0x01
    2066:	01 c0       	rjmp	.+2      	; 0x206a <pf_open+0xb0>

	return FR_OK;
    2068:	63 e0       	ldi	r22, 0x03	; 3
}
    206a:	86 2f       	mov	r24, r22
    206c:	ec 96       	adiw	r28, 0x3c	; 60
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	08 95       	ret

00002086 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    2086:	4f 92       	push	r4
    2088:	5f 92       	push	r5
    208a:	6f 92       	push	r6
    208c:	7f 92       	push	r7
    208e:	8f 92       	push	r8
    2090:	9f 92       	push	r9
    2092:	af 92       	push	r10
    2094:	bf 92       	push	r11
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	3c 01       	movw	r6, r24
    20a8:	6b 01       	movw	r12, r22
    20aa:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    20ac:	c0 91 b7 00 	lds	r28, 0x00B7
    20b0:	d0 91 b8 00 	lds	r29, 0x00B8


	*br = 0;
    20b4:	fa 01       	movw	r30, r20
    20b6:	11 82       	std	Z+1, r1	; 0x01
    20b8:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    20ba:	20 97       	sbiw	r28, 0x00	; 0
    20bc:	11 f4       	brne	.+4      	; 0x20c2 <pf_read+0x3c>
    20be:	86 e0       	ldi	r24, 0x06	; 6
    20c0:	ca c0       	rjmp	.+404    	; 0x2256 <pf_read+0x1d0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	80 fd       	sbrc	r24, 0
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <pf_read+0x46>
    20c8:	85 e0       	ldi	r24, 0x05	; 5
    20ca:	c5 c0       	rjmp	.+394    	; 0x2256 <pf_read+0x1d0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    20cc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    20ce:	3b 8d       	ldd	r19, Y+27	; 0x1b
    20d0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    20d2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    20d4:	8e 89       	ldd	r24, Y+22	; 0x16
    20d6:	9f 89       	ldd	r25, Y+23	; 0x17
    20d8:	a8 8d       	ldd	r26, Y+24	; 0x18
    20da:	b9 8d       	ldd	r27, Y+25	; 0x19
    20dc:	28 1b       	sub	r18, r24
    20de:	39 0b       	sbc	r19, r25
    20e0:	4a 0b       	sbc	r20, r26
    20e2:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    20e4:	cb 01       	movw	r24, r22
    20e6:	a0 e0       	ldi	r26, 0x00	; 0
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	28 17       	cp	r18, r24
    20ec:	39 07       	cpc	r19, r25
    20ee:	4a 07       	cpc	r20, r26
    20f0:	5b 07       	cpc	r21, r27
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <pf_read+0x70>
    20f4:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    20f6:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    20f8:	41 2c       	mov	r4, r1
    20fa:	e2 e0       	ldi	r30, 0x02	; 2
    20fc:	5e 2e       	mov	r5, r30
    20fe:	a3 c0       	rjmp	.+326    	; 0x2246 <pf_read+0x1c0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    2100:	2e 89       	ldd	r18, Y+22	; 0x16
    2102:	3f 89       	ldd	r19, Y+23	; 0x17
    2104:	48 8d       	ldd	r20, Y+24	; 0x18
    2106:	59 8d       	ldd	r21, Y+25	; 0x19
    2108:	da 01       	movw	r26, r20
    210a:	c9 01       	movw	r24, r18
    210c:	91 70       	andi	r25, 0x01	; 1
    210e:	a0 70       	andi	r26, 0x00	; 0
    2110:	b0 70       	andi	r27, 0x00	; 0
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	a1 05       	cpc	r26, r1
    2116:	b1 05       	cpc	r27, r1
    2118:	09 f0       	breq	.+2      	; 0x211c <pf_read+0x96>
    211a:	60 c0       	rjmp	.+192    	; 0x21dc <pf_read+0x156>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    211c:	da 01       	movw	r26, r20
    211e:	c9 01       	movw	r24, r18
    2120:	79 e0       	ldi	r23, 0x09	; 9
    2122:	b6 95       	lsr	r27
    2124:	a7 95       	ror	r26
    2126:	97 95       	ror	r25
    2128:	87 95       	ror	r24
    212a:	7a 95       	dec	r23
    212c:	d1 f7       	brne	.-12     	; 0x2122 <pf_read+0x9c>
    212e:	fa 80       	ldd	r15, Y+2	; 0x02
    2130:	fa 94       	dec	r15
    2132:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    2134:	d1 f4       	brne	.+52     	; 0x216a <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    2136:	21 15       	cp	r18, r1
    2138:	31 05       	cpc	r19, r1
    213a:	41 05       	cpc	r20, r1
    213c:	51 05       	cpc	r21, r1
    213e:	29 f4       	brne	.+10     	; 0x214a <pf_read+0xc4>
    2140:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2142:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2144:	88 a1       	ldd	r24, Y+32	; 0x20
    2146:	99 a1       	ldd	r25, Y+33	; 0x21
    2148:	06 c0       	rjmp	.+12     	; 0x2156 <pf_read+0xd0>
    214a:	6a a1       	ldd	r22, Y+34	; 0x22
    214c:	7b a1       	ldd	r23, Y+35	; 0x23
    214e:	8c a1       	ldd	r24, Y+36	; 0x24
    2150:	9d a1       	ldd	r25, Y+37	; 0x25
    2152:	0e 94 ed 0a 	call	0x15da	; 0x15da <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    2156:	62 30       	cpi	r22, 0x02	; 2
    2158:	71 05       	cpc	r23, r1
    215a:	81 05       	cpc	r24, r1
    215c:	91 05       	cpc	r25, r1
    215e:	08 f4       	brcc	.+2      	; 0x2162 <pf_read+0xdc>
    2160:	78 c0       	rjmp	.+240    	; 0x2252 <pf_read+0x1cc>
				fs->curr_clust = clst;				/* Update current cluster */
    2162:	6a a3       	std	Y+34, r22	; 0x22
    2164:	7b a3       	std	Y+35, r23	; 0x23
    2166:	8c a3       	std	Y+36, r24	; 0x24
    2168:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    216a:	00 91 b7 00 	lds	r16, 0x00B7
    216e:	10 91 b8 00 	lds	r17, 0x00B8


	clst -= 2;
    2172:	2a a1       	ldd	r18, Y+34	; 0x22
    2174:	3b a1       	ldd	r19, Y+35	; 0x23
    2176:	4c a1       	ldd	r20, Y+36	; 0x24
    2178:	5d a1       	ldd	r21, Y+37	; 0x25
    217a:	22 50       	subi	r18, 0x02	; 2
    217c:	30 40       	sbci	r19, 0x00	; 0
    217e:	40 40       	sbci	r20, 0x00	; 0
    2180:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2182:	f8 01       	movw	r30, r16
    2184:	86 81       	ldd	r24, Z+6	; 0x06
    2186:	97 81       	ldd	r25, Z+7	; 0x07
    2188:	a0 85       	ldd	r26, Z+8	; 0x08
    218a:	b1 85       	ldd	r27, Z+9	; 0x09
    218c:	02 97       	sbiw	r24, 0x02	; 2
    218e:	a1 09       	sbc	r26, r1
    2190:	b1 09       	sbc	r27, r1
    2192:	28 17       	cp	r18, r24
    2194:	39 07       	cpc	r19, r25
    2196:	4a 07       	cpc	r20, r26
    2198:	5b 07       	cpc	r21, r27
    219a:	08 f0       	brcs	.+2      	; 0x219e <pf_read+0x118>
    219c:	5a c0       	rjmp	.+180    	; 0x2252 <pf_read+0x1cc>
	return (DWORD)clst * fs->csize + fs->database;
    219e:	62 81       	ldd	r22, Z+2	; 0x02
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    21aa:	9b 01       	movw	r18, r22
    21ac:	ac 01       	movw	r20, r24
    21ae:	f8 01       	movw	r30, r16
    21b0:	82 89       	ldd	r24, Z+18	; 0x12
    21b2:	93 89       	ldd	r25, Z+19	; 0x13
    21b4:	a4 89       	ldd	r26, Z+20	; 0x14
    21b6:	b5 89       	ldd	r27, Z+21	; 0x15
    21b8:	28 0f       	add	r18, r24
    21ba:	39 1f       	adc	r19, r25
    21bc:	4a 1f       	adc	r20, r26
    21be:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    21c0:	21 15       	cp	r18, r1
    21c2:	31 05       	cpc	r19, r1
    21c4:	41 05       	cpc	r20, r1
    21c6:	51 05       	cpc	r21, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <pf_read+0x146>
    21ca:	43 c0       	rjmp	.+134    	; 0x2252 <pf_read+0x1cc>
			fs->dsect = sect + cs;
    21cc:	2f 0d       	add	r18, r15
    21ce:	31 1d       	adc	r19, r1
    21d0:	41 1d       	adc	r20, r1
    21d2:	51 1d       	adc	r21, r1
    21d4:	2e a3       	std	Y+38, r18	; 0x26
    21d6:	3f a3       	std	Y+39, r19	; 0x27
    21d8:	48 a7       	std	Y+40, r20	; 0x28
    21da:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    21dc:	2e 89       	ldd	r18, Y+22	; 0x16
    21de:	3f 89       	ldd	r19, Y+23	; 0x17
    21e0:	31 70       	andi	r19, 0x01	; 1
    21e2:	c2 01       	movw	r24, r4
    21e4:	82 1b       	sub	r24, r18
    21e6:	93 0b       	sbc	r25, r19
    21e8:	76 01       	movw	r14, r12
    21ea:	8c 15       	cp	r24, r12
    21ec:	9d 05       	cpc	r25, r13
    21ee:	08 f4       	brcc	.+2      	; 0x21f2 <pf_read+0x16c>
    21f0:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    21f2:	61 14       	cp	r6, r1
    21f4:	71 04       	cpc	r7, r1
    21f6:	19 f4       	brne	.+6      	; 0x21fe <pf_read+0x178>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <pf_read+0x17a>
    21fe:	c5 01       	movw	r24, r10
    2200:	4e a1       	ldd	r20, Y+38	; 0x26
    2202:	5f a1       	ldd	r21, Y+39	; 0x27
    2204:	68 a5       	ldd	r22, Y+40	; 0x28
    2206:	79 a5       	ldd	r23, Y+41	; 0x29
    2208:	87 01       	movw	r16, r14
    220a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
		if (dr) goto fr_abort;
    220e:	88 23       	and	r24, r24
    2210:	01 f5       	brne	.+64     	; 0x2252 <pf_read+0x1cc>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    2212:	c7 01       	movw	r24, r14
    2214:	a0 e0       	ldi	r26, 0x00	; 0
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	2e 89       	ldd	r18, Y+22	; 0x16
    221a:	3f 89       	ldd	r19, Y+23	; 0x17
    221c:	48 8d       	ldd	r20, Y+24	; 0x18
    221e:	59 8d       	ldd	r21, Y+25	; 0x19
    2220:	28 0f       	add	r18, r24
    2222:	39 1f       	adc	r19, r25
    2224:	4a 1f       	adc	r20, r26
    2226:	5b 1f       	adc	r21, r27
    2228:	2e 8b       	std	Y+22, r18	; 0x16
    222a:	3f 8b       	std	Y+23, r19	; 0x17
    222c:	48 8f       	std	Y+24, r20	; 0x18
    222e:	59 8f       	std	Y+25, r21	; 0x19
    2230:	ae 0c       	add	r10, r14
    2232:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    2234:	ce 18       	sub	r12, r14
    2236:	df 08       	sbc	r13, r15
    2238:	f4 01       	movw	r30, r8
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	8e 0d       	add	r24, r14
    2240:	9f 1d       	adc	r25, r15
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    2246:	c1 14       	cp	r12, r1
    2248:	d1 04       	cpc	r13, r1
    224a:	09 f0       	breq	.+2      	; 0x224e <pf_read+0x1c8>
    224c:	59 cf       	rjmp	.-334    	; 0x2100 <pf_read+0x7a>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <pf_read+0x1d0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    2252:	19 82       	std	Y+1, r1	; 0x01
    2254:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	ff 90       	pop	r15
    2260:	ef 90       	pop	r14
    2262:	df 90       	pop	r13
    2264:	cf 90       	pop	r12
    2266:	bf 90       	pop	r11
    2268:	af 90       	pop	r10
    226a:	9f 90       	pop	r9
    226c:	8f 90       	pop	r8
    226e:	7f 90       	pop	r7
    2270:	6f 90       	pop	r6
    2272:	5f 90       	pop	r5
    2274:	4f 90       	pop	r4
    2276:	08 95       	ret

00002278 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2278:	af 92       	push	r10
    227a:	bf 92       	push	r11
    227c:	cf 92       	push	r12
    227e:	df 92       	push	r13
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	b8 2e       	mov	r11, r24
    228e:	a9 2e       	mov	r10, r25
    2290:	6a 01       	movw	r12, r20
    2292:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    2294:	2e ef       	ldi	r18, 0xFE	; 254
    2296:	31 e0       	ldi	r19, 0x01	; 1
    2298:	02 e0       	ldi	r16, 0x02	; 2
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    22a0:	88 23       	and	r24, r24
    22a2:	11 f0       	breq	.+4      	; 0x22a8 <check_fs+0x30>
    22a4:	23 e0       	ldi	r18, 0x03	; 3
    22a6:	33 c0       	rjmp	.+102    	; 0x230e <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    22a8:	cb 2d       	mov	r28, r11
    22aa:	da 2d       	mov	r29, r10
    22ac:	88 81       	ld	r24, Y
    22ae:	99 81       	ldd	r25, Y+1	; 0x01
    22b0:	85 55       	subi	r24, 0x55	; 85
    22b2:	9a 4a       	sbci	r25, 0xAA	; 170
    22b4:	11 f0       	breq	.+4      	; 0x22ba <check_fs+0x42>
    22b6:	22 e0       	ldi	r18, 0x02	; 2
    22b8:	2a c0       	rjmp	.+84     	; 0x230e <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    22ba:	8b 2d       	mov	r24, r11
    22bc:	9a 2d       	mov	r25, r10
    22be:	b7 01       	movw	r22, r14
    22c0:	a6 01       	movw	r20, r12
    22c2:	26 e3       	ldi	r18, 0x36	; 54
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	02 e0       	ldi	r16, 0x02	; 2
    22c8:	10 e0       	ldi	r17, 0x00	; 0
    22ca:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    22ce:	88 23       	and	r24, r24
    22d0:	39 f4       	brne	.+14     	; 0x22e0 <check_fs+0x68>
    22d2:	88 81       	ld	r24, Y
    22d4:	99 81       	ldd	r25, Y+1	; 0x01
    22d6:	86 54       	subi	r24, 0x46	; 70
    22d8:	91 44       	sbci	r25, 0x41	; 65
    22da:	11 f4       	brne	.+4      	; 0x22e0 <check_fs+0x68>
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	17 c0       	rjmp	.+46     	; 0x230e <check_fs+0x96>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    22e0:	8b 2d       	mov	r24, r11
    22e2:	9a 2d       	mov	r25, r10
    22e4:	b7 01       	movw	r22, r14
    22e6:	a6 01       	movw	r20, r12
    22e8:	22 e5       	ldi	r18, 0x52	; 82
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	02 e0       	ldi	r16, 0x02	; 2
    22ee:	10 e0       	ldi	r17, 0x00	; 0
    22f0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    22f4:	88 23       	and	r24, r24
    22f6:	11 f0       	breq	.+4      	; 0x22fc <check_fs+0x84>
    22f8:	21 e0       	ldi	r18, 0x01	; 1
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <check_fs+0x96>
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	88 81       	ld	r24, Y
    2300:	99 81       	ldd	r25, Y+1	; 0x01
    2302:	86 54       	subi	r24, 0x46	; 70
    2304:	91 44       	sbci	r25, 0x41	; 65
    2306:	09 f4       	brne	.+2      	; 0x230a <check_fs+0x92>
    2308:	21 e0       	ldi	r18, 0x01	; 1
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    230e:	82 2f       	mov	r24, r18
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	bf 90       	pop	r11
    2322:	af 90       	pop	r10
    2324:	08 95       	ret

00002326 <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    2326:	4f 92       	push	r4
    2328:	5f 92       	push	r5
    232a:	6f 92       	push	r6
    232c:	7f 92       	push	r7
    232e:	8f 92       	push	r8
    2330:	9f 92       	push	r9
    2332:	af 92       	push	r10
    2334:	bf 92       	push	r11
    2336:	cf 92       	push	r12
    2338:	df 92       	push	r13
    233a:	ef 92       	push	r14
    233c:	ff 92       	push	r15
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	fc 01       	movw	r30, r24
    2348:	5b 01       	movw	r10, r22
    234a:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    234c:	c0 91 b7 00 	lds	r28, 0x00B7
    2350:	d0 91 b8 00 	lds	r29, 0x00B8


	*bw = 0;
    2354:	da 01       	movw	r26, r20
    2356:	1d 92       	st	X+, r1
    2358:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    235a:	20 97       	sbiw	r28, 0x00	; 0
    235c:	11 f4       	brne	.+4      	; 0x2362 <pf_write+0x3c>
    235e:	86 e0       	ldi	r24, 0x06	; 6
    2360:	fd c0       	rjmp	.+506    	; 0x255c <pf_write+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	80 fd       	sbrc	r24, 0
    2368:	02 c0       	rjmp	.+4      	; 0x236e <pf_write+0x48>
    236a:	85 e0       	ldi	r24, 0x05	; 5
    236c:	f7 c0       	rjmp	.+494    	; 0x255c <pf_write+0x236>
    236e:	80 74       	andi	r24, 0x40	; 64
    2370:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    2372:	61 15       	cp	r22, r1
    2374:	71 05       	cpc	r23, r1
    2376:	89 f4       	brne	.+34     	; 0x239a <pf_write+0x74>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    2378:	89 2b       	or	r24, r25
    237a:	59 f0       	breq	.+22     	; 0x2392 <pf_write+0x6c>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	0e 94 39 09 	call	0x1272	; 0x1272 <disk_writep>
    238c:	88 23       	and	r24, r24
    238e:	09 f0       	breq	.+2      	; 0x2392 <pf_write+0x6c>
    2390:	e3 c0       	rjmp	.+454    	; 0x2558 <pf_write+0x232>
		fs->flag &= ~FA__WIP;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	8f 7b       	andi	r24, 0xBF	; 191
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	dd c0       	rjmp	.+442    	; 0x2554 <pf_write+0x22e>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    239a:	89 2b       	or	r24, r25
    239c:	51 f4       	brne	.+20     	; 0x23b2 <pf_write+0x8c>
			fs->fptr &= 0xFFFFFE00;
    239e:	8e 89       	ldd	r24, Y+22	; 0x16
    23a0:	9f 89       	ldd	r25, Y+23	; 0x17
    23a2:	a8 8d       	ldd	r26, Y+24	; 0x18
    23a4:	b9 8d       	ldd	r27, Y+25	; 0x19
    23a6:	80 70       	andi	r24, 0x00	; 0
    23a8:	9e 7f       	andi	r25, 0xFE	; 254
    23aa:	8e 8b       	std	Y+22, r24	; 0x16
    23ac:	9f 8b       	std	Y+23, r25	; 0x17
    23ae:	a8 8f       	std	Y+24, r26	; 0x18
    23b0:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    23b2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    23b4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    23b6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    23b8:	5d 8d       	ldd	r21, Y+29	; 0x1d
    23ba:	8e 89       	ldd	r24, Y+22	; 0x16
    23bc:	9f 89       	ldd	r25, Y+23	; 0x17
    23be:	a8 8d       	ldd	r26, Y+24	; 0x18
    23c0:	b9 8d       	ldd	r27, Y+25	; 0x19
    23c2:	28 1b       	sub	r18, r24
    23c4:	39 0b       	sbc	r19, r25
    23c6:	4a 0b       	sbc	r20, r26
    23c8:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    23ca:	c5 01       	movw	r24, r10
    23cc:	a0 e0       	ldi	r26, 0x00	; 0
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	28 17       	cp	r18, r24
    23d2:	39 07       	cpc	r19, r25
    23d4:	4a 07       	cpc	r20, r26
    23d6:	5b 07       	cpc	r21, r27
    23d8:	08 f4       	brcc	.+2      	; 0x23dc <pf_write+0xb6>
    23da:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    23dc:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    23de:	41 2c       	mov	r4, r1
    23e0:	a2 e0       	ldi	r26, 0x02	; 2
    23e2:	5a 2e       	mov	r5, r26
    23e4:	b3 c0       	rjmp	.+358    	; 0x254c <pf_write+0x226>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    23e6:	2e 89       	ldd	r18, Y+22	; 0x16
    23e8:	3f 89       	ldd	r19, Y+23	; 0x17
    23ea:	48 8d       	ldd	r20, Y+24	; 0x18
    23ec:	59 8d       	ldd	r21, Y+25	; 0x19
    23ee:	c9 01       	movw	r24, r18
    23f0:	91 70       	andi	r25, 0x01	; 1
    23f2:	89 2b       	or	r24, r25
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <pf_write+0xd2>
    23f6:	6c c0       	rjmp	.+216    	; 0x24d0 <pf_write+0x1aa>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    23f8:	da 01       	movw	r26, r20
    23fa:	c9 01       	movw	r24, r18
    23fc:	f9 e0       	ldi	r31, 0x09	; 9
    23fe:	b6 95       	lsr	r27
    2400:	a7 95       	ror	r26
    2402:	97 95       	ror	r25
    2404:	87 95       	ror	r24
    2406:	fa 95       	dec	r31
    2408:	d1 f7       	brne	.-12     	; 0x23fe <pf_write+0xd8>
    240a:	fa 80       	ldd	r15, Y+2	; 0x02
    240c:	fa 94       	dec	r15
    240e:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    2410:	d1 f4       	brne	.+52     	; 0x2446 <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    2412:	21 15       	cp	r18, r1
    2414:	31 05       	cpc	r19, r1
    2416:	41 05       	cpc	r20, r1
    2418:	51 05       	cpc	r21, r1
    241a:	29 f4       	brne	.+10     	; 0x2426 <pf_write+0x100>
    241c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    241e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2420:	88 a1       	ldd	r24, Y+32	; 0x20
    2422:	99 a1       	ldd	r25, Y+33	; 0x21
    2424:	06 c0       	rjmp	.+12     	; 0x2432 <pf_write+0x10c>
    2426:	6a a1       	ldd	r22, Y+34	; 0x22
    2428:	7b a1       	ldd	r23, Y+35	; 0x23
    242a:	8c a1       	ldd	r24, Y+36	; 0x24
    242c:	9d a1       	ldd	r25, Y+37	; 0x25
    242e:	0e 94 ed 0a 	call	0x15da	; 0x15da <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    2432:	62 30       	cpi	r22, 0x02	; 2
    2434:	71 05       	cpc	r23, r1
    2436:	81 05       	cpc	r24, r1
    2438:	91 05       	cpc	r25, r1
    243a:	08 f4       	brcc	.+2      	; 0x243e <pf_write+0x118>
    243c:	8d c0       	rjmp	.+282    	; 0x2558 <pf_write+0x232>
				fs->curr_clust = clst;				/* Update current cluster */
    243e:	6a a3       	std	Y+34, r22	; 0x22
    2440:	7b a3       	std	Y+35, r23	; 0x23
    2442:	8c a3       	std	Y+36, r24	; 0x24
    2444:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2446:	00 91 b7 00 	lds	r16, 0x00B7
    244a:	10 91 b8 00 	lds	r17, 0x00B8


	clst -= 2;
    244e:	2a a1       	ldd	r18, Y+34	; 0x22
    2450:	3b a1       	ldd	r19, Y+35	; 0x23
    2452:	4c a1       	ldd	r20, Y+36	; 0x24
    2454:	5d a1       	ldd	r21, Y+37	; 0x25
    2456:	22 50       	subi	r18, 0x02	; 2
    2458:	30 40       	sbci	r19, 0x00	; 0
    245a:	40 40       	sbci	r20, 0x00	; 0
    245c:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    245e:	f8 01       	movw	r30, r16
    2460:	86 81       	ldd	r24, Z+6	; 0x06
    2462:	97 81       	ldd	r25, Z+7	; 0x07
    2464:	a0 85       	ldd	r26, Z+8	; 0x08
    2466:	b1 85       	ldd	r27, Z+9	; 0x09
    2468:	02 97       	sbiw	r24, 0x02	; 2
    246a:	a1 09       	sbc	r26, r1
    246c:	b1 09       	sbc	r27, r1
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	4a 07       	cpc	r20, r26
    2474:	5b 07       	cpc	r21, r27
    2476:	08 f0       	brcs	.+2      	; 0x247a <pf_write+0x154>
    2478:	6f c0       	rjmp	.+222    	; 0x2558 <pf_write+0x232>
	return (DWORD)clst * fs->csize + fs->database;
    247a:	62 81       	ldd	r22, Z+2	; 0x02
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    2486:	9b 01       	movw	r18, r22
    2488:	ac 01       	movw	r20, r24
    248a:	f8 01       	movw	r30, r16
    248c:	82 89       	ldd	r24, Z+18	; 0x12
    248e:	93 89       	ldd	r25, Z+19	; 0x13
    2490:	a4 89       	ldd	r26, Z+20	; 0x14
    2492:	b5 89       	ldd	r27, Z+21	; 0x15
    2494:	28 0f       	add	r18, r24
    2496:	39 1f       	adc	r19, r25
    2498:	4a 1f       	adc	r20, r26
    249a:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    249c:	21 15       	cp	r18, r1
    249e:	31 05       	cpc	r19, r1
    24a0:	41 05       	cpc	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <pf_write+0x182>
    24a6:	58 c0       	rjmp	.+176    	; 0x2558 <pf_write+0x232>
			fs->dsect = sect + cs;
    24a8:	ba 01       	movw	r22, r20
    24aa:	a9 01       	movw	r20, r18
    24ac:	4f 0d       	add	r20, r15
    24ae:	51 1d       	adc	r21, r1
    24b0:	61 1d       	adc	r22, r1
    24b2:	71 1d       	adc	r23, r1
    24b4:	4e a3       	std	Y+38, r20	; 0x26
    24b6:	5f a3       	std	Y+39, r21	; 0x27
    24b8:	68 a7       	std	Y+40, r22	; 0x28
    24ba:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 39 09 	call	0x1272	; 0x1272 <disk_writep>
    24c4:	88 23       	and	r24, r24
    24c6:	09 f0       	breq	.+2      	; 0x24ca <pf_write+0x1a4>
    24c8:	47 c0       	rjmp	.+142    	; 0x2558 <pf_write+0x232>
			fs->flag |= FA__WIP;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	80 64       	ori	r24, 0x40	; 64
    24ce:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    24d0:	8e 89       	ldd	r24, Y+22	; 0x16
    24d2:	9f 89       	ldd	r25, Y+23	; 0x17
    24d4:	91 70       	andi	r25, 0x01	; 1
    24d6:	92 01       	movw	r18, r4
    24d8:	28 1b       	sub	r18, r24
    24da:	39 0b       	sbc	r19, r25
    24dc:	65 01       	movw	r12, r10
    24de:	2a 15       	cp	r18, r10
    24e0:	3b 05       	cpc	r19, r11
    24e2:	08 f4       	brcc	.+2      	; 0x24e6 <pf_write+0x1c0>
    24e4:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    24e6:	76 01       	movw	r14, r12
    24e8:	00 e0       	ldi	r16, 0x00	; 0
    24ea:	10 e0       	ldi	r17, 0x00	; 0
    24ec:	c4 01       	movw	r24, r8
    24ee:	b8 01       	movw	r22, r16
    24f0:	a7 01       	movw	r20, r14
    24f2:	0e 94 39 09 	call	0x1272	; 0x1272 <disk_writep>
    24f6:	88 23       	and	r24, r24
    24f8:	79 f5       	brne	.+94     	; 0x2558 <pf_write+0x232>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    24fa:	8e 89       	ldd	r24, Y+22	; 0x16
    24fc:	9f 89       	ldd	r25, Y+23	; 0x17
    24fe:	a8 8d       	ldd	r26, Y+24	; 0x18
    2500:	b9 8d       	ldd	r27, Y+25	; 0x19
    2502:	8e 0d       	add	r24, r14
    2504:	9f 1d       	adc	r25, r15
    2506:	a0 1f       	adc	r26, r16
    2508:	b1 1f       	adc	r27, r17
    250a:	9c 01       	movw	r18, r24
    250c:	8e 8b       	std	Y+22, r24	; 0x16
    250e:	9f 8b       	std	Y+23, r25	; 0x17
    2510:	a8 8f       	std	Y+24, r26	; 0x18
    2512:	b9 8f       	std	Y+25, r27	; 0x19
		btw -= wcnt; *bw += wcnt;
    2514:	d3 01       	movw	r26, r6
    2516:	8d 91       	ld	r24, X+
    2518:	9c 91       	ld	r25, X
    251a:	11 97       	sbiw	r26, 0x01	; 1
    251c:	8c 0d       	add	r24, r12
    251e:	9d 1d       	adc	r25, r13
    2520:	8d 93       	st	X+, r24
    2522:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    2524:	31 70       	andi	r19, 0x01	; 1
    2526:	23 2b       	or	r18, r19
    2528:	69 f4       	brne	.+26     	; 0x2544 <pf_write+0x21e>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	0e 94 39 09 	call	0x1272	; 0x1272 <disk_writep>
    253a:	88 23       	and	r24, r24
    253c:	69 f4       	brne	.+26     	; 0x2558 <pf_write+0x232>
			fs->flag &= ~FA__WIP;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	8f 7b       	andi	r24, 0xBF	; 191
    2542:	89 83       	std	Y+1, r24	; 0x01
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    2544:	8c 0c       	add	r8, r12
    2546:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    2548:	ac 18       	sub	r10, r12
    254a:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    254c:	a1 14       	cp	r10, r1
    254e:	b1 04       	cpc	r11, r1
    2550:	09 f0       	breq	.+2      	; 0x2554 <pf_write+0x22e>
    2552:	49 cf       	rjmp	.-366    	; 0x23e6 <pf_write+0xc0>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	02 c0       	rjmp	.+4      	; 0x255c <pf_write+0x236>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    2558:	19 82       	std	Y+1, r1	; 0x01
    255a:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
    256c:	bf 90       	pop	r11
    256e:	af 90       	pop	r10
    2570:	9f 90       	pop	r9
    2572:	8f 90       	pop	r8
    2574:	7f 90       	pop	r7
    2576:	6f 90       	pop	r6
    2578:	5f 90       	pop	r5
    257a:	4f 90       	pop	r4
    257c:	08 95       	ret

0000257e <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    257e:	6f 92       	push	r6
    2580:	7f 92       	push	r7
    2582:	8f 92       	push	r8
    2584:	9f 92       	push	r9
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	a4 97       	sbiw	r28, 0x24	; 36
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    25ac:	10 92 b8 00 	sts	0x00B8, r1
    25b0:	10 92 b7 00 	sts	0x00B7, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	09 f4       	brne	.+2      	; 0x25ba <pf_mount+0x3c>
    25b8:	ec c0       	rjmp	.+472    	; 0x2792 <pf_mount+0x214>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    25ba:	0e 94 ad 09 	call	0x135a	; 0x135a <disk_initialize>
    25be:	80 ff       	sbrs	r24, 0
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <pf_mount+0x48>
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	eb c0       	rjmp	.+470    	; 0x279c <pf_mount+0x21e>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    25c6:	4e 01       	movw	r8, r28
    25c8:	08 94       	sec
    25ca:	81 1c       	adc	r8, r1
    25cc:	91 1c       	adc	r9, r1
    25ce:	c4 01       	movw	r24, r8
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	70 e0       	ldi	r23, 0x00	; 0
    25d8:	0e 94 3c 11 	call	0x2278	; 0x2278 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	21 f0       	breq	.+8      	; 0x25e8 <pf_mount+0x6a>
    25e0:	cc 24       	eor	r12, r12
    25e2:	dd 24       	eor	r13, r13
    25e4:	76 01       	movw	r14, r12
    25e6:	1b c0       	rjmp	.+54     	; 0x261e <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    25e8:	c4 01       	movw	r24, r8
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	60 e0       	ldi	r22, 0x00	; 0
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	2e eb       	ldi	r18, 0xBE	; 190
    25f4:	31 e0       	ldi	r19, 0x01	; 1
    25f6:	00 e1       	ldi	r16, 0x10	; 16
    25f8:	10 e0       	ldi	r17, 0x00	; 0
    25fa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    25fe:	88 23       	and	r24, r24
    2600:	09 f0       	breq	.+2      	; 0x2604 <pf_mount+0x86>
    2602:	c9 c0       	rjmp	.+402    	; 0x2796 <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	88 23       	and	r24, r24
    2608:	09 f4       	brne	.+2      	; 0x260c <pf_mount+0x8e>
    260a:	c7 c0       	rjmp	.+398    	; 0x279a <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    260c:	c9 84       	ldd	r12, Y+9	; 0x09
    260e:	da 84       	ldd	r13, Y+10	; 0x0a
    2610:	eb 84       	ldd	r14, Y+11	; 0x0b
    2612:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    2614:	c4 01       	movw	r24, r8
    2616:	b7 01       	movw	r22, r14
    2618:	a6 01       	movw	r20, r12
    261a:	0e 94 3c 11 	call	0x2278	; 0x2278 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    261e:	83 30       	cpi	r24, 0x03	; 3
    2620:	09 f4       	brne	.+2      	; 0x2624 <pf_mount+0xa6>
    2622:	b9 c0       	rjmp	.+370    	; 0x2796 <pf_mount+0x218>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    2624:	88 23       	and	r24, r24
    2626:	09 f0       	breq	.+2      	; 0x262a <pf_mount+0xac>
    2628:	b8 c0       	rjmp	.+368    	; 0x279a <pf_mount+0x21c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    262a:	ce 01       	movw	r24, r28
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	b7 01       	movw	r22, r14
    2630:	a6 01       	movw	r20, r12
    2632:	2d e0       	ldi	r18, 0x0D	; 13
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	04 e2       	ldi	r16, 0x24	; 36
    2638:	10 e0       	ldi	r17, 0x00	; 0
    263a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <disk_readp>
    263e:	88 23       	and	r24, r24
    2640:	09 f0       	breq	.+2      	; 0x2644 <pf_mount+0xc6>
    2642:	a9 c0       	rjmp	.+338    	; 0x2796 <pf_mount+0x218>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    2644:	8a 85       	ldd	r24, Y+10	; 0x0a
    2646:	9b 85       	ldd	r25, Y+11	; 0x0b
    2648:	bc 01       	movw	r22, r24
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    264e:	61 15       	cp	r22, r1
    2650:	71 05       	cpc	r23, r1
    2652:	81 05       	cpc	r24, r1
    2654:	91 05       	cpc	r25, r1
    2656:	21 f4       	brne	.+8      	; 0x2660 <pf_mount+0xe2>
    2658:	68 8d       	ldd	r22, Y+24	; 0x18
    265a:	79 8d       	ldd	r23, Y+25	; 0x19
    265c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    265e:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    2660:	2c 81       	ldd	r18, Y+4	; 0x04
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    266c:	3b 01       	movw	r6, r22
    266e:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	9b 81       	ldd	r25, Y+3	; 0x03
    2674:	a0 e0       	ldi	r26, 0x00	; 0
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	c8 0e       	add	r12, r24
    267a:	d9 1e       	adc	r13, r25
    267c:	ea 1e       	adc	r14, r26
    267e:	fb 1e       	adc	r15, r27
    2680:	f5 01       	movw	r30, r10
    2682:	c2 86       	std	Z+10, r12	; 0x0a
    2684:	d3 86       	std	Z+11, r13	; 0x0b
    2686:	e4 86       	std	Z+12, r14	; 0x0c
    2688:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    268e:	2d 81       	ldd	r18, Y+5	; 0x05
    2690:	3e 81       	ldd	r19, Y+6	; 0x06
    2692:	35 83       	std	Z+5, r19	; 0x05
    2694:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    2696:	8f 81       	ldd	r24, Y+7	; 0x07
    2698:	98 85       	ldd	r25, Y+8	; 0x08
    269a:	7c 01       	movw	r14, r24
    269c:	00 e0       	ldi	r16, 0x00	; 0
    269e:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    26a0:	e1 14       	cp	r14, r1
    26a2:	f1 04       	cpc	r15, r1
    26a4:	01 05       	cpc	r16, r1
    26a6:	11 05       	cpc	r17, r1
    26a8:	21 f4       	brne	.+8      	; 0x26b2 <pf_mount+0x134>
    26aa:	ec 88       	ldd	r14, Y+20	; 0x14
    26ac:	fd 88       	ldd	r15, Y+21	; 0x15
    26ae:	0e 89       	ldd	r16, Y+22	; 0x16
    26b0:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	a0 e0       	ldi	r26, 0x00	; 0
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e8 1a       	sub	r14, r24
    26bc:	f9 0a       	sbc	r15, r25
    26be:	0a 0b       	sbc	r16, r26
    26c0:	1b 0b       	sbc	r17, r27
    26c2:	e6 18       	sub	r14, r6
    26c4:	f7 08       	sbc	r15, r7
    26c6:	08 09       	sbc	r16, r8
    26c8:	19 09       	sbc	r17, r9
    26ca:	84 e0       	ldi	r24, 0x04	; 4
    26cc:	36 95       	lsr	r19
    26ce:	27 95       	ror	r18
    26d0:	8a 95       	dec	r24
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <pf_mount+0x14e>
    26d4:	c9 01       	movw	r24, r18
    26d6:	a0 e0       	ldi	r26, 0x00	; 0
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e8 1a       	sub	r14, r24
    26dc:	f9 0a       	sbc	r15, r25
    26de:	0a 0b       	sbc	r16, r26
    26e0:	1b 0b       	sbc	r17, r27
    26e2:	f5 01       	movw	r30, r10
    26e4:	22 81       	ldd	r18, Z+2	; 0x02
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	50 e0       	ldi	r21, 0x00	; 0
    26ec:	c8 01       	movw	r24, r16
    26ee:	b7 01       	movw	r22, r14
    26f0:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__udivmodsi4>
    26f4:	2e 5f       	subi	r18, 0xFE	; 254
    26f6:	3f 4f       	sbci	r19, 0xFF	; 255
    26f8:	4f 4f       	sbci	r20, 0xFF	; 255
    26fa:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    26fc:	f5 01       	movw	r30, r10
    26fe:	26 83       	std	Z+6, r18	; 0x06
    2700:	37 83       	std	Z+7, r19	; 0x07
    2702:	40 87       	std	Z+8, r20	; 0x08
    2704:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    2706:	27 3f       	cpi	r18, 0xF7	; 247
    2708:	ff e0       	ldi	r31, 0x0F	; 15
    270a:	3f 07       	cpc	r19, r31
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	4f 07       	cpc	r20, r31
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	5f 07       	cpc	r21, r31
    2714:	10 f4       	brcc	.+4      	; 0x271a <pf_mount+0x19c>
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	01 c0       	rjmp	.+2      	; 0x271c <pf_mount+0x19e>
    271a:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    271c:	27 5f       	subi	r18, 0xF7	; 247
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	40 40       	sbci	r20, 0x00	; 0
    2722:	50 40       	sbci	r21, 0x00	; 0
    2724:	08 f0       	brcs	.+2      	; 0x2728 <pf_mount+0x1aa>
    2726:	83 e0       	ldi	r24, 0x03	; 3
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    2728:	f5 01       	movw	r30, r10
    272a:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    272c:	83 30       	cpi	r24, 0x03	; 3
    272e:	29 f4       	brne	.+10     	; 0x273a <pf_mount+0x1bc>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    2730:	88 a1       	ldd	r24, Y+32	; 0x20
    2732:	99 a1       	ldd	r25, Y+33	; 0x21
    2734:	aa a1       	ldd	r26, Y+34	; 0x22
    2736:	bb a1       	ldd	r27, Y+35	; 0x23
    2738:	09 c0       	rjmp	.+18     	; 0x274c <pf_mount+0x1ce>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    273a:	f5 01       	movw	r30, r10
    273c:	82 85       	ldd	r24, Z+10	; 0x0a
    273e:	93 85       	ldd	r25, Z+11	; 0x0b
    2740:	a4 85       	ldd	r26, Z+12	; 0x0c
    2742:	b5 85       	ldd	r27, Z+13	; 0x0d
    2744:	86 0d       	add	r24, r6
    2746:	97 1d       	adc	r25, r7
    2748:	a8 1d       	adc	r26, r8
    274a:	b9 1d       	adc	r27, r9
    274c:	86 87       	std	Z+14, r24	; 0x0e
    274e:	97 87       	std	Z+15, r25	; 0x0f
    2750:	a0 8b       	std	Z+16, r26	; 0x10
    2752:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    2754:	f5 01       	movw	r30, r10
    2756:	84 81       	ldd	r24, Z+4	; 0x04
    2758:	95 81       	ldd	r25, Z+5	; 0x05
    275a:	b4 e0       	ldi	r27, 0x04	; 4
    275c:	96 95       	lsr	r25
    275e:	87 95       	ror	r24
    2760:	ba 95       	dec	r27
    2762:	e1 f7       	brne	.-8      	; 0x275c <pf_mount+0x1de>
    2764:	a0 e0       	ldi	r26, 0x00	; 0
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	22 85       	ldd	r18, Z+10	; 0x0a
    276a:	33 85       	ldd	r19, Z+11	; 0x0b
    276c:	44 85       	ldd	r20, Z+12	; 0x0c
    276e:	55 85       	ldd	r21, Z+13	; 0x0d
    2770:	82 0f       	add	r24, r18
    2772:	93 1f       	adc	r25, r19
    2774:	a4 1f       	adc	r26, r20
    2776:	b5 1f       	adc	r27, r21
    2778:	86 0d       	add	r24, r6
    277a:	97 1d       	adc	r25, r7
    277c:	a8 1d       	adc	r26, r8
    277e:	b9 1d       	adc	r27, r9
    2780:	82 8b       	std	Z+18, r24	; 0x12
    2782:	93 8b       	std	Z+19, r25	; 0x13
    2784:	a4 8b       	std	Z+20, r26	; 0x14
    2786:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    2788:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    278a:	b0 92 b8 00 	sts	0x00B8, r11
    278e:	a0 92 b7 00 	sts	0x00B7, r10
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	03 c0       	rjmp	.+6      	; 0x279c <pf_mount+0x21e>

	return FR_OK;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	01 c0       	rjmp	.+2      	; 0x279c <pf_mount+0x21e>
    279a:	87 e0       	ldi	r24, 0x07	; 7
}
    279c:	a4 96       	adiw	r28, 0x24	; 36
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	df 90       	pop	r13
    27b6:	cf 90       	pop	r12
    27b8:	bf 90       	pop	r11
    27ba:	af 90       	pop	r10
    27bc:	9f 90       	pop	r9
    27be:	8f 90       	pop	r8
    27c0:	7f 90       	pop	r7
    27c2:	6f 90       	pop	r6
    27c4:	08 95       	ret

000027c6 <TOUCH_Reset>:
	
	char temp;
	
	// Init port
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);		// Disable CS
    27c6:	c4 9a       	sbi	0x18, 4	; 24
	TOUCH_CS_DDR |= (1<< TOUCH_CS_BIT);		// Turns on CS pin as output
    27c8:	bc 9a       	sbi	0x17, 4	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_SCK_BIT);		// Set as output
    27ca:	bf 9a       	sbi	0x17, 7	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_MOSI_BIT);		// Set as output
    27cc:	bd 9a       	sbi	0x17, 5	; 23
	TOUCH_SPI_PORT |= (1<< TOUCH_MISO_BIT);	// Internal pull up MISO
    27ce:	c6 9a       	sbi	0x18, 6	; 24

	// Init spi as master
	//
	SPCR = (1<< SPE) | (1<< MSTR);				// Initialize SPI port every /32 clock
    27d0:	80 e5       	ldi	r24, 0x50	; 80
    27d2:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<< SPR1);
    27d4:	69 9a       	sbi	0x0d, 1	; 13
	SPSR = (1<< SPI2X);
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	8e b9       	out	0x0e, r24	; 14
	temp = SPSR;								// Clear interrupt flag	
    27da:	8e b1       	in	r24, 0x0e	; 14
}
    27dc:	08 95       	ret

000027de <TOUCH_NativeRead>:

//////////////////////////////
//
// TOUCH_NativeRead(&x, &y);
//
void TOUCH_NativeRead (int *x, int *y) {
    27de:	fc 01       	movw	r30, r24
    27e0:	db 01       	movw	r26, r22
	
	unsigned char buf_data[4];

	// Enable touch screen CS
	//
	TOUCH_CS_PORT &= ~(1<< TOUCH_CS_BIT);
    27e2:	c4 98       	cbi	0x18, 4	; 24
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    27e4:	80 e9       	ldi	r24, 0x90	; 144
    27e6:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    27e8:	77 9b       	sbis	0x0e, 7	; 14
    27ea:	fe cf       	rjmp	.-4      	; 0x27e8 <TOUCH_NativeRead+0xa>
	return (SPDR);						// get data
    27ec:	8f b1       	in	r24, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    27ee:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    27f0:	77 9b       	sbis	0x0e, 7	; 14
    27f2:	fe cf       	rjmp	.-4      	; 0x27f0 <TOUCH_NativeRead+0x12>
	return (SPDR);						// get data
    27f4:	9f b1       	in	r25, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    27f6:	80 ed       	ldi	r24, 0xD0	; 208
    27f8:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    27fa:	77 9b       	sbis	0x0e, 7	; 14
    27fc:	fe cf       	rjmp	.-4      	; 0x27fa <TOUCH_NativeRead+0x1c>
	return (SPDR);						// get data
    27fe:	2f b1       	in	r18, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2800:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    2802:	77 9b       	sbis	0x0e, 7	; 14
    2804:	fe cf       	rjmp	.-4      	; 0x2802 <TOUCH_NativeRead+0x24>
	return (SPDR);						// get data
    2806:	6f b1       	in	r22, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2808:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    280a:	77 9b       	sbis	0x0e, 7	; 14
    280c:	fe cf       	rjmp	.-4      	; 0x280a <TOUCH_NativeRead+0x2c>
	return (SPDR);						// get data
    280e:	4f b1       	in	r20, 0x0f	; 15
	buf_data[2] = TOUCH_ReadADC(TOUCH_READ);	// Read ADC data Y-Position (7-bit byte High) data: 0ddddddd (bit11-bit5)
	buf_data[3] = TOUCH_ReadADC(TOUCH_READ);		// Write Command Measure Z1 and Read ADC data Y-Position (5-bit byte Low)  data: ddddd000 (bit)

	// Disable touch screen CS
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);
    2810:	c4 9a       	sbi	0x18, 4	; 24

	// Calculate
	//
	*x  = (int)buf_data[0] << 5;	// Shift 7 bit High
	*x |= (int)buf_data[1] >> 3;	// Shift 5 bit low
    2812:	26 95       	lsr	r18
    2814:	26 95       	lsr	r18
    2816:	26 95       	lsr	r18
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	89 2f       	mov	r24, r25
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	55 e0       	ldi	r21, 0x05	; 5
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	5a 95       	dec	r21
    2826:	e1 f7       	brne	.-8      	; 0x2820 <TOUCH_NativeRead+0x42>
    2828:	28 2b       	or	r18, r24
    282a:	39 2b       	or	r19, r25
    282c:	31 83       	std	Z+1, r19	; 0x01
    282e:	20 83       	st	Z, r18
	
	*y  = (int)buf_data[2] << 5;	// Shift 7 bit High
	*y |= (int)buf_data[3] >> 3;	// Shift 5 bit low
    2830:	46 95       	lsr	r20
    2832:	46 95       	lsr	r20
    2834:	46 95       	lsr	r20
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	86 2f       	mov	r24, r22
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	25 e0       	ldi	r18, 0x05	; 5
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	2a 95       	dec	r18
    2844:	e1 f7       	brne	.-8      	; 0x283e <TOUCH_NativeRead+0x60>
    2846:	48 2b       	or	r20, r24
    2848:	59 2b       	or	r21, r25
    284a:	4d 93       	st	X+, r20
    284c:	5c 93       	st	X, r21
}
    284e:	08 95       	ret

00002850 <TOUCH_Read>:

////////////////////////
//
// TOUCH_Read(&x, &y);
//
void TOUCH_Read (int *x, int *y) {
    2850:	2f 92       	push	r2
    2852:	3f 92       	push	r3
    2854:	4f 92       	push	r4
    2856:	5f 92       	push	r5
    2858:	6f 92       	push	r6
    285a:	7f 92       	push	r7
    285c:	9f 92       	push	r9
    285e:	af 92       	push	r10
    2860:	bf 92       	push	r11
    2862:	cf 92       	push	r12
    2864:	df 92       	push	r13
    2866:	ef 92       	push	r14
    2868:	ff 92       	push	r15
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	00 d0       	rcall	.+0      	; 0x2874 <TOUCH_Read+0x24>
    2874:	00 d0       	rcall	.+0      	; 0x2876 <TOUCH_Read+0x26>
    2876:	00 d0       	rcall	.+0      	; 0x2878 <TOUCH_Read+0x28>
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	1c 01       	movw	r2, r24
    287e:	7e 83       	std	Y+6, r23	; 0x06
    2880:	6d 83       	std	Y+5, r22	; 0x05
    2882:	99 24       	eor	r9, r9
    2884:	ee 24       	eor	r14, r14
    2886:	ff 24       	eor	r15, r15
    2888:	87 01       	movw	r16, r14
    288a:	aa 24       	eor	r10, r10
    288c:	bb 24       	eor	r11, r11
    288e:	65 01       	movw	r12, r10
	int tx, ty;
	double dx, dy;

	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
		
		TOUCH_NativeRead(&tx, &ty);
    2890:	63 e0       	ldi	r22, 0x03	; 3
    2892:	46 2e       	mov	r4, r22
    2894:	51 2c       	mov	r5, r1
    2896:	4c 0e       	add	r4, r28
    2898:	5d 1e       	adc	r5, r29
    289a:	3e 01       	movw	r6, r28
    289c:	08 94       	sec
    289e:	61 1c       	adc	r6, r1
    28a0:	71 1c       	adc	r7, r1
    28a2:	c3 01       	movw	r24, r6
    28a4:	b2 01       	movw	r22, r4
    28a6:	0e 94 ef 13 	call	0x27de	; 0x27de <TOUCH_NativeRead>
		
//		if ((tx < TC_x_MAX) && (ty > TC_y_MIN)) {
			
			ix += tx;
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	aa 27       	eor	r26, r26
    28b0:	97 fd       	sbrc	r25, 7
    28b2:	a0 95       	com	r26
    28b4:	ba 2f       	mov	r27, r26
    28b6:	e8 0e       	add	r14, r24
    28b8:	f9 1e       	adc	r15, r25
    28ba:	0a 1f       	adc	r16, r26
    28bc:	1b 1f       	adc	r17, r27
			iy += ty;
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	aa 27       	eor	r26, r26
    28c4:	97 fd       	sbrc	r25, 7
    28c6:	a0 95       	com	r26
    28c8:	ba 2f       	mov	r27, r26
    28ca:	a8 0e       	add	r10, r24
    28cc:	b9 1e       	adc	r11, r25
    28ce:	ca 1e       	adc	r12, r26
    28d0:	db 1e       	adc	r13, r27
	char i, s = 0;
	long ix = 0, iy = 0;
	int tx, ty;
	double dx, dy;

	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
    28d2:	93 94       	inc	r9
    28d4:	8a e0       	ldi	r24, 0x0A	; 10
    28d6:	98 16       	cp	r9, r24
    28d8:	21 f7       	brne	.-56     	; 0x28a2 <TOUCH_Read+0x52>
//		}
	}
	
	if (!s) return;

	ix /= s;
    28da:	c8 01       	movw	r24, r16
    28dc:	b7 01       	movw	r22, r14
    28de:	2a e0       	ldi	r18, 0x0A	; 10
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    28ea:	79 01       	movw	r14, r18
    28ec:	8a 01       	movw	r16, r20
	iy /= s;
    28ee:	c6 01       	movw	r24, r12
    28f0:	b5 01       	movw	r22, r10
    28f2:	2a e0       	ldi	r18, 0x0A	; 10
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    28fe:	59 01       	movw	r10, r18
    2900:	6a 01       	movw	r12, r20

	// Calculate 320x240
	//
	ix -= TC_x_0;
	dx = (double)ix / (double)TC_x_100;
	*x = LCD_MAX_WIDTH - (int)(LCD_MAX_WIDTH * dx);
    2902:	80 91 bb 00 	lds	r24, 0x00BB
    2906:	90 91 bc 00 	lds	r25, 0x00BC
    290a:	aa 27       	eor	r26, r26
    290c:	97 fd       	sbrc	r25, 7
    290e:	a0 95       	com	r26
    2910:	ba 2f       	mov	r27, r26
    2912:	e8 1a       	sub	r14, r24
    2914:	f9 0a       	sbc	r15, r25
    2916:	0a 0b       	sbc	r16, r26
    2918:	1b 0b       	sbc	r17, r27
    291a:	c8 01       	movw	r24, r16
    291c:	b7 01       	movw	r22, r14
    291e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__floatsisf>
    2922:	7b 01       	movw	r14, r22
    2924:	8c 01       	movw	r16, r24
    2926:	60 91 bf 00 	lds	r22, 0x00BF
    292a:	70 91 c0 00 	lds	r23, 0x00C0
    292e:	88 27       	eor	r24, r24
    2930:	77 fd       	sbrc	r23, 7
    2932:	80 95       	com	r24
    2934:	98 2f       	mov	r25, r24
    2936:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__floatsisf>
    293a:	9b 01       	movw	r18, r22
    293c:	ac 01       	movw	r20, r24
    293e:	c8 01       	movw	r24, r16
    2940:	b7 01       	movw	r22, r14
    2942:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__divsf3>
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 ea       	ldi	r20, 0xA0	; 160
    294c:	53 e4       	ldi	r21, 0x43	; 67
    294e:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__mulsf3>
    2952:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__fixsfsi>
    2956:	20 e4       	ldi	r18, 0x40	; 64
    2958:	31 e0       	ldi	r19, 0x01	; 1
    295a:	26 1b       	sub	r18, r22
    295c:	37 0b       	sbc	r19, r23
    295e:	f1 01       	movw	r30, r2
    2960:	31 83       	std	Z+1, r19	; 0x01
    2962:	20 83       	st	Z, r18

	iy -= TC_y_0;
	dy = (double)iy / (double)TC_y_100;
	*y = (int)(LCD_MAX_HEIGHT * dy);
    2964:	80 91 bd 00 	lds	r24, 0x00BD
    2968:	90 91 be 00 	lds	r25, 0x00BE
    296c:	aa 27       	eor	r26, r26
    296e:	97 fd       	sbrc	r25, 7
    2970:	a0 95       	com	r26
    2972:	ba 2f       	mov	r27, r26
    2974:	a8 1a       	sub	r10, r24
    2976:	b9 0a       	sbc	r11, r25
    2978:	ca 0a       	sbc	r12, r26
    297a:	db 0a       	sbc	r13, r27
    297c:	c6 01       	movw	r24, r12
    297e:	b5 01       	movw	r22, r10
    2980:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__floatsisf>
    2984:	7b 01       	movw	r14, r22
    2986:	8c 01       	movw	r16, r24
    2988:	60 91 b9 00 	lds	r22, 0x00B9
    298c:	70 91 ba 00 	lds	r23, 0x00BA
    2990:	88 27       	eor	r24, r24
    2992:	77 fd       	sbrc	r23, 7
    2994:	80 95       	com	r24
    2996:	98 2f       	mov	r25, r24
    2998:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__floatsisf>
    299c:	9b 01       	movw	r18, r22
    299e:	ac 01       	movw	r20, r24
    29a0:	c8 01       	movw	r24, r16
    29a2:	b7 01       	movw	r22, r14
    29a4:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__divsf3>
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e7       	ldi	r20, 0x70	; 112
    29ae:	53 e4       	ldi	r21, 0x43	; 67
    29b0:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__mulsf3>
    29b4:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__fixsfsi>
    29b8:	ed 81       	ldd	r30, Y+5	; 0x05
    29ba:	fe 81       	ldd	r31, Y+6	; 0x06
    29bc:	71 83       	std	Z+1, r23	; 0x01
    29be:	60 83       	st	Z, r22
}
    29c0:	26 96       	adiw	r28, 0x06	; 6
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	cf 90       	pop	r12
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	9f 90       	pop	r9
    29e2:	7f 90       	pop	r7
    29e4:	6f 90       	pop	r6
    29e6:	5f 90       	pop	r5
    29e8:	4f 90       	pop	r4
    29ea:	3f 90       	pop	r3
    29ec:	2f 90       	pop	r2
    29ee:	08 95       	ret

000029f0 <TOUCH_ReadADC>:
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29f0:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29f2:	77 9b       	sbis	0x0e, 7	; 14
    29f4:	fe cf       	rjmp	.-4      	; 0x29f2 <TOUCH_ReadADC+0x2>
	return (SPDR);						// get data
    29f6:	8f b1       	in	r24, 0x0f	; 15
}
    29f8:	08 95       	ret

000029fa <TOUCH_Calibrate>:

///////////////////////
//
// TOUCH_Calibrate();
//
void TOUCH_Calibrate (void) {
    29fa:	4f 92       	push	r4
    29fc:	5f 92       	push	r5
    29fe:	6f 92       	push	r6
    2a00:	7f 92       	push	r7
    2a02:	8f 92       	push	r8
    2a04:	9f 92       	push	r9
    2a06:	af 92       	push	r10
    2a08:	bf 92       	push	r11
    2a0a:	cf 92       	push	r12
    2a0c:	df 92       	push	r13
    2a0e:	ef 92       	push	r14
    2a10:	ff 92       	push	r15
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	c8 56       	subi	r28, 0x68	; 104
    2a20:	d0 40       	sbci	r29, 0x00	; 0
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
	long x, y;
	char i, text[100];
	
	// Clean screen and reset TOUCH 
	//
	LCD_Clear(BLACK);
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
	TOUCH_Reset();
    2a34:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TOUCH_Reset>
	TOUCH_DOWN_INIT();
    2a38:	8b 98       	cbi	0x11, 3	; 17
    2a3a:	93 98       	cbi	0x12, 3	; 18
	
	//////////////////////
	//
	// Write first point 
	//
	LCD_DrawCircle(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, 10, WHITE, false);
    2a3c:	80 e2       	ldi	r24, 0x20	; 32
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	68 e1       	ldi	r22, 0x18	; 24
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	4a e0       	ldi	r20, 0x0A	; 10
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	2f ef       	ldi	r18, 0xFF	; 255
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	00 e0       	ldi	r16, 0x00	; 0
    2a4e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, 3, WHITE, false);
    2a52:	80 e2       	ldi	r24, 0x20	; 32
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	68 e1       	ldi	r22, 0x18	; 24
    2a58:	70 e0       	ldi	r23, 0x00	; 0
    2a5a:	43 e0       	ldi	r20, 0x03	; 3
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	2f ef       	ldi	r18, 0xFF	; 255
    2a60:	3f ef       	ldi	r19, 0xFF	; 255
    2a62:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
	// Do multiple sampling for better result
	//
	x = 0;
	y = 0;
	
	while(!TOUCH_DOWN);
    2a66:	83 99       	sbic	0x10, 3	; 16
    2a68:	fe cf       	rjmp	.-4      	; 0x2a66 <TOUCH_Calibrate+0x6c>
    2a6a:	ee 24       	eor	r14, r14
    2a6c:	ff 24       	eor	r15, r15
    2a6e:	87 01       	movw	r16, r14
    2a70:	aa 24       	eor	r10, r10
    2a72:	bb 24       	eor	r11, r11
    2a74:	65 01       	movw	r12, r10
    2a76:	99 24       	eor	r9, r9
	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
		
		TOUCH_NativeRead(&tx, &ty);
    2a78:	83 e0       	ldi	r24, 0x03	; 3
    2a7a:	48 2e       	mov	r4, r24
    2a7c:	51 2c       	mov	r5, r1
    2a7e:	4c 0e       	add	r4, r28
    2a80:	5d 1e       	adc	r5, r29
    2a82:	3e 01       	movw	r6, r28
    2a84:	08 94       	sec
    2a86:	61 1c       	adc	r6, r1
    2a88:	71 1c       	adc	r7, r1
    2a8a:	c3 01       	movw	r24, r6
    2a8c:	b2 01       	movw	r22, r4
    2a8e:	0e 94 ef 13 	call	0x27de	; 0x27de <TOUCH_NativeRead>
		x += tx;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	aa 27       	eor	r26, r26
    2a98:	97 fd       	sbrc	r25, 7
    2a9a:	a0 95       	com	r26
    2a9c:	ba 2f       	mov	r27, r26
    2a9e:	e8 0e       	add	r14, r24
    2aa0:	f9 1e       	adc	r15, r25
    2aa2:	0a 1f       	adc	r16, r26
    2aa4:	1b 1f       	adc	r17, r27
		y += ty;
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	aa 27       	eor	r26, r26
    2aac:	97 fd       	sbrc	r25, 7
    2aae:	a0 95       	com	r26
    2ab0:	ba 2f       	mov	r27, r26
    2ab2:	a8 0e       	add	r10, r24
    2ab4:	b9 1e       	adc	r11, r25
    2ab6:	ca 1e       	adc	r12, r26
    2ab8:	db 1e       	adc	r13, r27
	//
	x = 0;
	y = 0;
	
	while(!TOUCH_DOWN);
	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
    2aba:	93 94       	inc	r9
    2abc:	8a e0       	ldi	r24, 0x0A	; 10
    2abe:	98 16       	cp	r9, r24
    2ac0:	21 f7       	brne	.-56     	; 0x2a8a <TOUCH_Calibrate+0x90>
		y += ty;
	}
	x /= TOUCH_SAMPLE_COUNT;
	y /= TOUCH_SAMPLE_COUNT;
	
	TC_x_0 = x;
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	b7 01       	movw	r22, r14
    2ac6:	2a e0       	ldi	r18, 0x0A	; 10
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    2ad2:	30 93 bc 00 	sts	0x00BC, r19
    2ad6:	20 93 bb 00 	sts	0x00BB, r18
	TC_y_0 = y;
    2ada:	c6 01       	movw	r24, r12
    2adc:	b5 01       	movw	r22, r10
    2ade:	2a e0       	ldi	r18, 0x0A	; 10
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    2aea:	30 93 be 00 	sts	0x00BE, r19
    2aee:	20 93 bd 00 	sts	0x00BD, r18
	
	///////////////////////
	//
	// Write second point
	//
	while(TOUCH_DOWN);
    2af2:	83 9b       	sbis	0x10, 3	; 16
    2af4:	fe cf       	rjmp	.-4      	; 0x2af2 <TOUCH_Calibrate+0xf8>
	LCD_Clear(BLACK);
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, 10, WHITE, false);
    2afe:	80 e2       	ldi	r24, 0x20	; 32
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	68 e7       	ldi	r22, 0x78	; 120
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	4a e0       	ldi	r20, 0x0A	; 10
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	2f ef       	ldi	r18, 0xFF	; 255
    2b0c:	3f ef       	ldi	r19, 0xFF	; 255
    2b0e:	00 e0       	ldi	r16, 0x00	; 0
    2b10:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, 3, WHITE, false);
    2b14:	80 e2       	ldi	r24, 0x20	; 32
    2b16:	91 e0       	ldi	r25, 0x01	; 1
    2b18:	68 e7       	ldi	r22, 0x78	; 120
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	43 e0       	ldi	r20, 0x03	; 3
    2b1e:	50 e0       	ldi	r21, 0x00	; 0
    2b20:	2f ef       	ldi	r18, 0xFF	; 255
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
	// Do multiple sampling for better result
	//
	x = 0;
	y = 0;
	
	while(!TOUCH_DOWN);
    2b28:	83 99       	sbic	0x10, 3	; 16
    2b2a:	fe cf       	rjmp	.-4      	; 0x2b28 <TOUCH_Calibrate+0x12e>
    2b2c:	ee 24       	eor	r14, r14
    2b2e:	ff 24       	eor	r15, r15
    2b30:	87 01       	movw	r16, r14
    2b32:	dd 24       	eor	r13, r13
	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
		
		TOUCH_NativeRead(&tx, &ty);
    2b34:	b3 e0       	ldi	r27, 0x03	; 3
    2b36:	8b 2e       	mov	r8, r27
    2b38:	91 2c       	mov	r9, r1
    2b3a:	8c 0e       	add	r8, r28
    2b3c:	9d 1e       	adc	r9, r29
    2b3e:	5e 01       	movw	r10, r28
    2b40:	08 94       	sec
    2b42:	a1 1c       	adc	r10, r1
    2b44:	b1 1c       	adc	r11, r1
    2b46:	c5 01       	movw	r24, r10
    2b48:	b4 01       	movw	r22, r8
    2b4a:	0e 94 ef 13 	call	0x27de	; 0x27de <TOUCH_NativeRead>
		x += tx;
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	aa 27       	eor	r26, r26
    2b54:	97 fd       	sbrc	r25, 7
    2b56:	a0 95       	com	r26
    2b58:	ba 2f       	mov	r27, r26
    2b5a:	e8 0e       	add	r14, r24
    2b5c:	f9 1e       	adc	r15, r25
    2b5e:	0a 1f       	adc	r16, r26
    2b60:	1b 1f       	adc	r17, r27
	//
	x = 0;
	y = 0;
	
	while(!TOUCH_DOWN);
	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
    2b62:	d3 94       	inc	r13
    2b64:	9a e0       	ldi	r25, 0x0A	; 10
    2b66:	d9 16       	cp	r13, r25
    2b68:	71 f7       	brne	.-36     	; 0x2b46 <TOUCH_Calibrate+0x14c>
		
		TOUCH_NativeRead(&tx, &ty);
		x += tx;
	}
	x /= TOUCH_SAMPLE_COUNT;
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	b7 01       	movw	r22, r14
    2b6e:	2a e0       	ldi	r18, 0x0A	; 10
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    2b7a:	79 01       	movw	r14, r18
    2b7c:	8a 01       	movw	r16, r20
	
	tmp = (TC_x_0 - x)/8;	// 10%
    2b7e:	60 91 bb 00 	lds	r22, 0x00BB
    2b82:	70 91 bc 00 	lds	r23, 0x00BC
    2b86:	88 27       	eor	r24, r24
    2b88:	77 fd       	sbrc	r23, 7
    2b8a:	80 95       	com	r24
    2b8c:	98 2f       	mov	r25, r24
    2b8e:	6e 19       	sub	r22, r14
    2b90:	7f 09       	sbc	r23, r15
    2b92:	80 0b       	sbc	r24, r16
    2b94:	91 0b       	sbc	r25, r17
    2b96:	28 e0       	ldi	r18, 0x08	; 8
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
	TC_x_100 = tmp*10;		// 100%
    2ba2:	c9 01       	movw	r24, r18
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	b9 01       	movw	r22, r18
    2baa:	f3 e0       	ldi	r31, 0x03	; 3
    2bac:	66 0f       	add	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	fa 95       	dec	r31
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <TOUCH_Calibrate+0x1b2>
    2bb4:	86 0f       	add	r24, r22
    2bb6:	97 1f       	adc	r25, r23
    2bb8:	90 93 c0 00 	sts	0x00C0, r25
    2bbc:	80 93 bf 00 	sts	0x00BF, r24
	TC_x_0 = x - tmp;		// 0%
    2bc0:	e2 1a       	sub	r14, r18
    2bc2:	f3 0a       	sbc	r15, r19
    2bc4:	f0 92 bc 00 	sts	0x00BC, r15
    2bc8:	e0 92 bb 00 	sts	0x00BB, r14
	
	//////////////////////
	//
	// Write third point
	//
	while(TOUCH_DOWN);
    2bcc:	83 9b       	sbis	0x10, 3	; 16
    2bce:	fe cf       	rjmp	.-4      	; 0x2bcc <TOUCH_Calibrate+0x1d2>
	LCD_Clear(BLACK);
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, 10, WHITE, false);
    2bd8:	80 ea       	ldi	r24, 0xA0	; 160
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	68 ed       	ldi	r22, 0xD8	; 216
    2bde:	70 e0       	ldi	r23, 0x00	; 0
    2be0:	4a e0       	ldi	r20, 0x0A	; 10
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	2f ef       	ldi	r18, 0xFF	; 255
    2be6:	3f ef       	ldi	r19, 0xFF	; 255
    2be8:	00 e0       	ldi	r16, 0x00	; 0
    2bea:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, 3, WHITE, false);
    2bee:	80 ea       	ldi	r24, 0xA0	; 160
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	68 ed       	ldi	r22, 0xD8	; 216
    2bf4:	70 e0       	ldi	r23, 0x00	; 0
    2bf6:	43 e0       	ldi	r20, 0x03	; 3
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	2f ef       	ldi	r18, 0xFF	; 255
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <LCD_DrawCircle>
	// Do multiple sampling for better result
	//
	x = 0;
	y = 0;
	
	while(!TOUCH_DOWN);
    2c02:	83 99       	sbic	0x10, 3	; 16
    2c04:	fe cf       	rjmp	.-4      	; 0x2c02 <TOUCH_Calibrate+0x208>
    2c06:	ee 24       	eor	r14, r14
    2c08:	ff 24       	eor	r15, r15
    2c0a:	87 01       	movw	r16, r14
    2c0c:	dd 24       	eor	r13, r13
	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
		
		TOUCH_NativeRead(&tx, &ty);
    2c0e:	e3 e0       	ldi	r30, 0x03	; 3
    2c10:	8e 2e       	mov	r8, r30
    2c12:	91 2c       	mov	r9, r1
    2c14:	8c 0e       	add	r8, r28
    2c16:	9d 1e       	adc	r9, r29
    2c18:	5e 01       	movw	r10, r28
    2c1a:	08 94       	sec
    2c1c:	a1 1c       	adc	r10, r1
    2c1e:	b1 1c       	adc	r11, r1
    2c20:	c5 01       	movw	r24, r10
    2c22:	b4 01       	movw	r22, r8
    2c24:	0e 94 ef 13 	call	0x27de	; 0x27de <TOUCH_NativeRead>
		y += ty;
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	aa 27       	eor	r26, r26
    2c2e:	97 fd       	sbrc	r25, 7
    2c30:	a0 95       	com	r26
    2c32:	ba 2f       	mov	r27, r26
    2c34:	e8 0e       	add	r14, r24
    2c36:	f9 1e       	adc	r15, r25
    2c38:	0a 1f       	adc	r16, r26
    2c3a:	1b 1f       	adc	r17, r27
	//
	x = 0;
	y = 0;
	
	while(!TOUCH_DOWN);
	for(i=0; i<TOUCH_SAMPLE_COUNT; i++) {
    2c3c:	d3 94       	inc	r13
    2c3e:	aa e0       	ldi	r26, 0x0A	; 10
    2c40:	da 16       	cp	r13, r26
    2c42:	71 f7       	brne	.-36     	; 0x2c20 <TOUCH_Calibrate+0x226>
		TOUCH_NativeRead(&tx, &ty);
		y += ty;
	}
	y /= TOUCH_SAMPLE_COUNT;
	
	y = (y - TC_y_0)/8;	// 10%
    2c44:	c0 90 bd 00 	lds	r12, 0x00BD
    2c48:	d0 90 be 00 	lds	r13, 0x00BE
    2c4c:	c8 01       	movw	r24, r16
    2c4e:	b7 01       	movw	r22, r14
    2c50:	2a e0       	ldi	r18, 0x0A	; 10
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    2c5c:	c6 01       	movw	r24, r12
    2c5e:	aa 27       	eor	r26, r26
    2c60:	97 fd       	sbrc	r25, 7
    2c62:	a0 95       	com	r26
    2c64:	ba 2f       	mov	r27, r26
    2c66:	28 1b       	sub	r18, r24
    2c68:	39 0b       	sbc	r19, r25
    2c6a:	4a 0b       	sbc	r20, r26
    2c6c:	5b 0b       	sbc	r21, r27
    2c6e:	ca 01       	movw	r24, r20
    2c70:	b9 01       	movw	r22, r18
    2c72:	28 e0       	ldi	r18, 0x08	; 8
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    2c7e:	79 01       	movw	r14, r18
    2c80:	8a 01       	movw	r16, r20
	TC_y_100 = y*10;		// 100%
    2c82:	c8 01       	movw	r24, r16
    2c84:	b7 01       	movw	r22, r14
    2c86:	2a e0       	ldi	r18, 0x0A	; 10
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    2c92:	70 93 ba 00 	sts	0x00BA, r23
    2c96:	60 93 b9 00 	sts	0x00B9, r22
	TC_y_0 -= y;			// 0%
    2c9a:	ce 18       	sub	r12, r14
    2c9c:	df 08       	sbc	r13, r15
    2c9e:	d0 92 be 00 	sts	0x00BE, r13
    2ca2:	c0 92 bd 00 	sts	0x00BD, r12

	
	while(TOUCH_DOWN);
    2ca6:	83 9b       	sbis	0x10, 3	; 16
    2ca8:	fe cf       	rjmp	.-4      	; 0x2ca6 <TOUCH_Calibrate+0x2ac>

	LCD_Clear(BLACK);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 12 05 	call	0xa24	; 0xa24 <LCD_Clear>
	sprintf(text, "x... 0 %%: %d  100 %%: %d ", TC_x_0, TC_x_100);
    2cb2:	8d b7       	in	r24, 0x3d	; 61
    2cb4:	9e b7       	in	r25, 0x3e	; 62
    2cb6:	08 97       	sbiw	r24, 0x08	; 8
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	9e bf       	out	0x3e, r25	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	8d bf       	out	0x3d, r24	; 61
    2cc2:	ed b7       	in	r30, 0x3d	; 61
    2cc4:	fe b7       	in	r31, 0x3e	; 62
    2cc6:	31 96       	adiw	r30, 0x01	; 1
    2cc8:	75 e0       	ldi	r23, 0x05	; 5
    2cca:	e7 2e       	mov	r14, r23
    2ccc:	f1 2c       	mov	r15, r1
    2cce:	ec 0e       	add	r14, r28
    2cd0:	fd 1e       	adc	r15, r29
    2cd2:	ad b7       	in	r26, 0x3d	; 61
    2cd4:	be b7       	in	r27, 0x3e	; 62
    2cd6:	12 96       	adiw	r26, 0x02	; 2
    2cd8:	fc 92       	st	X, r15
    2cda:	ee 92       	st	-X, r14
    2cdc:	11 97       	sbiw	r26, 0x01	; 1
    2cde:	8a e7       	ldi	r24, 0x7A	; 122
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	93 83       	std	Z+3, r25	; 0x03
    2ce4:	82 83       	std	Z+2, r24	; 0x02
    2ce6:	80 91 bb 00 	lds	r24, 0x00BB
    2cea:	90 91 bc 00 	lds	r25, 0x00BC
    2cee:	95 83       	std	Z+5, r25	; 0x05
    2cf0:	84 83       	std	Z+4, r24	; 0x04
    2cf2:	80 91 bf 00 	lds	r24, 0x00BF
    2cf6:	90 91 c0 00 	lds	r25, 0x00C0
    2cfa:	97 83       	std	Z+7, r25	; 0x07
    2cfc:	86 83       	std	Z+6, r24	; 0x06
    2cfe:	0e 94 a0 19 	call	0x3340	; 0x3340 <sprintf>
	LCD_WriteString(10,200, text, YELLOW, BLACK);
    2d02:	8d b7       	in	r24, 0x3d	; 61
    2d04:	9e b7       	in	r25, 0x3e	; 62
    2d06:	08 96       	adiw	r24, 0x08	; 8
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	9e bf       	out	0x3e, r25	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	8d bf       	out	0x3d, r24	; 61
    2d12:	8a e0       	ldi	r24, 0x0A	; 10
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	68 ec       	ldi	r22, 0xC8	; 200
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	a7 01       	movw	r20, r14
    2d1c:	20 ee       	ldi	r18, 0xE0	; 224
    2d1e:	3f ef       	ldi	r19, 0xFF	; 255
    2d20:	00 e0       	ldi	r16, 0x00	; 0
    2d22:	10 e0       	ldi	r17, 0x00	; 0
    2d24:	0e 94 92 04 	call	0x924	; 0x924 <LCD_WriteString>
	sprintf(text, "y... 0 %%: %d  100 %%: %d ", TC_y_0, TC_y_100);
    2d28:	ad b7       	in	r26, 0x3d	; 61
    2d2a:	be b7       	in	r27, 0x3e	; 62
    2d2c:	18 97       	sbiw	r26, 0x08	; 8
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	be bf       	out	0x3e, r27	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	ad bf       	out	0x3d, r26	; 61
    2d38:	ed b7       	in	r30, 0x3d	; 61
    2d3a:	fe b7       	in	r31, 0x3e	; 62
    2d3c:	31 96       	adiw	r30, 0x01	; 1
    2d3e:	12 96       	adiw	r26, 0x02	; 2
    2d40:	fc 92       	st	X, r15
    2d42:	ee 92       	st	-X, r14
    2d44:	11 97       	sbiw	r26, 0x01	; 1
    2d46:	85 e9       	ldi	r24, 0x95	; 149
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	93 83       	std	Z+3, r25	; 0x03
    2d4c:	82 83       	std	Z+2, r24	; 0x02
    2d4e:	80 91 bd 00 	lds	r24, 0x00BD
    2d52:	90 91 be 00 	lds	r25, 0x00BE
    2d56:	95 83       	std	Z+5, r25	; 0x05
    2d58:	84 83       	std	Z+4, r24	; 0x04
    2d5a:	80 91 b9 00 	lds	r24, 0x00B9
    2d5e:	90 91 ba 00 	lds	r25, 0x00BA
    2d62:	97 83       	std	Z+7, r25	; 0x07
    2d64:	86 83       	std	Z+6, r24	; 0x06
    2d66:	0e 94 a0 19 	call	0x3340	; 0x3340 <sprintf>
	LCD_WriteString(10,220, text, YELLOW, BLACK);
    2d6a:	8d b7       	in	r24, 0x3d	; 61
    2d6c:	9e b7       	in	r25, 0x3e	; 62
    2d6e:	08 96       	adiw	r24, 0x08	; 8
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	9e bf       	out	0x3e, r25	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	8d bf       	out	0x3d, r24	; 61
    2d7a:	8a e0       	ldi	r24, 0x0A	; 10
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	6c ed       	ldi	r22, 0xDC	; 220
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	a7 01       	movw	r20, r14
    2d84:	20 ee       	ldi	r18, 0xE0	; 224
    2d86:	3f ef       	ldi	r19, 0xFF	; 255
    2d88:	0e 94 92 04 	call	0x924	; 0x924 <LCD_WriteString>

	while(!TOUCH_DOWN);
    2d8c:	83 99       	sbic	0x10, 3	; 16
    2d8e:	fe cf       	rjmp	.-4      	; 0x2d8c <TOUCH_Calibrate+0x392>
    2d90:	c8 59       	subi	r28, 0x98	; 152
    2d92:	df 4f       	sbci	r29, 0xFF	; 255
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	1f 91       	pop	r17
    2da4:	0f 91       	pop	r16
    2da6:	ff 90       	pop	r15
    2da8:	ef 90       	pop	r14
    2daa:	df 90       	pop	r13
    2dac:	cf 90       	pop	r12
    2dae:	bf 90       	pop	r11
    2db0:	af 90       	pop	r10
    2db2:	9f 90       	pop	r9
    2db4:	8f 90       	pop	r8
    2db6:	7f 90       	pop	r7
    2db8:	6f 90       	pop	r6
    2dba:	5f 90       	pop	r5
    2dbc:	4f 90       	pop	r4
    2dbe:	08 95       	ret

00002dc0 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
    2dc0:	b8 9a       	sbi	0x17, 0	; 23
	sbi	DDR_DI		; DI: output
    2dc2:	ba 9a       	sbi	0x17, 2	; 23
	sbi	DDR_CK		; SCLK: output
    2dc4:	b9 9a       	sbi	0x17, 1	; 23
	sbi	PORT_DO		; DO: pull-up
    2dc6:	c3 9a       	sbi	0x18, 3	; 24
	ret
    2dc8:	08 95       	ret

00002dca <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(80)	/* Loop counter for 8mhz*/
    2dca:	80 e5       	ldi	r24, 0x50	; 80
1:	sbiw	r30, 1		/* 10 clocks per loop */
    2dcc:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    2dce:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    2dd0:	31 97       	sbiw	r30, 0x01	; 1
	nop
    2dd2:	00 00       	nop
	dec	r24
    2dd4:	8a 95       	dec	r24
	brne	1b
    2dd6:	d1 f7       	brne	.-12     	; 0x2dcc <dly_100us+0x2>
	ret
    2dd8:	08 95       	ret

00002dda <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
    2dda:	02 d0       	rcall	.+4      	; 0x2de0 <deselect>
	cbi	PORT_CS
    2ddc:	c0 98       	cbi	0x18, 0	; 24
	rjmp	rcv_spi
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <rcv_spi>

00002de0 <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
    2de0:	c0 9a       	sbi	0x18, 0	; 24

00002de2 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
    2de2:	8f ef       	ldi	r24, 0xFF	; 255

00002de4 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
    2de4:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
    2de6:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
    2de8:	c2 9a       	sbi	0x18, 2	; 24
	sbrs	r24, 7		; 
    2dea:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
    2dec:	c2 98       	cbi	0x18, 2	; 24
	lsl	r24		; Get DO from MMC
    2dee:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
    2df0:	b3 99       	sbic	0x16, 3	; 22
	inc	r24		; /
    2df2:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
    2df4:	c1 9a       	sbi	0x18, 1	; 24
	cbi	PORT_CK		; /
    2df6:	c1 98       	cbi	0x18, 1	; 24
	dec	r25		; Repeat 8 times
    2df8:	9a 95       	dec	r25
	brne	1b		; /
    2dfa:	a9 f7       	brne	.-22     	; 0x2de6 <xmit_spi+0x2>
	ret
    2dfc:	08 95       	ret

00002dfe <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
    2dfe:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
    2e00:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2e02:	80 93 57 00 	sts	0x0057, r24
	spm
    2e06:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    2e08:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    2e0c:	80 fd       	sbrc	r24, 0
	rjmp	1b
    2e0e:	fc cf       	rjmp	.-8      	; 0x2e08 <flash_erase+0xa>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    2e10:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2e12:	80 93 57 00 	sts	0x0057, r24
	spm
    2e16:	e8 95       	spm

9:	ret
    2e18:	08 95       	ret

00002e1a <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
    2e1a:	0f 92       	push	r0
	push	r1
    2e1c:	1f 92       	push	r1
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Fill page buffer
	movw	ZL, r22
    2e1e:	fb 01       	movw	r30, r22
	movw	XL, r20
    2e20:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
    2e22:	90 e4       	ldi	r25, 0x40	; 64
1:	ld	r0, X+
    2e24:	0d 90       	ld	r0, X+
	ld	r1, X+
    2e26:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
    2e28:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2e2a:	80 93 57 00 	sts	0x0057, r24
	spm
    2e2e:	e8 95       	spm
	adiw	ZL, 2
    2e30:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
    2e32:	9a 95       	dec	r25
	brne	1b
    2e34:	b9 f7       	brne	.-18     	; 0x2e24 <flash_write+0xa>

	; Initiate write operation
	movw	ZL, r22
    2e36:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
    2e38:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2e3a:	80 93 57 00 	sts	0x0057, r24
	spm
    2e3e:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    2e40:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    2e44:	80 fd       	sbrc	r24, 0
	rjmp	2b
    2e46:	fc cf       	rjmp	.-8      	; 0x2e40 <flash_write+0x26>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    2e48:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2e4a:	80 93 57 00 	sts	0x0057, r24
	spm
    2e4e:	e8 95       	spm

9:	pop	r1
    2e50:	1f 90       	pop	r1
	pop	r0
    2e52:	0f 90       	pop	r0
	ret
    2e54:	08 95       	ret

00002e56 <__divsf3>:
    2e56:	0c d0       	rcall	.+24     	; 0x2e70 <__divsf3x>
    2e58:	eb c0       	rjmp	.+470    	; 0x3030 <__fp_round>
    2e5a:	e3 d0       	rcall	.+454    	; 0x3022 <__fp_pscB>
    2e5c:	40 f0       	brcs	.+16     	; 0x2e6e <__divsf3+0x18>
    2e5e:	da d0       	rcall	.+436    	; 0x3014 <__fp_pscA>
    2e60:	30 f0       	brcs	.+12     	; 0x2e6e <__divsf3+0x18>
    2e62:	21 f4       	brne	.+8      	; 0x2e6c <__divsf3+0x16>
    2e64:	5f 3f       	cpi	r21, 0xFF	; 255
    2e66:	19 f0       	breq	.+6      	; 0x2e6e <__divsf3+0x18>
    2e68:	cc c0       	rjmp	.+408    	; 0x3002 <__fp_inf>
    2e6a:	51 11       	cpse	r21, r1
    2e6c:	15 c1       	rjmp	.+554    	; 0x3098 <__fp_szero>
    2e6e:	cf c0       	rjmp	.+414    	; 0x300e <__fp_nan>

00002e70 <__divsf3x>:
    2e70:	f0 d0       	rcall	.+480    	; 0x3052 <__fp_split3>
    2e72:	98 f3       	brcs	.-26     	; 0x2e5a <__divsf3+0x4>

00002e74 <__divsf3_pse>:
    2e74:	99 23       	and	r25, r25
    2e76:	c9 f3       	breq	.-14     	; 0x2e6a <__divsf3+0x14>
    2e78:	55 23       	and	r21, r21
    2e7a:	b1 f3       	breq	.-20     	; 0x2e68 <__divsf3+0x12>
    2e7c:	95 1b       	sub	r25, r21
    2e7e:	55 0b       	sbc	r21, r21
    2e80:	bb 27       	eor	r27, r27
    2e82:	aa 27       	eor	r26, r26
    2e84:	62 17       	cp	r22, r18
    2e86:	73 07       	cpc	r23, r19
    2e88:	84 07       	cpc	r24, r20
    2e8a:	38 f0       	brcs	.+14     	; 0x2e9a <__divsf3_pse+0x26>
    2e8c:	9f 5f       	subi	r25, 0xFF	; 255
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e90:	22 0f       	add	r18, r18
    2e92:	33 1f       	adc	r19, r19
    2e94:	44 1f       	adc	r20, r20
    2e96:	aa 1f       	adc	r26, r26
    2e98:	a9 f3       	breq	.-22     	; 0x2e84 <__divsf3_pse+0x10>
    2e9a:	33 d0       	rcall	.+102    	; 0x2f02 <__divsf3_pse+0x8e>
    2e9c:	0e 2e       	mov	r0, r30
    2e9e:	3a f0       	brmi	.+14     	; 0x2eae <__divsf3_pse+0x3a>
    2ea0:	e0 e8       	ldi	r30, 0x80	; 128
    2ea2:	30 d0       	rcall	.+96     	; 0x2f04 <__divsf3_pse+0x90>
    2ea4:	91 50       	subi	r25, 0x01	; 1
    2ea6:	50 40       	sbci	r21, 0x00	; 0
    2ea8:	e6 95       	lsr	r30
    2eaa:	00 1c       	adc	r0, r0
    2eac:	ca f7       	brpl	.-14     	; 0x2ea0 <__divsf3_pse+0x2c>
    2eae:	29 d0       	rcall	.+82     	; 0x2f02 <__divsf3_pse+0x8e>
    2eb0:	fe 2f       	mov	r31, r30
    2eb2:	27 d0       	rcall	.+78     	; 0x2f02 <__divsf3_pse+0x8e>
    2eb4:	66 0f       	add	r22, r22
    2eb6:	77 1f       	adc	r23, r23
    2eb8:	88 1f       	adc	r24, r24
    2eba:	bb 1f       	adc	r27, r27
    2ebc:	26 17       	cp	r18, r22
    2ebe:	37 07       	cpc	r19, r23
    2ec0:	48 07       	cpc	r20, r24
    2ec2:	ab 07       	cpc	r26, r27
    2ec4:	b0 e8       	ldi	r27, 0x80	; 128
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <__divsf3_pse+0x56>
    2ec8:	bb 0b       	sbc	r27, r27
    2eca:	80 2d       	mov	r24, r0
    2ecc:	bf 01       	movw	r22, r30
    2ece:	ff 27       	eor	r31, r31
    2ed0:	93 58       	subi	r25, 0x83	; 131
    2ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed4:	2a f0       	brmi	.+10     	; 0x2ee0 <__divsf3_pse+0x6c>
    2ed6:	9e 3f       	cpi	r25, 0xFE	; 254
    2ed8:	51 05       	cpc	r21, r1
    2eda:	68 f0       	brcs	.+26     	; 0x2ef6 <__divsf3_pse+0x82>
    2edc:	92 c0       	rjmp	.+292    	; 0x3002 <__fp_inf>
    2ede:	dc c0       	rjmp	.+440    	; 0x3098 <__fp_szero>
    2ee0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ee2:	ec f3       	brlt	.-6      	; 0x2ede <__divsf3_pse+0x6a>
    2ee4:	98 3e       	cpi	r25, 0xE8	; 232
    2ee6:	dc f3       	brlt	.-10     	; 0x2ede <__divsf3_pse+0x6a>
    2ee8:	86 95       	lsr	r24
    2eea:	77 95       	ror	r23
    2eec:	67 95       	ror	r22
    2eee:	b7 95       	ror	r27
    2ef0:	f7 95       	ror	r31
    2ef2:	9f 5f       	subi	r25, 0xFF	; 255
    2ef4:	c9 f7       	brne	.-14     	; 0x2ee8 <__divsf3_pse+0x74>
    2ef6:	88 0f       	add	r24, r24
    2ef8:	91 1d       	adc	r25, r1
    2efa:	96 95       	lsr	r25
    2efc:	87 95       	ror	r24
    2efe:	97 f9       	bld	r25, 7
    2f00:	08 95       	ret
    2f02:	e1 e0       	ldi	r30, 0x01	; 1
    2f04:	66 0f       	add	r22, r22
    2f06:	77 1f       	adc	r23, r23
    2f08:	88 1f       	adc	r24, r24
    2f0a:	bb 1f       	adc	r27, r27
    2f0c:	62 17       	cp	r22, r18
    2f0e:	73 07       	cpc	r23, r19
    2f10:	84 07       	cpc	r24, r20
    2f12:	ba 07       	cpc	r27, r26
    2f14:	20 f0       	brcs	.+8      	; 0x2f1e <__divsf3_pse+0xaa>
    2f16:	62 1b       	sub	r22, r18
    2f18:	73 0b       	sbc	r23, r19
    2f1a:	84 0b       	sbc	r24, r20
    2f1c:	ba 0b       	sbc	r27, r26
    2f1e:	ee 1f       	adc	r30, r30
    2f20:	88 f7       	brcc	.-30     	; 0x2f04 <__divsf3_pse+0x90>
    2f22:	e0 95       	com	r30
    2f24:	08 95       	ret

00002f26 <__fixsfsi>:
    2f26:	04 d0       	rcall	.+8      	; 0x2f30 <__fixunssfsi>
    2f28:	68 94       	set
    2f2a:	b1 11       	cpse	r27, r1
    2f2c:	b5 c0       	rjmp	.+362    	; 0x3098 <__fp_szero>
    2f2e:	08 95       	ret

00002f30 <__fixunssfsi>:
    2f30:	98 d0       	rcall	.+304    	; 0x3062 <__fp_splitA>
    2f32:	88 f0       	brcs	.+34     	; 0x2f56 <__fixunssfsi+0x26>
    2f34:	9f 57       	subi	r25, 0x7F	; 127
    2f36:	90 f0       	brcs	.+36     	; 0x2f5c <__fixunssfsi+0x2c>
    2f38:	b9 2f       	mov	r27, r25
    2f3a:	99 27       	eor	r25, r25
    2f3c:	b7 51       	subi	r27, 0x17	; 23
    2f3e:	a0 f0       	brcs	.+40     	; 0x2f68 <__fixunssfsi+0x38>
    2f40:	d1 f0       	breq	.+52     	; 0x2f76 <__fixunssfsi+0x46>
    2f42:	66 0f       	add	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	88 1f       	adc	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	1a f0       	brmi	.+6      	; 0x2f52 <__fixunssfsi+0x22>
    2f4c:	ba 95       	dec	r27
    2f4e:	c9 f7       	brne	.-14     	; 0x2f42 <__fixunssfsi+0x12>
    2f50:	12 c0       	rjmp	.+36     	; 0x2f76 <__fixunssfsi+0x46>
    2f52:	b1 30       	cpi	r27, 0x01	; 1
    2f54:	81 f0       	breq	.+32     	; 0x2f76 <__fixunssfsi+0x46>
    2f56:	9f d0       	rcall	.+318    	; 0x3096 <__fp_zero>
    2f58:	b1 e0       	ldi	r27, 0x01	; 1
    2f5a:	08 95       	ret
    2f5c:	9c c0       	rjmp	.+312    	; 0x3096 <__fp_zero>
    2f5e:	67 2f       	mov	r22, r23
    2f60:	78 2f       	mov	r23, r24
    2f62:	88 27       	eor	r24, r24
    2f64:	b8 5f       	subi	r27, 0xF8	; 248
    2f66:	39 f0       	breq	.+14     	; 0x2f76 <__fixunssfsi+0x46>
    2f68:	b9 3f       	cpi	r27, 0xF9	; 249
    2f6a:	cc f3       	brlt	.-14     	; 0x2f5e <__fixunssfsi+0x2e>
    2f6c:	86 95       	lsr	r24
    2f6e:	77 95       	ror	r23
    2f70:	67 95       	ror	r22
    2f72:	b3 95       	inc	r27
    2f74:	d9 f7       	brne	.-10     	; 0x2f6c <__fixunssfsi+0x3c>
    2f76:	3e f4       	brtc	.+14     	; 0x2f86 <__fixunssfsi+0x56>
    2f78:	90 95       	com	r25
    2f7a:	80 95       	com	r24
    2f7c:	70 95       	com	r23
    2f7e:	61 95       	neg	r22
    2f80:	7f 4f       	sbci	r23, 0xFF	; 255
    2f82:	8f 4f       	sbci	r24, 0xFF	; 255
    2f84:	9f 4f       	sbci	r25, 0xFF	; 255
    2f86:	08 95       	ret

00002f88 <__floatunsisf>:
    2f88:	e8 94       	clt
    2f8a:	09 c0       	rjmp	.+18     	; 0x2f9e <__floatsisf+0x12>

00002f8c <__floatsisf>:
    2f8c:	97 fb       	bst	r25, 7
    2f8e:	3e f4       	brtc	.+14     	; 0x2f9e <__floatsisf+0x12>
    2f90:	90 95       	com	r25
    2f92:	80 95       	com	r24
    2f94:	70 95       	com	r23
    2f96:	61 95       	neg	r22
    2f98:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9e:	99 23       	and	r25, r25
    2fa0:	a9 f0       	breq	.+42     	; 0x2fcc <__floatsisf+0x40>
    2fa2:	f9 2f       	mov	r31, r25
    2fa4:	96 e9       	ldi	r25, 0x96	; 150
    2fa6:	bb 27       	eor	r27, r27
    2fa8:	93 95       	inc	r25
    2faa:	f6 95       	lsr	r31
    2fac:	87 95       	ror	r24
    2fae:	77 95       	ror	r23
    2fb0:	67 95       	ror	r22
    2fb2:	b7 95       	ror	r27
    2fb4:	f1 11       	cpse	r31, r1
    2fb6:	f8 cf       	rjmp	.-16     	; 0x2fa8 <__floatsisf+0x1c>
    2fb8:	fa f4       	brpl	.+62     	; 0x2ff8 <__floatsisf+0x6c>
    2fba:	bb 0f       	add	r27, r27
    2fbc:	11 f4       	brne	.+4      	; 0x2fc2 <__floatsisf+0x36>
    2fbe:	60 ff       	sbrs	r22, 0
    2fc0:	1b c0       	rjmp	.+54     	; 0x2ff8 <__floatsisf+0x6c>
    2fc2:	6f 5f       	subi	r22, 0xFF	; 255
    2fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fca:	16 c0       	rjmp	.+44     	; 0x2ff8 <__floatsisf+0x6c>
    2fcc:	88 23       	and	r24, r24
    2fce:	11 f0       	breq	.+4      	; 0x2fd4 <__floatsisf+0x48>
    2fd0:	96 e9       	ldi	r25, 0x96	; 150
    2fd2:	11 c0       	rjmp	.+34     	; 0x2ff6 <__floatsisf+0x6a>
    2fd4:	77 23       	and	r23, r23
    2fd6:	21 f0       	breq	.+8      	; 0x2fe0 <__floatsisf+0x54>
    2fd8:	9e e8       	ldi	r25, 0x8E	; 142
    2fda:	87 2f       	mov	r24, r23
    2fdc:	76 2f       	mov	r23, r22
    2fde:	05 c0       	rjmp	.+10     	; 0x2fea <__floatsisf+0x5e>
    2fe0:	66 23       	and	r22, r22
    2fe2:	71 f0       	breq	.+28     	; 0x3000 <__floatsisf+0x74>
    2fe4:	96 e8       	ldi	r25, 0x86	; 134
    2fe6:	86 2f       	mov	r24, r22
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	2a f0       	brmi	.+10     	; 0x2ff8 <__floatsisf+0x6c>
    2fee:	9a 95       	dec	r25
    2ff0:	66 0f       	add	r22, r22
    2ff2:	77 1f       	adc	r23, r23
    2ff4:	88 1f       	adc	r24, r24
    2ff6:	da f7       	brpl	.-10     	; 0x2fee <__floatsisf+0x62>
    2ff8:	88 0f       	add	r24, r24
    2ffa:	96 95       	lsr	r25
    2ffc:	87 95       	ror	r24
    2ffe:	97 f9       	bld	r25, 7
    3000:	08 95       	ret

00003002 <__fp_inf>:
    3002:	97 f9       	bld	r25, 7
    3004:	9f 67       	ori	r25, 0x7F	; 127
    3006:	80 e8       	ldi	r24, 0x80	; 128
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	08 95       	ret

0000300e <__fp_nan>:
    300e:	9f ef       	ldi	r25, 0xFF	; 255
    3010:	80 ec       	ldi	r24, 0xC0	; 192
    3012:	08 95       	ret

00003014 <__fp_pscA>:
    3014:	00 24       	eor	r0, r0
    3016:	0a 94       	dec	r0
    3018:	16 16       	cp	r1, r22
    301a:	17 06       	cpc	r1, r23
    301c:	18 06       	cpc	r1, r24
    301e:	09 06       	cpc	r0, r25
    3020:	08 95       	ret

00003022 <__fp_pscB>:
    3022:	00 24       	eor	r0, r0
    3024:	0a 94       	dec	r0
    3026:	12 16       	cp	r1, r18
    3028:	13 06       	cpc	r1, r19
    302a:	14 06       	cpc	r1, r20
    302c:	05 06       	cpc	r0, r21
    302e:	08 95       	ret

00003030 <__fp_round>:
    3030:	09 2e       	mov	r0, r25
    3032:	03 94       	inc	r0
    3034:	00 0c       	add	r0, r0
    3036:	11 f4       	brne	.+4      	; 0x303c <__fp_round+0xc>
    3038:	88 23       	and	r24, r24
    303a:	52 f0       	brmi	.+20     	; 0x3050 <__fp_round+0x20>
    303c:	bb 0f       	add	r27, r27
    303e:	40 f4       	brcc	.+16     	; 0x3050 <__fp_round+0x20>
    3040:	bf 2b       	or	r27, r31
    3042:	11 f4       	brne	.+4      	; 0x3048 <__fp_round+0x18>
    3044:	60 ff       	sbrs	r22, 0
    3046:	04 c0       	rjmp	.+8      	; 0x3050 <__fp_round+0x20>
    3048:	6f 5f       	subi	r22, 0xFF	; 255
    304a:	7f 4f       	sbci	r23, 0xFF	; 255
    304c:	8f 4f       	sbci	r24, 0xFF	; 255
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	08 95       	ret

00003052 <__fp_split3>:
    3052:	57 fd       	sbrc	r21, 7
    3054:	90 58       	subi	r25, 0x80	; 128
    3056:	44 0f       	add	r20, r20
    3058:	55 1f       	adc	r21, r21
    305a:	59 f0       	breq	.+22     	; 0x3072 <__fp_splitA+0x10>
    305c:	5f 3f       	cpi	r21, 0xFF	; 255
    305e:	71 f0       	breq	.+28     	; 0x307c <__fp_splitA+0x1a>
    3060:	47 95       	ror	r20

00003062 <__fp_splitA>:
    3062:	88 0f       	add	r24, r24
    3064:	97 fb       	bst	r25, 7
    3066:	99 1f       	adc	r25, r25
    3068:	61 f0       	breq	.+24     	; 0x3082 <__fp_splitA+0x20>
    306a:	9f 3f       	cpi	r25, 0xFF	; 255
    306c:	79 f0       	breq	.+30     	; 0x308c <__fp_splitA+0x2a>
    306e:	87 95       	ror	r24
    3070:	08 95       	ret
    3072:	12 16       	cp	r1, r18
    3074:	13 06       	cpc	r1, r19
    3076:	14 06       	cpc	r1, r20
    3078:	55 1f       	adc	r21, r21
    307a:	f2 cf       	rjmp	.-28     	; 0x3060 <__fp_split3+0xe>
    307c:	46 95       	lsr	r20
    307e:	f1 df       	rcall	.-30     	; 0x3062 <__fp_splitA>
    3080:	08 c0       	rjmp	.+16     	; 0x3092 <__fp_splitA+0x30>
    3082:	16 16       	cp	r1, r22
    3084:	17 06       	cpc	r1, r23
    3086:	18 06       	cpc	r1, r24
    3088:	99 1f       	adc	r25, r25
    308a:	f1 cf       	rjmp	.-30     	; 0x306e <__fp_splitA+0xc>
    308c:	86 95       	lsr	r24
    308e:	71 05       	cpc	r23, r1
    3090:	61 05       	cpc	r22, r1
    3092:	08 94       	sec
    3094:	08 95       	ret

00003096 <__fp_zero>:
    3096:	e8 94       	clt

00003098 <__fp_szero>:
    3098:	bb 27       	eor	r27, r27
    309a:	66 27       	eor	r22, r22
    309c:	77 27       	eor	r23, r23
    309e:	cb 01       	movw	r24, r22
    30a0:	97 f9       	bld	r25, 7
    30a2:	08 95       	ret

000030a4 <__mulsf3>:
    30a4:	0b d0       	rcall	.+22     	; 0x30bc <__mulsf3x>
    30a6:	c4 cf       	rjmp	.-120    	; 0x3030 <__fp_round>
    30a8:	b5 df       	rcall	.-150    	; 0x3014 <__fp_pscA>
    30aa:	28 f0       	brcs	.+10     	; 0x30b6 <__mulsf3+0x12>
    30ac:	ba df       	rcall	.-140    	; 0x3022 <__fp_pscB>
    30ae:	18 f0       	brcs	.+6      	; 0x30b6 <__mulsf3+0x12>
    30b0:	95 23       	and	r25, r21
    30b2:	09 f0       	breq	.+2      	; 0x30b6 <__mulsf3+0x12>
    30b4:	a6 cf       	rjmp	.-180    	; 0x3002 <__fp_inf>
    30b6:	ab cf       	rjmp	.-170    	; 0x300e <__fp_nan>
    30b8:	11 24       	eor	r1, r1
    30ba:	ee cf       	rjmp	.-36     	; 0x3098 <__fp_szero>

000030bc <__mulsf3x>:
    30bc:	ca df       	rcall	.-108    	; 0x3052 <__fp_split3>
    30be:	a0 f3       	brcs	.-24     	; 0x30a8 <__mulsf3+0x4>

000030c0 <__mulsf3_pse>:
    30c0:	95 9f       	mul	r25, r21
    30c2:	d1 f3       	breq	.-12     	; 0x30b8 <__mulsf3+0x14>
    30c4:	95 0f       	add	r25, r21
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	55 1f       	adc	r21, r21
    30ca:	62 9f       	mul	r22, r18
    30cc:	f0 01       	movw	r30, r0
    30ce:	72 9f       	mul	r23, r18
    30d0:	bb 27       	eor	r27, r27
    30d2:	f0 0d       	add	r31, r0
    30d4:	b1 1d       	adc	r27, r1
    30d6:	63 9f       	mul	r22, r19
    30d8:	aa 27       	eor	r26, r26
    30da:	f0 0d       	add	r31, r0
    30dc:	b1 1d       	adc	r27, r1
    30de:	aa 1f       	adc	r26, r26
    30e0:	64 9f       	mul	r22, r20
    30e2:	66 27       	eor	r22, r22
    30e4:	b0 0d       	add	r27, r0
    30e6:	a1 1d       	adc	r26, r1
    30e8:	66 1f       	adc	r22, r22
    30ea:	82 9f       	mul	r24, r18
    30ec:	22 27       	eor	r18, r18
    30ee:	b0 0d       	add	r27, r0
    30f0:	a1 1d       	adc	r26, r1
    30f2:	62 1f       	adc	r22, r18
    30f4:	73 9f       	mul	r23, r19
    30f6:	b0 0d       	add	r27, r0
    30f8:	a1 1d       	adc	r26, r1
    30fa:	62 1f       	adc	r22, r18
    30fc:	83 9f       	mul	r24, r19
    30fe:	a0 0d       	add	r26, r0
    3100:	61 1d       	adc	r22, r1
    3102:	22 1f       	adc	r18, r18
    3104:	74 9f       	mul	r23, r20
    3106:	33 27       	eor	r19, r19
    3108:	a0 0d       	add	r26, r0
    310a:	61 1d       	adc	r22, r1
    310c:	23 1f       	adc	r18, r19
    310e:	84 9f       	mul	r24, r20
    3110:	60 0d       	add	r22, r0
    3112:	21 1d       	adc	r18, r1
    3114:	82 2f       	mov	r24, r18
    3116:	76 2f       	mov	r23, r22
    3118:	6a 2f       	mov	r22, r26
    311a:	11 24       	eor	r1, r1
    311c:	9f 57       	subi	r25, 0x7F	; 127
    311e:	50 40       	sbci	r21, 0x00	; 0
    3120:	8a f0       	brmi	.+34     	; 0x3144 <__mulsf3_pse+0x84>
    3122:	e1 f0       	breq	.+56     	; 0x315c <__mulsf3_pse+0x9c>
    3124:	88 23       	and	r24, r24
    3126:	4a f0       	brmi	.+18     	; 0x313a <__mulsf3_pse+0x7a>
    3128:	ee 0f       	add	r30, r30
    312a:	ff 1f       	adc	r31, r31
    312c:	bb 1f       	adc	r27, r27
    312e:	66 1f       	adc	r22, r22
    3130:	77 1f       	adc	r23, r23
    3132:	88 1f       	adc	r24, r24
    3134:	91 50       	subi	r25, 0x01	; 1
    3136:	50 40       	sbci	r21, 0x00	; 0
    3138:	a9 f7       	brne	.-22     	; 0x3124 <__mulsf3_pse+0x64>
    313a:	9e 3f       	cpi	r25, 0xFE	; 254
    313c:	51 05       	cpc	r21, r1
    313e:	70 f0       	brcs	.+28     	; 0x315c <__mulsf3_pse+0x9c>
    3140:	60 cf       	rjmp	.-320    	; 0x3002 <__fp_inf>
    3142:	aa cf       	rjmp	.-172    	; 0x3098 <__fp_szero>
    3144:	5f 3f       	cpi	r21, 0xFF	; 255
    3146:	ec f3       	brlt	.-6      	; 0x3142 <__mulsf3_pse+0x82>
    3148:	98 3e       	cpi	r25, 0xE8	; 232
    314a:	dc f3       	brlt	.-10     	; 0x3142 <__mulsf3_pse+0x82>
    314c:	86 95       	lsr	r24
    314e:	77 95       	ror	r23
    3150:	67 95       	ror	r22
    3152:	b7 95       	ror	r27
    3154:	f7 95       	ror	r31
    3156:	e7 95       	ror	r30
    3158:	9f 5f       	subi	r25, 0xFF	; 255
    315a:	c1 f7       	brne	.-16     	; 0x314c <__mulsf3_pse+0x8c>
    315c:	fe 2b       	or	r31, r30
    315e:	88 0f       	add	r24, r24
    3160:	91 1d       	adc	r25, r1
    3162:	96 95       	lsr	r25
    3164:	87 95       	ror	r24
    3166:	97 f9       	bld	r25, 7
    3168:	08 95       	ret

0000316a <__mulsi3>:
    316a:	62 9f       	mul	r22, r18
    316c:	d0 01       	movw	r26, r0
    316e:	73 9f       	mul	r23, r19
    3170:	f0 01       	movw	r30, r0
    3172:	82 9f       	mul	r24, r18
    3174:	e0 0d       	add	r30, r0
    3176:	f1 1d       	adc	r31, r1
    3178:	64 9f       	mul	r22, r20
    317a:	e0 0d       	add	r30, r0
    317c:	f1 1d       	adc	r31, r1
    317e:	92 9f       	mul	r25, r18
    3180:	f0 0d       	add	r31, r0
    3182:	83 9f       	mul	r24, r19
    3184:	f0 0d       	add	r31, r0
    3186:	74 9f       	mul	r23, r20
    3188:	f0 0d       	add	r31, r0
    318a:	65 9f       	mul	r22, r21
    318c:	f0 0d       	add	r31, r0
    318e:	99 27       	eor	r25, r25
    3190:	72 9f       	mul	r23, r18
    3192:	b0 0d       	add	r27, r0
    3194:	e1 1d       	adc	r30, r1
    3196:	f9 1f       	adc	r31, r25
    3198:	63 9f       	mul	r22, r19
    319a:	b0 0d       	add	r27, r0
    319c:	e1 1d       	adc	r30, r1
    319e:	f9 1f       	adc	r31, r25
    31a0:	bd 01       	movw	r22, r26
    31a2:	cf 01       	movw	r24, r30
    31a4:	11 24       	eor	r1, r1
    31a6:	08 95       	ret

000031a8 <__divmodhi4>:
    31a8:	97 fb       	bst	r25, 7
    31aa:	09 2e       	mov	r0, r25
    31ac:	07 26       	eor	r0, r23
    31ae:	0a d0       	rcall	.+20     	; 0x31c4 <__divmodhi4_neg1>
    31b0:	77 fd       	sbrc	r23, 7
    31b2:	04 d0       	rcall	.+8      	; 0x31bc <__divmodhi4_neg2>
    31b4:	49 d0       	rcall	.+146    	; 0x3248 <__udivmodhi4>
    31b6:	06 d0       	rcall	.+12     	; 0x31c4 <__divmodhi4_neg1>
    31b8:	00 20       	and	r0, r0
    31ba:	1a f4       	brpl	.+6      	; 0x31c2 <__divmodhi4_exit>

000031bc <__divmodhi4_neg2>:
    31bc:	70 95       	com	r23
    31be:	61 95       	neg	r22
    31c0:	7f 4f       	sbci	r23, 0xFF	; 255

000031c2 <__divmodhi4_exit>:
    31c2:	08 95       	ret

000031c4 <__divmodhi4_neg1>:
    31c4:	f6 f7       	brtc	.-4      	; 0x31c2 <__divmodhi4_exit>
    31c6:	90 95       	com	r25
    31c8:	81 95       	neg	r24
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	08 95       	ret

000031ce <__udivmodsi4>:
    31ce:	a1 e2       	ldi	r26, 0x21	; 33
    31d0:	1a 2e       	mov	r1, r26
    31d2:	aa 1b       	sub	r26, r26
    31d4:	bb 1b       	sub	r27, r27
    31d6:	fd 01       	movw	r30, r26
    31d8:	0d c0       	rjmp	.+26     	; 0x31f4 <__udivmodsi4_ep>

000031da <__udivmodsi4_loop>:
    31da:	aa 1f       	adc	r26, r26
    31dc:	bb 1f       	adc	r27, r27
    31de:	ee 1f       	adc	r30, r30
    31e0:	ff 1f       	adc	r31, r31
    31e2:	a2 17       	cp	r26, r18
    31e4:	b3 07       	cpc	r27, r19
    31e6:	e4 07       	cpc	r30, r20
    31e8:	f5 07       	cpc	r31, r21
    31ea:	20 f0       	brcs	.+8      	; 0x31f4 <__udivmodsi4_ep>
    31ec:	a2 1b       	sub	r26, r18
    31ee:	b3 0b       	sbc	r27, r19
    31f0:	e4 0b       	sbc	r30, r20
    31f2:	f5 0b       	sbc	r31, r21

000031f4 <__udivmodsi4_ep>:
    31f4:	66 1f       	adc	r22, r22
    31f6:	77 1f       	adc	r23, r23
    31f8:	88 1f       	adc	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	1a 94       	dec	r1
    31fe:	69 f7       	brne	.-38     	; 0x31da <__udivmodsi4_loop>
    3200:	60 95       	com	r22
    3202:	70 95       	com	r23
    3204:	80 95       	com	r24
    3206:	90 95       	com	r25
    3208:	9b 01       	movw	r18, r22
    320a:	ac 01       	movw	r20, r24
    320c:	bd 01       	movw	r22, r26
    320e:	cf 01       	movw	r24, r30
    3210:	08 95       	ret

00003212 <__divmodsi4>:
    3212:	97 fb       	bst	r25, 7
    3214:	09 2e       	mov	r0, r25
    3216:	05 26       	eor	r0, r21
    3218:	0e d0       	rcall	.+28     	; 0x3236 <__divmodsi4_neg1>
    321a:	57 fd       	sbrc	r21, 7
    321c:	04 d0       	rcall	.+8      	; 0x3226 <__divmodsi4_neg2>
    321e:	d7 df       	rcall	.-82     	; 0x31ce <__udivmodsi4>
    3220:	0a d0       	rcall	.+20     	; 0x3236 <__divmodsi4_neg1>
    3222:	00 1c       	adc	r0, r0
    3224:	38 f4       	brcc	.+14     	; 0x3234 <__divmodsi4_exit>

00003226 <__divmodsi4_neg2>:
    3226:	50 95       	com	r21
    3228:	40 95       	com	r20
    322a:	30 95       	com	r19
    322c:	21 95       	neg	r18
    322e:	3f 4f       	sbci	r19, 0xFF	; 255
    3230:	4f 4f       	sbci	r20, 0xFF	; 255
    3232:	5f 4f       	sbci	r21, 0xFF	; 255

00003234 <__divmodsi4_exit>:
    3234:	08 95       	ret

00003236 <__divmodsi4_neg1>:
    3236:	f6 f7       	brtc	.-4      	; 0x3234 <__divmodsi4_exit>
    3238:	90 95       	com	r25
    323a:	80 95       	com	r24
    323c:	70 95       	com	r23
    323e:	61 95       	neg	r22
    3240:	7f 4f       	sbci	r23, 0xFF	; 255
    3242:	8f 4f       	sbci	r24, 0xFF	; 255
    3244:	9f 4f       	sbci	r25, 0xFF	; 255
    3246:	08 95       	ret

00003248 <__udivmodhi4>:
    3248:	aa 1b       	sub	r26, r26
    324a:	bb 1b       	sub	r27, r27
    324c:	51 e1       	ldi	r21, 0x11	; 17
    324e:	07 c0       	rjmp	.+14     	; 0x325e <__udivmodhi4_ep>

00003250 <__udivmodhi4_loop>:
    3250:	aa 1f       	adc	r26, r26
    3252:	bb 1f       	adc	r27, r27
    3254:	a6 17       	cp	r26, r22
    3256:	b7 07       	cpc	r27, r23
    3258:	10 f0       	brcs	.+4      	; 0x325e <__udivmodhi4_ep>
    325a:	a6 1b       	sub	r26, r22
    325c:	b7 0b       	sbc	r27, r23

0000325e <__udivmodhi4_ep>:
    325e:	88 1f       	adc	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	5a 95       	dec	r21
    3264:	a9 f7       	brne	.-22     	; 0x3250 <__udivmodhi4_loop>
    3266:	80 95       	com	r24
    3268:	90 95       	com	r25
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	08 95       	ret

00003270 <do_rand>:
    3270:	a0 e0       	ldi	r26, 0x00	; 0
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	ee e3       	ldi	r30, 0x3E	; 62
    3276:	f9 e1       	ldi	r31, 0x19	; 25
    3278:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x10>
    327c:	ec 01       	movw	r28, r24
    327e:	a8 80       	ld	r10, Y
    3280:	b9 80       	ldd	r11, Y+1	; 0x01
    3282:	ca 80       	ldd	r12, Y+2	; 0x02
    3284:	db 80       	ldd	r13, Y+3	; 0x03
    3286:	a1 14       	cp	r10, r1
    3288:	b1 04       	cpc	r11, r1
    328a:	c1 04       	cpc	r12, r1
    328c:	d1 04       	cpc	r13, r1
    328e:	41 f4       	brne	.+16     	; 0x32a0 <do_rand+0x30>
    3290:	84 e2       	ldi	r24, 0x24	; 36
    3292:	a8 2e       	mov	r10, r24
    3294:	89 ed       	ldi	r24, 0xD9	; 217
    3296:	b8 2e       	mov	r11, r24
    3298:	8b e5       	ldi	r24, 0x5B	; 91
    329a:	c8 2e       	mov	r12, r24
    329c:	87 e0       	ldi	r24, 0x07	; 7
    329e:	d8 2e       	mov	r13, r24
    32a0:	c6 01       	movw	r24, r12
    32a2:	b5 01       	movw	r22, r10
    32a4:	2d e1       	ldi	r18, 0x1D	; 29
    32a6:	33 ef       	ldi	r19, 0xF3	; 243
    32a8:	41 e0       	ldi	r20, 0x01	; 1
    32aa:	50 e0       	ldi	r21, 0x00	; 0
    32ac:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    32b0:	27 ea       	ldi	r18, 0xA7	; 167
    32b2:	31 e4       	ldi	r19, 0x41	; 65
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    32bc:	7b 01       	movw	r14, r22
    32be:	8c 01       	movw	r16, r24
    32c0:	c6 01       	movw	r24, r12
    32c2:	b5 01       	movw	r22, r10
    32c4:	2d e1       	ldi	r18, 0x1D	; 29
    32c6:	33 ef       	ldi	r19, 0xF3	; 243
    32c8:	41 e0       	ldi	r20, 0x01	; 1
    32ca:	50 e0       	ldi	r21, 0x00	; 0
    32cc:	0e 94 09 19 	call	0x3212	; 0x3212 <__divmodsi4>
    32d0:	ca 01       	movw	r24, r20
    32d2:	b9 01       	movw	r22, r18
    32d4:	2c ee       	ldi	r18, 0xEC	; 236
    32d6:	34 ef       	ldi	r19, 0xF4	; 244
    32d8:	4f ef       	ldi	r20, 0xFF	; 255
    32da:	5f ef       	ldi	r21, 0xFF	; 255
    32dc:	0e 94 b5 18 	call	0x316a	; 0x316a <__mulsi3>
    32e0:	6e 0d       	add	r22, r14
    32e2:	7f 1d       	adc	r23, r15
    32e4:	80 1f       	adc	r24, r16
    32e6:	91 1f       	adc	r25, r17
    32e8:	97 ff       	sbrs	r25, 7
    32ea:	04 c0       	rjmp	.+8      	; 0x32f4 <do_rand+0x84>
    32ec:	61 50       	subi	r22, 0x01	; 1
    32ee:	70 40       	sbci	r23, 0x00	; 0
    32f0:	80 40       	sbci	r24, 0x00	; 0
    32f2:	90 48       	sbci	r25, 0x80	; 128
    32f4:	68 83       	st	Y, r22
    32f6:	79 83       	std	Y+1, r23	; 0x01
    32f8:	8a 83       	std	Y+2, r24	; 0x02
    32fa:	9b 83       	std	Y+3, r25	; 0x03
    32fc:	9b 01       	movw	r18, r22
    32fe:	3f 77       	andi	r19, 0x7F	; 127
    3300:	c9 01       	movw	r24, r18
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	ea e0       	ldi	r30, 0x0A	; 10
    3308:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x10>

0000330c <rand_r>:
    330c:	0e 94 38 19 	call	0x3270	; 0x3270 <do_rand>
    3310:	08 95       	ret

00003312 <rand>:
    3312:	80 eb       	ldi	r24, 0xB0	; 176
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 38 19 	call	0x3270	; 0x3270 <do_rand>
    331a:	08 95       	ret

0000331c <srand>:
    331c:	a0 e0       	ldi	r26, 0x00	; 0
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	80 93 b0 00 	sts	0x00B0, r24
    3324:	90 93 b1 00 	sts	0x00B1, r25
    3328:	a0 93 b2 00 	sts	0x00B2, r26
    332c:	b0 93 b3 00 	sts	0x00B3, r27
    3330:	08 95       	ret

00003332 <strcpy>:
    3332:	fb 01       	movw	r30, r22
    3334:	dc 01       	movw	r26, r24
    3336:	01 90       	ld	r0, Z+
    3338:	0d 92       	st	X+, r0
    333a:	00 20       	and	r0, r0
    333c:	e1 f7       	brne	.-8      	; 0x3336 <strcpy+0x4>
    333e:	08 95       	ret

00003340 <sprintf>:
    3340:	ae e0       	ldi	r26, 0x0E	; 14
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e6 ea       	ldi	r30, 0xA6	; 166
    3346:	f9 e1       	ldi	r31, 0x19	; 25
    3348:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__prologue_saves__+0x1c>
    334c:	0d 89       	ldd	r16, Y+21	; 0x15
    334e:	1e 89       	ldd	r17, Y+22	; 0x16
    3350:	86 e0       	ldi	r24, 0x06	; 6
    3352:	8c 83       	std	Y+4, r24	; 0x04
    3354:	1a 83       	std	Y+2, r17	; 0x02
    3356:	09 83       	std	Y+1, r16	; 0x01
    3358:	8f ef       	ldi	r24, 0xFF	; 255
    335a:	9f e7       	ldi	r25, 0x7F	; 127
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	9e 01       	movw	r18, r28
    3362:	27 5e       	subi	r18, 0xE7	; 231
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	ce 01       	movw	r24, r28
    3368:	01 96       	adiw	r24, 0x01	; 1
    336a:	6f 89       	ldd	r22, Y+23	; 0x17
    336c:	78 8d       	ldd	r23, Y+24	; 0x18
    336e:	a9 01       	movw	r20, r18
    3370:	0e 94 c4 19 	call	0x3388	; 0x3388 <vfprintf>
    3374:	2f 81       	ldd	r18, Y+7	; 0x07
    3376:	38 85       	ldd	r19, Y+8	; 0x08
    3378:	02 0f       	add	r16, r18
    337a:	13 1f       	adc	r17, r19
    337c:	f8 01       	movw	r30, r16
    337e:	10 82       	st	Z, r1
    3380:	2e 96       	adiw	r28, 0x0e	; 14
    3382:	e4 e0       	ldi	r30, 0x04	; 4
    3384:	0c 94 6b 1c 	jmp	0x38d6	; 0x38d6 <__epilogue_restores__+0x1c>

00003388 <vfprintf>:
    3388:	ab e0       	ldi	r26, 0x0B	; 11
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	ea ec       	ldi	r30, 0xCA	; 202
    338e:	f9 e1       	ldi	r31, 0x19	; 25
    3390:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__prologue_saves__>
    3394:	3c 01       	movw	r6, r24
    3396:	2b 01       	movw	r4, r22
    3398:	5a 01       	movw	r10, r20
    339a:	fc 01       	movw	r30, r24
    339c:	17 82       	std	Z+7, r1	; 0x07
    339e:	16 82       	std	Z+6, r1	; 0x06
    33a0:	83 81       	ldd	r24, Z+3	; 0x03
    33a2:	81 fd       	sbrc	r24, 1
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <vfprintf+0x24>
    33a6:	6f ef       	ldi	r22, 0xFF	; 255
    33a8:	7f ef       	ldi	r23, 0xFF	; 255
    33aa:	c6 c1       	rjmp	.+908    	; 0x3738 <vfprintf+0x3b0>
    33ac:	9a e0       	ldi	r25, 0x0A	; 10
    33ae:	89 2e       	mov	r8, r25
    33b0:	1e 01       	movw	r2, r28
    33b2:	08 94       	sec
    33b4:	21 1c       	adc	r2, r1
    33b6:	31 1c       	adc	r3, r1
    33b8:	f3 01       	movw	r30, r6
    33ba:	23 81       	ldd	r18, Z+3	; 0x03
    33bc:	f2 01       	movw	r30, r4
    33be:	23 fd       	sbrc	r18, 3
    33c0:	85 91       	lpm	r24, Z+
    33c2:	23 ff       	sbrs	r18, 3
    33c4:	81 91       	ld	r24, Z+
    33c6:	2f 01       	movw	r4, r30
    33c8:	88 23       	and	r24, r24
    33ca:	09 f4       	brne	.+2      	; 0x33ce <vfprintf+0x46>
    33cc:	b2 c1       	rjmp	.+868    	; 0x3732 <vfprintf+0x3aa>
    33ce:	85 32       	cpi	r24, 0x25	; 37
    33d0:	39 f4       	brne	.+14     	; 0x33e0 <vfprintf+0x58>
    33d2:	23 fd       	sbrc	r18, 3
    33d4:	85 91       	lpm	r24, Z+
    33d6:	23 ff       	sbrs	r18, 3
    33d8:	81 91       	ld	r24, Z+
    33da:	2f 01       	movw	r4, r30
    33dc:	85 32       	cpi	r24, 0x25	; 37
    33de:	29 f4       	brne	.+10     	; 0x33ea <vfprintf+0x62>
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	b3 01       	movw	r22, r6
    33e4:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    33e8:	e7 cf       	rjmp	.-50     	; 0x33b8 <vfprintf+0x30>
    33ea:	98 2f       	mov	r25, r24
    33ec:	ff 24       	eor	r15, r15
    33ee:	ee 24       	eor	r14, r14
    33f0:	99 24       	eor	r9, r9
    33f2:	ff e1       	ldi	r31, 0x1F	; 31
    33f4:	ff 15       	cp	r31, r15
    33f6:	d0 f0       	brcs	.+52     	; 0x342c <vfprintf+0xa4>
    33f8:	9b 32       	cpi	r25, 0x2B	; 43
    33fa:	69 f0       	breq	.+26     	; 0x3416 <vfprintf+0x8e>
    33fc:	9c 32       	cpi	r25, 0x2C	; 44
    33fe:	28 f4       	brcc	.+10     	; 0x340a <vfprintf+0x82>
    3400:	90 32       	cpi	r25, 0x20	; 32
    3402:	59 f0       	breq	.+22     	; 0x341a <vfprintf+0x92>
    3404:	93 32       	cpi	r25, 0x23	; 35
    3406:	91 f4       	brne	.+36     	; 0x342c <vfprintf+0xa4>
    3408:	0e c0       	rjmp	.+28     	; 0x3426 <vfprintf+0x9e>
    340a:	9d 32       	cpi	r25, 0x2D	; 45
    340c:	49 f0       	breq	.+18     	; 0x3420 <vfprintf+0x98>
    340e:	90 33       	cpi	r25, 0x30	; 48
    3410:	69 f4       	brne	.+26     	; 0x342c <vfprintf+0xa4>
    3412:	41 e0       	ldi	r20, 0x01	; 1
    3414:	24 c0       	rjmp	.+72     	; 0x345e <vfprintf+0xd6>
    3416:	52 e0       	ldi	r21, 0x02	; 2
    3418:	f5 2a       	or	r15, r21
    341a:	84 e0       	ldi	r24, 0x04	; 4
    341c:	f8 2a       	or	r15, r24
    341e:	28 c0       	rjmp	.+80     	; 0x3470 <vfprintf+0xe8>
    3420:	98 e0       	ldi	r25, 0x08	; 8
    3422:	f9 2a       	or	r15, r25
    3424:	25 c0       	rjmp	.+74     	; 0x3470 <vfprintf+0xe8>
    3426:	e0 e1       	ldi	r30, 0x10	; 16
    3428:	fe 2a       	or	r15, r30
    342a:	22 c0       	rjmp	.+68     	; 0x3470 <vfprintf+0xe8>
    342c:	f7 fc       	sbrc	r15, 7
    342e:	29 c0       	rjmp	.+82     	; 0x3482 <vfprintf+0xfa>
    3430:	89 2f       	mov	r24, r25
    3432:	80 53       	subi	r24, 0x30	; 48
    3434:	8a 30       	cpi	r24, 0x0A	; 10
    3436:	70 f4       	brcc	.+28     	; 0x3454 <vfprintf+0xcc>
    3438:	f6 fe       	sbrs	r15, 6
    343a:	05 c0       	rjmp	.+10     	; 0x3446 <vfprintf+0xbe>
    343c:	98 9c       	mul	r9, r8
    343e:	90 2c       	mov	r9, r0
    3440:	11 24       	eor	r1, r1
    3442:	98 0e       	add	r9, r24
    3444:	15 c0       	rjmp	.+42     	; 0x3470 <vfprintf+0xe8>
    3446:	e8 9c       	mul	r14, r8
    3448:	e0 2c       	mov	r14, r0
    344a:	11 24       	eor	r1, r1
    344c:	e8 0e       	add	r14, r24
    344e:	f0 e2       	ldi	r31, 0x20	; 32
    3450:	ff 2a       	or	r15, r31
    3452:	0e c0       	rjmp	.+28     	; 0x3470 <vfprintf+0xe8>
    3454:	9e 32       	cpi	r25, 0x2E	; 46
    3456:	29 f4       	brne	.+10     	; 0x3462 <vfprintf+0xda>
    3458:	f6 fc       	sbrc	r15, 6
    345a:	6b c1       	rjmp	.+726    	; 0x3732 <vfprintf+0x3aa>
    345c:	40 e4       	ldi	r20, 0x40	; 64
    345e:	f4 2a       	or	r15, r20
    3460:	07 c0       	rjmp	.+14     	; 0x3470 <vfprintf+0xe8>
    3462:	9c 36       	cpi	r25, 0x6C	; 108
    3464:	19 f4       	brne	.+6      	; 0x346c <vfprintf+0xe4>
    3466:	50 e8       	ldi	r21, 0x80	; 128
    3468:	f5 2a       	or	r15, r21
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <vfprintf+0xe8>
    346c:	98 36       	cpi	r25, 0x68	; 104
    346e:	49 f4       	brne	.+18     	; 0x3482 <vfprintf+0xfa>
    3470:	f2 01       	movw	r30, r4
    3472:	23 fd       	sbrc	r18, 3
    3474:	95 91       	lpm	r25, Z+
    3476:	23 ff       	sbrs	r18, 3
    3478:	91 91       	ld	r25, Z+
    347a:	2f 01       	movw	r4, r30
    347c:	99 23       	and	r25, r25
    347e:	09 f0       	breq	.+2      	; 0x3482 <vfprintf+0xfa>
    3480:	b8 cf       	rjmp	.-144    	; 0x33f2 <vfprintf+0x6a>
    3482:	89 2f       	mov	r24, r25
    3484:	85 54       	subi	r24, 0x45	; 69
    3486:	83 30       	cpi	r24, 0x03	; 3
    3488:	18 f0       	brcs	.+6      	; 0x3490 <vfprintf+0x108>
    348a:	80 52       	subi	r24, 0x20	; 32
    348c:	83 30       	cpi	r24, 0x03	; 3
    348e:	38 f4       	brcc	.+14     	; 0x349e <vfprintf+0x116>
    3490:	44 e0       	ldi	r20, 0x04	; 4
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	a4 0e       	add	r10, r20
    3496:	b5 1e       	adc	r11, r21
    3498:	5f e3       	ldi	r21, 0x3F	; 63
    349a:	59 83       	std	Y+1, r21	; 0x01
    349c:	0f c0       	rjmp	.+30     	; 0x34bc <vfprintf+0x134>
    349e:	93 36       	cpi	r25, 0x63	; 99
    34a0:	31 f0       	breq	.+12     	; 0x34ae <vfprintf+0x126>
    34a2:	93 37       	cpi	r25, 0x73	; 115
    34a4:	79 f0       	breq	.+30     	; 0x34c4 <vfprintf+0x13c>
    34a6:	93 35       	cpi	r25, 0x53	; 83
    34a8:	09 f0       	breq	.+2      	; 0x34ac <vfprintf+0x124>
    34aa:	56 c0       	rjmp	.+172    	; 0x3558 <vfprintf+0x1d0>
    34ac:	20 c0       	rjmp	.+64     	; 0x34ee <vfprintf+0x166>
    34ae:	f5 01       	movw	r30, r10
    34b0:	80 81       	ld	r24, Z
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	42 e0       	ldi	r20, 0x02	; 2
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	a4 0e       	add	r10, r20
    34ba:	b5 1e       	adc	r11, r21
    34bc:	61 01       	movw	r12, r2
    34be:	01 e0       	ldi	r16, 0x01	; 1
    34c0:	10 e0       	ldi	r17, 0x00	; 0
    34c2:	12 c0       	rjmp	.+36     	; 0x34e8 <vfprintf+0x160>
    34c4:	f5 01       	movw	r30, r10
    34c6:	c0 80       	ld	r12, Z
    34c8:	d1 80       	ldd	r13, Z+1	; 0x01
    34ca:	f6 fc       	sbrc	r15, 6
    34cc:	03 c0       	rjmp	.+6      	; 0x34d4 <vfprintf+0x14c>
    34ce:	6f ef       	ldi	r22, 0xFF	; 255
    34d0:	7f ef       	ldi	r23, 0xFF	; 255
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <vfprintf+0x150>
    34d4:	69 2d       	mov	r22, r9
    34d6:	70 e0       	ldi	r23, 0x00	; 0
    34d8:	42 e0       	ldi	r20, 0x02	; 2
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	a4 0e       	add	r10, r20
    34de:	b5 1e       	adc	r11, r21
    34e0:	c6 01       	movw	r24, r12
    34e2:	0e 94 ac 1b 	call	0x3758	; 0x3758 <strnlen>
    34e6:	8c 01       	movw	r16, r24
    34e8:	5f e7       	ldi	r21, 0x7F	; 127
    34ea:	f5 22       	and	r15, r21
    34ec:	14 c0       	rjmp	.+40     	; 0x3516 <vfprintf+0x18e>
    34ee:	f5 01       	movw	r30, r10
    34f0:	c0 80       	ld	r12, Z
    34f2:	d1 80       	ldd	r13, Z+1	; 0x01
    34f4:	f6 fc       	sbrc	r15, 6
    34f6:	03 c0       	rjmp	.+6      	; 0x34fe <vfprintf+0x176>
    34f8:	6f ef       	ldi	r22, 0xFF	; 255
    34fa:	7f ef       	ldi	r23, 0xFF	; 255
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <vfprintf+0x17a>
    34fe:	69 2d       	mov	r22, r9
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	42 e0       	ldi	r20, 0x02	; 2
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	a4 0e       	add	r10, r20
    3508:	b5 1e       	adc	r11, r21
    350a:	c6 01       	movw	r24, r12
    350c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <strnlen_P>
    3510:	8c 01       	movw	r16, r24
    3512:	50 e8       	ldi	r21, 0x80	; 128
    3514:	f5 2a       	or	r15, r21
    3516:	f3 fe       	sbrs	r15, 3
    3518:	07 c0       	rjmp	.+14     	; 0x3528 <vfprintf+0x1a0>
    351a:	1a c0       	rjmp	.+52     	; 0x3550 <vfprintf+0x1c8>
    351c:	80 e2       	ldi	r24, 0x20	; 32
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	b3 01       	movw	r22, r6
    3522:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    3526:	ea 94       	dec	r14
    3528:	8e 2d       	mov	r24, r14
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	08 17       	cp	r16, r24
    352e:	19 07       	cpc	r17, r25
    3530:	a8 f3       	brcs	.-22     	; 0x351c <vfprintf+0x194>
    3532:	0e c0       	rjmp	.+28     	; 0x3550 <vfprintf+0x1c8>
    3534:	f6 01       	movw	r30, r12
    3536:	f7 fc       	sbrc	r15, 7
    3538:	85 91       	lpm	r24, Z+
    353a:	f7 fe       	sbrs	r15, 7
    353c:	81 91       	ld	r24, Z+
    353e:	6f 01       	movw	r12, r30
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	b3 01       	movw	r22, r6
    3544:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    3548:	e1 10       	cpse	r14, r1
    354a:	ea 94       	dec	r14
    354c:	01 50       	subi	r16, 0x01	; 1
    354e:	10 40       	sbci	r17, 0x00	; 0
    3550:	01 15       	cp	r16, r1
    3552:	11 05       	cpc	r17, r1
    3554:	79 f7       	brne	.-34     	; 0x3534 <vfprintf+0x1ac>
    3556:	ea c0       	rjmp	.+468    	; 0x372c <vfprintf+0x3a4>
    3558:	94 36       	cpi	r25, 0x64	; 100
    355a:	11 f0       	breq	.+4      	; 0x3560 <vfprintf+0x1d8>
    355c:	99 36       	cpi	r25, 0x69	; 105
    355e:	69 f5       	brne	.+90     	; 0x35ba <vfprintf+0x232>
    3560:	f7 fe       	sbrs	r15, 7
    3562:	08 c0       	rjmp	.+16     	; 0x3574 <vfprintf+0x1ec>
    3564:	f5 01       	movw	r30, r10
    3566:	20 81       	ld	r18, Z
    3568:	31 81       	ldd	r19, Z+1	; 0x01
    356a:	42 81       	ldd	r20, Z+2	; 0x02
    356c:	53 81       	ldd	r21, Z+3	; 0x03
    356e:	84 e0       	ldi	r24, 0x04	; 4
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0a c0       	rjmp	.+20     	; 0x3588 <vfprintf+0x200>
    3574:	f5 01       	movw	r30, r10
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	9c 01       	movw	r18, r24
    357c:	44 27       	eor	r20, r20
    357e:	37 fd       	sbrc	r19, 7
    3580:	40 95       	com	r20
    3582:	54 2f       	mov	r21, r20
    3584:	82 e0       	ldi	r24, 0x02	; 2
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	a8 0e       	add	r10, r24
    358a:	b9 1e       	adc	r11, r25
    358c:	9f e6       	ldi	r25, 0x6F	; 111
    358e:	f9 22       	and	r15, r25
    3590:	57 ff       	sbrs	r21, 7
    3592:	09 c0       	rjmp	.+18     	; 0x35a6 <vfprintf+0x21e>
    3594:	50 95       	com	r21
    3596:	40 95       	com	r20
    3598:	30 95       	com	r19
    359a:	21 95       	neg	r18
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	4f 4f       	sbci	r20, 0xFF	; 255
    35a0:	5f 4f       	sbci	r21, 0xFF	; 255
    35a2:	e0 e8       	ldi	r30, 0x80	; 128
    35a4:	fe 2a       	or	r15, r30
    35a6:	ca 01       	movw	r24, r20
    35a8:	b9 01       	movw	r22, r18
    35aa:	a1 01       	movw	r20, r2
    35ac:	2a e0       	ldi	r18, 0x0A	; 10
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__ultoa_invert>
    35b4:	d8 2e       	mov	r13, r24
    35b6:	d2 18       	sub	r13, r2
    35b8:	40 c0       	rjmp	.+128    	; 0x363a <vfprintf+0x2b2>
    35ba:	95 37       	cpi	r25, 0x75	; 117
    35bc:	29 f4       	brne	.+10     	; 0x35c8 <vfprintf+0x240>
    35be:	1f 2d       	mov	r17, r15
    35c0:	1f 7e       	andi	r17, 0xEF	; 239
    35c2:	2a e0       	ldi	r18, 0x0A	; 10
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	1d c0       	rjmp	.+58     	; 0x3602 <vfprintf+0x27a>
    35c8:	1f 2d       	mov	r17, r15
    35ca:	19 7f       	andi	r17, 0xF9	; 249
    35cc:	9f 36       	cpi	r25, 0x6F	; 111
    35ce:	61 f0       	breq	.+24     	; 0x35e8 <vfprintf+0x260>
    35d0:	90 37       	cpi	r25, 0x70	; 112
    35d2:	20 f4       	brcc	.+8      	; 0x35dc <vfprintf+0x254>
    35d4:	98 35       	cpi	r25, 0x58	; 88
    35d6:	09 f0       	breq	.+2      	; 0x35da <vfprintf+0x252>
    35d8:	ac c0       	rjmp	.+344    	; 0x3732 <vfprintf+0x3aa>
    35da:	0f c0       	rjmp	.+30     	; 0x35fa <vfprintf+0x272>
    35dc:	90 37       	cpi	r25, 0x70	; 112
    35de:	39 f0       	breq	.+14     	; 0x35ee <vfprintf+0x266>
    35e0:	98 37       	cpi	r25, 0x78	; 120
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <vfprintf+0x25e>
    35e4:	a6 c0       	rjmp	.+332    	; 0x3732 <vfprintf+0x3aa>
    35e6:	04 c0       	rjmp	.+8      	; 0x35f0 <vfprintf+0x268>
    35e8:	28 e0       	ldi	r18, 0x08	; 8
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	0a c0       	rjmp	.+20     	; 0x3602 <vfprintf+0x27a>
    35ee:	10 61       	ori	r17, 0x10	; 16
    35f0:	14 fd       	sbrc	r17, 4
    35f2:	14 60       	ori	r17, 0x04	; 4
    35f4:	20 e1       	ldi	r18, 0x10	; 16
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	04 c0       	rjmp	.+8      	; 0x3602 <vfprintf+0x27a>
    35fa:	14 fd       	sbrc	r17, 4
    35fc:	16 60       	ori	r17, 0x06	; 6
    35fe:	20 e1       	ldi	r18, 0x10	; 16
    3600:	32 e0       	ldi	r19, 0x02	; 2
    3602:	17 ff       	sbrs	r17, 7
    3604:	08 c0       	rjmp	.+16     	; 0x3616 <vfprintf+0x28e>
    3606:	f5 01       	movw	r30, r10
    3608:	60 81       	ld	r22, Z
    360a:	71 81       	ldd	r23, Z+1	; 0x01
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	44 e0       	ldi	r20, 0x04	; 4
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	08 c0       	rjmp	.+16     	; 0x3626 <vfprintf+0x29e>
    3616:	f5 01       	movw	r30, r10
    3618:	80 81       	ld	r24, Z
    361a:	91 81       	ldd	r25, Z+1	; 0x01
    361c:	bc 01       	movw	r22, r24
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	42 e0       	ldi	r20, 0x02	; 2
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	a4 0e       	add	r10, r20
    3628:	b5 1e       	adc	r11, r21
    362a:	a1 01       	movw	r20, r2
    362c:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__ultoa_invert>
    3630:	d8 2e       	mov	r13, r24
    3632:	d2 18       	sub	r13, r2
    3634:	8f e7       	ldi	r24, 0x7F	; 127
    3636:	f8 2e       	mov	r15, r24
    3638:	f1 22       	and	r15, r17
    363a:	f6 fe       	sbrs	r15, 6
    363c:	0b c0       	rjmp	.+22     	; 0x3654 <vfprintf+0x2cc>
    363e:	5e ef       	ldi	r21, 0xFE	; 254
    3640:	f5 22       	and	r15, r21
    3642:	d9 14       	cp	r13, r9
    3644:	38 f4       	brcc	.+14     	; 0x3654 <vfprintf+0x2cc>
    3646:	f4 fe       	sbrs	r15, 4
    3648:	07 c0       	rjmp	.+14     	; 0x3658 <vfprintf+0x2d0>
    364a:	f2 fc       	sbrc	r15, 2
    364c:	05 c0       	rjmp	.+10     	; 0x3658 <vfprintf+0x2d0>
    364e:	8f ee       	ldi	r24, 0xEF	; 239
    3650:	f8 22       	and	r15, r24
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <vfprintf+0x2d0>
    3654:	1d 2d       	mov	r17, r13
    3656:	01 c0       	rjmp	.+2      	; 0x365a <vfprintf+0x2d2>
    3658:	19 2d       	mov	r17, r9
    365a:	f4 fe       	sbrs	r15, 4
    365c:	0d c0       	rjmp	.+26     	; 0x3678 <vfprintf+0x2f0>
    365e:	fe 01       	movw	r30, r28
    3660:	ed 0d       	add	r30, r13
    3662:	f1 1d       	adc	r31, r1
    3664:	80 81       	ld	r24, Z
    3666:	80 33       	cpi	r24, 0x30	; 48
    3668:	19 f4       	brne	.+6      	; 0x3670 <vfprintf+0x2e8>
    366a:	99 ee       	ldi	r25, 0xE9	; 233
    366c:	f9 22       	and	r15, r25
    366e:	08 c0       	rjmp	.+16     	; 0x3680 <vfprintf+0x2f8>
    3670:	1f 5f       	subi	r17, 0xFF	; 255
    3672:	f2 fe       	sbrs	r15, 2
    3674:	05 c0       	rjmp	.+10     	; 0x3680 <vfprintf+0x2f8>
    3676:	03 c0       	rjmp	.+6      	; 0x367e <vfprintf+0x2f6>
    3678:	8f 2d       	mov	r24, r15
    367a:	86 78       	andi	r24, 0x86	; 134
    367c:	09 f0       	breq	.+2      	; 0x3680 <vfprintf+0x2f8>
    367e:	1f 5f       	subi	r17, 0xFF	; 255
    3680:	0f 2d       	mov	r16, r15
    3682:	f3 fc       	sbrc	r15, 3
    3684:	14 c0       	rjmp	.+40     	; 0x36ae <vfprintf+0x326>
    3686:	f0 fe       	sbrs	r15, 0
    3688:	0f c0       	rjmp	.+30     	; 0x36a8 <vfprintf+0x320>
    368a:	1e 15       	cp	r17, r14
    368c:	10 f0       	brcs	.+4      	; 0x3692 <vfprintf+0x30a>
    368e:	9d 2c       	mov	r9, r13
    3690:	0b c0       	rjmp	.+22     	; 0x36a8 <vfprintf+0x320>
    3692:	9d 2c       	mov	r9, r13
    3694:	9e 0c       	add	r9, r14
    3696:	91 1a       	sub	r9, r17
    3698:	1e 2d       	mov	r17, r14
    369a:	06 c0       	rjmp	.+12     	; 0x36a8 <vfprintf+0x320>
    369c:	80 e2       	ldi	r24, 0x20	; 32
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	b3 01       	movw	r22, r6
    36a2:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    36a6:	1f 5f       	subi	r17, 0xFF	; 255
    36a8:	1e 15       	cp	r17, r14
    36aa:	c0 f3       	brcs	.-16     	; 0x369c <vfprintf+0x314>
    36ac:	04 c0       	rjmp	.+8      	; 0x36b6 <vfprintf+0x32e>
    36ae:	1e 15       	cp	r17, r14
    36b0:	10 f4       	brcc	.+4      	; 0x36b6 <vfprintf+0x32e>
    36b2:	e1 1a       	sub	r14, r17
    36b4:	01 c0       	rjmp	.+2      	; 0x36b8 <vfprintf+0x330>
    36b6:	ee 24       	eor	r14, r14
    36b8:	04 ff       	sbrs	r16, 4
    36ba:	0f c0       	rjmp	.+30     	; 0x36da <vfprintf+0x352>
    36bc:	80 e3       	ldi	r24, 0x30	; 48
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	b3 01       	movw	r22, r6
    36c2:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    36c6:	02 ff       	sbrs	r16, 2
    36c8:	1d c0       	rjmp	.+58     	; 0x3704 <vfprintf+0x37c>
    36ca:	01 fd       	sbrc	r16, 1
    36cc:	03 c0       	rjmp	.+6      	; 0x36d4 <vfprintf+0x34c>
    36ce:	88 e7       	ldi	r24, 0x78	; 120
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e c0       	rjmp	.+28     	; 0x36f0 <vfprintf+0x368>
    36d4:	88 e5       	ldi	r24, 0x58	; 88
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	0b c0       	rjmp	.+22     	; 0x36f0 <vfprintf+0x368>
    36da:	80 2f       	mov	r24, r16
    36dc:	86 78       	andi	r24, 0x86	; 134
    36de:	91 f0       	breq	.+36     	; 0x3704 <vfprintf+0x37c>
    36e0:	01 ff       	sbrs	r16, 1
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <vfprintf+0x360>
    36e4:	8b e2       	ldi	r24, 0x2B	; 43
    36e6:	01 c0       	rjmp	.+2      	; 0x36ea <vfprintf+0x362>
    36e8:	80 e2       	ldi	r24, 0x20	; 32
    36ea:	f7 fc       	sbrc	r15, 7
    36ec:	8d e2       	ldi	r24, 0x2D	; 45
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	b3 01       	movw	r22, r6
    36f2:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    36f6:	06 c0       	rjmp	.+12     	; 0x3704 <vfprintf+0x37c>
    36f8:	80 e3       	ldi	r24, 0x30	; 48
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	b3 01       	movw	r22, r6
    36fe:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    3702:	9a 94       	dec	r9
    3704:	d9 14       	cp	r13, r9
    3706:	c0 f3       	brcs	.-16     	; 0x36f8 <vfprintf+0x370>
    3708:	da 94       	dec	r13
    370a:	f1 01       	movw	r30, r2
    370c:	ed 0d       	add	r30, r13
    370e:	f1 1d       	adc	r31, r1
    3710:	80 81       	ld	r24, Z
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	b3 01       	movw	r22, r6
    3716:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    371a:	dd 20       	and	r13, r13
    371c:	a9 f7       	brne	.-22     	; 0x3708 <vfprintf+0x380>
    371e:	06 c0       	rjmp	.+12     	; 0x372c <vfprintf+0x3a4>
    3720:	80 e2       	ldi	r24, 0x20	; 32
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	b3 01       	movw	r22, r6
    3726:	0e 94 b7 1b 	call	0x376e	; 0x376e <fputc>
    372a:	ea 94       	dec	r14
    372c:	ee 20       	and	r14, r14
    372e:	c1 f7       	brne	.-16     	; 0x3720 <vfprintf+0x398>
    3730:	43 ce       	rjmp	.-890    	; 0x33b8 <vfprintf+0x30>
    3732:	f3 01       	movw	r30, r6
    3734:	66 81       	ldd	r22, Z+6	; 0x06
    3736:	77 81       	ldd	r23, Z+7	; 0x07
    3738:	cb 01       	movw	r24, r22
    373a:	2b 96       	adiw	r28, 0x0b	; 11
    373c:	e2 e1       	ldi	r30, 0x12	; 18
    373e:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__epilogue_restores__>

00003742 <strnlen_P>:
    3742:	fc 01       	movw	r30, r24
    3744:	05 90       	lpm	r0, Z+
    3746:	61 50       	subi	r22, 0x01	; 1
    3748:	70 40       	sbci	r23, 0x00	; 0
    374a:	01 10       	cpse	r0, r1
    374c:	d8 f7       	brcc	.-10     	; 0x3744 <strnlen_P+0x2>
    374e:	80 95       	com	r24
    3750:	90 95       	com	r25
    3752:	8e 0f       	add	r24, r30
    3754:	9f 1f       	adc	r25, r31
    3756:	08 95       	ret

00003758 <strnlen>:
    3758:	fc 01       	movw	r30, r24
    375a:	61 50       	subi	r22, 0x01	; 1
    375c:	70 40       	sbci	r23, 0x00	; 0
    375e:	01 90       	ld	r0, Z+
    3760:	01 10       	cpse	r0, r1
    3762:	d8 f7       	brcc	.-10     	; 0x375a <strnlen+0x2>
    3764:	80 95       	com	r24
    3766:	90 95       	com	r25
    3768:	8e 0f       	add	r24, r30
    376a:	9f 1f       	adc	r25, r31
    376c:	08 95       	ret

0000376e <fputc>:
    376e:	0f 93       	push	r16
    3770:	1f 93       	push	r17
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	8c 01       	movw	r16, r24
    3778:	eb 01       	movw	r28, r22
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	81 ff       	sbrs	r24, 1
    377e:	1b c0       	rjmp	.+54     	; 0x37b6 <fputc+0x48>
    3780:	82 ff       	sbrs	r24, 2
    3782:	0d c0       	rjmp	.+26     	; 0x379e <fputc+0x30>
    3784:	2e 81       	ldd	r18, Y+6	; 0x06
    3786:	3f 81       	ldd	r19, Y+7	; 0x07
    3788:	8c 81       	ldd	r24, Y+4	; 0x04
    378a:	9d 81       	ldd	r25, Y+5	; 0x05
    378c:	28 17       	cp	r18, r24
    378e:	39 07       	cpc	r19, r25
    3790:	64 f4       	brge	.+24     	; 0x37aa <fputc+0x3c>
    3792:	e8 81       	ld	r30, Y
    3794:	f9 81       	ldd	r31, Y+1	; 0x01
    3796:	01 93       	st	Z+, r16
    3798:	f9 83       	std	Y+1, r31	; 0x01
    379a:	e8 83       	st	Y, r30
    379c:	06 c0       	rjmp	.+12     	; 0x37aa <fputc+0x3c>
    379e:	e8 85       	ldd	r30, Y+8	; 0x08
    37a0:	f9 85       	ldd	r31, Y+9	; 0x09
    37a2:	80 2f       	mov	r24, r16
    37a4:	09 95       	icall
    37a6:	89 2b       	or	r24, r25
    37a8:	31 f4       	brne	.+12     	; 0x37b6 <fputc+0x48>
    37aa:	8e 81       	ldd	r24, Y+6	; 0x06
    37ac:	9f 81       	ldd	r25, Y+7	; 0x07
    37ae:	01 96       	adiw	r24, 0x01	; 1
    37b0:	9f 83       	std	Y+7, r25	; 0x07
    37b2:	8e 83       	std	Y+6, r24	; 0x06
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <fputc+0x4c>
    37b6:	0f ef       	ldi	r16, 0xFF	; 255
    37b8:	1f ef       	ldi	r17, 0xFF	; 255
    37ba:	c8 01       	movw	r24, r16
    37bc:	df 91       	pop	r29
    37be:	cf 91       	pop	r28
    37c0:	1f 91       	pop	r17
    37c2:	0f 91       	pop	r16
    37c4:	08 95       	ret

000037c6 <__ultoa_invert>:
    37c6:	fa 01       	movw	r30, r20
    37c8:	aa 27       	eor	r26, r26
    37ca:	28 30       	cpi	r18, 0x08	; 8
    37cc:	51 f1       	breq	.+84     	; 0x3822 <__ultoa_invert+0x5c>
    37ce:	20 31       	cpi	r18, 0x10	; 16
    37d0:	81 f1       	breq	.+96     	; 0x3832 <__ultoa_invert+0x6c>
    37d2:	e8 94       	clt
    37d4:	6f 93       	push	r22
    37d6:	6e 7f       	andi	r22, 0xFE	; 254
    37d8:	6e 5f       	subi	r22, 0xFE	; 254
    37da:	7f 4f       	sbci	r23, 0xFF	; 255
    37dc:	8f 4f       	sbci	r24, 0xFF	; 255
    37de:	9f 4f       	sbci	r25, 0xFF	; 255
    37e0:	af 4f       	sbci	r26, 0xFF	; 255
    37e2:	b1 e0       	ldi	r27, 0x01	; 1
    37e4:	3e d0       	rcall	.+124    	; 0x3862 <__ultoa_invert+0x9c>
    37e6:	b4 e0       	ldi	r27, 0x04	; 4
    37e8:	3c d0       	rcall	.+120    	; 0x3862 <__ultoa_invert+0x9c>
    37ea:	67 0f       	add	r22, r23
    37ec:	78 1f       	adc	r23, r24
    37ee:	89 1f       	adc	r24, r25
    37f0:	9a 1f       	adc	r25, r26
    37f2:	a1 1d       	adc	r26, r1
    37f4:	68 0f       	add	r22, r24
    37f6:	79 1f       	adc	r23, r25
    37f8:	8a 1f       	adc	r24, r26
    37fa:	91 1d       	adc	r25, r1
    37fc:	a1 1d       	adc	r26, r1
    37fe:	6a 0f       	add	r22, r26
    3800:	71 1d       	adc	r23, r1
    3802:	81 1d       	adc	r24, r1
    3804:	91 1d       	adc	r25, r1
    3806:	a1 1d       	adc	r26, r1
    3808:	20 d0       	rcall	.+64     	; 0x384a <__ultoa_invert+0x84>
    380a:	09 f4       	brne	.+2      	; 0x380e <__ultoa_invert+0x48>
    380c:	68 94       	set
    380e:	3f 91       	pop	r19
    3810:	2a e0       	ldi	r18, 0x0A	; 10
    3812:	26 9f       	mul	r18, r22
    3814:	11 24       	eor	r1, r1
    3816:	30 19       	sub	r19, r0
    3818:	30 5d       	subi	r19, 0xD0	; 208
    381a:	31 93       	st	Z+, r19
    381c:	de f6       	brtc	.-74     	; 0x37d4 <__ultoa_invert+0xe>
    381e:	cf 01       	movw	r24, r30
    3820:	08 95       	ret
    3822:	46 2f       	mov	r20, r22
    3824:	47 70       	andi	r20, 0x07	; 7
    3826:	40 5d       	subi	r20, 0xD0	; 208
    3828:	41 93       	st	Z+, r20
    382a:	b3 e0       	ldi	r27, 0x03	; 3
    382c:	0f d0       	rcall	.+30     	; 0x384c <__ultoa_invert+0x86>
    382e:	c9 f7       	brne	.-14     	; 0x3822 <__ultoa_invert+0x5c>
    3830:	f6 cf       	rjmp	.-20     	; 0x381e <__ultoa_invert+0x58>
    3832:	46 2f       	mov	r20, r22
    3834:	4f 70       	andi	r20, 0x0F	; 15
    3836:	40 5d       	subi	r20, 0xD0	; 208
    3838:	4a 33       	cpi	r20, 0x3A	; 58
    383a:	18 f0       	brcs	.+6      	; 0x3842 <__ultoa_invert+0x7c>
    383c:	49 5d       	subi	r20, 0xD9	; 217
    383e:	31 fd       	sbrc	r19, 1
    3840:	40 52       	subi	r20, 0x20	; 32
    3842:	41 93       	st	Z+, r20
    3844:	02 d0       	rcall	.+4      	; 0x384a <__ultoa_invert+0x84>
    3846:	a9 f7       	brne	.-22     	; 0x3832 <__ultoa_invert+0x6c>
    3848:	ea cf       	rjmp	.-44     	; 0x381e <__ultoa_invert+0x58>
    384a:	b4 e0       	ldi	r27, 0x04	; 4
    384c:	a6 95       	lsr	r26
    384e:	97 95       	ror	r25
    3850:	87 95       	ror	r24
    3852:	77 95       	ror	r23
    3854:	67 95       	ror	r22
    3856:	ba 95       	dec	r27
    3858:	c9 f7       	brne	.-14     	; 0x384c <__ultoa_invert+0x86>
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	61 05       	cpc	r22, r1
    385e:	71 05       	cpc	r23, r1
    3860:	08 95       	ret
    3862:	9b 01       	movw	r18, r22
    3864:	ac 01       	movw	r20, r24
    3866:	0a 2e       	mov	r0, r26
    3868:	06 94       	lsr	r0
    386a:	57 95       	ror	r21
    386c:	47 95       	ror	r20
    386e:	37 95       	ror	r19
    3870:	27 95       	ror	r18
    3872:	ba 95       	dec	r27
    3874:	c9 f7       	brne	.-14     	; 0x3868 <__ultoa_invert+0xa2>
    3876:	62 0f       	add	r22, r18
    3878:	73 1f       	adc	r23, r19
    387a:	84 1f       	adc	r24, r20
    387c:	95 1f       	adc	r25, r21
    387e:	a0 1d       	adc	r26, r0
    3880:	08 95       	ret

00003882 <__prologue_saves__>:
    3882:	2f 92       	push	r2
    3884:	3f 92       	push	r3
    3886:	4f 92       	push	r4
    3888:	5f 92       	push	r5
    388a:	6f 92       	push	r6
    388c:	7f 92       	push	r7
    388e:	8f 92       	push	r8
    3890:	9f 92       	push	r9
    3892:	af 92       	push	r10
    3894:	bf 92       	push	r11
    3896:	cf 92       	push	r12
    3898:	df 92       	push	r13
    389a:	ef 92       	push	r14
    389c:	ff 92       	push	r15
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	cf 93       	push	r28
    38a4:	df 93       	push	r29
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	ca 1b       	sub	r28, r26
    38ac:	db 0b       	sbc	r29, r27
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	09 94       	ijmp

000038ba <__epilogue_restores__>:
    38ba:	2a 88       	ldd	r2, Y+18	; 0x12
    38bc:	39 88       	ldd	r3, Y+17	; 0x11
    38be:	48 88       	ldd	r4, Y+16	; 0x10
    38c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    38cc:	b9 84       	ldd	r11, Y+9	; 0x09
    38ce:	c8 84       	ldd	r12, Y+8	; 0x08
    38d0:	df 80       	ldd	r13, Y+7	; 0x07
    38d2:	ee 80       	ldd	r14, Y+6	; 0x06
    38d4:	fd 80       	ldd	r15, Y+5	; 0x05
    38d6:	0c 81       	ldd	r16, Y+4	; 0x04
    38d8:	1b 81       	ldd	r17, Y+3	; 0x03
    38da:	aa 81       	ldd	r26, Y+2	; 0x02
    38dc:	b9 81       	ldd	r27, Y+1	; 0x01
    38de:	ce 0f       	add	r28, r30
    38e0:	d1 1d       	adc	r29, r1
    38e2:	0f b6       	in	r0, 0x3f	; 63
    38e4:	f8 94       	cli
    38e6:	de bf       	out	0x3e, r29	; 62
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	cd bf       	out	0x3d, r28	; 61
    38ec:	ed 01       	movw	r28, r26
    38ee:	08 95       	ret

000038f0 <_exit>:
    38f0:	f8 94       	cli

000038f2 <__stop_program>:
    38f2:	ff cf       	rjmp	.-2      	; 0x38f2 <__stop_program>
