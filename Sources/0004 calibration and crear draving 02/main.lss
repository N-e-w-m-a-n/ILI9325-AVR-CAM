
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000363e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000363e  000036d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080007e  0080007e  000036f0  2**0
                  ALLOC
  3 .stab         00000420  00000000  00000000  000036f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000ab  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000287  00000000  00000000  00003c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001eb5  00000000  00000000  00003ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000796  00000000  00000000  00005d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001be9  00000000  00000000  0000652d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b0  00000000  00000000  00008118  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005d8  00000000  00000000  000083c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000026d7  00000000  00000000  000089a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  0000b077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 03 	jmp	0x644	; 0x644 <__ctors_end>
       4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      10:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      14:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      18:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      1c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      20:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      24:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      28:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      2c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      30:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      38:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      3c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      40:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      44:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      48:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      4c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      50:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>

00000054 <font_8x16>:
	...
      68:	18 3c 3c 3c 18 18 00 18 18 00 00 00 00 00 00 00     .<<<............
      78:	66 66 66 00 00 00 00 00 00 00 00 00 00 00 00 00     fff.............
      88:	36 36 7f 36 36 36 7f 36 36 00 00 00 00 00 18 18     66.666.66.......
      98:	3c 66 60 30 18 0c 06 66 3c 18 18 00 00 00 00 70     <f`0...f<......p
      a8:	d8 da 76 0c 18 30 6e 5b 1b 0e 00 00 00 00 00 00     ..v..0n[........
      b8:	38 6c 6c 38 60 6f 66 66 3b 00 00 00 00 00 00 00     8ll8`off;.......
      c8:	18 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      d8:	0c 18 18 30 30 30 30 30 18 18 0c 00 00 00 00 00     ...00000........
      e8:	30 18 18 0c 0c 0c 0c 0c 18 18 30 00 00 00 00 00     0.........0.....
      f8:	00 00 36 1c 7f 1c 36 00 00 00 00 00 00 00 00 00     ..6...6.........
     108:	00 00 18 18 7e 18 18 00 00 00 00 00 00 00 00 00     ....~...........
     118:	00 00 00 00 00 00 1c 1c 0c 18 00 00 00 00 00 00     ................
     128:	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 00     ...~............
     138:	00 00 00 00 00 00 1c 1c 00 00 00 00 00 00 00 06     ................
     148:	06 0c 0c 18 18 30 30 60 60 00 00 00 00 00 00 1e     .....00``.......
     158:	33 37 37 33 3b 3b 33 1e 00 00 00 00 00 00 00 0c     3773;;3.........
     168:	1c 7c 0c 0c 0c 0c 0c 0c 00 00 00 00 00 00 00 3c     .|.............<
     178:	66 66 06 0c 18 30 60 7e 00 00 00 00 00 00 00 3c     ff...0`~.......<
     188:	66 66 06 1c 06 66 66 3c 00 00 00 00 00 00 00 30     ff...ff<.......0
     198:	30 36 36 36 66 7f 06 06 00 00 00 00 00 00 00 7e     0666f..........~
     1a8:	60 60 60 7c 06 06 0c 78 00 00 00 00 00 00 00 1c     ```|...x........
     1b8:	18 30 7c 66 66 66 66 3c 00 00 00 00 00 00 00 7e     .0|ffff<.......~
     1c8:	06 0c 0c 18 18 30 30 30 00 00 00 00 00 00 00 3c     .....000.......<
     1d8:	66 66 76 3c 6e 66 66 3c 00 00 00 00 00 00 00 3c     ffv<nff<.......<
     1e8:	66 66 66 66 3e 0c 18 38 00 00 00 00 00 00 00 00     ffff>..8........
     1f8:	00 1c 1c 00 00 00 1c 1c 00 00 00 00 00 00 00 00     ................
     208:	00 1c 1c 00 00 00 1c 1c 0c 18 00 00 00 00 00 06     ................
     218:	0c 18 30 60 30 18 0c 06 00 00 00 00 00 00 00 00     ..0`0...........
     228:	00 00 7e 00 7e 00 00 00 00 00 00 00 00 00 00 60     ..~.~..........`
     238:	30 18 0c 06 0c 18 30 60 00 00 00 00 00 00 00 3c     0.....0`.......<
     248:	66 66 0c 18 18 00 18 18 00 00 00 00 00 00 00 7e     ff.............~
     258:	c3 c3 cf db db cf c0 7f 00 00 00 00 00 00 00 18     ................
     268:	3c 66 66 66 7e 66 66 66 00 00 00 00 00 00 00 7c     <fff~fff.......|
     278:	66 66 66 7c 66 66 66 7c 00 00 00 00 00 00 00 3c     fff|fff|.......<
     288:	66 66 60 60 60 66 66 3c 00 00 00 00 00 00 00 78     ff```ff<.......x
     298:	6c 66 66 66 66 66 6c 78 00 00 00 00 00 00 00 7e     lffffflx.......~
     2a8:	60 60 60 7c 60 60 60 7e 00 00 00 00 00 00 00 7e     ```|```~.......~
     2b8:	60 60 60 7c 60 60 60 60 00 00 00 00 00 00 00 3c     ```|````.......<
     2c8:	66 66 60 60 6e 66 66 3e 00 00 00 00 00 00 00 66     ff``nff>.......f
     2d8:	66 66 66 7e 66 66 66 66 00 00 00 00 00 00 00 3c     fff~ffff.......<
     2e8:	18 18 18 18 18 18 18 3c 00 00 00 00 00 00 1e 0c     .......<........
     2f8:	0c 0c 0c 0c cc cc cc 78 00 00 00 00 00 00 00 66     .......x.......f
     308:	66 6c 6c 78 6c 6c 66 66 00 00 00 00 00 00 00 60     fllxllff.......`
     318:	60 60 60 60 60 60 60 7e 00 00 00 00 00 00 00 63     ```````~.......c
     328:	63 77 6b 6b 6b 63 63 63 00 00 00 00 00 00 00 63     cwkkkccc.......c
     338:	63 73 7b 6f 67 63 63 63 00 00 00 00 00 00 00 3c     cs{ogccc.......<
     348:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 7c     fffffff<.......|
     358:	66 66 66 7c 60 60 60 60 00 00 00 00 00 00 00 3c     fff|````.......<
     368:	66 66 66 66 66 66 66 3c 0c 06 00 00 00 00 00 7c     fffffff<.......|
     378:	66 66 66 7c 6c 66 66 66 00 00 00 00 00 00 00 3c     fff|lfff.......<
     388:	66 60 30 18 0c 06 66 3c 00 00 00 00 00 00 00 7e     f`0...f<.......~
     398:	18 18 18 18 18 18 18 18 00 00 00 00 00 00 00 66     ...............f
     3a8:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 66     fffffff<.......f
     3b8:	66 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 63     ffffff<........c
     3c8:	63 63 6b 6b 6b 36 36 36 00 00 00 00 00 00 00 66     cckkk666.......f
     3d8:	66 34 18 18 2c 66 66 66 00 00 00 00 00 00 00 66     f4..,fff.......f
     3e8:	66 66 66 3c 18 18 18 18 00 00 00 00 00 00 00 7e     fff<...........~
     3f8:	06 06 0c 18 30 60 60 7e 00 00 00 00 00 00 00 3c     ....0``~.......<
     408:	30 30 30 30 30 30 30 30 30 30 3c 00 00 00 00 60     0000000000<....`
     418:	60 30 30 18 18 0c 0c 06 06 00 00 00 00 00 00 3c     `00............<
     428:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66     ..........<...<f
	...
     450:	00 00 ff 00 00 38 18 0c 00 00 00 00 00 00 00 00     .....8..........
	...
     468:	00 3c 06 06 3e 66 66 3e 00 00 00 00 00 00 00 60     .<..>ff>.......`
     478:	60 7c 66 66 66 66 66 7c 00 00 00 00 00 00 00 00     `|fffff|........
     488:	00 3c 66 60 60 60 66 3c 00 00 00 00 00 00 00 06     .<f```f<........
     498:	06 3e 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .>fffff>........
     4a8:	00 3c 66 66 7e 60 60 3c 00 00 00 00 00 00 00 1e     .<ff~``<........
     4b8:	30 30 30 7e 30 30 30 30 00 00 00 00 00 00 00 00     000~0000........
     4c8:	00 3e 66 66 66 66 66 3e 06 06 7c 00 00 00 00 60     .>fffff>..|....`
     4d8:	60 7c 66 66 66 66 66 66 00 00 00 00 00 00 18 18     `|ffffff........
     4e8:	00 78 18 18 18 18 18 7e 00 00 00 00 00 00 0c 0c     .x.....~........
     4f8:	00 3c 0c 0c 0c 0c 0c 0c 0c 0c 78 00 00 00 00 60     .<........x....`
     508:	60 66 66 6c 78 6c 66 66 00 00 00 00 00 00 00 78     `fflxlff.......x
     518:	18 18 18 18 18 18 18 7e 00 00 00 00 00 00 00 00     .......~........
     528:	00 7e 6b 6b 6b 6b 6b 63 00 00 00 00 00 00 00 00     .~kkkkkc........
     538:	00 7c 66 66 66 66 66 66 00 00 00 00 00 00 00 00     .|ffffff........
     548:	00 3c 66 66 66 66 66 3c 00 00 00 00 00 00 00 00     .<fffff<........
     558:	00 7c 66 66 66 66 66 7c 60 60 60 00 00 00 00 00     .|fffff|```.....
     568:	00 3e 66 66 66 66 66 3e 06 06 06 00 00 00 00 00     .>fffff>........
     578:	00 66 6e 70 60 60 60 60 00 00 00 00 00 00 00 00     .fnp````........
     588:	00 3e 60 60 3c 06 06 7c 00 00 00 00 00 00 00 30     .>``<..|.......0
     598:	30 7e 30 30 30 30 30 1e 00 00 00 00 00 00 00 00     0~00000.........
     5a8:	00 66 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .ffffff>........
     5b8:	00 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 00     .fffff<.........
     5c8:	00 63 6b 6b 6b 6b 36 36 00 00 00 00 00 00 00 00     .ckkkk66........
     5d8:	00 66 66 3c 18 3c 66 66 00 00 00 00 00 00 00 00     .ff<.<ff........
     5e8:	00 66 66 66 66 66 66 3c 0c 18 f0 00 00 00 00 00     .ffffff<........
     5f8:	00 7e 06 0c 18 30 60 7e 00 00 00 00 00 00 00 0c     .~...0`~........
     608:	18 18 18 30 60 30 18 18 18 0c 00 00 00 00 00 18     ...0`0..........
     618:	18 18 18 18 18 18 18 18 18 18 18 00 00 00 00 30     ...............0
     628:	18 18 18 0c 06 0c 18 18 18 30 00 00 00 00 00 71     .........0.....q
     638:	db 8e 00 00 00 00 00 00 00 00 00 00                 ............

00000644 <__ctors_end>:
     644:	11 24       	eor	r1, r1
     646:	1f be       	out	0x3f, r1	; 63
     648:	cf e5       	ldi	r28, 0x5F	; 95
     64a:	d8 e0       	ldi	r29, 0x08	; 8
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	cd bf       	out	0x3d, r28	; 61

00000650 <__do_copy_data>:
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	a0 e6       	ldi	r26, 0x60	; 96
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	ee e3       	ldi	r30, 0x3E	; 62
     658:	f6 e3       	ldi	r31, 0x36	; 54
     65a:	02 c0       	rjmp	.+4      	; 0x660 <.do_copy_data_start>

0000065c <.do_copy_data_loop>:
     65c:	05 90       	lpm	r0, Z+
     65e:	0d 92       	st	X+, r0

00000660 <.do_copy_data_start>:
     660:	ae 37       	cpi	r26, 0x7E	; 126
     662:	b1 07       	cpc	r27, r17
     664:	d9 f7       	brne	.-10     	; 0x65c <.do_copy_data_loop>

00000666 <__do_clear_bss>:
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	ae e7       	ldi	r26, 0x7E	; 126
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	01 c0       	rjmp	.+2      	; 0x670 <.do_clear_bss_start>

0000066e <.do_clear_bss_loop>:
     66e:	1d 92       	st	X+, r1

00000670 <.do_clear_bss_start>:
     670:	ab 38       	cpi	r26, 0x8B	; 139
     672:	b1 07       	cpc	r27, r17
     674:	e1 f7       	brne	.-8      	; 0x66e <.do_clear_bss_loop>
     676:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
     67a:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <_exit>

0000067e <__bad_interrupt>:
     67e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000682 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     682:	20 ed       	ldi	r18, 0xD0	; 208
     684:	37 e0       	ldi	r19, 0x07	; 7
     686:	03 c0       	rjmp	.+6      	; 0x68e <delay_ms+0xc>
     688:	f9 01       	movw	r30, r18
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <delay_ms+0x8>

// my delay
//
void delay_ms (int ms) {
	
	while (ms--) _delay_ms(1);
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	4f ef       	ldi	r20, 0xFF	; 255
     692:	8f 3f       	cpi	r24, 0xFF	; 255
     694:	94 07       	cpc	r25, r20
     696:	c1 f7       	brne	.-16     	; 0x688 <delay_ms+0x6>
}
     698:	08 95       	ret

0000069a <main>:

/////////////////
//
// Main prorgam
//
int main (void) {
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	c8 56       	subi	r28, 0x68	; 104
     6b8:	d0 40       	sbci	r29, 0x00	; 0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61

	char text[100];

	// Data bridge and extern clock Camera to LCD initialization
	//
	HC245_INIT();
     6c4:	8e 9a       	sbi	0x11, 6	; 17
	EXCLK_INIT();
     6c6:	b8 9a       	sbi	0x17, 0	; 23
	//
	// and disable it both
	//
	HC245_DISABLE();
     6c8:	96 9a       	sbi	0x12, 6	; 18
	EXCLK_DISABLE();
     6ca:	c0 98       	cbi	0x18, 0	; 24
	
	// KEY switch init
	//
	KEY_SW_INIT();
     6cc:	8d 98       	cbi	0x11, 5	; 17
     6ce:	95 9a       	sbi	0x12, 5	; 18
	//
	//ADC_INIT(0);
	
	// LCD initialize
	//
	LCD_DATA_OUPUT();
     6d0:	8f ef       	ldi	r24, 0xFF	; 255
     6d2:	84 bb       	out	0x14, r24	; 20
    LCD_Init();
     6d4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <LCD_Init>
	
	// TOUCH calibrate
	//
	//TOUCH_DOWN_INIT();
	TOUCH_Calibrate();
     6d8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <TOUCH_Calibrate>
	
	if (KEY_SW) {
     6dc:	85 99       	sbic	0x10, 5	; 16
     6de:	49 c0       	rjmp	.+146    	; 0x772 <main+0xd8>
		
		while(TOUCH_DOWN);
     6e0:	83 9b       	sbis	0x10, 3	; 16
     6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <main+0x46>
		sprintf(text, "Newman's touch circles.. ");
     6e4:	8e 01       	movw	r16, r28
     6e6:	0b 5f       	subi	r16, 0xFB	; 251
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	c8 01       	movw	r24, r16
     6ec:	60 e6       	ldi	r22, 0x60	; 96
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	0e 94 df 1a 	call	0x35be	; 0x35be <strcpy>
		LCD_WriteString(50,110, text, YELLOW, BLACK);
     6f4:	82 e3       	ldi	r24, 0x32	; 50
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	6e e6       	ldi	r22, 0x6E	; 110
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	a8 01       	movw	r20, r16
     6fe:	20 ee       	ldi	r18, 0xE0	; 224
     700:	3f ef       	ldi	r19, 0xFF	; 255
     702:	00 e0       	ldi	r16, 0x00	; 0
     704:	10 e0       	ldi	r17, 0x00	; 0
     706:	0e 94 5a 05 	call	0xab4	; 0xab4 <LCD_WriteString>
		while(!TOUCH_DOWN);
     70a:	83 99       	sbic	0x10, 3	; 16
     70c:	fe cf       	rjmp	.-4      	; 0x70a <main+0x70>
     70e:	2e c0       	rjmp	.+92     	; 0x76c <main+0xd2>
		
		while(true) {
			
			for(int i=0; i<50; i++) {
				
				LCD_DrawCircle(rand()%319, rand()%239, rand()%100, rand()<<1, true);
     710:	0e 94 cf 1a 	call	0x359e	; 0x359e <rand>
     714:	8c 01       	movw	r16, r24
     716:	0e 94 cf 1a 	call	0x359e	; 0x359e <rand>
     71a:	7c 01       	movw	r14, r24
     71c:	0e 94 cf 1a 	call	0x359e	; 0x359e <rand>
     720:	6c 01       	movw	r12, r24
     722:	0e 94 cf 1a 	call	0x359e	; 0x359e <rand>
     726:	9c 01       	movw	r18, r24
     728:	c8 01       	movw	r24, r16
     72a:	6f e3       	ldi	r22, 0x3F	; 63
     72c:	71 e0       	ldi	r23, 0x01	; 1
     72e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__divmodhi4>
     732:	8c 01       	movw	r16, r24
     734:	c7 01       	movw	r24, r14
     736:	6f ee       	ldi	r22, 0xEF	; 239
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__divmodhi4>
     73e:	fc 01       	movw	r30, r24
     740:	c6 01       	movw	r24, r12
     742:	64 e6       	ldi	r22, 0x64	; 100
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__divmodhi4>
     74a:	ac 01       	movw	r20, r24
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
     750:	c8 01       	movw	r24, r16
     752:	bf 01       	movw	r22, r30
     754:	01 e0       	ldi	r16, 0x01	; 1
     756:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
		LCD_WriteString(50,110, text, YELLOW, BLACK);
		while(!TOUCH_DOWN);
		
		while(true) {
			
			for(int i=0; i<50; i++) {
     75a:	08 94       	sec
     75c:	a1 1c       	adc	r10, r1
     75e:	b1 1c       	adc	r11, r1
     760:	82 e3       	ldi	r24, 0x32	; 50
     762:	a8 16       	cp	r10, r24
     764:	b1 04       	cpc	r11, r1
     766:	a4 f2       	brlt	.-88     	; 0x710 <main+0x76>
				
				LCD_DrawCircle(rand()%319, rand()%239, rand()%100, rand()<<1, true);
			}
			while(!TOUCH_DOWN);
     768:	83 99       	sbic	0x10, 3	; 16
     76a:	fe cf       	rjmp	.-4      	; 0x768 <main+0xce>
     76c:	aa 24       	eor	r10, r10
     76e:	bb 24       	eor	r11, r11
     770:	f7 cf       	rjmp	.-18     	; 0x760 <main+0xc6>
	}
	else {
		
		// draw
		//
		TOUCH_Reset();
     772:	0e 94 b5 14 	call	0x296a	; 0x296a <TOUCH_Reset>
     776:	cc 24       	eor	r12, r12
     778:	c3 94       	inc	r12
     77a:	ee 24       	eor	r14, r14
     77c:	ea 94       	dec	r14
     77e:	fe 2c       	mov	r15, r14
				}
			}
			
			// If is pen down
			//
			if (TOUCH_Get(&x, &y)) {
     780:	63 e0       	ldi	r22, 0x03	; 3
     782:	86 2e       	mov	r8, r22
     784:	91 2c       	mov	r9, r1
     786:	8c 0e       	add	r8, r28
     788:	9d 1e       	adc	r9, r29
     78a:	5e 01       	movw	r10, r28
     78c:	08 94       	sec
     78e:	a1 1c       	adc	r10, r1
     790:	b1 1c       	adc	r11, r1
     792:	77 c0       	rjmp	.+238    	; 0x882 <__stack+0x23>
			
			while(!TOUCH_DOWN) {
				
				// Do clear if back buttom is pressed
				//	
				if (KEY_SW || start) {
     794:	85 9b       	sbis	0x10, 5	; 16
     796:	03 c0       	rjmp	.+6      	; 0x79e <main+0x104>
     798:	cc 20       	and	r12, r12
     79a:	09 f4       	brne	.+2      	; 0x79e <main+0x104>
     79c:	72 c0       	rjmp	.+228    	; 0x882 <__stack+0x23>
					
					// Wait for button release
					//
					while(KEY_SW);
     79e:	85 9b       	sbis	0x10, 5	; 16
     7a0:	fe cf       	rjmp	.-4      	; 0x79e <main+0x104>
					
					start = false;
					
					LCD_Clear(BLACK);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LCD_Clear>
					
					// Show color bar
					//
					LCD_Fill(0, 200, 40, 35, BLACK);
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	68 ec       	ldi	r22, 0xC8	; 200
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	48 e2       	ldi	r20, 0x28	; 40
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	23 e2       	ldi	r18, 0x23	; 35
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	00 e0       	ldi	r16, 0x00	; 0
     7bc:	10 e0       	ldi	r17, 0x00	; 0
     7be:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(40, 200, 40, 35, BLUE);
     7c2:	88 e2       	ldi	r24, 0x28	; 40
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	68 ec       	ldi	r22, 0xC8	; 200
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	48 e2       	ldi	r20, 0x28	; 40
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	23 e2       	ldi	r18, 0x23	; 35
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	0f e1       	ldi	r16, 0x1F	; 31
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(80, 200, 40, 35, GREEN);
     7da:	80 e5       	ldi	r24, 0x50	; 80
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	68 ec       	ldi	r22, 0xC8	; 200
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	48 e2       	ldi	r20, 0x28	; 40
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	23 e2       	ldi	r18, 0x23	; 35
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	00 ee       	ldi	r16, 0xE0	; 224
     7ec:	17 e0       	ldi	r17, 0x07	; 7
     7ee:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(120, 200, 40, 35, RED);
     7f2:	88 e7       	ldi	r24, 0x78	; 120
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	68 ec       	ldi	r22, 0xC8	; 200
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	48 e2       	ldi	r20, 0x28	; 40
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	23 e2       	ldi	r18, 0x23	; 35
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	00 e0       	ldi	r16, 0x00	; 0
     804:	18 ef       	ldi	r17, 0xF8	; 248
     806:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(160, 200, 40, 35, MAGENTA);
     80a:	80 ea       	ldi	r24, 0xA0	; 160
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	68 ec       	ldi	r22, 0xC8	; 200
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	48 e2       	ldi	r20, 0x28	; 40
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	23 e2       	ldi	r18, 0x23	; 35
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	0f e1       	ldi	r16, 0x1F	; 31
     81c:	18 ef       	ldi	r17, 0xF8	; 248
     81e:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(200, 200, 40, 35, ORANGE);
     822:	88 ec       	ldi	r24, 0xC8	; 200
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	68 ec       	ldi	r22, 0xC8	; 200
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	48 e2       	ldi	r20, 0x28	; 40
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	23 e2       	ldi	r18, 0x23	; 35
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	00 e0       	ldi	r16, 0x00	; 0
     834:	1c ef       	ldi	r17, 0xFC	; 252
     836:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(240, 200, 40, 35, YELLOW);
     83a:	80 ef       	ldi	r24, 0xF0	; 240
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	68 ec       	ldi	r22, 0xC8	; 200
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	48 e2       	ldi	r20, 0x28	; 40
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	23 e2       	ldi	r18, 0x23	; 35
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	00 ee       	ldi	r16, 0xE0	; 224
     84c:	1f ef       	ldi	r17, 0xFF	; 255
     84e:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(280, 200, 40, 35, WHITE);
     852:	88 e1       	ldi	r24, 0x18	; 24
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	68 ec       	ldi	r22, 0xC8	; 200
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	48 e2       	ldi	r20, 0x28	; 40
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	23 e2       	ldi	r18, 0x23	; 35
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	0f ef       	ldi	r16, 0xFF	; 255
     864:	1f ef       	ldi	r17, 0xFF	; 255
     866:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					LCD_Fill(0, 235, 320, 5, color);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	6b ee       	ldi	r22, 0xEB	; 235
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	40 e4       	ldi	r20, 0x40	; 64
     874:	51 e0       	ldi	r21, 0x01	; 1
     876:	25 e0       	ldi	r18, 0x05	; 5
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	87 01       	movw	r16, r14
     87c:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
     880:	cc 24       	eor	r12, r12
		int x, y;
		unsigned int color = WHITE;

		while(true) {
			
			while(!TOUCH_DOWN) {
     882:	83 99       	sbic	0x10, 3	; 16
     884:	87 cf       	rjmp	.-242    	; 0x794 <main+0xfa>
				}
			}
			
			// If is pen down
			//
			if (TOUCH_Get(&x, &y)) {
     886:	c5 01       	movw	r24, r10
     888:	b4 01       	movw	r22, r8
     88a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <TOUCH_Get>
     88e:	88 23       	and	r24, r24
     890:	c1 f3       	breq	.-16     	; 0x882 <__stack+0x23>
				
				// Do draw
				//
				if (y < 200-2) {
     892:	6b 81       	ldd	r22, Y+3	; 0x03
     894:	7c 81       	ldd	r23, Y+4	; 0x04
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	66 3c       	cpi	r22, 0xC6	; 198
     89c:	71 05       	cpc	r23, r1
     89e:	3c f4       	brge	.+14     	; 0x8ae <__stack+0x4f>
					
					// Draw pen
					//
					LCD_DrawCircle(x, y, 1, color, true);
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	97 01       	movw	r18, r14
     8a6:	01 e0       	ldi	r16, 0x01	; 1
     8a8:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
     8ac:	ea cf       	rjmp	.-44     	; 0x882 <__stack+0x23>
				}
				else {	// if touch in the color table
					
					color = x/40;
     8ae:	68 e2       	ldi	r22, 0x28	; 40
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__divmodhi4>
     8b6:	7b 01       	movw	r14, r22
					switch (color) {
     8b8:	64 30       	cpi	r22, 0x04	; 4
     8ba:	71 05       	cpc	r23, r1
     8bc:	21 f1       	breq	.+72     	; 0x906 <__stack+0xa7>
     8be:	65 30       	cpi	r22, 0x05	; 5
     8c0:	71 05       	cpc	r23, r1
     8c2:	50 f4       	brcc	.+20     	; 0x8d8 <__stack+0x79>
     8c4:	62 30       	cpi	r22, 0x02	; 2
     8c6:	71 05       	cpc	r23, r1
     8c8:	a9 f0       	breq	.+42     	; 0x8f4 <__stack+0x95>
     8ca:	63 30       	cpi	r22, 0x03	; 3
     8cc:	71 05       	cpc	r23, r1
     8ce:	b8 f4       	brcc	.+46     	; 0x8fe <__stack+0x9f>
     8d0:	61 30       	cpi	r22, 0x01	; 1
     8d2:	71 05       	cpc	r23, r1
     8d4:	49 f5       	brne	.+82     	; 0x928 <__stack+0xc9>
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <__stack+0x8d>
     8d8:	66 30       	cpi	r22, 0x06	; 6
     8da:	71 05       	cpc	r23, r1
     8dc:	e9 f0       	breq	.+58     	; 0x918 <__stack+0xb9>
     8de:	66 30       	cpi	r22, 0x06	; 6
     8e0:	71 05       	cpc	r23, r1
     8e2:	b0 f0       	brcs	.+44     	; 0x910 <__stack+0xb1>
     8e4:	67 30       	cpi	r22, 0x07	; 7
     8e6:	71 05       	cpc	r23, r1
     8e8:	f9 f4       	brne	.+62     	; 0x928 <__stack+0xc9>
     8ea:	1b c0       	rjmp	.+54     	; 0x922 <__stack+0xc3>
     8ec:	5f e1       	ldi	r21, 0x1F	; 31
     8ee:	e5 2e       	mov	r14, r21
     8f0:	f1 2c       	mov	r15, r1
     8f2:	1a c0       	rjmp	.+52     	; 0x928 <__stack+0xc9>
					case 0:
						color = BLACK;
					break;
					case 1:
						color = BLUE;
					break;
     8f4:	40 ee       	ldi	r20, 0xE0	; 224
     8f6:	e4 2e       	mov	r14, r20
     8f8:	47 e0       	ldi	r20, 0x07	; 7
     8fa:	f4 2e       	mov	r15, r20
     8fc:	15 c0       	rjmp	.+42     	; 0x928 <__stack+0xc9>
					case 2:
						color = GREEN;
					break;
     8fe:	e1 2c       	mov	r14, r1
     900:	38 ef       	ldi	r19, 0xF8	; 248
     902:	f3 2e       	mov	r15, r19
     904:	11 c0       	rjmp	.+34     	; 0x928 <__stack+0xc9>
					case 3:
						color = RED;
					break;
     906:	2f e1       	ldi	r18, 0x1F	; 31
     908:	e2 2e       	mov	r14, r18
     90a:	28 ef       	ldi	r18, 0xF8	; 248
     90c:	f2 2e       	mov	r15, r18
     90e:	0c c0       	rjmp	.+24     	; 0x928 <__stack+0xc9>
					case 4:
						color = MAGENTA;
					break;
     910:	e1 2c       	mov	r14, r1
     912:	9c ef       	ldi	r25, 0xFC	; 252
     914:	f9 2e       	mov	r15, r25
     916:	08 c0       	rjmp	.+16     	; 0x928 <__stack+0xc9>
					case 5:
						color = ORANGE;
					break;
     918:	80 ee       	ldi	r24, 0xE0	; 224
     91a:	e8 2e       	mov	r14, r24
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	f8 2e       	mov	r15, r24
     920:	03 c0       	rjmp	.+6      	; 0x928 <__stack+0xc9>
					case 6:
						color = YELLOW;
					break;
     922:	ee 24       	eor	r14, r14
     924:	ea 94       	dec	r14
     926:	fe 2c       	mov	r15, r14
					break;
					}
					
					// Show color in color line
					//
					LCD_Fill(0, 235, 320, 5, color);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	6b ee       	ldi	r22, 0xEB	; 235
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	40 e4       	ldi	r20, 0x40	; 64
     932:	51 e0       	ldi	r21, 0x01	; 1
     934:	25 e0       	ldi	r18, 0x05	; 5
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	87 01       	movw	r16, r14
     93a:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
					while(TOUCH_DOWN);
     93e:	83 9b       	sbis	0x10, 3	; 16
     940:	fe cf       	rjmp	.-4      	; 0x93e <__stack+0xdf>
     942:	9f cf       	rjmp	.-194    	; 0x882 <__stack+0x23>

00000944 <LCD_WR_DATA>:
//
// write data to LCD bus
//
void LCD_WR_DATA (unsigned int data) {

	LCD_RD_H();
     944:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     946:	de 9a       	sbi	0x1b, 6	; 27
    LCD_CS_L();  
     948:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     94a:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data>>8;
     94c:	95 bb       	out	0x15, r25	; 21
	
    LCD_WR_H();
     94e:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     950:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data&0XFF; 
     952:	85 bb       	out	0x15, r24	; 21
	
    LCD_WR_H();
     954:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     956:	dd 9a       	sbi	0x1b, 5	; 27
}
     958:	08 95       	ret

0000095a <LCD_WR_INDEX>:
//
// Write register index
//
void LCD_WR_INDEX (unsigned int index) {

    LCD_RD_H();
     95a:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_L();
     95c:	de 98       	cbi	0x1b, 6	; 27
    LCD_CS_L();  
     95e:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     960:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index>>8; 
     962:	95 bb       	out	0x15, r25	; 21

    LCD_WR_H();
     964:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     966:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index&0XFF; 
     968:	85 bb       	out	0x15, r24	; 21

    LCD_WR_H();
     96a:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     96c:	dd 9a       	sbi	0x1b, 5	; 27
}
     96e:	08 95       	ret

00000970 <LCD_WR_REGISTER>:

///////////////////
//
// Write register
//
void LCD_WR_REGISTER (unsigned int index,unsigned int data) {
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	8b 01       	movw	r16, r22

    LCD_WR_INDEX(index);
     976:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WR_INDEX>
    LCD_WR_DATA(data);
     97a:	c8 01       	movw	r24, r16
     97c:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WR_DATA>
}
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <LCD_Scroll>:

///////////////////
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {
     986:	bc 01       	movw	r22, r24
     988:	02 c0       	rjmp	.+4      	; 0x98e <LCD_Scroll+0x8>

    while (y < 0)
        y += 320;
     98a:	60 5c       	subi	r22, 0xC0	; 192
     98c:	7e 4f       	sbci	r23, 0xFE	; 254
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {

    while (y < 0)
     98e:	77 fd       	sbrc	r23, 7
     990:	fc cf       	rjmp	.-8      	; 0x98a <LCD_Scroll+0x4>
     992:	02 c0       	rjmp	.+4      	; 0x998 <LCD_Scroll+0x12>
        y += 320;
	
    while (y >= 320)
        y -= 320;
     994:	60 54       	subi	r22, 0x40	; 64
     996:	71 40       	sbci	r23, 0x01	; 1
void LCD_Scroll (int y) {

    while (y < 0)
        y += 320;
	
    while (y >= 320)
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	60 34       	cpi	r22, 0x40	; 64
     99c:	78 07       	cpc	r23, r24
     99e:	d4 f7       	brge	.-12     	; 0x994 <LCD_Scroll+0xe>
        y -= 320;
	
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, y);
     9a0:	8a e6       	ldi	r24, 0x6A	; 106
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
}
     9a8:	08 95       	ret

000009aa <LCD_SetBounds>:

////////////////////////////////////////
//
// LCD_SetBounds(x, y, width, height);
//
void LCD_SetBounds (unsigned int x, unsigned int y, unsigned int width, unsigned int height) {
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	7c 01       	movw	r14, r24
     9c0:	8b 01       	movw	r16, r22
     9c2:	4a 01       	movw	r8, r20
     9c4:	59 01       	movw	r10, r18

	// my Vertical
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     9c6:	8f ee       	ldi	r24, 0xEF	; 239
     9c8:	c8 2e       	mov	r12, r24
     9ca:	d1 2c       	mov	r13, r1
     9cc:	c6 1a       	sub	r12, r22
     9ce:	d7 0a       	sbc	r13, r23
     9d0:	80 e2       	ldi	r24, 0x20	; 32
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	b6 01       	movw	r22, r12
     9d6:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_START, LCD_MAX_HEIGHT -y -height);
     9da:	10 95       	com	r17
     9dc:	01 95       	neg	r16
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	00 51       	subi	r16, 0x10	; 16
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
     9e4:	0a 19       	sub	r16, r10
     9e6:	1b 09       	sbc	r17, r11
     9e8:	80 e5       	ldi	r24, 0x50	; 80
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	b8 01       	movw	r22, r16
     9ee:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_END, LCD_MAX_HEIGHT -y -1);
     9f2:	81 e5       	ldi	r24, 0x51	; 81
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	b6 01       	movw	r22, r12
     9f8:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// my Horizontal
	//
	LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);
     9fc:	81 e2       	ldi	r24, 0x21	; 33
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	b7 01       	movw	r22, r14
     a02:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_START, x);
     a06:	82 e5       	ldi	r24, 0x52	; 82
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	b7 01       	movw	r22, r14
     a0c:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_END, x + width -1);
     a10:	08 94       	sec
     a12:	e1 08       	sbc	r14, r1
     a14:	f1 08       	sbc	r15, r1
     a16:	e8 0c       	add	r14, r8
     a18:	f9 1c       	adc	r15, r9
     a1a:	83 e5       	ldi	r24, 0x53	; 83
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// Set Read & Write data registrer
	//
	LCD_WR_GRAM;
     a24:	82 e2       	ldi	r24, 0x22	; 34
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WR_INDEX>
}
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	bf 90       	pop	r11
     a3a:	af 90       	pop	r10
     a3c:	9f 90       	pop	r9
     a3e:	8f 90       	pop	r8
     a40:	08 95       	ret

00000a42 <LCD_WriteChar>:

///////////////////////////////////////////////
//
// LCD_WriteChar(x, y, ichar, color, bcolor);
//
void LCD_WriteChar (unsigned int x, unsigned int y, char ichar, unsigned int color, unsigned int bcolor) {
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	f4 2e       	mov	r15, r20
     a56:	59 01       	movw	r10, r18
     a58:	68 01       	movw	r12, r16

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
     a5a:	48 e0       	ldi	r20, 0x08	; 8
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	20 e1       	ldi	r18, 0x10	; 16
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_SetBounds>
     a66:	cf 2d       	mov	r28, r15
     a68:	d0 e0       	ldi	r29, 0x00	; 0
     a6a:	94 e0       	ldi	r25, 0x04	; 4
     a6c:	cc 0f       	add	r28, r28
     a6e:	dd 1f       	adc	r29, r29
     a70:	9a 95       	dec	r25
     a72:	e1 f7       	brne	.-8      	; 0xa6c <LCD_WriteChar+0x2a>
     a74:	cc 5a       	subi	r28, 0xAC	; 172
     a76:	d1 40       	sbci	r29, 0x01	; 1
     a78:	00 e0       	ldi	r16, 0x00	; 0
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
     a7a:	fe 01       	movw	r30, r28
     a7c:	f4 90       	lpm	r15, Z+
     a7e:	10 e0       	ldi	r17, 0x00	; 0
		
		for(column = 0; column < 8; column++) {
			
			if (data & 0x80)
     a80:	f7 fe       	sbrs	r15, 7
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <LCD_WriteChar+0x46>
				
				LCD_WR_DATA(color);
     a84:	c5 01       	movw	r24, r10
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <LCD_WriteChar+0x48>
			else
				LCD_WR_DATA(bcolor);
     a88:	c6 01       	movw	r24, r12
     a8a:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WR_DATA>
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
		
		for(column = 0; column < 8; column++) {
     a8e:	1f 5f       	subi	r17, 0xFF	; 255
     a90:	18 30       	cpi	r17, 0x08	; 8
     a92:	11 f0       	breq	.+4      	; 0xa98 <LCD_WriteChar+0x56>
				
				LCD_WR_DATA(color);
			else
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
     a94:	ff 0c       	add	r15, r15
     a96:	f4 cf       	rjmp	.-24     	; 0xa80 <LCD_WriteChar+0x3e>

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
  
	for(line = 0; line < 16; line++) {
     a98:	0f 5f       	subi	r16, 0xFF	; 255
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	00 31       	cpi	r16, 0x10	; 16
     a9e:	69 f7       	brne	.-38     	; 0xa7a <LCD_WriteChar+0x38>
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
		}
	}
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	bf 90       	pop	r11
     ab0:	af 90       	pop	r10
     ab2:	08 95       	ret

00000ab4 <LCD_WriteString>:

//////////////////////////////////////////////////
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	7c 01       	movw	r14, r24
     ace:	4b 01       	movw	r8, r22
     ad0:	ea 01       	movw	r28, r20
     ad2:	59 01       	movw	r10, r18
     ad4:	68 01       	movw	r12, r16
     ad6:	0b c0       	rjmp	.+22     	; 0xaee <LCD_WriteString+0x3a>

	while(*string) {
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
     ad8:	21 96       	adiw	r28, 0x01	; 1
     ada:	c7 01       	movw	r24, r14
     adc:	b4 01       	movw	r22, r8
     ade:	95 01       	movw	r18, r10
     ae0:	86 01       	movw	r16, r12
     ae2:	0e 94 21 05 	call	0xa42	; 0xa42 <LCD_WriteChar>
		x += 8;
     ae6:	88 e0       	ldi	r24, 0x08	; 8
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	e8 0e       	add	r14, r24
     aec:	f9 1e       	adc	r15, r25
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {

	while(*string) {
     aee:	48 81       	ld	r20, Y
     af0:	44 23       	and	r20, r20
     af2:	91 f7       	brne	.-28     	; 0xad8 <LCD_WriteString+0x24>
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
		x += 8;
	}
	
	LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	40 e4       	ldi	r20, 0x40	; 64
     afe:	51 e0       	ldi	r21, 0x01	; 1
     b00:	20 ef       	ldi	r18, 0xF0	; 240
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_SetBounds>
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	08 95       	ret

00000b22 <LCD_Fill>:
//
// LCD_Fill(x, y, width, height, color);
//
// color is RGB(5-6-5) format
//
void LCD_Fill (int x, int y, unsigned int width, unsigned int height, unsigned int color) {
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	78 01       	movw	r14, r16

	unsigned long index;
    int right = x + width;
     b30:	48 0f       	add	r20, r24
     b32:	59 1f       	adc	r21, r25
    int bottom = y + height;

	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
     b34:	e1 e0       	ldi	r30, 0x01	; 1
     b36:	41 34       	cpi	r20, 0x41	; 65
     b38:	5e 07       	cpc	r21, r30
     b3a:	14 f0       	brlt	.+4      	; 0xb40 <LCD_Fill+0x1e>
     b3c:	40 e4       	ldi	r20, 0x40	; 64
     b3e:	51 e0       	ldi	r21, 0x01	; 1
    bottom = min(bottom, LCD_MAX_HEIGHT);
	
    x = max(x, 0);
     b40:	97 ff       	sbrs	r25, 7
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <LCD_Fill+0x26>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
    y = max(y, 0);
	
    width = right - x;
     b48:	8a 01       	movw	r16, r20
     b4a:	08 1b       	sub	r16, r24
     b4c:	19 0b       	sbc	r17, r25
    height = bottom - y;
	
    if ((width <= 0) || (height <= 0) || (bottom < 0))
     b4e:	a9 f1       	breq	.+106    	; 0xbba <LCD_Fill+0x98>
//
void LCD_Fill (int x, int y, unsigned int width, unsigned int height, unsigned int color) {

	unsigned long index;
    int right = x + width;
    int bottom = y + height;
     b50:	26 0f       	add	r18, r22
     b52:	37 1f       	adc	r19, r23

	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
    bottom = min(bottom, LCD_MAX_HEIGHT);
     b54:	21 3f       	cpi	r18, 0xF1	; 241
     b56:	31 05       	cpc	r19, r1
     b58:	14 f0       	brlt	.+4      	; 0xb5e <LCD_Fill+0x3c>
     b5a:	20 ef       	ldi	r18, 0xF0	; 240
     b5c:	30 e0       	ldi	r19, 0x00	; 0
	
    x = max(x, 0);
    y = max(y, 0);
     b5e:	77 ff       	sbrs	r23, 7
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <LCD_Fill+0x44>
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 e0       	ldi	r23, 0x00	; 0
	
    width = right - x;
    height = bottom - y;
     b66:	e9 01       	movw	r28, r18
     b68:	c6 1b       	sub	r28, r22
     b6a:	d7 0b       	sbc	r29, r23
	
    if ((width <= 0) || (height <= 0) || (bottom < 0))
     b6c:	31 f1       	breq	.+76     	; 0xbba <LCD_Fill+0x98>
     b6e:	37 fd       	sbrc	r19, 7
     b70:	24 c0       	rjmp	.+72     	; 0xbba <LCD_Fill+0x98>
		return;
	
	if ((y >= LCD_MAX_HEIGHT) || (right < 0) || (x >= LCD_MAX_WIDTH))
     b72:	60 3f       	cpi	r22, 0xF0	; 240
     b74:	71 05       	cpc	r23, r1
     b76:	0c f5       	brge	.+66     	; 0xbba <LCD_Fill+0x98>
     b78:	57 fd       	sbrc	r21, 7
     b7a:	1f c0       	rjmp	.+62     	; 0xbba <LCD_Fill+0x98>
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	80 34       	cpi	r24, 0x40	; 64
     b80:	92 07       	cpc	r25, r18
     b82:	dc f4       	brge	.+54     	; 0xbba <LCD_Fill+0x98>
        return;    

	// Set bounds
	//
	LCD_SetBounds(x, y, width, height);
     b84:	a8 01       	movw	r20, r16
     b86:	9e 01       	movw	r18, r28
     b88:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_SetBounds>
	
	// LCD select enable
	//
	LCD_RD_H();
     b8c:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     b8e:	de 9a       	sbi	0x1b, 6	; 27
	LCD_CS_L();
     b90:	dd 98       	cbi	0x1b, 5	; 27
	
	index = (unsigned long)width *height;
     b92:	be 01       	movw	r22, r28
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	98 01       	movw	r18, r16
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>

	while(index--) {
		
		LCD_WR_L();
     ba2:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color>>8; 
     ba4:	f5 ba       	out	0x15, r15	; 21
		
		LCD_WR_H();
     ba6:	c3 98       	cbi	0x18, 3	; 24
		LCD_WR_L();
     ba8:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color&0XFF; 
     baa:	e5 ba       	out	0x15, r14	; 21
		
		LCD_WR_H();
     bac:	c3 98       	cbi	0x18, 3	; 24
     bae:	61 50       	subi	r22, 0x01	; 1
     bb0:	70 40       	sbci	r23, 0x00	; 0
     bb2:	80 40       	sbci	r24, 0x00	; 0
     bb4:	90 40       	sbci	r25, 0x00	; 0
	LCD_RS_H();
	LCD_CS_L();
	
	index = (unsigned long)width *height;

	while(index--) {
     bb6:	a9 f7       	brne	.-22     	; 0xba2 <LCD_Fill+0x80>
		LCD_WR_H();
	}
 
	// LCD select disable
	//
	LCD_CS_H();
     bb8:	dd 9a       	sbi	0x1b, 5	; 27
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	08 95       	ret

00000bc8 <LCD_Clear>:
//
// LCD_Clear(color);
//
// color is RGB(5-6-5) format
//
void LCD_Clear (unsigned int color) {
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	8c 01       	movw	r16, r24

	LCD_Fill(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT, color);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	40 e4       	ldi	r20, 0x40	; 64
     bd8:	51 e0       	ldi	r21, 0x01	; 1
     bda:	20 ef       	ldi	r18, 0xF0	; 240
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
}
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <LCD_Init>:
//
// LCD initialization
//
void LCD_Init (void) {

	LCD_PORT_INI();
     be8:	8f 9a       	sbi	0x11, 7	; 17
     bea:	d5 9a       	sbi	0x1a, 5	; 26
     bec:	d6 9a       	sbi	0x1a, 6	; 26
     bee:	bb 9a       	sbi	0x17, 3	; 23
     bf0:	d7 9a       	sbi	0x1a, 7	; 26
     bf2:	b9 9a       	sbi	0x17, 1	; 23
 
	// LCD Reset
	//
	LCD_RST_L();
     bf4:	c1 98       	cbi	0x18, 1	; 24
     bf6:	88 ee       	ldi	r24, 0xE8	; 232
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	28 ec       	ldi	r18, 0xC8	; 200
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	f9 01       	movw	r30, r18
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <LCD_Init+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c04:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c06:	d9 f7       	brne	.-10     	; 0xbfe <LCD_Init+0x16>
	_delay_ms(100);
	LCD_RST_H();
     c08:	c1 9a       	sbi	0x18, 1	; 24
     c0a:	88 ee       	ldi	r24, 0xE8	; 232
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	28 ec       	ldi	r18, 0xC8	; 200
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	f9 01       	movw	r30, r18
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <LCD_Init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	d9 f7       	brne	.-10     	; 0xc12 <LCD_Init+0x2a>
	_delay_ms(100); 
	
	// SET registers
	//
	LCD_WR_REGISTER(0x00E3,0x3008); 					// Set the internal timing;   
     c1c:	83 ee       	ldi	r24, 0xE3	; 227
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	68 e0       	ldi	r22, 0x08	; 8
     c22:	70 e3       	ldi	r23, 0x30	; 48
     c24:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00E7,0x0012); 					// Set the internal timing;   
     c28:	87 ee       	ldi	r24, 0xE7	; 231
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	62 e1       	ldi	r22, 0x12	; 18
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00Ef,0x1231); 					// Set the internal timing;   
     c34:	8f ee       	ldi	r24, 0xEF	; 239
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	61 e3       	ldi	r22, 0x31	; 49
     c3a:	72 e1       	ldi	r23, 0x12	; 18
     c3c:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_START_OSC,0x0001);				// Start Oscilator
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
     c4c:	84 ef       	ldi	r24, 0xF4	; 244
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	28 ec       	ldi	r18, 0xC8	; 200
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LCD_Init+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5c:	d9 f7       	brne	.-10     	; 0xc54 <LCD_Init+0x6c>
	_delay_ms(50);

    LCD_WR_REGISTER(LCD_DRIVE_OUTPUT, 0x0000);			// Set standard drive mode
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_DRIVE_WAVE, 0x0700);			// Line inversion
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	77 e0       	ldi	r23, 0x07	; 7
     c72:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// 16 bits System interface (65536 colors)
	//
	LCD_WR_REGISTER(LCD_ENTRY_MODE,0x1028); 			// [12]BRG mode, [5:4]display rotate and [3]Landscape
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	68 e2       	ldi	r22, 0x28	; 40
     c7c:	70 e1       	ldi	r23, 0x10	; 16
     c7e:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_RESIZE_CTRL, 0x0000);			// No resize
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL2, 0x0202);			// Back & front porch = 2
     c8e:	88 e0       	ldi	r24, 0x08	; 8
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	62 e0       	ldi	r22, 0x02	; 2
     c94:	72 e0       	ldi	r23, 0x02	; 2
     c96:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL3, 0x0000);			// Non-display area refresh cycle
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL4, 0x0000);			// FMARK function OFF
     ca6:	8a e0       	ldi	r24, 0x0A	; 10
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
				
	// Select System interface
	//
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE1, 0x0000);	// 16-bit RGB interface, internal clock (Still pictures))
     cb2:	8c e0       	ldi	r24, 0x0C	; 12
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_FRM_MARKER_POS, 0x0000);		// Frame marker Position
     cbe:	8d e0       	ldi	r24, 0x0D	; 13
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE2, 0x0000);	// RGB interface polarity
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>

	// Power On sequence 
	//
	LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x0000);
     cd6:	80 e1       	ldi	r24, 0x10	; 16
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0007);			// Vci x1
     ce2:	81 e1       	ldi	r24, 0x11	; 17
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	67 e0       	ldi	r22, 0x07	; 7
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x0000);
     cee:	82 e1       	ldi	r24, 0x12	; 18
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x0000);
     cfa:	83 e1       	ldi	r24, 0x13	; 19
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
     d06:	80 ed       	ldi	r24, 0xD0	; 208
     d08:	97 e0       	ldi	r25, 0x07	; 7
     d0a:	28 ec       	ldi	r18, 0xC8	; 200
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	f9 01       	movw	r30, r18
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <LCD_Init+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d16:	d9 f7       	brne	.-10     	; 0xd0e <LCD_Init+0x126>
    _delay_ms(200);										// Dis-charge capacitor power voltage
    
    LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x1590);			// Power supply startup, Source driver enable
     d18:	80 e1       	ldi	r24, 0x10	; 16
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	60 e9       	ldi	r22, 0x90	; 144
     d1e:	75 e1       	ldi	r23, 0x15	; 21
     d20:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0227);			// Step-up circuit1	Fosc/4, Step-up circuit2 Fosc/16
     d24:	81 e1       	ldi	r24, 0x11	; 17
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	67 e2       	ldi	r22, 0x27	; 39
     d2a:	72 e0       	ldi	r23, 0x02	; 2
     d2c:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
     d30:	84 ef       	ldi	r24, 0xF4	; 244
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	28 ec       	ldi	r18, 0xC8	; 200
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	f9 01       	movw	r30, r18
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <LCD_Init+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d40:	d9 f7       	brne	.-10     	; 0xd38 <LCD_Init+0x150>
    _delay_ms(50);

	LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x001e);			// Internal reference voltage= Vci;
     d42:	82 e1       	ldi	r24, 0x12	; 18
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	6e e1       	ldi	r22, 0x1E	; 30
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
     d4e:	84 ef       	ldi	r24, 0xF4	; 244
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	28 ec       	ldi	r18, 0xC8	; 200
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f9 01       	movw	r30, r18
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <LCD_Init+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5e:	d9 f7       	brne	.-10     	; 0xd56 <LCD_Init+0x16e>
    _delay_ms(50);
	
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x1500);			// VCOM amplitude x1.04
     d60:	83 e1       	ldi	r24, 0x13	; 19
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	75 e1       	ldi	r23, 0x15	; 21
     d68:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL7, 0x0026);			// VCOMH x0.875
     d6c:	89 e2       	ldi	r24, 0x29	; 41
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	66 e2       	ldi	r22, 0x26	; 38
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
     d78:	84 ef       	ldi	r24, 0xF4	; 244
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	28 ec       	ldi	r18, 0xC8	; 200
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	f9 01       	movw	r30, r18
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <LCD_Init+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d88:	d9 f7       	brne	.-10     	; 0xd80 <LCD_Init+0x198>
    _delay_ms(50);
    
	// Adjust the Gamma Curve
	//
	LCD_WR_REGISTER(LCD_GAMMA_CTRL1,0x0007);
     d8a:	80 e3       	ldi	r24, 0x30	; 48
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	67 e0       	ldi	r22, 0x07	; 7
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL2,0x0707);
     d96:	81 e3       	ldi	r24, 0x31	; 49
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	77 e0       	ldi	r23, 0x07	; 7
     d9e:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL3,0x0107);
     da2:	82 e3       	ldi	r24, 0x32	; 50
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	67 e0       	ldi	r22, 0x07	; 7
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL4,0x0206);
     dae:	85 e3       	ldi	r24, 0x35	; 53
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	66 e0       	ldi	r22, 0x06	; 6
     db4:	72 e0       	ldi	r23, 0x02	; 2
     db6:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL5,0x0406);
     dba:	86 e3       	ldi	r24, 0x36	; 54
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	66 e0       	ldi	r22, 0x06	; 6
     dc0:	74 e0       	ldi	r23, 0x04	; 4
     dc2:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL6,0x0101);
     dc6:	87 e3       	ldi	r24, 0x37	; 55
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	71 e0       	ldi	r23, 0x01	; 1
     dce:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL7,0x0101);
     dd2:	88 e3       	ldi	r24, 0x38	; 56
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	71 e0       	ldi	r23, 0x01	; 1
     dda:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL8,0x0207);
     dde:	89 e3       	ldi	r24, 0x39	; 57
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	67 e0       	ldi	r22, 0x07	; 7
     de4:	72 e0       	ldi	r23, 0x02	; 2
     de6:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL9,0x0504);
     dea:	8c e3       	ldi	r24, 0x3C	; 60
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	64 e0       	ldi	r22, 0x04	; 4
     df0:	75 e0       	ldi	r23, 0x05	; 5
     df2:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL10,0x0806);
     df6:	8d e3       	ldi	r24, 0x3D	; 61
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	66 e0       	ldi	r22, 0x06	; 6
     dfc:	78 e0       	ldi	r23, 0x08	; 8
     dfe:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// Set frame rate
	//
	LCD_WR_REGISTER(LCD_FRAME_RATE, 0x000F);
     e02:	8b e2       	ldi	r24, 0x2B	; 43
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	6f e0       	ldi	r22, 0x0F	; 15
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// Set GRAM area
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS,0x0000);			// Horizontal GRAM address
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS,0x0000);			// Vertical GRAM address
     e1a:	81 e2       	ldi	r24, 0x21	; 33
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_START, 0x0000);		// Horizontal GRAM Start Address
     e26:	80 e5       	ldi	r24, 0x50	; 80
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_END, 0x00EF);		// Horizontal GRAM End Address
     e32:	81 e5       	ldi	r24, 0x51	; 81
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	6f ee       	ldi	r22, 0xEF	; 239
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_START, 0x0000);		// Vertical GRAM Start Address
     e3e:	82 e5       	ldi	r24, 0x52	; 82
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_END, 0x013F);			// Vertical GRAM Start Address
     e4a:	83 e5       	ldi	r24, 0x53	; 83
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	6f e3       	ldi	r22, 0x3F	; 63
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// Gater scan control
	//
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL1, 0x2700);		// Gate Scan for 320 lines
     e56:	80 e6       	ldi	r24, 0x60	; 96
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	77 e2       	ldi	r23, 0x27	; 39
     e5e:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL2, 0x0003);		// From G1 to G320, vertical scroll enable
     e62:	81 e6       	ldi	r24, 0x61	; 97
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	63 e0       	ldi	r22, 0x03	; 3
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, 0x0000);		// Set scrolling line to 0x00
     e6e:	8a e6       	ldi	r24, 0x6A	; 106
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// Partial display control (not used for now)
	//
	LCD_WR_REGISTER(LCD_PART_IMG1_DISP_POS, 0x0000);
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_START_AD, 0x0000);
     e86:	81 e8       	ldi	r24, 0x81	; 129
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_END_AD, 0x0000);
     e92:	82 e8       	ldi	r24, 0x82	; 130
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_DISP_POS, 0x0000);
     e9e:	83 e8       	ldi	r24, 0x83	; 131
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_START_AD, 0x0000);
     eaa:	84 e8       	ldi	r24, 0x84	; 132
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_END_AD, 0x0000);
     eb6:	85 e8       	ldi	r24, 0x85	; 133
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>

	// Panel interface control
	//
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE1, 0x0010);		// 16 clocks per line
     ec2:	80 e9       	ldi	r24, 0x90	; 144
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	60 e1       	ldi	r22, 0x10	; 16
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE2, 0x0600);		// try 0x00 // gate output non-overlap 6 clocks period
     ece:	82 e9       	ldi	r24, 0x92	; 146
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	76 e0       	ldi	r23, 0x06	; 6
     ed6:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE3, 0x0003);		// ???
     eda:	83 e9       	ldi	r24, 0x93	; 147
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	63 e0       	ldi	r22, 0x03	; 3
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE4, 0x0110);		// H1 - 16 clocks per line period, 4 DOTCLKS division ratio with RGB synchron
     ee6:	85 e9       	ldi	r24, 0x95	; 149
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	60 e1       	ldi	r22, 0x10	; 16
     eec:	71 e0       	ldi	r23, 0x01	; 1
     eee:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE5, 0x0000);		// ???
     ef2:	87 e9       	ldi	r24, 0x97	; 151
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE6, 0x0000);		// ???
     efe:	88 e9       	ldi	r24, 0x98	; 152
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	
	// Display ON with 262K color, normal display follow
	//
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL1, 0x0133); 
     f0a:	87 e0       	ldi	r24, 0x07	; 7
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	63 e3       	ldi	r22, 0x33	; 51
     f10:	71 e0       	ldi	r23, 0x01	; 1
     f12:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_Clear(BLACK);
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LCD_Clear>
	
	// Set LCD backlight on
	//
	LCD_BL_H();	
     f1e:	97 9a       	sbi	0x12, 7	; 18

}
     f20:	08 95       	ret

00000f22 <LCD_SetPoint>:

///////////////////////////////
//
// LCD_SetPoint(x, y, color);
//
void LCD_SetPoint (unsigned int x, unsigned int y,unsigned int color) {
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	8a 01       	movw	r16, r20

	if ((x >= LCD_MAX_WIDTH) || (y >= LCD_MAX_HEIGHT))
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	c0 34       	cpi	r28, 0x40	; 64
     f34:	d2 07       	cpc	r29, r18
     f36:	b8 f4       	brcc	.+46     	; 0xf66 <LCD_SetPoint+0x44>
     f38:	60 3f       	cpi	r22, 0xF0	; 240
     f3a:	71 05       	cpc	r23, r1
     f3c:	a0 f4       	brcc	.+40     	; 0xf66 <LCD_SetPoint+0x44>
		return;
	
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     f3e:	6f ee       	ldi	r22, 0xEF	; 239
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	68 1b       	sub	r22, r24
     f44:	79 0b       	sbc	r23, r25
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);   
     f4e:	81 e2       	ldi	r24, 0x21	; 33
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	be 01       	movw	r22, r28
     f54:	0e 94 b8 04 	call	0x970	; 0x970 <LCD_WR_REGISTER>
	LCD_WR_GRAM;
     f58:	82 e2       	ldi	r24, 0x22	; 34
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_WR_INDEX>
	LCD_WR_DATA(color);
     f60:	c8 01       	movw	r24, r16
     f62:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_WR_DATA>
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	08 95       	ret

00000f70 <LCD_DrawLine>:

/////////////////////////////////////////
//
// LCD_DrawLine(x, y, xx, yy, color);
//
void LCD_DrawLine (unsigned int x, unsigned int y, unsigned int xx, unsigned int yy, unsigned int color) {
     f70:	2f 92       	push	r2
     f72:	3f 92       	push	r3
     f74:	4f 92       	push	r4
     f76:	5f 92       	push	r5
     f78:	6f 92       	push	r6
     f7a:	7f 92       	push	r7
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	28 97       	sbiw	r28, 0x08	; 8
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	2b 01       	movw	r4, r22
     faa:	1c 83       	std	Y+4, r17	; 0x04
     fac:	0b 83       	std	Y+3, r16	; 0x03
    int xerr=0, yerr=0, delta_x, delta_y;
    int incx, incy;

    // Compute the distances in both directions
	//
    delta_x = xx - x;
     fae:	48 1b       	sub	r20, r24
     fb0:	59 0b       	sbc	r21, r25
    delta_y = yy - y;
     fb2:	26 1b       	sub	r18, r22
     fb4:	37 0b       	sbc	r19, r23

    // Compute the direction of the increment,
    // an increment of 0 means either a horizontal or vertical line.
	//
    if(delta_x > 0) 
     fb6:	14 16       	cp	r1, r20
     fb8:	15 06       	cpc	r1, r21
     fba:	24 f4       	brge	.+8      	; 0xfc4 <LCD_DrawLine+0x54>
     fbc:	71 e0       	ldi	r23, 0x01	; 1
     fbe:	27 2e       	mov	r2, r23
     fc0:	31 2c       	mov	r3, r1
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <LCD_DrawLine+0x66>
		
		incx = 1;
    else 
	if(delta_x == 0) 
     fc4:	41 15       	cp	r20, r1
     fc6:	51 05       	cpc	r21, r1
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <LCD_DrawLine+0x62>
     fca:	22 24       	eor	r2, r2
     fcc:	2a 94       	dec	r2
     fce:	32 2c       	mov	r3, r2
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <LCD_DrawLine+0x66>
     fd2:	22 24       	eor	r2, r2
     fd4:	33 24       	eor	r3, r3
		
		incx=0;
    else 
		incx = -1;

    if(delta_y > 0)
     fd6:	12 16       	cp	r1, r18
     fd8:	13 06       	cpc	r1, r19
     fda:	24 f4       	brge	.+8      	; 0xfe4 <LCD_DrawLine+0x74>
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	66 2e       	mov	r6, r22
     fe0:	71 2c       	mov	r7, r1
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <LCD_DrawLine+0x86>
		
		incy = 1;
    else 
	if(delta_y == 0)
     fe4:	21 15       	cp	r18, r1
     fe6:	31 05       	cpc	r19, r1
     fe8:	21 f0       	breq	.+8      	; 0xff2 <LCD_DrawLine+0x82>
     fea:	66 24       	eor	r6, r6
     fec:	6a 94       	dec	r6
     fee:	76 2c       	mov	r7, r6
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <LCD_DrawLine+0x86>
     ff2:	66 24       	eor	r6, r6
     ff4:	77 24       	eor	r7, r7
    else 
		incy = -1;

    // Determine which distance is greater
	//
    delta_x = (delta_x < 0) ? delta_x*-1 : delta_x;	// abs(delta_x)
     ff6:	5a 01       	movw	r10, r20
     ff8:	57 ff       	sbrs	r21, 7
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <LCD_DrawLine+0x94>
     ffc:	b0 94       	com	r11
     ffe:	a1 94       	neg	r10
    1000:	b1 08       	sbc	r11, r1
    1002:	b3 94       	inc	r11
    delta_y = (delta_y < 0) ? delta_y*-1 : delta_y;	// abs(delta_y)
    1004:	69 01       	movw	r12, r18
    1006:	37 ff       	sbrs	r19, 7
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <LCD_DrawLine+0xa2>
    100a:	d0 94       	com	r13
    100c:	c1 94       	neg	r12
    100e:	d1 08       	sbc	r13, r1
    1010:	d3 94       	inc	r13
    1012:	86 01       	movw	r16, r12
    1014:	ca 14       	cp	r12, r10
    1016:	db 04       	cpc	r13, r11
    1018:	0c f4       	brge	.+2      	; 0x101c <LCD_DrawLine+0xac>
    101a:	85 01       	movw	r16, r10
    101c:	88 24       	eor	r8, r8
    101e:	99 24       	eor	r9, r9
    1020:	ee 24       	eor	r14, r14
    1022:	ff 24       	eor	r15, r15
    1024:	18 86       	std	Y+8, r1	; 0x08
    1026:	1f 82       	std	Y+7, r1	; 0x07
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
    1028:	c8 01       	movw	r24, r16
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	28 c0       	rjmp	.+80     	; 0x1082 <LCD_DrawLine+0x112>
		
        LCD_SetPoint(x, y, color);
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	9a 81       	ldd	r25, Y+2	; 0x02
    1036:	b2 01       	movw	r22, r4
    1038:	4b 81       	ldd	r20, Y+3	; 0x03
    103a:	5c 81       	ldd	r21, Y+4	; 0x04
    103c:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
        
        xerr += delta_x;
    1040:	ea 0c       	add	r14, r10
    1042:	fb 1c       	adc	r15, r11
        yerr += delta_y;
    1044:	ef 81       	ldd	r30, Y+7	; 0x07
    1046:	f8 85       	ldd	r31, Y+8	; 0x08
    1048:	ec 0d       	add	r30, r12
    104a:	fd 1d       	adc	r31, r13
    104c:	f8 87       	std	Y+8, r31	; 0x08
    104e:	ef 83       	std	Y+7, r30	; 0x07
		
        if(xerr > distance) {
    1050:	0e 15       	cp	r16, r14
    1052:	1f 05       	cpc	r17, r15
    1054:	44 f4       	brge	.+16     	; 0x1066 <LCD_DrawLine+0xf6>
			
            xerr -= distance;
    1056:	e0 1a       	sub	r14, r16
    1058:	f1 0a       	sbc	r15, r17
            x += incx;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	82 0d       	add	r24, r2
    1060:	93 1d       	adc	r25, r3
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
        }
		
        if(yerr > distance) {
    1066:	ef 81       	ldd	r30, Y+7	; 0x07
    1068:	f8 85       	ldd	r31, Y+8	; 0x08
    106a:	0e 17       	cp	r16, r30
    106c:	1f 07       	cpc	r17, r31
    106e:	34 f4       	brge	.+12     	; 0x107c <LCD_DrawLine+0x10c>
			
            yerr -= distance;
    1070:	e0 1b       	sub	r30, r16
    1072:	f1 0b       	sbc	r31, r17
    1074:	f8 87       	std	Y+8, r31	; 0x08
    1076:	ef 83       	std	Y+7, r30	; 0x07
            y += incy;
    1078:	46 0c       	add	r4, r6
    107a:	57 1c       	adc	r5, r7
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
    107c:	08 94       	sec
    107e:	81 1c       	adc	r8, r1
    1080:	91 1c       	adc	r9, r1
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	88 15       	cp	r24, r8
    1088:	99 05       	cpc	r25, r9
    108a:	9c f6       	brge	.-90     	; 0x1032 <LCD_DrawLine+0xc2>
			
            yerr -= distance;
            y += incy;
        }
    }
}
    108c:	28 96       	adiw	r28, 0x08	; 8
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	7f 90       	pop	r7
    10b2:	6f 90       	pop	r6
    10b4:	5f 90       	pop	r5
    10b6:	4f 90       	pop	r4
    10b8:	3f 90       	pop	r3
    10ba:	2f 90       	pop	r2
    10bc:	08 95       	ret

000010be <LCD_Draw4.1641>:
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {


	// Draw 4 mirrored points
	//
	void LCD_Draw4 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color) {
    10be:	6f 92       	push	r6
    10c0:	7f 92       	push	r7
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	7a 01       	movw	r14, r20
    10dc:	e9 01       	movw	r28, r18
    10de:	68 01       	movw	r12, r16
		
		int	mx, my;
		
		mx = x - dx;
    10e0:	9c 01       	movw	r18, r24
    10e2:	3c 01       	movw	r6, r24
    10e4:	64 1a       	sub	r6, r20
    10e6:	75 0a       	sbc	r7, r21
		my = y - dy;
    10e8:	4b 01       	movw	r8, r22
    10ea:	8c 1a       	sub	r8, r28
    10ec:	9d 0a       	sbc	r9, r29
		
		x += dx;
    10ee:	5a 01       	movw	r10, r20
    10f0:	a2 0e       	add	r10, r18
    10f2:	b3 1e       	adc	r11, r19
		y += dy;
    10f4:	8e 01       	movw	r16, r28
    10f6:	06 0f       	add	r16, r22
    10f8:	17 1f       	adc	r17, r23
		
		LCD_SetPoint(x, y, color);
    10fa:	c5 01       	movw	r24, r10
    10fc:	b8 01       	movw	r22, r16
    10fe:	a6 01       	movw	r20, r12
    1100:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
		
		if (dx != 0)
    1104:	ef 28       	or	r14, r15
    1106:	29 f0       	breq	.+10     	; 0x1112 <LCD_Draw4.1641+0x54>
			LCD_SetPoint(mx, y, color);
    1108:	c3 01       	movw	r24, r6
    110a:	b8 01       	movw	r22, r16
    110c:	a6 01       	movw	r20, r12
    110e:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
		
		if (dy != 0)
    1112:	cd 2b       	or	r28, r29
    1114:	29 f0       	breq	.+10     	; 0x1120 <LCD_Draw4.1641+0x62>
			LCD_SetPoint(x, my, color);
    1116:	c5 01       	movw	r24, r10
    1118:	b4 01       	movw	r22, r8
    111a:	a6 01       	movw	r20, r12
    111c:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
		
		LCD_SetPoint(mx, my, color);
    1120:	c3 01       	movw	r24, r6
    1122:	b4 01       	movw	r22, r8
    1124:	a6 01       	movw	r20, r12
    1126:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
	}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	9f 90       	pop	r9
    1140:	8f 90       	pop	r8
    1142:	7f 90       	pop	r7
    1144:	6f 90       	pop	r6
    1146:	08 95       	ret

00001148 <LCD_DrawCircle>:

///////////////////////////////////////////////
//
// LCD_DrawCircle(x, y, radius, color, fill);
//
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {
    1148:	2f 92       	push	r2
    114a:	3f 92       	push	r3
    114c:	4f 92       	push	r4
    114e:	5f 92       	push	r5
    1150:	6f 92       	push	r6
    1152:	7f 92       	push	r7
    1154:	8f 92       	push	r8
    1156:	9f 92       	push	r9
    1158:	af 92       	push	r10
    115a:	bf 92       	push	r11
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	29 97       	sbiw	r28, 0x09	; 9
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	8c 83       	std	Y+4, r24	; 0x04
    117e:	9d 83       	std	Y+5, r25	; 0x05
    1180:	6e 83       	std	Y+6, r22	; 0x06
    1182:	7f 83       	std	Y+7, r23	; 0x07
    1184:	3a 83       	std	Y+2, r19	; 0x02
    1186:	29 83       	std	Y+1, r18	; 0x01
    1188:	0b 83       	std	Y+3, r16	; 0x03
			if (dx != dy)
				LCD_Draw4(x, y, dy, dx, color);
		}
	}

	int error = -radius;
    118a:	22 24       	eor	r2, r2
    118c:	33 24       	eor	r3, r3
    118e:	24 1a       	sub	r2, r20
    1190:	35 0a       	sbc	r3, r21
	int dx = radius;
    1192:	2a 01       	movw	r4, r20
    1194:	19 86       	std	Y+9, r1	; 0x09
    1196:	18 86       	std	Y+8, r1	; 0x08
    1198:	7f c0       	rjmp	.+254    	; 0x1298 <LCD_DrawCircle+0x150>

	// Draw 8 mirrored points
	//
	void LCD_Draw8 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color, bool fill) {
		
		if (fill) {
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 23       	and	r24, r24
    119e:	09 f4       	brne	.+2      	; 0x11a2 <LCD_DrawCircle+0x5a>
    11a0:	4b c0       	rjmp	.+150    	; 0x1238 <LCD_DrawCircle+0xf0>
			
			LCD_Fill(x-dy, y-dx, dy<< 1, 1, color);
    11a2:	ec 80       	ldd	r14, Y+4	; 0x04
    11a4:	fd 80       	ldd	r15, Y+5	; 0x05
    11a6:	37 01       	movw	r6, r14
    11a8:	e8 85       	ldd	r30, Y+8	; 0x08
    11aa:	f9 85       	ldd	r31, Y+9	; 0x09
    11ac:	6e 1a       	sub	r6, r30
    11ae:	7f 0a       	sbc	r7, r31
    11b0:	ce 80       	ldd	r12, Y+6	; 0x06
    11b2:	df 80       	ldd	r13, Y+7	; 0x07
    11b4:	4f 01       	movw	r8, r30
    11b6:	88 0c       	add	r8, r8
    11b8:	99 1c       	adc	r9, r9
    11ba:	b6 01       	movw	r22, r12
    11bc:	64 19       	sub	r22, r4
    11be:	75 09       	sbc	r23, r5
    11c0:	c3 01       	movw	r24, r6
    11c2:	a4 01       	movw	r20, r8
    11c4:	21 e0       	ldi	r18, 0x01	; 1
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	09 81       	ldd	r16, Y+1	; 0x01
    11ca:	1a 81       	ldd	r17, Y+2	; 0x02
    11cc:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
			LCD_Fill(x-dx, y-dy, dx<< 1, 1, color);
    11d0:	e4 18       	sub	r14, r4
    11d2:	f5 08       	sbc	r15, r5
    11d4:	52 01       	movw	r10, r4
    11d6:	aa 0c       	add	r10, r10
    11d8:	bb 1c       	adc	r11, r11
    11da:	b6 01       	movw	r22, r12
    11dc:	88 85       	ldd	r24, Y+8	; 0x08
    11de:	99 85       	ldd	r25, Y+9	; 0x09
    11e0:	68 1b       	sub	r22, r24
    11e2:	79 0b       	sbc	r23, r25
    11e4:	c7 01       	movw	r24, r14
    11e6:	a5 01       	movw	r20, r10
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	09 81       	ldd	r16, Y+1	; 0x01
    11ee:	1a 81       	ldd	r17, Y+2	; 0x02
    11f0:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
			LCD_Fill(x-dx, y+dy, dx<< 1, 1, color);
    11f4:	68 85       	ldd	r22, Y+8	; 0x08
    11f6:	79 85       	ldd	r23, Y+9	; 0x09
    11f8:	6c 0d       	add	r22, r12
    11fa:	7d 1d       	adc	r23, r13
    11fc:	c7 01       	movw	r24, r14
    11fe:	a5 01       	movw	r20, r10
    1200:	21 e0       	ldi	r18, 0x01	; 1
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	09 81       	ldd	r16, Y+1	; 0x01
    1206:	1a 81       	ldd	r17, Y+2	; 0x02
    1208:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
			LCD_Fill(x-dy, y+dx, dy<< 1, 1, color);
    120c:	c4 0c       	add	r12, r4
    120e:	d5 1c       	adc	r13, r5
    1210:	c3 01       	movw	r24, r6
    1212:	b6 01       	movw	r22, r12
    1214:	a4 01       	movw	r20, r8
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	09 81       	ldd	r16, Y+1	; 0x01
    121c:	1a 81       	ldd	r17, Y+2	; 0x02
    121e:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_Fill>
			LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	40 e4       	ldi	r20, 0x40	; 64
    122c:	51 e0       	ldi	r21, 0x01	; 1
    122e:	20 ef       	ldi	r18, 0xF0	; 240
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_SetBounds>
    1236:	1a c0       	rjmp	.+52     	; 0x126c <LCD_DrawCircle+0x124>
		}
		else {
			
			LCD_Draw4(x, y, dx, dy, color);
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	6e 81       	ldd	r22, Y+6	; 0x06
    123e:	7f 81       	ldd	r23, Y+7	; 0x07
    1240:	a2 01       	movw	r20, r4
    1242:	28 85       	ldd	r18, Y+8	; 0x08
    1244:	39 85       	ldd	r19, Y+9	; 0x09
    1246:	09 81       	ldd	r16, Y+1	; 0x01
    1248:	1a 81       	ldd	r17, Y+2	; 0x02
    124a:	0e 94 5f 08 	call	0x10be	; 0x10be <LCD_Draw4.1641>
			
			if (dx != dy)
    124e:	e8 85       	ldd	r30, Y+8	; 0x08
    1250:	f9 85       	ldd	r31, Y+9	; 0x09
    1252:	4e 16       	cp	r4, r30
    1254:	5f 06       	cpc	r5, r31
    1256:	51 f0       	breq	.+20     	; 0x126c <LCD_DrawCircle+0x124>
				LCD_Draw4(x, y, dy, dx, color);
    1258:	8c 81       	ldd	r24, Y+4	; 0x04
    125a:	9d 81       	ldd	r25, Y+5	; 0x05
    125c:	6e 81       	ldd	r22, Y+6	; 0x06
    125e:	7f 81       	ldd	r23, Y+7	; 0x07
    1260:	af 01       	movw	r20, r30
    1262:	92 01       	movw	r18, r4
    1264:	09 81       	ldd	r16, Y+1	; 0x01
    1266:	1a 81       	ldd	r17, Y+2	; 0x02
    1268:	0e 94 5f 08 	call	0x10be	; 0x10be <LCD_Draw4.1641>
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
		dy++;
    126c:	28 85       	ldd	r18, Y+8	; 0x08
    126e:	39 85       	ldd	r19, Y+9	; 0x09
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
    1274:	88 85       	ldd	r24, Y+8	; 0x08
    1276:	99 85       	ldd	r25, Y+9	; 0x09
    1278:	28 0e       	add	r2, r24
    127a:	39 1e       	adc	r3, r25
		dy++;
		error += dy;
    127c:	22 0e       	add	r2, r18
    127e:	33 1e       	adc	r3, r19
		
		if (error >= 0) {
    1280:	37 fc       	sbrc	r3, 7
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <LCD_DrawCircle+0x14c>
			
			dx--;
    1284:	08 94       	sec
    1286:	41 08       	sbc	r4, r1
    1288:	51 08       	sbc	r5, r1
			error -= dx<< 1;
    128a:	c2 01       	movw	r24, r4
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	28 1a       	sub	r2, r24
    1292:	39 0a       	sbc	r3, r25
    1294:	39 87       	std	Y+9, r19	; 0x09
    1296:	28 87       	std	Y+8, r18	; 0x08
	int dx = radius;
	int dy = 0;

	//	draws in 4 strips from top down and middle up + reflection about y
	//
	while (dx >= dy) {
    1298:	e8 85       	ldd	r30, Y+8	; 0x08
    129a:	f9 85       	ldd	r31, Y+9	; 0x09
    129c:	4e 16       	cp	r4, r30
    129e:	5f 06       	cpc	r5, r31
    12a0:	0c f0       	brlt	.+2      	; 0x12a4 <LCD_DrawCircle+0x15c>
    12a2:	7b cf       	rjmp	.-266    	; 0x119a <LCD_DrawCircle+0x52>
			
			dx--;
			error -= dx<< 1;
		}
	}
}
    12a4:	29 96       	adiw	r28, 0x09	; 9
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	9f 90       	pop	r9
    12c6:	8f 90       	pop	r8
    12c8:	7f 90       	pop	r7
    12ca:	6f 90       	pop	r6
    12cc:	5f 90       	pop	r5
    12ce:	4f 90       	pop	r4
    12d0:	3f 90       	pop	r3
    12d2:	2f 90       	pop	r2
    12d4:	08 95       	ret

000012d6 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	d8 2e       	mov	r13, r24
    12e2:	7a 01       	movw	r14, r20
    12e4:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    12e6:	87 ff       	sbrs	r24, 7
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    12ea:	87 e7       	ldi	r24, 0x77	; 119
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
		if (res > 1) return res;
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	98 f5       	brcc	.+102    	; 0x1362 <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    12fc:	8f e7       	ldi	r24, 0x7F	; 127
    12fe:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    1300:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1302:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
	SELECT();
    1306:	c3 98       	cbi	0x18, 3	; 24
	rcv_spi();
    1308:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    130c:	8d 2d       	mov	r24, r13
    130e:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    1312:	81 2f       	mov	r24, r17
    1314:	99 27       	eor	r25, r25
    1316:	aa 27       	eor	r26, r26
    1318:	bb 27       	eor	r27, r27
    131a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    131e:	c8 01       	movw	r24, r16
    1320:	aa 27       	eor	r26, r26
    1322:	bb 27       	eor	r27, r27
    1324:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    1328:	bb 27       	eor	r27, r27
    132a:	a1 2f       	mov	r26, r17
    132c:	90 2f       	mov	r25, r16
    132e:	8f 2d       	mov	r24, r15
    1330:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    1334:	8e 2d       	mov	r24, r14
    1336:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    133a:	80 e4       	ldi	r24, 0x40	; 64
    133c:	d8 16       	cp	r13, r24
    133e:	11 f4       	brne	.+4      	; 0x1344 <send_cmd+0x6e>
    1340:	85 e9       	ldi	r24, 0x95	; 149
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1344:	88 e4       	ldi	r24, 0x48	; 72
    1346:	d8 16       	cp	r13, r24
    1348:	11 f4       	brne	.+4      	; 0x134e <send_cmd+0x78>
    134a:	87 e8       	ldi	r24, 0x87	; 135
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <send_cmd+0x7a>
    134e:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    1350:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
    1354:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    1356:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
	} while ((res & 0x80) && --n);
    135a:	87 ff       	sbrs	r24, 7
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <send_cmd+0x8c>
    135e:	11 50       	subi	r17, 0x01	; 1
    1360:	d1 f7       	brne	.-12     	; 0x1356 <send_cmd+0x80>

	return res;			/* Return with the response value */
}
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	08 95       	ret

0000136e <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	6c 01       	movw	r12, r24
    1380:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    1382:	80 91 80 00 	lds	r24, 0x0080
    1386:	83 fd       	sbrc	r24, 3
    1388:	07 c0       	rjmp	.+14     	; 0x1398 <disk_readp+0x2a>
    138a:	39 e0       	ldi	r19, 0x09	; 9
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	66 1f       	adc	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	3a 95       	dec	r19
    1396:	d1 f7       	brne	.-12     	; 0x138c <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    1398:	81 e5       	ldi	r24, 0x51	; 81
    139a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    139e:	88 23       	and	r24, r24
    13a0:	61 f5       	brne	.+88     	; 0x13fa <disk_readp+0x8c>
    13a2:	c0 e4       	ldi	r28, 0x40	; 64
    13a4:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
    13a6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
		} while (rc == 0xFF && --bc);
    13aa:	8f 3f       	cpi	r24, 0xFF	; 255
    13ac:	19 f4       	brne	.+6      	; 0x13b4 <disk_readp+0x46>
    13ae:	21 97       	sbiw	r28, 0x01	; 1
    13b0:	d1 f7       	brne	.-12     	; 0x13a6 <disk_readp+0x38>
    13b2:	23 c0       	rjmp	.+70     	; 0x13fa <disk_readp+0x8c>

		if (rc == 0xFE) {				/* A data packet arrived */
    13b4:	8e 3f       	cpi	r24, 0xFE	; 254
    13b6:	09 f5       	brne	.+66     	; 0x13fa <disk_readp+0x8c>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    13b8:	e1 14       	cp	r14, r1
    13ba:	f1 04       	cpc	r15, r1
    13bc:	29 f0       	breq	.+10     	; 0x13c8 <disk_readp+0x5a>
    13be:	e7 01       	movw	r28, r14
				do rcv_spi(); while (--ofs);
    13c0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    13c4:	21 97       	sbiw	r28, 0x01	; 1
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    13c8:	c1 14       	cp	r12, r1
    13ca:	d1 04       	cpc	r13, r1
    13cc:	41 f0       	breq	.+16     	; 0x13de <disk_readp+0x70>
    13ce:	e8 01       	movw	r28, r16
				do {
					*buff++ = rcv_spi();
    13d0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    13d4:	f6 01       	movw	r30, r12
    13d6:	81 93       	st	Z+, r24
    13d8:	6f 01       	movw	r12, r30
				} while (--cnt);
    13da:	21 97       	sbiw	r28, 0x01	; 1
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <disk_readp+0x62>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    13de:	cc 27       	eor	r28, r28
    13e0:	dd 27       	eor	r29, r29
    13e2:	ce 19       	sub	r28, r14
    13e4:	df 09       	sbc	r29, r15
    13e6:	ce 5f       	subi	r28, 0xFE	; 254
    13e8:	dd 4f       	sbci	r29, 0xFD	; 253
    13ea:	c0 1b       	sub	r28, r16
    13ec:	d1 0b       	sbc	r29, r17
					*buff++ = rcv_spi();
				} while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    13ee:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    13f2:	21 97       	sbiw	r28, 0x01	; 1
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <disk_readp+0x80>
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <disk_readp+0x8e>
    13fa:	11 e0       	ldi	r17, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
    13fc:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    13fe:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>

	return res;
}
    1402:	81 2f       	mov	r24, r17
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	df 90       	pop	r13
    1412:	cf 90       	pop	r12
    1414:	08 95       	ret

00001416 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	8c 01       	movw	r16, r24
	WORD bc;
	static WORD wc;

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	d9 f0       	breq	.+54     	; 0x145a <disk_writep+0x44>
		bc = (WORD)sa;
    1424:	ea 01       	movw	r28, r20
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1428:	f8 01       	movw	r30, r16
    142a:	81 91       	ld	r24, Z+
    142c:	8f 01       	movw	r16, r30
    142e:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
			wc--; bc--;
    1432:	80 91 7e 00 	lds	r24, 0x007E
    1436:	90 91 7f 00 	lds	r25, 0x007F
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	90 93 7f 00 	sts	0x007F, r25
    1440:	80 93 7e 00 	sts	0x007E, r24
    1444:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    1446:	20 97       	sbiw	r28, 0x00	; 0
    1448:	09 f4       	brne	.+2      	; 0x144c <disk_writep+0x36>
    144a:	52 c0       	rjmp	.+164    	; 0x14f0 <disk_writep+0xda>
    144c:	80 91 7e 00 	lds	r24, 0x007E
    1450:	90 91 7f 00 	lds	r25, 0x007F
    1454:	89 2b       	or	r24, r25
    1456:	41 f7       	brne	.-48     	; 0x1428 <disk_writep+0x12>
    1458:	4b c0       	rjmp	.+150    	; 0x14f0 <disk_writep+0xda>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    145a:	41 15       	cp	r20, r1
    145c:	51 05       	cpc	r21, r1
    145e:	61 05       	cpc	r22, r1
    1460:	71 05       	cpc	r23, r1
    1462:	f9 f0       	breq	.+62     	; 0x14a2 <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1464:	80 91 80 00 	lds	r24, 0x0080
    1468:	83 fd       	sbrc	r24, 3
    146a:	07 c0       	rjmp	.+14     	; 0x147a <disk_writep+0x64>
    146c:	e9 e0       	ldi	r30, 0x09	; 9
    146e:	44 0f       	add	r20, r20
    1470:	55 1f       	adc	r21, r21
    1472:	66 1f       	adc	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	ea 95       	dec	r30
    1478:	d1 f7       	brne	.-12     	; 0x146e <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    147a:	88 e5       	ldi	r24, 0x58	; 88
    147c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    1480:	88 23       	and	r24, r24
    1482:	11 f0       	breq	.+4      	; 0x1488 <disk_writep+0x72>
    1484:	11 e0       	ldi	r17, 0x01	; 1
    1486:	35 c0       	rjmp	.+106    	; 0x14f2 <disk_writep+0xdc>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
    148e:	8e ef       	ldi	r24, 0xFE	; 254
    1490:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
				wc = 512;							/* Set byte counter */
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	90 93 7f 00 	sts	0x007F, r25
    149c:	80 93 7e 00 	sts	0x007E, r24
    14a0:	27 c0       	rjmp	.+78     	; 0x14f0 <disk_writep+0xda>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    14a2:	c0 91 7e 00 	lds	r28, 0x007E
    14a6:	d0 91 7f 00 	lds	r29, 0x007F
    14aa:	22 96       	adiw	r28, 0x02	; 2
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <xmit_spi>
    14b4:	21 97       	sbiw	r28, 0x01	; 1
    14b6:	20 97       	sbiw	r28, 0x00	; 0
    14b8:	d1 f7       	brne	.-12     	; 0x14ae <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
    14ba:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    14be:	8f 71       	andi	r24, 0x1F	; 31
    14c0:	85 30       	cpi	r24, 0x05	; 5
    14c2:	89 f4       	brne	.+34     	; 0x14e6 <disk_writep+0xd0>
    14c4:	c8 e8       	ldi	r28, 0x88	; 136
    14c6:	d3 e1       	ldi	r29, 0x13	; 19
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <disk_writep+0xba>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
    14ca:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <dly_100us>
    14ce:	21 97       	sbiw	r28, 0x01	; 1
    14d0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    14d4:	8f 3f       	cpi	r24, 0xFF	; 255
    14d6:	19 f0       	breq	.+6      	; 0x14de <disk_writep+0xc8>
    14d8:	20 97       	sbiw	r28, 0x00	; 0
    14da:	b9 f7       	brne	.-18     	; 0x14ca <disk_writep+0xb4>
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <disk_writep+0xd0>
				if (bc) res = RES_OK;
    14de:	cd 2b       	or	r28, r29
    14e0:	11 f0       	breq	.+4      	; 0x14e6 <disk_writep+0xd0>
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <disk_writep+0xd2>
    14e6:	11 e0       	ldi	r17, 0x01	; 1
			}
			DESELECT();
    14e8:	c3 9a       	sbi	0x18, 3	; 24
			rcv_spi();
    14ea:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <disk_writep+0xdc>
    14f0:	10 e0       	ldi	r17, 0x00	; 0
		}
	}

	return res;
}
    14f2:	81 2f       	mov	r24, r17
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <disk_initialize+0x12>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <disk_initialize+0x14>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
    1516:	80 91 80 00 	lds	r24, 0x0080
    151a:	88 23       	and	r24, r24
    151c:	51 f0       	breq	.+20     	; 0x1532 <disk_initialize+0x34>
    151e:	c3 99       	sbic	0x18, 3	; 24
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <disk_initialize+0x34>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
    1532:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <init_spi>
	DESELECT();
    1536:	c3 9a       	sbi	0x18, 3	; 24
    1538:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
    153a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    153e:	11 50       	subi	r17, 0x01	; 1
    1540:	e1 f7       	brne	.-8      	; 0x153a <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1542:	80 e4       	ldi	r24, 0x40	; 64
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	09 f0       	breq	.+2      	; 0x1556 <disk_initialize+0x58>
    1554:	69 c0       	rjmp	.+210    	; 0x1628 <disk_initialize+0x12a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1556:	88 e4       	ldi	r24, 0x48	; 72
    1558:	4a ea       	ldi	r20, 0xAA	; 170
    155a:	51 e0       	ldi	r21, 0x01	; 1
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	e1 f5       	brne	.+120    	; 0x15e0 <disk_initialize+0xe2>
    1568:	6e 01       	movw	r12, r28
    156a:	08 94       	sec
    156c:	c1 1c       	adc	r12, r1
    156e:	d1 1c       	adc	r13, r1
    1570:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1572:	8e 01       	movw	r16, r28
    1574:	0b 5f       	subi	r16, 0xFB	; 251
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    157c:	f7 01       	movw	r30, r14
    157e:	81 93       	st	Z+, r24
    1580:	7f 01       	movw	r14, r30
    1582:	e0 17       	cp	r30, r16
    1584:	f1 07       	cpc	r31, r17
    1586:	c1 f7       	brne	.-16     	; 0x1578 <disk_initialize+0x7a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	09 f0       	breq	.+2      	; 0x1590 <disk_initialize+0x92>
    158e:	4c c0       	rjmp	.+152    	; 0x1628 <disk_initialize+0x12a>
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	8a 3a       	cpi	r24, 0xAA	; 170
    1594:	09 f0       	breq	.+2      	; 0x1598 <disk_initialize+0x9a>
    1596:	48 c0       	rjmp	.+144    	; 0x1628 <disk_initialize+0x12a>
    1598:	00 e1       	ldi	r16, 0x10	; 16
    159a:	17 e2       	ldi	r17, 0x27	; 39
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <disk_initialize+0xac>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    159e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <dly_100us>
    15a2:	01 50       	subi	r16, 0x01	; 1
    15a4:	10 40       	sbci	r17, 0x00	; 0
    15a6:	09 f4       	brne	.+2      	; 0x15aa <disk_initialize+0xac>
    15a8:	3f c0       	rjmp	.+126    	; 0x1628 <disk_initialize+0x12a>
    15aa:	89 ee       	ldi	r24, 0xE9	; 233
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	70 e4       	ldi	r23, 0x40	; 64
    15b4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    15b8:	88 23       	and	r24, r24
    15ba:	89 f7       	brne	.-30     	; 0x159e <disk_initialize+0xa0>
    15bc:	4c c0       	rjmp	.+152    	; 0x1656 <disk_initialize+0x158>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    15be:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    15c2:	f6 01       	movw	r30, r12
    15c4:	81 93       	st	Z+, r24
    15c6:	6f 01       	movw	r12, r30
    15c8:	ee 15       	cp	r30, r14
    15ca:	ff 05       	cpc	r31, r15
    15cc:	c1 f7       	brne	.-16     	; 0x15be <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	86 fd       	sbrc	r24, 6
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <disk_initialize+0xdc>
    15d4:	04 e0       	ldi	r16, 0x04	; 4
    15d6:	f0 2e       	mov	r15, r16
    15d8:	28 c0       	rjmp	.+80     	; 0x162a <disk_initialize+0x12c>
    15da:	1c e0       	ldi	r17, 0x0C	; 12
    15dc:	f1 2e       	mov	r15, r17
    15de:	25 c0       	rjmp	.+74     	; 0x162a <disk_initialize+0x12c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    15e0:	89 ee       	ldi	r24, 0xE9	; 233
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	28 f0       	brcs	.+10     	; 0x15fc <disk_initialize+0xfe>
    15f2:	b1 e4       	ldi	r27, 0x41	; 65
    15f4:	eb 2e       	mov	r14, r27
    15f6:	ff 24       	eor	r15, r15
    15f8:	f3 94       	inc	r15
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <disk_initialize+0x106>
    15fc:	a9 ee       	ldi	r26, 0xE9	; 233
    15fe:	ea 2e       	mov	r14, r26
    1600:	f2 e0       	ldi	r31, 0x02	; 2
    1602:	ff 2e       	mov	r15, r31
    1604:	00 e1       	ldi	r16, 0x10	; 16
    1606:	17 e2       	ldi	r17, 0x27	; 39
    1608:	05 c0       	rjmp	.+10     	; 0x1614 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    160a:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <dly_100us>
    160e:	01 50       	subi	r16, 0x01	; 1
    1610:	10 40       	sbci	r17, 0x00	; 0
    1612:	51 f0       	breq	.+20     	; 0x1628 <disk_initialize+0x12a>
    1614:	8e 2d       	mov	r24, r14
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    1622:	88 23       	and	r24, r24
    1624:	91 f7       	brne	.-28     	; 0x160a <disk_initialize+0x10c>
    1626:	22 c0       	rjmp	.+68     	; 0x166c <disk_initialize+0x16e>
    1628:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    162a:	f0 92 80 00 	sts	0x0080, r15
	DESELECT();
    162e:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1630:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <rcv_spi>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	ff 20       	and	r15, r15
    1638:	09 f4       	brne	.+2      	; 0x163c <disk_initialize+0x13e>
    163a:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1656:	8a e7       	ldi	r24, 0x7A	; 122
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    1664:	88 23       	and	r24, r24
    1666:	09 f4       	brne	.+2      	; 0x166a <disk_initialize+0x16c>
    1668:	aa cf       	rjmp	.-172    	; 0x15be <disk_initialize+0xc0>
    166a:	de cf       	rjmp	.-68     	; 0x1628 <disk_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    166c:	80 e5       	ldi	r24, 0x50	; 80
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	52 e0       	ldi	r21, 0x02	; 2
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <send_cmd>
    167a:	88 23       	and	r24, r24
    167c:	a9 f6       	brne	.-86     	; 0x1628 <disk_initialize+0x12a>
    167e:	d5 cf       	rjmp	.-86     	; 0x162a <disk_initialize+0x12c>

00001680 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
    1692:	c0 91 81 00 	lds	r28, 0x0081
    1696:	d0 91 82 00 	lds	r29, 0x0082


	dj->index = 0;
    169a:	fc 01       	movw	r30, r24
    169c:	11 82       	std	Z+1, r1	; 0x01
    169e:	10 82       	st	Z, r1
	clst = dj->sclust;
    16a0:	24 81       	ldd	r18, Z+4	; 0x04
    16a2:	35 81       	ldd	r19, Z+5	; 0x05
    16a4:	46 81       	ldd	r20, Z+6	; 0x06
    16a6:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    16a8:	21 30       	cpi	r18, 0x01	; 1
    16aa:	31 05       	cpc	r19, r1
    16ac:	41 05       	cpc	r20, r1
    16ae:	51 05       	cpc	r21, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <dir_rewind+0x34>
    16b2:	5b c0       	rjmp	.+182    	; 0x176a <dir_rewind+0xea>
    16b4:	8e 81       	ldd	r24, Y+6	; 0x06
    16b6:	9f 81       	ldd	r25, Y+7	; 0x07
    16b8:	a8 85       	ldd	r26, Y+8	; 0x08
    16ba:	b9 85       	ldd	r27, Y+9	; 0x09
    16bc:	28 17       	cp	r18, r24
    16be:	39 07       	cpc	r19, r25
    16c0:	4a 07       	cpc	r20, r26
    16c2:	5b 07       	cpc	r21, r27
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <dir_rewind+0x48>
    16c6:	51 c0       	rjmp	.+162    	; 0x176a <dir_rewind+0xea>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    16c8:	21 15       	cp	r18, r1
    16ca:	31 05       	cpc	r19, r1
    16cc:	41 05       	cpc	r20, r1
    16ce:	51 05       	cpc	r21, r1
    16d0:	39 f4       	brne	.+14     	; 0x16e0 <dir_rewind+0x60>
    16d2:	88 81       	ld	r24, Y
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <dir_rewind+0x60>
		clst = (CLUST)fs->dirbase;
    16d8:	2e 85       	ldd	r18, Y+14	; 0x0e
    16da:	3f 85       	ldd	r19, Y+15	; 0x0f
    16dc:	48 89       	ldd	r20, Y+16	; 0x10
    16de:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
    16e0:	f6 01       	movw	r30, r12
    16e2:	20 87       	std	Z+8, r18	; 0x08
    16e4:	31 87       	std	Z+9, r19	; 0x09
    16e6:	42 87       	std	Z+10, r20	; 0x0a
    16e8:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	41 05       	cpc	r20, r1
    16f0:	51 05       	cpc	r21, r1
    16f2:	81 f1       	breq	.+96     	; 0x1754 <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
    16f4:	8e ef       	ldi	r24, 0xFE	; 254
    16f6:	e8 2e       	mov	r14, r24
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	f8 2e       	mov	r15, r24
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	08 2f       	mov	r16, r24
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	18 2f       	mov	r17, r24
    1704:	e2 0e       	add	r14, r18
    1706:	f3 1e       	adc	r15, r19
    1708:	04 1f       	adc	r16, r20
    170a:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    170c:	8e 81       	ldd	r24, Y+6	; 0x06
    170e:	9f 81       	ldd	r25, Y+7	; 0x07
    1710:	a8 85       	ldd	r26, Y+8	; 0x08
    1712:	b9 85       	ldd	r27, Y+9	; 0x09
    1714:	02 97       	sbiw	r24, 0x02	; 2
    1716:	a1 09       	sbc	r26, r1
    1718:	b1 09       	sbc	r27, r1
    171a:	e8 16       	cp	r14, r24
    171c:	f9 06       	cpc	r15, r25
    171e:	0a 07       	cpc	r16, r26
    1720:	1b 07       	cpc	r17, r27
    1722:	28 f0       	brcs	.+10     	; 0x172e <dir_rewind+0xae>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	17 c0       	rjmp	.+46     	; 0x175c <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
    172e:	2a 81       	ldd	r18, Y+2	; 0x02
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	c8 01       	movw	r24, r16
    1738:	b7 01       	movw	r22, r14
    173a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	8a 89       	ldd	r24, Y+18	; 0x12
    1744:	9b 89       	ldd	r25, Y+19	; 0x13
    1746:	ac 89       	ldd	r26, Y+20	; 0x14
    1748:	bd 89       	ldd	r27, Y+21	; 0x15
    174a:	28 0f       	add	r18, r24
    174c:	39 1f       	adc	r19, r25
    174e:	4a 1f       	adc	r20, r26
    1750:	5b 1f       	adc	r21, r27
    1752:	04 c0       	rjmp	.+8      	; 0x175c <dir_rewind+0xdc>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    1754:	2e 85       	ldd	r18, Y+14	; 0x0e
    1756:	3f 85       	ldd	r19, Y+15	; 0x0f
    1758:	48 89       	ldd	r20, Y+16	; 0x10
    175a:	59 89       	ldd	r21, Y+17	; 0x11
    175c:	f6 01       	movw	r30, r12
    175e:	24 87       	std	Z+12, r18	; 0x0c
    1760:	35 87       	std	Z+13, r19	; 0x0d
    1762:	46 87       	std	Z+14, r20	; 0x0e
    1764:	57 87       	std	Z+15, r21	; 0x0f
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	01 c0       	rjmp	.+2      	; 0x176c <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
    176a:	81 e0       	ldi	r24, 0x01	; 1
}
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	df 90       	pop	r13
    177a:	cf 90       	pop	r12
    177c:	08 95       	ret

0000177e <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    177e:	6f 92       	push	r6
    1780:	7f 92       	push	r7
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <get_fat+0x1e>
    179c:	00 d0       	rcall	.+0      	; 0x179e <get_fat+0x20>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	4b 01       	movw	r8, r22
    17a4:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
    17a6:	60 90 81 00 	lds	r6, 0x0081
    17aa:	70 90 82 00 	lds	r7, 0x0082


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	88 16       	cp	r8, r24
    17b2:	91 04       	cpc	r9, r1
    17b4:	a1 04       	cpc	r10, r1
    17b6:	b1 04       	cpc	r11, r1
    17b8:	08 f4       	brcc	.+2      	; 0x17bc <get_fat+0x3e>
    17ba:	b4 c0       	rjmp	.+360    	; 0x1924 <get_fat+0x1a6>
    17bc:	f3 01       	movw	r30, r6
    17be:	86 81       	ldd	r24, Z+6	; 0x06
    17c0:	97 81       	ldd	r25, Z+7	; 0x07
    17c2:	a0 85       	ldd	r26, Z+8	; 0x08
    17c4:	b1 85       	ldd	r27, Z+9	; 0x09
    17c6:	88 16       	cp	r8, r24
    17c8:	99 06       	cpc	r9, r25
    17ca:	aa 06       	cpc	r10, r26
    17cc:	bb 06       	cpc	r11, r27
    17ce:	08 f0       	brcs	.+2      	; 0x17d2 <get_fat+0x54>
    17d0:	a9 c0       	rjmp	.+338    	; 0x1924 <get_fat+0x1a6>
		return 1;

	switch (fs->fs_type) {
    17d2:	80 81       	ld	r24, Z
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	09 f4       	brne	.+2      	; 0x17da <get_fat+0x5c>
    17d8:	5f c0       	rjmp	.+190    	; 0x1898 <get_fat+0x11a>
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <get_fat+0x62>
    17de:	7b c0       	rjmp	.+246    	; 0x18d6 <get_fat+0x158>
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <get_fat+0x68>
    17e4:	9f c0       	rjmp	.+318    	; 0x1924 <get_fat+0x1a6>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
    17e6:	c4 01       	movw	r24, r8
    17e8:	96 95       	lsr	r25
    17ea:	87 95       	ror	r24
    17ec:	88 0d       	add	r24, r8
    17ee:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
    17f0:	9c 01       	movw	r18, r24
    17f2:	31 70       	andi	r19, 0x01	; 1
    17f4:	89 2f       	mov	r24, r25
    17f6:	99 27       	eor	r25, r25
    17f8:	86 95       	lsr	r24
    17fa:	6c 01       	movw	r12, r24
    17fc:	ee 24       	eor	r14, r14
    17fe:	ff 24       	eor	r15, r15
    1800:	f3 01       	movw	r30, r6
    1802:	42 85       	ldd	r20, Z+10	; 0x0a
    1804:	53 85       	ldd	r21, Z+11	; 0x0b
    1806:	64 85       	ldd	r22, Z+12	; 0x0c
    1808:	75 85       	ldd	r23, Z+13	; 0x0d
    180a:	ce 01       	movw	r24, r28
    180c:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
    180e:	f1 e0       	ldi	r31, 0x01	; 1
    1810:	2f 3f       	cpi	r18, 0xFF	; 255
    1812:	3f 07       	cpc	r19, r31
    1814:	49 f0       	breq	.+18     	; 0x1828 <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
    1816:	c4 0e       	add	r12, r20
    1818:	d5 1e       	adc	r13, r21
    181a:	e6 1e       	adc	r14, r22
    181c:	f7 1e       	adc	r15, r23
    181e:	b7 01       	movw	r22, r14
    1820:	a6 01       	movw	r20, r12
    1822:	02 e0       	ldi	r16, 0x02	; 2
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	1e c0       	rjmp	.+60     	; 0x1864 <get_fat+0xe6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
    1828:	4c 0d       	add	r20, r12
    182a:	5d 1d       	adc	r21, r13
    182c:	6e 1d       	adc	r22, r14
    182e:	7f 1d       	adc	r23, r15
    1830:	2f ef       	ldi	r18, 0xFF	; 255
    1832:	31 e0       	ldi	r19, 0x01	; 1
    1834:	01 e0       	ldi	r16, 0x01	; 1
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    183c:	88 23       	and	r24, r24
    183e:	09 f0       	breq	.+2      	; 0x1842 <get_fat+0xc4>
    1840:	71 c0       	rjmp	.+226    	; 0x1924 <get_fat+0x1a6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
    1842:	f3 01       	movw	r30, r6
    1844:	42 85       	ldd	r20, Z+10	; 0x0a
    1846:	53 85       	ldd	r21, Z+11	; 0x0b
    1848:	64 85       	ldd	r22, Z+12	; 0x0c
    184a:	75 85       	ldd	r23, Z+13	; 0x0d
    184c:	4f 5f       	subi	r20, 0xFF	; 255
    184e:	5f 4f       	sbci	r21, 0xFF	; 255
    1850:	6f 4f       	sbci	r22, 0xFF	; 255
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	4c 0d       	add	r20, r12
    1856:	5d 1d       	adc	r21, r13
    1858:	6e 1d       	adc	r22, r14
    185a:	7f 1d       	adc	r23, r15
    185c:	ce 01       	movw	r24, r28
    185e:	02 96       	adiw	r24, 0x02	; 2
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    1868:	88 23       	and	r24, r24
    186a:	09 f0       	breq	.+2      	; 0x186e <get_fat+0xf0>
    186c:	5b c0       	rjmp	.+182    	; 0x1924 <get_fat+0x1a6>
		}
		wc = LD_WORD(buf);
    186e:	69 81       	ldd	r22, Y+1	; 0x01
    1870:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1872:	c4 01       	movw	r24, r8
    1874:	81 70       	andi	r24, 0x01	; 1
    1876:	90 70       	andi	r25, 0x00	; 0
    1878:	89 2b       	or	r24, r25
    187a:	39 f0       	breq	.+14     	; 0x188a <get_fat+0x10c>
    187c:	a4 e0       	ldi	r26, 0x04	; 4
    187e:	76 95       	lsr	r23
    1880:	67 95       	ror	r22
    1882:	aa 95       	dec	r26
    1884:	e1 f7       	brne	.-8      	; 0x187e <get_fat+0x100>
    1886:	9b 01       	movw	r18, r22
    1888:	23 c0       	rjmp	.+70     	; 0x18d0 <get_fat+0x152>
    188a:	9b 01       	movw	r18, r22
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	3f 70       	andi	r19, 0x0F	; 15
    1892:	40 70       	andi	r20, 0x00	; 0
    1894:	50 70       	andi	r21, 0x00	; 0
    1896:	4a c0       	rjmp	.+148    	; 0x192c <get_fat+0x1ae>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    1898:	77 27       	eor	r23, r23
    189a:	6b 2d       	mov	r22, r11
    189c:	5a 2d       	mov	r21, r10
    189e:	49 2d       	mov	r20, r9
    18a0:	f3 01       	movw	r30, r6
    18a2:	82 85       	ldd	r24, Z+10	; 0x0a
    18a4:	93 85       	ldd	r25, Z+11	; 0x0b
    18a6:	a4 85       	ldd	r26, Z+12	; 0x0c
    18a8:	b5 85       	ldd	r27, Z+13	; 0x0d
    18aa:	48 0f       	add	r20, r24
    18ac:	59 1f       	adc	r21, r25
    18ae:	6a 1f       	adc	r22, r26
    18b0:	7b 1f       	adc	r23, r27
    18b2:	94 01       	movw	r18, r8
    18b4:	30 70       	andi	r19, 0x00	; 0
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	ce 01       	movw	r24, r28
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	02 e0       	ldi	r16, 0x02	; 2
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    18c6:	88 23       	and	r24, r24
    18c8:	69 f5       	brne	.+90     	; 0x1924 <get_fat+0x1a6>
		return LD_WORD(buf);
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	9c 01       	movw	r18, r24
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	2b c0       	rjmp	.+86     	; 0x192c <get_fat+0x1ae>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    18d6:	b5 01       	movw	r22, r10
    18d8:	a4 01       	movw	r20, r8
    18da:	27 e0       	ldi	r18, 0x07	; 7
    18dc:	76 95       	lsr	r23
    18de:	67 95       	ror	r22
    18e0:	57 95       	ror	r21
    18e2:	47 95       	ror	r20
    18e4:	2a 95       	dec	r18
    18e6:	d1 f7       	brne	.-12     	; 0x18dc <get_fat+0x15e>
    18e8:	f3 01       	movw	r30, r6
    18ea:	82 85       	ldd	r24, Z+10	; 0x0a
    18ec:	93 85       	ldd	r25, Z+11	; 0x0b
    18ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    18f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    18f2:	48 0f       	add	r20, r24
    18f4:	59 1f       	adc	r21, r25
    18f6:	6a 1f       	adc	r22, r26
    18f8:	7b 1f       	adc	r23, r27
    18fa:	94 01       	movw	r18, r8
    18fc:	2f 77       	andi	r18, 0x7F	; 127
    18fe:	30 70       	andi	r19, 0x00	; 0
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	22 0f       	add	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	ce 01       	movw	r24, r28
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	04 e0       	ldi	r16, 0x04	; 4
    190e:	10 e0       	ldi	r17, 0x00	; 0
    1910:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    1914:	88 23       	and	r24, r24
    1916:	31 f4       	brne	.+12     	; 0x1924 <get_fat+0x1a6>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    1918:	29 81       	ldd	r18, Y+1	; 0x01
    191a:	3a 81       	ldd	r19, Y+2	; 0x02
    191c:	4b 81       	ldd	r20, Y+3	; 0x03
    191e:	5c 81       	ldd	r21, Y+4	; 0x04
    1920:	5f 70       	andi	r21, 0x0F	; 15
    1922:	04 c0       	rjmp	.+8      	; 0x192c <get_fat+0x1ae>
    1924:	21 e0       	ldi	r18, 0x01	; 1
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    192c:	b9 01       	movw	r22, r18
    192e:	ca 01       	movw	r24, r20
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	ff 90       	pop	r15
    1942:	ef 90       	pop	r14
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
    1948:	bf 90       	pop	r11
    194a:	af 90       	pop	r10
    194c:	9f 90       	pop	r9
    194e:	8f 90       	pop	r8
    1950:	7f 90       	pop	r7
    1952:	6f 90       	pop	r6
    1954:	08 95       	ret

00001956 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    1956:	af 92       	push	r10
    1958:	bf 92       	push	r11
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    196c:	c0 91 81 00 	lds	r28, 0x0081
    1970:	d0 91 82 00 	lds	r29, 0x0082


	i = dj->index + 1;
    1974:	fc 01       	movw	r30, r24
    1976:	c0 80       	ld	r12, Z
    1978:	d1 80       	ldd	r13, Z+1	; 0x01
    197a:	08 94       	sec
    197c:	c1 1c       	adc	r12, r1
    197e:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1980:	c1 14       	cp	r12, r1
    1982:	d1 04       	cpc	r13, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <dir_next+0x32>
    1986:	8f c0       	rjmp	.+286    	; 0x1aa6 <dir_next+0x150>
    1988:	24 85       	ldd	r18, Z+12	; 0x0c
    198a:	35 85       	ldd	r19, Z+13	; 0x0d
    198c:	46 85       	ldd	r20, Z+14	; 0x0e
    198e:	57 85       	ldd	r21, Z+15	; 0x0f
    1990:	21 15       	cp	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	41 05       	cpc	r20, r1
    1996:	51 05       	cpc	r21, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <dir_next+0x46>
    199a:	85 c0       	rjmp	.+266    	; 0x1aa6 <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    199c:	c6 01       	movw	r24, r12
    199e:	8f 70       	andi	r24, 0x0F	; 15
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	89 2b       	or	r24, r25
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <dir_next+0x52>
    19a6:	7a c0       	rjmp	.+244    	; 0x1a9c <dir_next+0x146>
		dj->sect++;			/* Next sector */
    19a8:	2f 5f       	subi	r18, 0xFF	; 255
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	4f 4f       	sbci	r20, 0xFF	; 255
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	24 87       	std	Z+12, r18	; 0x0c
    19b2:	35 87       	std	Z+13, r19	; 0x0d
    19b4:	46 87       	std	Z+14, r20	; 0x0e
    19b6:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    19b8:	40 85       	ldd	r20, Z+8	; 0x08
    19ba:	51 85       	ldd	r21, Z+9	; 0x09
    19bc:	62 85       	ldd	r22, Z+10	; 0x0a
    19be:	73 85       	ldd	r23, Z+11	; 0x0b
    19c0:	41 15       	cp	r20, r1
    19c2:	51 05       	cpc	r21, r1
    19c4:	61 05       	cpc	r22, r1
    19c6:	71 05       	cpc	r23, r1
    19c8:	39 f4       	brne	.+14     	; 0x19d8 <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	c8 16       	cp	r12, r24
    19d0:	d9 06       	cpc	r13, r25
    19d2:	08 f4       	brcc	.+2      	; 0x19d6 <dir_next+0x80>
    19d4:	63 c0       	rjmp	.+198    	; 0x1a9c <dir_next+0x146>
    19d6:	67 c0       	rjmp	.+206    	; 0x1aa6 <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	96 01       	movw	r18, r12
    19e0:	e4 e0       	ldi	r30, 0x04	; 4
    19e2:	36 95       	lsr	r19
    19e4:	27 95       	ror	r18
    19e6:	ea 95       	dec	r30
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <dir_next+0x8c>
    19ea:	82 23       	and	r24, r18
    19ec:	93 23       	and	r25, r19
    19ee:	89 2b       	or	r24, r25
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <dir_next+0x9e>
    19f2:	54 c0       	rjmp	.+168    	; 0x1a9c <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
    19f4:	cb 01       	movw	r24, r22
    19f6:	ba 01       	movw	r22, r20
    19f8:	0e 94 bf 0b 	call	0x177e	; 0x177e <get_fat>
    19fc:	9b 01       	movw	r18, r22
    19fe:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
    1a00:	62 30       	cpi	r22, 0x02	; 2
    1a02:	71 05       	cpc	r23, r1
    1a04:	81 05       	cpc	r24, r1
    1a06:	91 05       	cpc	r25, r1
    1a08:	10 f4       	brcc	.+4      	; 0x1a0e <dir_next+0xb8>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	4d c0       	rjmp	.+154    	; 0x1aa8 <dir_next+0x152>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    1a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a10:	9f 81       	ldd	r25, Y+7	; 0x07
    1a12:	a8 85       	ldd	r26, Y+8	; 0x08
    1a14:	b9 85       	ldd	r27, Y+9	; 0x09
    1a16:	28 17       	cp	r18, r24
    1a18:	39 07       	cpc	r19, r25
    1a1a:	4a 07       	cpc	r20, r26
    1a1c:	5b 07       	cpc	r21, r27
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <dir_next+0xcc>
    1a20:	42 c0       	rjmp	.+132    	; 0x1aa6 <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    1a22:	f5 01       	movw	r30, r10
    1a24:	20 87       	std	Z+8, r18	; 0x08
    1a26:	31 87       	std	Z+9, r19	; 0x09
    1a28:	42 87       	std	Z+10, r20	; 0x0a
    1a2a:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1a2c:	c0 91 81 00 	lds	r28, 0x0081
    1a30:	d0 91 82 00 	lds	r29, 0x0082


	clst -= 2;
    1a34:	8e ef       	ldi	r24, 0xFE	; 254
    1a36:	e8 2e       	mov	r14, r24
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	f8 2e       	mov	r15, r24
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	08 2f       	mov	r16, r24
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	18 2f       	mov	r17, r24
    1a44:	e2 0e       	add	r14, r18
    1a46:	f3 1e       	adc	r15, r19
    1a48:	04 1f       	adc	r16, r20
    1a4a:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a50:	a8 85       	ldd	r26, Y+8	; 0x08
    1a52:	b9 85       	ldd	r27, Y+9	; 0x09
    1a54:	02 97       	sbiw	r24, 0x02	; 2
    1a56:	a1 09       	sbc	r26, r1
    1a58:	b1 09       	sbc	r27, r1
    1a5a:	e8 16       	cp	r14, r24
    1a5c:	f9 06       	cpc	r15, r25
    1a5e:	0a 07       	cpc	r16, r26
    1a60:	1b 07       	cpc	r17, r27
    1a62:	28 f0       	brcs	.+10     	; 0x1a6e <dir_next+0x118>
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	12 c0       	rjmp	.+36     	; 0x1a92 <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
    1a6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	c8 01       	movw	r24, r16
    1a78:	b7 01       	movw	r22, r14
    1a7a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    1a7e:	9b 01       	movw	r18, r22
    1a80:	ac 01       	movw	r20, r24
    1a82:	8a 89       	ldd	r24, Y+18	; 0x12
    1a84:	9b 89       	ldd	r25, Y+19	; 0x13
    1a86:	ac 89       	ldd	r26, Y+20	; 0x14
    1a88:	bd 89       	ldd	r27, Y+21	; 0x15
    1a8a:	28 0f       	add	r18, r24
    1a8c:	39 1f       	adc	r19, r25
    1a8e:	4a 1f       	adc	r20, r26
    1a90:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
    1a92:	f5 01       	movw	r30, r10
    1a94:	24 87       	std	Z+12, r18	; 0x0c
    1a96:	35 87       	std	Z+13, r19	; 0x0d
    1a98:	46 87       	std	Z+14, r20	; 0x0e
    1a9a:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
    1a9c:	f5 01       	movw	r30, r10
    1a9e:	d1 82       	std	Z+1, r13	; 0x01
    1aa0:	c0 82       	st	Z, r12
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <dir_next+0x152>

	return FR_OK;
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
}
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	ff 90       	pop	r15
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	bf 90       	pop	r11
    1aba:	af 90       	pop	r10
    1abc:	08 95       	ret

00001abe <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    1abe:	2f 92       	push	r2
    1ac0:	3f 92       	push	r3
    1ac2:	4f 92       	push	r4
    1ac4:	5f 92       	push	r5
    1ac6:	6f 92       	push	r6
    1ac8:	7f 92       	push	r7
    1aca:	8f 92       	push	r8
    1acc:	9f 92       	push	r9
    1ace:	af 92       	push	r10
    1ad0:	bf 92       	push	r11
    1ad2:	cf 92       	push	r12
    1ad4:	df 92       	push	r13
    1ad6:	ef 92       	push	r14
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    1ae4:	c0 91 81 00 	lds	r28, 0x0081
    1ae8:	d0 91 82 00 	lds	r29, 0x0082


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1aec:	20 97       	sbiw	r28, 0x00	; 0
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <pf_lseek+0x36>
    1af0:	86 e0       	ldi	r24, 0x06	; 6
    1af2:	02 c1       	rjmp	.+516    	; 0x1cf8 <pf_lseek+0x23a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	80 fd       	sbrc	r24, 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <pf_lseek+0x40>
    1afa:	85 e0       	ldi	r24, 0x05	; 5
    1afc:	fd c0       	rjmp	.+506    	; 0x1cf8 <pf_lseek+0x23a>
    1afe:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1b00:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1b02:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1b04:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1b06:	4e 2f       	mov	r20, r30
    1b08:	59 2f       	mov	r21, r25
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	da 01       	movw	r26, r20
    1b0e:	3c 01       	movw	r6, r24
    1b10:	4d 01       	movw	r8, r26
    1b12:	e6 14       	cp	r14, r6
    1b14:	f7 04       	cpc	r15, r7
    1b16:	08 05       	cpc	r16, r8
    1b18:	19 05       	cpc	r17, r9
    1b1a:	10 f4       	brcc	.+4      	; 0x1b20 <pf_lseek+0x62>
    1b1c:	37 01       	movw	r6, r14
    1b1e:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
    1b20:	ee 88       	ldd	r14, Y+22	; 0x16
    1b22:	ff 88       	ldd	r15, Y+23	; 0x17
    1b24:	08 8d       	ldd	r16, Y+24	; 0x18
    1b26:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
    1b28:	1e 8a       	std	Y+22, r1	; 0x16
    1b2a:	1f 8a       	std	Y+23, r1	; 0x17
    1b2c:	18 8e       	std	Y+24, r1	; 0x18
    1b2e:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
    1b30:	61 14       	cp	r6, r1
    1b32:	71 04       	cpc	r7, r1
    1b34:	81 04       	cpc	r8, r1
    1b36:	91 04       	cpc	r9, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <pf_lseek+0x7e>
    1b3a:	da c0       	rjmp	.+436    	; 0x1cf0 <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	a8 2e       	mov	r10, r24
    1b40:	bb 24       	eor	r11, r11
    1b42:	cc 24       	eor	r12, r12
    1b44:	dd 24       	eor	r13, r13
    1b46:	b9 e0       	ldi	r27, 0x09	; 9
    1b48:	aa 0c       	add	r10, r10
    1b4a:	bb 1c       	adc	r11, r11
    1b4c:	cc 1c       	adc	r12, r12
    1b4e:	dd 1c       	adc	r13, r13
    1b50:	ba 95       	dec	r27
    1b52:	d1 f7       	brne	.-12     	; 0x1b48 <pf_lseek+0x8a>
		if (ifptr > 0 &&
    1b54:	e1 14       	cp	r14, r1
    1b56:	f1 04       	cpc	r15, r1
    1b58:	01 05       	cpc	r16, r1
    1b5a:	11 05       	cpc	r17, r1
    1b5c:	b1 f1       	breq	.+108    	; 0x1bca <pf_lseek+0x10c>
    1b5e:	17 01       	movw	r2, r14
    1b60:	28 01       	movw	r4, r16
    1b62:	08 94       	sec
    1b64:	21 08       	sbc	r2, r1
    1b66:	31 08       	sbc	r3, r1
    1b68:	41 08       	sbc	r4, r1
    1b6a:	51 08       	sbc	r5, r1
    1b6c:	c4 01       	movw	r24, r8
    1b6e:	b3 01       	movw	r22, r6
    1b70:	61 50       	subi	r22, 0x01	; 1
    1b72:	70 40       	sbci	r23, 0x00	; 0
    1b74:	80 40       	sbci	r24, 0x00	; 0
    1b76:	90 40       	sbci	r25, 0x00	; 0
    1b78:	a6 01       	movw	r20, r12
    1b7a:	95 01       	movw	r18, r10
    1b7c:	0e 94 2d 1a 	call	0x345a	; 0x345a <__udivmodsi4>
    1b80:	79 01       	movw	r14, r18
    1b82:	8a 01       	movw	r16, r20
    1b84:	c2 01       	movw	r24, r4
    1b86:	b1 01       	movw	r22, r2
    1b88:	a6 01       	movw	r20, r12
    1b8a:	95 01       	movw	r18, r10
    1b8c:	0e 94 2d 1a 	call	0x345a	; 0x345a <__udivmodsi4>
    1b90:	e2 16       	cp	r14, r18
    1b92:	f3 06       	cpc	r15, r19
    1b94:	04 07       	cpc	r16, r20
    1b96:	15 07       	cpc	r17, r21
    1b98:	c0 f0       	brcs	.+48     	; 0x1bca <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    1b9a:	88 27       	eor	r24, r24
    1b9c:	99 27       	eor	r25, r25
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	8a 19       	sub	r24, r10
    1ba2:	9b 09       	sbc	r25, r11
    1ba4:	ac 09       	sbc	r26, r12
    1ba6:	bd 09       	sbc	r27, r13
    1ba8:	82 21       	and	r24, r2
    1baa:	93 21       	and	r25, r3
    1bac:	a4 21       	and	r26, r4
    1bae:	b5 21       	and	r27, r5
    1bb0:	8e 8b       	std	Y+22, r24	; 0x16
    1bb2:	9f 8b       	std	Y+23, r25	; 0x17
    1bb4:	a8 8f       	std	Y+24, r26	; 0x18
    1bb6:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
    1bb8:	68 1a       	sub	r6, r24
    1bba:	79 0a       	sbc	r7, r25
    1bbc:	8a 0a       	sbc	r8, r26
    1bbe:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
    1bc0:	2a a1       	ldd	r18, Y+34	; 0x22
    1bc2:	3b a1       	ldd	r19, Y+35	; 0x23
    1bc4:	4c a1       	ldd	r20, Y+36	; 0x24
    1bc6:	5d a1       	ldd	r21, Y+37	; 0x25
    1bc8:	33 c0       	rjmp	.+102    	; 0x1c30 <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    1bca:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1bcc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1bce:	48 a1       	ldd	r20, Y+32	; 0x20
    1bd0:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
    1bd2:	2a a3       	std	Y+34, r18	; 0x22
    1bd4:	3b a3       	std	Y+35, r19	; 0x23
    1bd6:	4c a3       	std	Y+36, r20	; 0x24
    1bd8:	5d a3       	std	Y+37, r21	; 0x25
    1bda:	2a c0       	rjmp	.+84     	; 0x1c30 <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    1bdc:	ca 01       	movw	r24, r20
    1bde:	b9 01       	movw	r22, r18
    1be0:	0e 94 bf 0b 	call	0x177e	; 0x177e <get_fat>
    1be4:	9b 01       	movw	r18, r22
    1be6:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    1be8:	62 30       	cpi	r22, 0x02	; 2
    1bea:	71 05       	cpc	r23, r1
    1bec:	81 05       	cpc	r24, r1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	08 f4       	brcc	.+2      	; 0x1bf4 <pf_lseek+0x136>
    1bf2:	80 c0       	rjmp	.+256    	; 0x1cf4 <pf_lseek+0x236>
    1bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf8:	a8 85       	ldd	r26, Y+8	; 0x08
    1bfa:	b9 85       	ldd	r27, Y+9	; 0x09
    1bfc:	28 17       	cp	r18, r24
    1bfe:	39 07       	cpc	r19, r25
    1c00:	4a 07       	cpc	r20, r26
    1c02:	5b 07       	cpc	r21, r27
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <pf_lseek+0x14a>
    1c06:	76 c0       	rjmp	.+236    	; 0x1cf4 <pf_lseek+0x236>
			fs->curr_clust = clst;
    1c08:	2a a3       	std	Y+34, r18	; 0x22
    1c0a:	3b a3       	std	Y+35, r19	; 0x23
    1c0c:	4c a3       	std	Y+36, r20	; 0x24
    1c0e:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
    1c10:	8e 89       	ldd	r24, Y+22	; 0x16
    1c12:	9f 89       	ldd	r25, Y+23	; 0x17
    1c14:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c16:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c18:	8a 0d       	add	r24, r10
    1c1a:	9b 1d       	adc	r25, r11
    1c1c:	ac 1d       	adc	r26, r12
    1c1e:	bd 1d       	adc	r27, r13
    1c20:	8e 8b       	std	Y+22, r24	; 0x16
    1c22:	9f 8b       	std	Y+23, r25	; 0x17
    1c24:	a8 8f       	std	Y+24, r26	; 0x18
    1c26:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
    1c28:	6a 18       	sub	r6, r10
    1c2a:	7b 08       	sbc	r7, r11
    1c2c:	8c 08       	sbc	r8, r12
    1c2e:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1c30:	a6 14       	cp	r10, r6
    1c32:	b7 04       	cpc	r11, r7
    1c34:	c8 04       	cpc	r12, r8
    1c36:	d9 04       	cpc	r13, r9
    1c38:	88 f2       	brcs	.-94     	; 0x1bdc <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    1c3a:	ee 88       	ldd	r14, Y+22	; 0x16
    1c3c:	ff 88       	ldd	r15, Y+23	; 0x17
    1c3e:	08 8d       	ldd	r16, Y+24	; 0x18
    1c40:	19 8d       	ldd	r17, Y+25	; 0x19
    1c42:	e6 0c       	add	r14, r6
    1c44:	f7 1c       	adc	r15, r7
    1c46:	08 1d       	adc	r16, r8
    1c48:	19 1d       	adc	r17, r9
    1c4a:	ee 8a       	std	Y+22, r14	; 0x16
    1c4c:	ff 8a       	std	Y+23, r15	; 0x17
    1c4e:	08 8f       	std	Y+24, r16	; 0x18
    1c50:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1c52:	80 90 81 00 	lds	r8, 0x0081
    1c56:	90 90 82 00 	lds	r9, 0x0082


	clst -= 2;
    1c5a:	ae ef       	ldi	r26, 0xFE	; 254
    1c5c:	aa 2e       	mov	r10, r26
    1c5e:	af ef       	ldi	r26, 0xFF	; 255
    1c60:	ba 2e       	mov	r11, r26
    1c62:	af ef       	ldi	r26, 0xFF	; 255
    1c64:	ca 2e       	mov	r12, r26
    1c66:	af ef       	ldi	r26, 0xFF	; 255
    1c68:	da 2e       	mov	r13, r26
    1c6a:	a2 0e       	add	r10, r18
    1c6c:	b3 1e       	adc	r11, r19
    1c6e:	c4 1e       	adc	r12, r20
    1c70:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1c72:	f4 01       	movw	r30, r8
    1c74:	86 81       	ldd	r24, Z+6	; 0x06
    1c76:	97 81       	ldd	r25, Z+7	; 0x07
    1c78:	a0 85       	ldd	r26, Z+8	; 0x08
    1c7a:	b1 85       	ldd	r27, Z+9	; 0x09
    1c7c:	02 97       	sbiw	r24, 0x02	; 2
    1c7e:	a1 09       	sbc	r26, r1
    1c80:	b1 09       	sbc	r27, r1
    1c82:	a8 16       	cp	r10, r24
    1c84:	b9 06       	cpc	r11, r25
    1c86:	ca 06       	cpc	r12, r26
    1c88:	db 06       	cpc	r13, r27
    1c8a:	a0 f5       	brcc	.+104    	; 0x1cf4 <pf_lseek+0x236>
	return (DWORD)clst * fs->csize + fs->database;
    1c8c:	22 81       	ldd	r18, Z+2	; 0x02
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	c6 01       	movw	r24, r12
    1c96:	b5 01       	movw	r22, r10
    1c98:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    1c9c:	9b 01       	movw	r18, r22
    1c9e:	ac 01       	movw	r20, r24
    1ca0:	f4 01       	movw	r30, r8
    1ca2:	82 89       	ldd	r24, Z+18	; 0x12
    1ca4:	93 89       	ldd	r25, Z+19	; 0x13
    1ca6:	a4 89       	ldd	r26, Z+20	; 0x14
    1ca8:	b5 89       	ldd	r27, Z+21	; 0x15
    1caa:	28 0f       	add	r18, r24
    1cac:	39 1f       	adc	r19, r25
    1cae:	4a 1f       	adc	r20, r26
    1cb0:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
    1cb2:	21 15       	cp	r18, r1
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	41 05       	cpc	r20, r1
    1cb8:	51 05       	cpc	r21, r1
    1cba:	e1 f0       	breq	.+56     	; 0x1cf4 <pf_lseek+0x236>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    1cbc:	f9 e0       	ldi	r31, 0x09	; 9
    1cbe:	16 95       	lsr	r17
    1cc0:	07 95       	ror	r16
    1cc2:	f7 94       	ror	r15
    1cc4:	e7 94       	ror	r14
    1cc6:	fa 95       	dec	r31
    1cc8:	d1 f7       	brne	.-12     	; 0x1cbe <pf_lseek+0x200>
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	aa 27       	eor	r26, r26
    1cd2:	97 fd       	sbrc	r25, 7
    1cd4:	a0 95       	com	r26
    1cd6:	ba 2f       	mov	r27, r26
    1cd8:	e8 22       	and	r14, r24
    1cda:	f9 22       	and	r15, r25
    1cdc:	0a 23       	and	r16, r26
    1cde:	1b 23       	and	r17, r27
    1ce0:	2e 0d       	add	r18, r14
    1ce2:	3f 1d       	adc	r19, r15
    1ce4:	40 1f       	adc	r20, r16
    1ce6:	51 1f       	adc	r21, r17
    1ce8:	2e a3       	std	Y+38, r18	; 0x26
    1cea:	3f a3       	std	Y+39, r19	; 0x27
    1cec:	48 a7       	std	Y+40, r20	; 0x28
    1cee:	59 a7       	std	Y+41, r21	; 0x29
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <pf_lseek+0x23a>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	9f 90       	pop	r9
    1d0e:	8f 90       	pop	r8
    1d10:	7f 90       	pop	r7
    1d12:	6f 90       	pop	r6
    1d14:	5f 90       	pop	r5
    1d16:	4f 90       	pop	r4
    1d18:	3f 90       	pop	r3
    1d1a:	2f 90       	pop	r2
    1d1c:	08 95       	ret

00001d1e <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1d1e:	af 92       	push	r10
    1d20:	bf 92       	push	r11
    1d22:	cf 92       	push	r12
    1d24:	df 92       	push	r13
    1d26:	ef 92       	push	r14
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	ac 97       	sbiw	r28, 0x2c	; 44
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	7c 01       	movw	r14, r24
    1d44:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1d46:	80 91 81 00 	lds	r24, 0x0081
    1d4a:	90 91 82 00 	lds	r25, 0x0082
    1d4e:	89 2b       	or	r24, r25
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <pf_readdir+0x38>
    1d52:	86 e0       	ldi	r24, 0x06	; 6
    1d54:	b0 c0       	rjmp	.+352    	; 0x1eb6 <pf_readdir+0x198>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1d56:	ce 01       	movw	r24, r28
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	d7 01       	movw	r26, r14
    1d5c:	13 96       	adiw	r26, 0x03	; 3
    1d5e:	9c 93       	st	X, r25
    1d60:	8e 93       	st	-X, r24
    1d62:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
    1d64:	61 15       	cp	r22, r1
    1d66:	71 05       	cpc	r23, r1
    1d68:	39 f0       	breq	.+14     	; 0x1d78 <pf_readdir+0x5a>
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1d6c:	0d e0       	ldi	r16, 0x0D	; 13
    1d6e:	a0 2e       	mov	r10, r16
    1d70:	b1 2c       	mov	r11, r1
    1d72:	ac 0e       	add	r10, r28
    1d74:	bd 1e       	adc	r11, r29
    1d76:	28 c0       	rjmp	.+80     	; 0x1dc8 <pf_readdir+0xaa>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
    1d78:	c7 01       	movw	r24, r14
    1d7a:	0e 94 40 0b 	call	0x1680	; 0x1680 <dir_rewind>
    1d7e:	9b c0       	rjmp	.+310    	; 0x1eb6 <pf_readdir+0x198>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1d80:	f7 01       	movw	r30, r14
    1d82:	20 81       	ld	r18, Z
    1d84:	31 81       	ldd	r19, Z+1	; 0x01
    1d86:	2f 70       	andi	r18, 0x0F	; 15
    1d88:	30 70       	andi	r19, 0x00	; 0
    1d8a:	15 e0       	ldi	r17, 0x05	; 5
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	1a 95       	dec	r17
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <pf_readdir+0x6e>
    1d94:	c5 01       	movw	r24, r10
    1d96:	00 e2       	ldi	r16, 0x20	; 32
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1d9e:	88 23       	and	r24, r24
    1da0:	11 f0       	breq	.+4      	; 0x1da6 <pf_readdir+0x88>
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	1f c0       	rjmp	.+62     	; 0x1de4 <pf_readdir+0xc6>
		c = dir[DIR_Name];
    1da6:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1da8:	99 23       	and	r25, r25
    1daa:	09 f4       	brne	.+2      	; 0x1dae <pf_readdir+0x90>
    1dac:	95 c0       	rjmp	.+298    	; 0x1ed8 <pf_readdir+0x1ba>
		a = dir[DIR_Attr] & AM_MASK;
    1dae:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    1db0:	95 3e       	cpi	r25, 0xE5	; 229
    1db2:	29 f0       	breq	.+10     	; 0x1dbe <pf_readdir+0xa0>
    1db4:	9e 32       	cpi	r25, 0x2E	; 46
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <pf_readdir+0xa0>
    1db8:	8f 73       	andi	r24, 0x3F	; 63
    1dba:	83 ff       	sbrs	r24, 3
    1dbc:	1d c0       	rjmp	.+58     	; 0x1df8 <pf_readdir+0xda>
			break;
		res = dir_next(dj);			/* Next entry */
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <dir_next>
		if (res != FR_OK) break;
    1dc4:	88 23       	and	r24, r24
    1dc6:	71 f4       	brne	.+28     	; 0x1de4 <pf_readdir+0xc6>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    1dc8:	d7 01       	movw	r26, r14
    1dca:	1c 96       	adiw	r26, 0x0c	; 12
    1dcc:	4d 91       	ld	r20, X+
    1dce:	5d 91       	ld	r21, X+
    1dd0:	6d 91       	ld	r22, X+
    1dd2:	7c 91       	ld	r23, X
    1dd4:	1f 97       	sbiw	r26, 0x0f	; 15
    1dd6:	41 15       	cp	r20, r1
    1dd8:	51 05       	cpc	r21, r1
    1dda:	61 05       	cpc	r22, r1
    1ddc:	71 05       	cpc	r23, r1
    1dde:	81 f6       	brne	.-96     	; 0x1d80 <pf_readdir+0x62>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1de0:	88 23       	and	r24, r24
    1de2:	51 f0       	breq	.+20     	; 0x1df8 <pf_readdir+0xda>
    1de4:	f7 01       	movw	r30, r14
    1de6:	14 86       	std	Z+12, r1	; 0x0c
    1de8:	15 86       	std	Z+13, r1	; 0x0d
    1dea:	16 86       	std	Z+14, r1	; 0x0e
    1dec:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    1df2:	88 23       	and	r24, r24
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <pf_readdir+0xda>
    1df6:	5f c0       	rjmp	.+190    	; 0x1eb6 <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    1df8:	96 01       	movw	r18, r12
    1dfa:	27 5f       	subi	r18, 0xF7	; 247
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    1dfe:	f7 01       	movw	r30, r14
    1e00:	84 85       	ldd	r24, Z+12	; 0x0c
    1e02:	95 85       	ldd	r25, Z+13	; 0x0d
    1e04:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e06:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	a1 05       	cpc	r26, r1
    1e0c:	b1 05       	cpc	r27, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <pf_readdir+0xf4>
    1e10:	43 c0       	rjmp	.+134    	; 0x1e98 <pf_readdir+0x17a>
    1e12:	fe 01       	movw	r30, r28
    1e14:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1e16:	ae 01       	movw	r20, r28
    1e18:	4b 5e       	subi	r20, 0xEB	; 235
    1e1a:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
    1e1c:	80 81       	ld	r24, Z
			if (c == ' ') break;
    1e1e:	80 32       	cpi	r24, 0x20	; 32
    1e20:	51 f0       	breq	.+20     	; 0x1e36 <pf_readdir+0x118>
			if (c == 0x05) c = 0xE5;
    1e22:	85 30       	cpi	r24, 0x05	; 5
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <pf_readdir+0x10a>
    1e26:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    1e28:	d9 01       	movw	r26, r18
    1e2a:	8d 93       	st	X+, r24
    1e2c:	9d 01       	movw	r18, r26
    1e2e:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1e30:	e4 17       	cp	r30, r20
    1e32:	f5 07       	cpc	r31, r21
    1e34:	99 f7       	brne	.-26     	; 0x1e1c <pf_readdir+0xfe>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    1e36:	8d 89       	ldd	r24, Y+21	; 0x15
    1e38:	80 32       	cpi	r24, 0x20	; 32
    1e3a:	99 f0       	breq	.+38     	; 0x1e62 <pf_readdir+0x144>
			*p++ = '.';
    1e3c:	8e e2       	ldi	r24, 0x2E	; 46
    1e3e:	f9 01       	movw	r30, r18
    1e40:	81 93       	st	Z+, r24
    1e42:	9f 01       	movw	r18, r30
    1e44:	fe 01       	movw	r30, r28
    1e46:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
    1e48:	ae 01       	movw	r20, r28
    1e4a:	48 5e       	subi	r20, 0xE8	; 232
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
    1e4e:	80 81       	ld	r24, Z
				if (c == ' ') break;
    1e50:	80 32       	cpi	r24, 0x20	; 32
    1e52:	39 f0       	breq	.+14     	; 0x1e62 <pf_readdir+0x144>
				*p++ = c;
    1e54:	d9 01       	movw	r26, r18
    1e56:	8d 93       	st	X+, r24
    1e58:	9d 01       	movw	r18, r26
    1e5a:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1e5c:	e4 17       	cp	r30, r20
    1e5e:	f5 07       	cpc	r31, r21
    1e60:	b1 f7       	brne	.-20     	; 0x1e4e <pf_readdir+0x130>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1e62:	88 8d       	ldd	r24, Y+24	; 0x18
    1e64:	f6 01       	movw	r30, r12
    1e66:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1e68:	fe 01       	movw	r30, r28
    1e6a:	3d 96       	adiw	r30, 0x0d	; 13
    1e6c:	44 8d       	ldd	r20, Z+28	; 0x1c
    1e6e:	55 8d       	ldd	r21, Z+29	; 0x1d
    1e70:	66 8d       	ldd	r22, Z+30	; 0x1e
    1e72:	77 8d       	ldd	r23, Z+31	; 0x1f
    1e74:	d6 01       	movw	r26, r12
    1e76:	4d 93       	st	X+, r20
    1e78:	5d 93       	st	X+, r21
    1e7a:	6d 93       	st	X+, r22
    1e7c:	7c 93       	st	X, r23
    1e7e:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1e80:	80 8d       	ldd	r24, Z+24	; 0x18
    1e82:	91 8d       	ldd	r25, Z+25	; 0x19
    1e84:	15 96       	adiw	r26, 0x05	; 5
    1e86:	9c 93       	st	X, r25
    1e88:	8e 93       	st	-X, r24
    1e8a:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1e8c:	86 89       	ldd	r24, Z+22	; 0x16
    1e8e:	97 89       	ldd	r25, Z+23	; 0x17
    1e90:	17 96       	adiw	r26, 0x07	; 7
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
    1e96:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
    1e98:	f9 01       	movw	r30, r18
    1e9a:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1e9c:	c7 01       	movw	r24, r14
    1e9e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <dir_next>
				if (res == FR_NO_FILE) {
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	41 f4       	brne	.+16     	; 0x1eb6 <pf_readdir+0x198>
					dj->sect = 0;
    1ea6:	d7 01       	movw	r26, r14
    1ea8:	1c 96       	adiw	r26, 0x0c	; 12
    1eaa:	1d 92       	st	X+, r1
    1eac:	1d 92       	st	X+, r1
    1eae:	1d 92       	st	X+, r1
    1eb0:	1c 92       	st	X, r1
    1eb2:	1f 97       	sbiw	r26, 0x0f	; 15
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
    1eb6:	ac 96       	adiw	r28, 0x2c	; 44
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	bf 90       	pop	r11
    1ed4:	af 90       	pop	r10
    1ed6:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	84 cf       	rjmp	.-248    	; 0x1de4 <pf_readdir+0xc6>

00001edc <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    1edc:	6f 92       	push	r6
    1ede:	7f 92       	push	r7
    1ee0:	8f 92       	push	r8
    1ee2:	9f 92       	push	r9
    1ee4:	af 92       	push	r10
    1ee6:	bf 92       	push	r11
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	ec 01       	movw	r28, r24
    1efa:	6b 01       	movw	r12, r22
    1efc:	7a 01       	movw	r14, r20
    1efe:	03 c0       	rjmp	.+6      	; 0x1f06 <follow_path+0x2a>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    1f00:	08 94       	sec
    1f02:	e1 1c       	adc	r14, r1
    1f04:	f1 1c       	adc	r15, r1
    1f06:	f7 01       	movw	r30, r14
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 32       	cpi	r24, 0x20	; 32
    1f0c:	c9 f3       	breq	.-14     	; 0x1f00 <follow_path+0x24>
	if (*path == '/') path++;			/* Strip heading separator */
    1f0e:	8f 32       	cpi	r24, 0x2F	; 47
    1f10:	19 f4       	brne	.+6      	; 0x1f18 <follow_path+0x3c>
    1f12:	08 94       	sec
    1f14:	e1 1c       	adc	r14, r1
    1f16:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    1f18:	1c 82       	std	Y+4, r1	; 0x04
    1f1a:	1d 82       	std	Y+5, r1	; 0x05
    1f1c:	1e 82       	std	Y+6, r1	; 0x06
    1f1e:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    1f20:	f7 01       	movw	r30, r14
    1f22:	80 81       	ld	r24, Z
    1f24:	81 32       	cpi	r24, 0x21	; 33
    1f26:	38 f4       	brcc	.+14     	; 0x1f36 <follow_path+0x5a>
		res = dir_rewind(dj);
    1f28:	ce 01       	movw	r24, r28
    1f2a:	0e 94 40 0b 	call	0x1680	; 0x1680 <dir_rewind>
    1f2e:	b8 2e       	mov	r11, r24
		dir[0] = 0;
    1f30:	f6 01       	movw	r30, r12
    1f32:	10 82       	st	Z, r1
    1f34:	a5 c0       	rjmp	.+330    	; 0x2080 <follow_path+0x1a4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1f36:	a0 e2       	ldi	r26, 0x20	; 32
    1f38:	6a 2e       	mov	r6, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1f3a:	77 24       	eor	r7, r7
    1f3c:	73 94       	inc	r7
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1f3e:	fb e0       	ldi	r31, 0x0B	; 11
    1f40:	8f 2e       	mov	r8, r31
    1f42:	91 2c       	mov	r9, r1
    1f44:	8c 0c       	add	r8, r12
    1f46:	9d 1c       	adc	r9, r13
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    1f48:	aa 81       	ldd	r26, Y+2	; 0x02
    1f4a:	bb 81       	ldd	r27, Y+3	; 0x03
    1f4c:	fd 01       	movw	r30, r26
    1f4e:	8b e0       	ldi	r24, 0x0B	; 11
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <follow_path+0x7a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1f54:	61 92       	st	Z+, r6
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	2f ef       	ldi	r18, 0xFF	; 255
    1f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5c:	92 07       	cpc	r25, r18
    1f5e:	d1 f7       	brne	.-12     	; 0x1f54 <follow_path+0x78>
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	aa 24       	eor	r10, r10
    1f64:	38 e0       	ldi	r19, 0x08	; 8
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <follow_path+0x90>
    1f68:	28 e0       	ldi	r18, 0x08	; 8
    1f6a:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    1f6c:	f7 01       	movw	r30, r14
    1f6e:	ea 0d       	add	r30, r10
    1f70:	f1 1d       	adc	r31, r1
    1f72:	90 81       	ld	r25, Z
    1f74:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    1f76:	91 32       	cpi	r25, 0x21	; 33
    1f78:	b0 f0       	brcs	.+44     	; 0x1fa6 <follow_path+0xca>
    1f7a:	9f 32       	cpi	r25, 0x2F	; 47
    1f7c:	a1 f0       	breq	.+40     	; 0x1fa6 <follow_path+0xca>
		if (c == '.' || i >= ni) {
    1f7e:	9e 32       	cpi	r25, 0x2E	; 46
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <follow_path+0xaa>
    1f82:	23 17       	cp	r18, r19
    1f84:	28 f0       	brcs	.+10     	; 0x1f90 <follow_path+0xb4>
			if (ni != 8 || c != '.') break;
    1f86:	38 30       	cpi	r19, 0x08	; 8
    1f88:	71 f4       	brne	.+28     	; 0x1fa6 <follow_path+0xca>
    1f8a:	9e 32       	cpi	r25, 0x2E	; 46
    1f8c:	69 f3       	breq	.-38     	; 0x1f68 <follow_path+0x8c>
    1f8e:	0b c0       	rjmp	.+22     	; 0x1fa6 <follow_path+0xca>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1f90:	89 2f       	mov	r24, r25
    1f92:	81 56       	subi	r24, 0x61	; 97
    1f94:	8a 31       	cpi	r24, 0x1A	; 26
    1f96:	08 f4       	brcc	.+2      	; 0x1f9a <follow_path+0xbe>
    1f98:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    1f9a:	fd 01       	movw	r30, r26
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f1 1d       	adc	r31, r1
    1fa0:	90 83       	st	Z, r25
    1fa2:	2f 5f       	subi	r18, 0xFF	; 255
    1fa4:	e3 cf       	rjmp	.-58     	; 0x1f6c <follow_path+0x90>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1fa6:	1b 96       	adiw	r26, 0x0b	; 11
    1fa8:	1c 92       	st	X, r1
    1faa:	1b 97       	sbiw	r26, 0x0b	; 11
    1fac:	91 32       	cpi	r25, 0x21	; 33
    1fae:	10 f4       	brcc	.+4      	; 0x1fb4 <follow_path+0xd8>
    1fb0:	1b 96       	adiw	r26, 0x0b	; 11
    1fb2:	7c 92       	st	X, r7
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	0e 94 40 0b 	call	0x1680	; 0x1680 <dir_rewind>
    1fba:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
    1fbc:	88 23       	and	r24, r24
    1fbe:	d1 f5       	brne	.+116    	; 0x2034 <follow_path+0x158>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1fc0:	4c 85       	ldd	r20, Y+12	; 0x0c
    1fc2:	5d 85       	ldd	r21, Y+13	; 0x0d
    1fc4:	6e 85       	ldd	r22, Y+14	; 0x0e
    1fc6:	7f 85       	ldd	r23, Y+15	; 0x0f
    1fc8:	28 81       	ld	r18, Y
    1fca:	39 81       	ldd	r19, Y+1	; 0x01
    1fcc:	2f 70       	andi	r18, 0x0F	; 15
    1fce:	30 70       	andi	r19, 0x00	; 0
    1fd0:	e5 e0       	ldi	r30, 0x05	; 5
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	ea 95       	dec	r30
    1fd8:	e1 f7       	brne	.-8      	; 0x1fd2 <follow_path+0xf6>
    1fda:	c6 01       	movw	r24, r12
    1fdc:	00 e2       	ldi	r16, 0x20	; 32
    1fde:	10 e0       	ldi	r17, 0x00	; 0
    1fe0:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1fe4:	88 23       	and	r24, r24
    1fe6:	11 f0       	breq	.+4      	; 0x1fec <follow_path+0x110>
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	23 c0       	rjmp	.+70     	; 0x2032 <follow_path+0x156>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1fec:	f6 01       	movw	r30, r12
    1fee:	80 81       	ld	r24, Z
    1ff0:	88 23       	and	r24, r24
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <follow_path+0x11a>
    1ff4:	55 c0       	rjmp	.+170    	; 0x20a0 <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1ff6:	f4 01       	movw	r30, r8
    1ff8:	80 81       	ld	r24, Z
    1ffa:	83 fd       	sbrc	r24, 3
    1ffc:	15 c0       	rjmp	.+42     	; 0x2028 <follow_path+0x14c>
    1ffe:	d6 01       	movw	r26, r12
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	9b 81       	ldd	r25, Y+3	; 0x03
    2004:	9c 01       	movw	r18, r24
    2006:	f9 01       	movw	r30, r18
    2008:	2b e0       	ldi	r18, 0x0B	; 11
    200a:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    200c:	21 50       	subi	r18, 0x01	; 1
    200e:	30 40       	sbci	r19, 0x00	; 0
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	2f 3f       	cpi	r18, 0xFF	; 255
    2014:	38 07       	cpc	r19, r24
    2016:	09 f4       	brne	.+2      	; 0x201a <follow_path+0x13e>
    2018:	46 c0       	rjmp	.+140    	; 0x20a6 <follow_path+0x1ca>
    201a:	9c 91       	ld	r25, X
    201c:	80 81       	ld	r24, Z
    201e:	98 17       	cp	r25, r24
    2020:	19 f4       	brne	.+6      	; 0x2028 <follow_path+0x14c>
    2022:	11 96       	adiw	r26, 0x01	; 1
    2024:	31 96       	adiw	r30, 0x01	; 1
    2026:	f2 cf       	rjmp	.-28     	; 0x200c <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    2028:	ce 01       	movw	r24, r28
    202a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <dir_next>
	} while (res == FR_OK);
    202e:	88 23       	and	r24, r24
    2030:	39 f2       	breq	.-114    	; 0x1fc0 <follow_path+0xe4>
    2032:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    2034:	e3 e0       	ldi	r30, 0x03	; 3
    2036:	be 16       	cp	r11, r30
    2038:	19 f5       	brne	.+70     	; 0x2080 <follow_path+0x1a4>
    203a:	ea 81       	ldd	r30, Y+2	; 0x02
    203c:	fb 81       	ldd	r31, Y+3	; 0x03
    203e:	83 85       	ldd	r24, Z+11	; 0x0b
    2040:	88 23       	and	r24, r24
    2042:	e1 f0       	breq	.+56     	; 0x207c <follow_path+0x1a0>
    2044:	1d c0       	rjmp	.+58     	; 0x2080 <follow_path+0x1a4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    2046:	f4 01       	movw	r30, r8
    2048:	80 81       	ld	r24, Z
    204a:	84 ff       	sbrs	r24, 4
    204c:	17 c0       	rjmp	.+46     	; 0x207c <follow_path+0x1a0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    204e:	ea 0c       	add	r14, r10
    2050:	f1 1c       	adc	r15, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    2052:	f6 01       	movw	r30, r12
    2054:	84 89       	ldd	r24, Z+20	; 0x14
    2056:	95 89       	ldd	r25, Z+21	; 0x15
    2058:	a0 e0       	ldi	r26, 0x00	; 0
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	dc 01       	movw	r26, r24
    205e:	99 27       	eor	r25, r25
    2060:	88 27       	eor	r24, r24
    2062:	22 8d       	ldd	r18, Z+26	; 0x1a
    2064:	33 8d       	ldd	r19, Z+27	; 0x1b
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	82 2b       	or	r24, r18
    206c:	93 2b       	or	r25, r19
    206e:	a4 2b       	or	r26, r20
    2070:	b5 2b       	or	r27, r21
    2072:	8c 83       	std	Y+4, r24	; 0x04
    2074:	9d 83       	std	Y+5, r25	; 0x05
    2076:	ae 83       	std	Y+6, r26	; 0x06
    2078:	bf 83       	std	Y+7, r27	; 0x07
    207a:	66 cf       	rjmp	.-308    	; 0x1f48 <follow_path+0x6c>
		}
    207c:	94 e0       	ldi	r25, 0x04	; 4
    207e:	b9 2e       	mov	r11, r25
	}

	return res;
}
    2080:	8b 2d       	mov	r24, r11
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	af 90       	pop	r10
    2096:	9f 90       	pop	r9
    2098:	8f 90       	pop	r8
    209a:	7f 90       	pop	r7
    209c:	6f 90       	pop	r6
    209e:	08 95       	ret
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	b8 2e       	mov	r11, r24
    20a4:	ca cf       	rjmp	.-108    	; 0x203a <follow_path+0x15e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    20a6:	ea 81       	ldd	r30, Y+2	; 0x02
    20a8:	fb 81       	ldd	r31, Y+3	; 0x03
    20aa:	83 85       	ldd	r24, Z+11	; 0x0b
    20ac:	88 23       	and	r24, r24
    20ae:	59 f2       	breq	.-106    	; 0x2046 <follow_path+0x16a>
    20b0:	e7 cf       	rjmp	.-50     	; 0x2080 <follow_path+0x1a4>

000020b2 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	ac 97       	sbiw	r28, 0x2c	; 44
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	8c 01       	movw	r16, r24
    20d0:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    20d2:	80 91 81 00 	lds	r24, 0x0081
    20d6:	90 91 82 00 	lds	r25, 0x0082
    20da:	89 2b       	or	r24, r25
    20dc:	11 f4       	brne	.+4      	; 0x20e2 <pf_opendir+0x30>
    20de:	86 e0       	ldi	r24, 0x06	; 6
    20e0:	31 c0       	rjmp	.+98     	; 0x2144 <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	f8 01       	movw	r30, r16
    20e8:	93 83       	std	Z+3, r25	; 0x03
    20ea:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    20ec:	3d e0       	ldi	r19, 0x0D	; 13
    20ee:	e3 2e       	mov	r14, r19
    20f0:	f1 2c       	mov	r15, r1
    20f2:	ec 0e       	add	r14, r28
    20f4:	fd 1e       	adc	r15, r29
    20f6:	c8 01       	movw	r24, r16
    20f8:	b7 01       	movw	r22, r14
    20fa:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    20fe:	88 23       	and	r24, r24
    2100:	f1 f4       	brne	.+60     	; 0x213e <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	88 23       	and	r24, r24
    2106:	c1 f0       	breq	.+48     	; 0x2138 <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    2108:	88 8d       	ldd	r24, Y+24	; 0x18
    210a:	84 ff       	sbrs	r24, 4
    210c:	1a c0       	rjmp	.+52     	; 0x2142 <pf_opendir+0x90>
					dj->sclust = LD_CLUST(dir);
    210e:	f7 01       	movw	r30, r14
    2110:	84 89       	ldd	r24, Z+20	; 0x14
    2112:	95 89       	ldd	r25, Z+21	; 0x15
    2114:	a0 e0       	ldi	r26, 0x00	; 0
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	dc 01       	movw	r26, r24
    211a:	99 27       	eor	r25, r25
    211c:	88 27       	eor	r24, r24
    211e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2120:	33 8d       	ldd	r19, Z+27	; 0x1b
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	82 2b       	or	r24, r18
    2128:	93 2b       	or	r25, r19
    212a:	a4 2b       	or	r26, r20
    212c:	b5 2b       	or	r27, r21
    212e:	f8 01       	movw	r30, r16
    2130:	84 83       	std	Z+4, r24	; 0x04
    2132:	95 83       	std	Z+5, r25	; 0x05
    2134:	a6 83       	std	Z+6, r26	; 0x06
    2136:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    2138:	c8 01       	movw	r24, r16
    213a:	0e 94 40 0b 	call	0x1680	; 0x1680 <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    213e:	83 30       	cpi	r24, 0x03	; 3
    2140:	09 f4       	brne	.+2      	; 0x2144 <pf_opendir+0x92>
    2142:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    2144:	ac 96       	adiw	r28, 0x2c	; 44
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	08 95       	ret

0000215e <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	ec 97       	sbiw	r28, 0x3c	; 60
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    217c:	00 91 81 00 	lds	r16, 0x0081
    2180:	10 91 82 00 	lds	r17, 0x0082


	if (!fs)						/* Check file system */
    2184:	01 15       	cp	r16, r1
    2186:	11 05       	cpc	r17, r1
    2188:	11 f4       	brne	.+4      	; 0x218e <pf_open+0x30>
    218a:	66 e0       	ldi	r22, 0x06	; 6
    218c:	40 c0       	rjmp	.+128    	; 0x220e <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    218e:	f8 01       	movw	r30, r16
    2190:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    2192:	ce 01       	movw	r24, r28
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	98 8b       	std	Y+16, r25	; 0x10
    2198:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    219a:	6d e1       	ldi	r22, 0x1D	; 29
    219c:	e6 2e       	mov	r14, r22
    219e:	f1 2c       	mov	r15, r1
    21a0:	ec 0e       	add	r14, r28
    21a2:	fd 1e       	adc	r15, r29
    21a4:	ce 01       	movw	r24, r28
    21a6:	0d 96       	adiw	r24, 0x0d	; 13
    21a8:	b7 01       	movw	r22, r14
    21aa:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <follow_path>
    21ae:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    21b0:	88 23       	and	r24, r24
    21b2:	69 f5       	brne	.+90     	; 0x220e <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    21b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b6:	88 23       	and	r24, r24
    21b8:	49 f1       	breq	.+82     	; 0x220c <pf_open+0xae>
    21ba:	88 a5       	ldd	r24, Y+40	; 0x28
    21bc:	84 fd       	sbrc	r24, 4
    21be:	26 c0       	rjmp	.+76     	; 0x220c <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    21c0:	f7 01       	movw	r30, r14
    21c2:	84 89       	ldd	r24, Z+20	; 0x14
    21c4:	95 89       	ldd	r25, Z+21	; 0x15
    21c6:	a0 e0       	ldi	r26, 0x00	; 0
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	dc 01       	movw	r26, r24
    21cc:	99 27       	eor	r25, r25
    21ce:	88 27       	eor	r24, r24
    21d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    21d2:	33 8d       	ldd	r19, Z+27	; 0x1b
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	82 2b       	or	r24, r18
    21da:	93 2b       	or	r25, r19
    21dc:	a4 2b       	or	r26, r20
    21de:	b5 2b       	or	r27, r21
    21e0:	f8 01       	movw	r30, r16
    21e2:	86 8f       	std	Z+30, r24	; 0x1e
    21e4:	97 8f       	std	Z+31, r25	; 0x1f
    21e6:	a0 a3       	std	Z+32, r26	; 0x20
    21e8:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    21ea:	f7 01       	movw	r30, r14
    21ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    21ee:	95 8d       	ldd	r25, Z+29	; 0x1d
    21f0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    21f2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    21f4:	f8 01       	movw	r30, r16
    21f6:	82 8f       	std	Z+26, r24	; 0x1a
    21f8:	93 8f       	std	Z+27, r25	; 0x1b
    21fa:	a4 8f       	std	Z+28, r26	; 0x1c
    21fc:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    21fe:	16 8a       	std	Z+22, r1	; 0x16
    2200:	17 8a       	std	Z+23, r1	; 0x17
    2202:	10 8e       	std	Z+24, r1	; 0x18
    2204:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	81 83       	std	Z+1, r24	; 0x01
    220a:	01 c0       	rjmp	.+2      	; 0x220e <pf_open+0xb0>

	return FR_OK;
    220c:	63 e0       	ldi	r22, 0x03	; 3
}
    220e:	86 2f       	mov	r24, r22
    2210:	ec 96       	adiw	r28, 0x3c	; 60
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	ef 90       	pop	r14
    2228:	08 95       	ret

0000222a <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    222a:	4f 92       	push	r4
    222c:	5f 92       	push	r5
    222e:	6f 92       	push	r6
    2230:	7f 92       	push	r7
    2232:	8f 92       	push	r8
    2234:	9f 92       	push	r9
    2236:	af 92       	push	r10
    2238:	bf 92       	push	r11
    223a:	cf 92       	push	r12
    223c:	df 92       	push	r13
    223e:	ef 92       	push	r14
    2240:	ff 92       	push	r15
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	3c 01       	movw	r6, r24
    224c:	6b 01       	movw	r12, r22
    224e:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    2250:	c0 91 81 00 	lds	r28, 0x0081
    2254:	d0 91 82 00 	lds	r29, 0x0082


	*br = 0;
    2258:	fa 01       	movw	r30, r20
    225a:	11 82       	std	Z+1, r1	; 0x01
    225c:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    225e:	20 97       	sbiw	r28, 0x00	; 0
    2260:	11 f4       	brne	.+4      	; 0x2266 <pf_read+0x3c>
    2262:	86 e0       	ldi	r24, 0x06	; 6
    2264:	ca c0       	rjmp	.+404    	; 0x23fa <pf_read+0x1d0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	80 fd       	sbrc	r24, 0
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <pf_read+0x46>
    226c:	85 e0       	ldi	r24, 0x05	; 5
    226e:	c5 c0       	rjmp	.+394    	; 0x23fa <pf_read+0x1d0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    2270:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2272:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2274:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2276:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2278:	8e 89       	ldd	r24, Y+22	; 0x16
    227a:	9f 89       	ldd	r25, Y+23	; 0x17
    227c:	a8 8d       	ldd	r26, Y+24	; 0x18
    227e:	b9 8d       	ldd	r27, Y+25	; 0x19
    2280:	28 1b       	sub	r18, r24
    2282:	39 0b       	sbc	r19, r25
    2284:	4a 0b       	sbc	r20, r26
    2286:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    2288:	cb 01       	movw	r24, r22
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	28 17       	cp	r18, r24
    2290:	39 07       	cpc	r19, r25
    2292:	4a 07       	cpc	r20, r26
    2294:	5b 07       	cpc	r21, r27
    2296:	08 f4       	brcc	.+2      	; 0x229a <pf_read+0x70>
    2298:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    229a:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    229c:	41 2c       	mov	r4, r1
    229e:	e2 e0       	ldi	r30, 0x02	; 2
    22a0:	5e 2e       	mov	r5, r30
    22a2:	a3 c0       	rjmp	.+326    	; 0x23ea <pf_read+0x1c0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    22a4:	2e 89       	ldd	r18, Y+22	; 0x16
    22a6:	3f 89       	ldd	r19, Y+23	; 0x17
    22a8:	48 8d       	ldd	r20, Y+24	; 0x18
    22aa:	59 8d       	ldd	r21, Y+25	; 0x19
    22ac:	da 01       	movw	r26, r20
    22ae:	c9 01       	movw	r24, r18
    22b0:	91 70       	andi	r25, 0x01	; 1
    22b2:	a0 70       	andi	r26, 0x00	; 0
    22b4:	b0 70       	andi	r27, 0x00	; 0
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	a1 05       	cpc	r26, r1
    22ba:	b1 05       	cpc	r27, r1
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <pf_read+0x96>
    22be:	60 c0       	rjmp	.+192    	; 0x2380 <pf_read+0x156>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    22c0:	da 01       	movw	r26, r20
    22c2:	c9 01       	movw	r24, r18
    22c4:	79 e0       	ldi	r23, 0x09	; 9
    22c6:	b6 95       	lsr	r27
    22c8:	a7 95       	ror	r26
    22ca:	97 95       	ror	r25
    22cc:	87 95       	ror	r24
    22ce:	7a 95       	dec	r23
    22d0:	d1 f7       	brne	.-12     	; 0x22c6 <pf_read+0x9c>
    22d2:	fa 80       	ldd	r15, Y+2	; 0x02
    22d4:	fa 94       	dec	r15
    22d6:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    22d8:	d1 f4       	brne	.+52     	; 0x230e <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    22da:	21 15       	cp	r18, r1
    22dc:	31 05       	cpc	r19, r1
    22de:	41 05       	cpc	r20, r1
    22e0:	51 05       	cpc	r21, r1
    22e2:	29 f4       	brne	.+10     	; 0x22ee <pf_read+0xc4>
    22e4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    22e6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    22e8:	88 a1       	ldd	r24, Y+32	; 0x20
    22ea:	99 a1       	ldd	r25, Y+33	; 0x21
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <pf_read+0xd0>
    22ee:	6a a1       	ldd	r22, Y+34	; 0x22
    22f0:	7b a1       	ldd	r23, Y+35	; 0x23
    22f2:	8c a1       	ldd	r24, Y+36	; 0x24
    22f4:	9d a1       	ldd	r25, Y+37	; 0x25
    22f6:	0e 94 bf 0b 	call	0x177e	; 0x177e <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    22fa:	62 30       	cpi	r22, 0x02	; 2
    22fc:	71 05       	cpc	r23, r1
    22fe:	81 05       	cpc	r24, r1
    2300:	91 05       	cpc	r25, r1
    2302:	08 f4       	brcc	.+2      	; 0x2306 <pf_read+0xdc>
    2304:	78 c0       	rjmp	.+240    	; 0x23f6 <pf_read+0x1cc>
				fs->curr_clust = clst;				/* Update current cluster */
    2306:	6a a3       	std	Y+34, r22	; 0x22
    2308:	7b a3       	std	Y+35, r23	; 0x23
    230a:	8c a3       	std	Y+36, r24	; 0x24
    230c:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    230e:	00 91 81 00 	lds	r16, 0x0081
    2312:	10 91 82 00 	lds	r17, 0x0082


	clst -= 2;
    2316:	2a a1       	ldd	r18, Y+34	; 0x22
    2318:	3b a1       	ldd	r19, Y+35	; 0x23
    231a:	4c a1       	ldd	r20, Y+36	; 0x24
    231c:	5d a1       	ldd	r21, Y+37	; 0x25
    231e:	22 50       	subi	r18, 0x02	; 2
    2320:	30 40       	sbci	r19, 0x00	; 0
    2322:	40 40       	sbci	r20, 0x00	; 0
    2324:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2326:	f8 01       	movw	r30, r16
    2328:	86 81       	ldd	r24, Z+6	; 0x06
    232a:	97 81       	ldd	r25, Z+7	; 0x07
    232c:	a0 85       	ldd	r26, Z+8	; 0x08
    232e:	b1 85       	ldd	r27, Z+9	; 0x09
    2330:	02 97       	sbiw	r24, 0x02	; 2
    2332:	a1 09       	sbc	r26, r1
    2334:	b1 09       	sbc	r27, r1
    2336:	28 17       	cp	r18, r24
    2338:	39 07       	cpc	r19, r25
    233a:	4a 07       	cpc	r20, r26
    233c:	5b 07       	cpc	r21, r27
    233e:	08 f0       	brcs	.+2      	; 0x2342 <pf_read+0x118>
    2340:	5a c0       	rjmp	.+180    	; 0x23f6 <pf_read+0x1cc>
	return (DWORD)clst * fs->csize + fs->database;
    2342:	62 81       	ldd	r22, Z+2	; 0x02
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    234e:	9b 01       	movw	r18, r22
    2350:	ac 01       	movw	r20, r24
    2352:	f8 01       	movw	r30, r16
    2354:	82 89       	ldd	r24, Z+18	; 0x12
    2356:	93 89       	ldd	r25, Z+19	; 0x13
    2358:	a4 89       	ldd	r26, Z+20	; 0x14
    235a:	b5 89       	ldd	r27, Z+21	; 0x15
    235c:	28 0f       	add	r18, r24
    235e:	39 1f       	adc	r19, r25
    2360:	4a 1f       	adc	r20, r26
    2362:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    2364:	21 15       	cp	r18, r1
    2366:	31 05       	cpc	r19, r1
    2368:	41 05       	cpc	r20, r1
    236a:	51 05       	cpc	r21, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <pf_read+0x146>
    236e:	43 c0       	rjmp	.+134    	; 0x23f6 <pf_read+0x1cc>
			fs->dsect = sect + cs;
    2370:	2f 0d       	add	r18, r15
    2372:	31 1d       	adc	r19, r1
    2374:	41 1d       	adc	r20, r1
    2376:	51 1d       	adc	r21, r1
    2378:	2e a3       	std	Y+38, r18	; 0x26
    237a:	3f a3       	std	Y+39, r19	; 0x27
    237c:	48 a7       	std	Y+40, r20	; 0x28
    237e:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    2380:	2e 89       	ldd	r18, Y+22	; 0x16
    2382:	3f 89       	ldd	r19, Y+23	; 0x17
    2384:	31 70       	andi	r19, 0x01	; 1
    2386:	c2 01       	movw	r24, r4
    2388:	82 1b       	sub	r24, r18
    238a:	93 0b       	sbc	r25, r19
    238c:	76 01       	movw	r14, r12
    238e:	8c 15       	cp	r24, r12
    2390:	9d 05       	cpc	r25, r13
    2392:	08 f4       	brcc	.+2      	; 0x2396 <pf_read+0x16c>
    2394:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    2396:	61 14       	cp	r6, r1
    2398:	71 04       	cpc	r7, r1
    239a:	19 f4       	brne	.+6      	; 0x23a2 <pf_read+0x178>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <pf_read+0x17a>
    23a2:	c5 01       	movw	r24, r10
    23a4:	4e a1       	ldd	r20, Y+38	; 0x26
    23a6:	5f a1       	ldd	r21, Y+39	; 0x27
    23a8:	68 a5       	ldd	r22, Y+40	; 0x28
    23aa:	79 a5       	ldd	r23, Y+41	; 0x29
    23ac:	87 01       	movw	r16, r14
    23ae:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
		if (dr) goto fr_abort;
    23b2:	88 23       	and	r24, r24
    23b4:	01 f5       	brne	.+64     	; 0x23f6 <pf_read+0x1cc>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    23b6:	c7 01       	movw	r24, r14
    23b8:	a0 e0       	ldi	r26, 0x00	; 0
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	2e 89       	ldd	r18, Y+22	; 0x16
    23be:	3f 89       	ldd	r19, Y+23	; 0x17
    23c0:	48 8d       	ldd	r20, Y+24	; 0x18
    23c2:	59 8d       	ldd	r21, Y+25	; 0x19
    23c4:	28 0f       	add	r18, r24
    23c6:	39 1f       	adc	r19, r25
    23c8:	4a 1f       	adc	r20, r26
    23ca:	5b 1f       	adc	r21, r27
    23cc:	2e 8b       	std	Y+22, r18	; 0x16
    23ce:	3f 8b       	std	Y+23, r19	; 0x17
    23d0:	48 8f       	std	Y+24, r20	; 0x18
    23d2:	59 8f       	std	Y+25, r21	; 0x19
    23d4:	ae 0c       	add	r10, r14
    23d6:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    23d8:	ce 18       	sub	r12, r14
    23da:	df 08       	sbc	r13, r15
    23dc:	f4 01       	movw	r30, r8
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	8e 0d       	add	r24, r14
    23e4:	9f 1d       	adc	r25, r15
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    23ea:	c1 14       	cp	r12, r1
    23ec:	d1 04       	cpc	r13, r1
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <pf_read+0x1c8>
    23f0:	59 cf       	rjmp	.-334    	; 0x22a4 <pf_read+0x7a>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <pf_read+0x1d0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    23f6:	19 82       	std	Y+1, r1	; 0x01
    23f8:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	ff 90       	pop	r15
    2404:	ef 90       	pop	r14
    2406:	df 90       	pop	r13
    2408:	cf 90       	pop	r12
    240a:	bf 90       	pop	r11
    240c:	af 90       	pop	r10
    240e:	9f 90       	pop	r9
    2410:	8f 90       	pop	r8
    2412:	7f 90       	pop	r7
    2414:	6f 90       	pop	r6
    2416:	5f 90       	pop	r5
    2418:	4f 90       	pop	r4
    241a:	08 95       	ret

0000241c <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    241c:	af 92       	push	r10
    241e:	bf 92       	push	r11
    2420:	cf 92       	push	r12
    2422:	df 92       	push	r13
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	b8 2e       	mov	r11, r24
    2432:	a9 2e       	mov	r10, r25
    2434:	6a 01       	movw	r12, r20
    2436:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    2438:	2e ef       	ldi	r18, 0xFE	; 254
    243a:	31 e0       	ldi	r19, 0x01	; 1
    243c:	02 e0       	ldi	r16, 0x02	; 2
    243e:	10 e0       	ldi	r17, 0x00	; 0
    2440:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    2444:	88 23       	and	r24, r24
    2446:	11 f0       	breq	.+4      	; 0x244c <check_fs+0x30>
    2448:	23 e0       	ldi	r18, 0x03	; 3
    244a:	33 c0       	rjmp	.+102    	; 0x24b2 <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    244c:	cb 2d       	mov	r28, r11
    244e:	da 2d       	mov	r29, r10
    2450:	88 81       	ld	r24, Y
    2452:	99 81       	ldd	r25, Y+1	; 0x01
    2454:	85 55       	subi	r24, 0x55	; 85
    2456:	9a 4a       	sbci	r25, 0xAA	; 170
    2458:	11 f0       	breq	.+4      	; 0x245e <check_fs+0x42>
    245a:	22 e0       	ldi	r18, 0x02	; 2
    245c:	2a c0       	rjmp	.+84     	; 0x24b2 <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    245e:	8b 2d       	mov	r24, r11
    2460:	9a 2d       	mov	r25, r10
    2462:	b7 01       	movw	r22, r14
    2464:	a6 01       	movw	r20, r12
    2466:	26 e3       	ldi	r18, 0x36	; 54
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	02 e0       	ldi	r16, 0x02	; 2
    246c:	10 e0       	ldi	r17, 0x00	; 0
    246e:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    2472:	88 23       	and	r24, r24
    2474:	39 f4       	brne	.+14     	; 0x2484 <check_fs+0x68>
    2476:	88 81       	ld	r24, Y
    2478:	99 81       	ldd	r25, Y+1	; 0x01
    247a:	86 54       	subi	r24, 0x46	; 70
    247c:	91 44       	sbci	r25, 0x41	; 65
    247e:	11 f4       	brne	.+4      	; 0x2484 <check_fs+0x68>
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	17 c0       	rjmp	.+46     	; 0x24b2 <check_fs+0x96>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    2484:	8b 2d       	mov	r24, r11
    2486:	9a 2d       	mov	r25, r10
    2488:	b7 01       	movw	r22, r14
    248a:	a6 01       	movw	r20, r12
    248c:	22 e5       	ldi	r18, 0x52	; 82
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	02 e0       	ldi	r16, 0x02	; 2
    2492:	10 e0       	ldi	r17, 0x00	; 0
    2494:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    2498:	88 23       	and	r24, r24
    249a:	11 f0       	breq	.+4      	; 0x24a0 <check_fs+0x84>
    249c:	21 e0       	ldi	r18, 0x01	; 1
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <check_fs+0x96>
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	88 81       	ld	r24, Y
    24a4:	99 81       	ldd	r25, Y+1	; 0x01
    24a6:	86 54       	subi	r24, 0x46	; 70
    24a8:	91 44       	sbci	r25, 0x41	; 65
    24aa:	09 f4       	brne	.+2      	; 0x24ae <check_fs+0x92>
    24ac:	21 e0       	ldi	r18, 0x01	; 1
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    24b2:	82 2f       	mov	r24, r18
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	cf 90       	pop	r12
    24c4:	bf 90       	pop	r11
    24c6:	af 90       	pop	r10
    24c8:	08 95       	ret

000024ca <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    24ca:	4f 92       	push	r4
    24cc:	5f 92       	push	r5
    24ce:	6f 92       	push	r6
    24d0:	7f 92       	push	r7
    24d2:	8f 92       	push	r8
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	bf 92       	push	r11
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	fc 01       	movw	r30, r24
    24ec:	5b 01       	movw	r10, r22
    24ee:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    24f0:	c0 91 81 00 	lds	r28, 0x0081
    24f4:	d0 91 82 00 	lds	r29, 0x0082


	*bw = 0;
    24f8:	da 01       	movw	r26, r20
    24fa:	1d 92       	st	X+, r1
    24fc:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    24fe:	20 97       	sbiw	r28, 0x00	; 0
    2500:	11 f4       	brne	.+4      	; 0x2506 <pf_write+0x3c>
    2502:	86 e0       	ldi	r24, 0x06	; 6
    2504:	fd c0       	rjmp	.+506    	; 0x2700 <pf_write+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	80 fd       	sbrc	r24, 0
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <pf_write+0x48>
    250e:	85 e0       	ldi	r24, 0x05	; 5
    2510:	f7 c0       	rjmp	.+494    	; 0x2700 <pf_write+0x236>
    2512:	80 74       	andi	r24, 0x40	; 64
    2514:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    2516:	61 15       	cp	r22, r1
    2518:	71 05       	cpc	r23, r1
    251a:	89 f4       	brne	.+34     	; 0x253e <pf_write+0x74>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    251c:	89 2b       	or	r24, r25
    251e:	59 f0       	breq	.+22     	; 0x2536 <pf_write+0x6c>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <disk_writep>
    2530:	88 23       	and	r24, r24
    2532:	09 f0       	breq	.+2      	; 0x2536 <pf_write+0x6c>
    2534:	e3 c0       	rjmp	.+454    	; 0x26fc <pf_write+0x232>
		fs->flag &= ~FA__WIP;
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	8f 7b       	andi	r24, 0xBF	; 191
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	dd c0       	rjmp	.+442    	; 0x26f8 <pf_write+0x22e>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    253e:	89 2b       	or	r24, r25
    2540:	51 f4       	brne	.+20     	; 0x2556 <pf_write+0x8c>
			fs->fptr &= 0xFFFFFE00;
    2542:	8e 89       	ldd	r24, Y+22	; 0x16
    2544:	9f 89       	ldd	r25, Y+23	; 0x17
    2546:	a8 8d       	ldd	r26, Y+24	; 0x18
    2548:	b9 8d       	ldd	r27, Y+25	; 0x19
    254a:	80 70       	andi	r24, 0x00	; 0
    254c:	9e 7f       	andi	r25, 0xFE	; 254
    254e:	8e 8b       	std	Y+22, r24	; 0x16
    2550:	9f 8b       	std	Y+23, r25	; 0x17
    2552:	a8 8f       	std	Y+24, r26	; 0x18
    2554:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    2556:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2558:	3b 8d       	ldd	r19, Y+27	; 0x1b
    255a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    255c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    255e:	8e 89       	ldd	r24, Y+22	; 0x16
    2560:	9f 89       	ldd	r25, Y+23	; 0x17
    2562:	a8 8d       	ldd	r26, Y+24	; 0x18
    2564:	b9 8d       	ldd	r27, Y+25	; 0x19
    2566:	28 1b       	sub	r18, r24
    2568:	39 0b       	sbc	r19, r25
    256a:	4a 0b       	sbc	r20, r26
    256c:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    256e:	c5 01       	movw	r24, r10
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	28 17       	cp	r18, r24
    2576:	39 07       	cpc	r19, r25
    2578:	4a 07       	cpc	r20, r26
    257a:	5b 07       	cpc	r21, r27
    257c:	08 f4       	brcc	.+2      	; 0x2580 <pf_write+0xb6>
    257e:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    2580:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    2582:	41 2c       	mov	r4, r1
    2584:	a2 e0       	ldi	r26, 0x02	; 2
    2586:	5a 2e       	mov	r5, r26
    2588:	b3 c0       	rjmp	.+358    	; 0x26f0 <pf_write+0x226>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    258a:	2e 89       	ldd	r18, Y+22	; 0x16
    258c:	3f 89       	ldd	r19, Y+23	; 0x17
    258e:	48 8d       	ldd	r20, Y+24	; 0x18
    2590:	59 8d       	ldd	r21, Y+25	; 0x19
    2592:	c9 01       	movw	r24, r18
    2594:	91 70       	andi	r25, 0x01	; 1
    2596:	89 2b       	or	r24, r25
    2598:	09 f0       	breq	.+2      	; 0x259c <pf_write+0xd2>
    259a:	6c c0       	rjmp	.+216    	; 0x2674 <pf_write+0x1aa>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    259c:	da 01       	movw	r26, r20
    259e:	c9 01       	movw	r24, r18
    25a0:	f9 e0       	ldi	r31, 0x09	; 9
    25a2:	b6 95       	lsr	r27
    25a4:	a7 95       	ror	r26
    25a6:	97 95       	ror	r25
    25a8:	87 95       	ror	r24
    25aa:	fa 95       	dec	r31
    25ac:	d1 f7       	brne	.-12     	; 0x25a2 <pf_write+0xd8>
    25ae:	fa 80       	ldd	r15, Y+2	; 0x02
    25b0:	fa 94       	dec	r15
    25b2:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    25b4:	d1 f4       	brne	.+52     	; 0x25ea <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    25b6:	21 15       	cp	r18, r1
    25b8:	31 05       	cpc	r19, r1
    25ba:	41 05       	cpc	r20, r1
    25bc:	51 05       	cpc	r21, r1
    25be:	29 f4       	brne	.+10     	; 0x25ca <pf_write+0x100>
    25c0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    25c2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    25c4:	88 a1       	ldd	r24, Y+32	; 0x20
    25c6:	99 a1       	ldd	r25, Y+33	; 0x21
    25c8:	06 c0       	rjmp	.+12     	; 0x25d6 <pf_write+0x10c>
    25ca:	6a a1       	ldd	r22, Y+34	; 0x22
    25cc:	7b a1       	ldd	r23, Y+35	; 0x23
    25ce:	8c a1       	ldd	r24, Y+36	; 0x24
    25d0:	9d a1       	ldd	r25, Y+37	; 0x25
    25d2:	0e 94 bf 0b 	call	0x177e	; 0x177e <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    25d6:	62 30       	cpi	r22, 0x02	; 2
    25d8:	71 05       	cpc	r23, r1
    25da:	81 05       	cpc	r24, r1
    25dc:	91 05       	cpc	r25, r1
    25de:	08 f4       	brcc	.+2      	; 0x25e2 <pf_write+0x118>
    25e0:	8d c0       	rjmp	.+282    	; 0x26fc <pf_write+0x232>
				fs->curr_clust = clst;				/* Update current cluster */
    25e2:	6a a3       	std	Y+34, r22	; 0x22
    25e4:	7b a3       	std	Y+35, r23	; 0x23
    25e6:	8c a3       	std	Y+36, r24	; 0x24
    25e8:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    25ea:	00 91 81 00 	lds	r16, 0x0081
    25ee:	10 91 82 00 	lds	r17, 0x0082


	clst -= 2;
    25f2:	2a a1       	ldd	r18, Y+34	; 0x22
    25f4:	3b a1       	ldd	r19, Y+35	; 0x23
    25f6:	4c a1       	ldd	r20, Y+36	; 0x24
    25f8:	5d a1       	ldd	r21, Y+37	; 0x25
    25fa:	22 50       	subi	r18, 0x02	; 2
    25fc:	30 40       	sbci	r19, 0x00	; 0
    25fe:	40 40       	sbci	r20, 0x00	; 0
    2600:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2602:	f8 01       	movw	r30, r16
    2604:	86 81       	ldd	r24, Z+6	; 0x06
    2606:	97 81       	ldd	r25, Z+7	; 0x07
    2608:	a0 85       	ldd	r26, Z+8	; 0x08
    260a:	b1 85       	ldd	r27, Z+9	; 0x09
    260c:	02 97       	sbiw	r24, 0x02	; 2
    260e:	a1 09       	sbc	r26, r1
    2610:	b1 09       	sbc	r27, r1
    2612:	28 17       	cp	r18, r24
    2614:	39 07       	cpc	r19, r25
    2616:	4a 07       	cpc	r20, r26
    2618:	5b 07       	cpc	r21, r27
    261a:	08 f0       	brcs	.+2      	; 0x261e <pf_write+0x154>
    261c:	6f c0       	rjmp	.+222    	; 0x26fc <pf_write+0x232>
	return (DWORD)clst * fs->csize + fs->database;
    261e:	62 81       	ldd	r22, Z+2	; 0x02
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    262a:	9b 01       	movw	r18, r22
    262c:	ac 01       	movw	r20, r24
    262e:	f8 01       	movw	r30, r16
    2630:	82 89       	ldd	r24, Z+18	; 0x12
    2632:	93 89       	ldd	r25, Z+19	; 0x13
    2634:	a4 89       	ldd	r26, Z+20	; 0x14
    2636:	b5 89       	ldd	r27, Z+21	; 0x15
    2638:	28 0f       	add	r18, r24
    263a:	39 1f       	adc	r19, r25
    263c:	4a 1f       	adc	r20, r26
    263e:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    2640:	21 15       	cp	r18, r1
    2642:	31 05       	cpc	r19, r1
    2644:	41 05       	cpc	r20, r1
    2646:	51 05       	cpc	r21, r1
    2648:	09 f4       	brne	.+2      	; 0x264c <pf_write+0x182>
    264a:	58 c0       	rjmp	.+176    	; 0x26fc <pf_write+0x232>
			fs->dsect = sect + cs;
    264c:	ba 01       	movw	r22, r20
    264e:	a9 01       	movw	r20, r18
    2650:	4f 0d       	add	r20, r15
    2652:	51 1d       	adc	r21, r1
    2654:	61 1d       	adc	r22, r1
    2656:	71 1d       	adc	r23, r1
    2658:	4e a3       	std	Y+38, r20	; 0x26
    265a:	5f a3       	std	Y+39, r21	; 0x27
    265c:	68 a7       	std	Y+40, r22	; 0x28
    265e:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 0b 0a 	call	0x1416	; 0x1416 <disk_writep>
    2668:	88 23       	and	r24, r24
    266a:	09 f0       	breq	.+2      	; 0x266e <pf_write+0x1a4>
    266c:	47 c0       	rjmp	.+142    	; 0x26fc <pf_write+0x232>
			fs->flag |= FA__WIP;
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	80 64       	ori	r24, 0x40	; 64
    2672:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    2674:	8e 89       	ldd	r24, Y+22	; 0x16
    2676:	9f 89       	ldd	r25, Y+23	; 0x17
    2678:	91 70       	andi	r25, 0x01	; 1
    267a:	92 01       	movw	r18, r4
    267c:	28 1b       	sub	r18, r24
    267e:	39 0b       	sbc	r19, r25
    2680:	65 01       	movw	r12, r10
    2682:	2a 15       	cp	r18, r10
    2684:	3b 05       	cpc	r19, r11
    2686:	08 f4       	brcc	.+2      	; 0x268a <pf_write+0x1c0>
    2688:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    268a:	76 01       	movw	r14, r12
    268c:	00 e0       	ldi	r16, 0x00	; 0
    268e:	10 e0       	ldi	r17, 0x00	; 0
    2690:	c4 01       	movw	r24, r8
    2692:	b8 01       	movw	r22, r16
    2694:	a7 01       	movw	r20, r14
    2696:	0e 94 0b 0a 	call	0x1416	; 0x1416 <disk_writep>
    269a:	88 23       	and	r24, r24
    269c:	79 f5       	brne	.+94     	; 0x26fc <pf_write+0x232>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    269e:	8e 89       	ldd	r24, Y+22	; 0x16
    26a0:	9f 89       	ldd	r25, Y+23	; 0x17
    26a2:	a8 8d       	ldd	r26, Y+24	; 0x18
    26a4:	b9 8d       	ldd	r27, Y+25	; 0x19
    26a6:	8e 0d       	add	r24, r14
    26a8:	9f 1d       	adc	r25, r15
    26aa:	a0 1f       	adc	r26, r16
    26ac:	b1 1f       	adc	r27, r17
    26ae:	9c 01       	movw	r18, r24
    26b0:	8e 8b       	std	Y+22, r24	; 0x16
    26b2:	9f 8b       	std	Y+23, r25	; 0x17
    26b4:	a8 8f       	std	Y+24, r26	; 0x18
    26b6:	b9 8f       	std	Y+25, r27	; 0x19
		btw -= wcnt; *bw += wcnt;
    26b8:	d3 01       	movw	r26, r6
    26ba:	8d 91       	ld	r24, X+
    26bc:	9c 91       	ld	r25, X
    26be:	11 97       	sbiw	r26, 0x01	; 1
    26c0:	8c 0d       	add	r24, r12
    26c2:	9d 1d       	adc	r25, r13
    26c4:	8d 93       	st	X+, r24
    26c6:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    26c8:	31 70       	andi	r19, 0x01	; 1
    26ca:	23 2b       	or	r18, r19
    26cc:	69 f4       	brne	.+26     	; 0x26e8 <pf_write+0x21e>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	0e 94 0b 0a 	call	0x1416	; 0x1416 <disk_writep>
    26de:	88 23       	and	r24, r24
    26e0:	69 f4       	brne	.+26     	; 0x26fc <pf_write+0x232>
			fs->flag &= ~FA__WIP;
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	8f 7b       	andi	r24, 0xBF	; 191
    26e6:	89 83       	std	Y+1, r24	; 0x01
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    26e8:	8c 0c       	add	r8, r12
    26ea:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    26ec:	ac 18       	sub	r10, r12
    26ee:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    26f0:	a1 14       	cp	r10, r1
    26f2:	b1 04       	cpc	r11, r1
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <pf_write+0x22e>
    26f6:	49 cf       	rjmp	.-366    	; 0x258a <pf_write+0xc0>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <pf_write+0x236>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    26fc:	19 82       	std	Y+1, r1	; 0x01
    26fe:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	ff 90       	pop	r15
    270a:	ef 90       	pop	r14
    270c:	df 90       	pop	r13
    270e:	cf 90       	pop	r12
    2710:	bf 90       	pop	r11
    2712:	af 90       	pop	r10
    2714:	9f 90       	pop	r9
    2716:	8f 90       	pop	r8
    2718:	7f 90       	pop	r7
    271a:	6f 90       	pop	r6
    271c:	5f 90       	pop	r5
    271e:	4f 90       	pop	r4
    2720:	08 95       	ret

00002722 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    2722:	6f 92       	push	r6
    2724:	7f 92       	push	r7
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	a4 97       	sbiw	r28, 0x24	; 36
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    2750:	10 92 82 00 	sts	0x0082, r1
    2754:	10 92 81 00 	sts	0x0081, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	09 f4       	brne	.+2      	; 0x275e <pf_mount+0x3c>
    275c:	ec c0       	rjmp	.+472    	; 0x2936 <pf_mount+0x214>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    275e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <disk_initialize>
    2762:	80 ff       	sbrs	r24, 0
    2764:	02 c0       	rjmp	.+4      	; 0x276a <pf_mount+0x48>
    2766:	82 e0       	ldi	r24, 0x02	; 2
    2768:	eb c0       	rjmp	.+470    	; 0x2940 <pf_mount+0x21e>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    276a:	4e 01       	movw	r8, r28
    276c:	08 94       	sec
    276e:	81 1c       	adc	r8, r1
    2770:	91 1c       	adc	r9, r1
    2772:	c4 01       	movw	r24, r8
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	0e 94 0e 12 	call	0x241c	; 0x241c <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	21 f0       	breq	.+8      	; 0x278c <pf_mount+0x6a>
    2784:	cc 24       	eor	r12, r12
    2786:	dd 24       	eor	r13, r13
    2788:	76 01       	movw	r14, r12
    278a:	1b c0       	rjmp	.+54     	; 0x27c2 <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    278c:	c4 01       	movw	r24, r8
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	2e eb       	ldi	r18, 0xBE	; 190
    2798:	31 e0       	ldi	r19, 0x01	; 1
    279a:	00 e1       	ldi	r16, 0x10	; 16
    279c:	10 e0       	ldi	r17, 0x00	; 0
    279e:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    27a2:	88 23       	and	r24, r24
    27a4:	09 f0       	breq	.+2      	; 0x27a8 <pf_mount+0x86>
    27a6:	c9 c0       	rjmp	.+402    	; 0x293a <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	88 23       	and	r24, r24
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <pf_mount+0x8e>
    27ae:	c7 c0       	rjmp	.+398    	; 0x293e <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    27b0:	c9 84       	ldd	r12, Y+9	; 0x09
    27b2:	da 84       	ldd	r13, Y+10	; 0x0a
    27b4:	eb 84       	ldd	r14, Y+11	; 0x0b
    27b6:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    27b8:	c4 01       	movw	r24, r8
    27ba:	b7 01       	movw	r22, r14
    27bc:	a6 01       	movw	r20, r12
    27be:	0e 94 0e 12 	call	0x241c	; 0x241c <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    27c2:	83 30       	cpi	r24, 0x03	; 3
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <pf_mount+0xa6>
    27c6:	b9 c0       	rjmp	.+370    	; 0x293a <pf_mount+0x218>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    27c8:	88 23       	and	r24, r24
    27ca:	09 f0       	breq	.+2      	; 0x27ce <pf_mount+0xac>
    27cc:	b8 c0       	rjmp	.+368    	; 0x293e <pf_mount+0x21c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    27ce:	ce 01       	movw	r24, r28
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	b7 01       	movw	r22, r14
    27d4:	a6 01       	movw	r20, r12
    27d6:	2d e0       	ldi	r18, 0x0D	; 13
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	04 e2       	ldi	r16, 0x24	; 36
    27dc:	10 e0       	ldi	r17, 0x00	; 0
    27de:	0e 94 b7 09 	call	0x136e	; 0x136e <disk_readp>
    27e2:	88 23       	and	r24, r24
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <pf_mount+0xc6>
    27e6:	a9 c0       	rjmp	.+338    	; 0x293a <pf_mount+0x218>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    27e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ec:	bc 01       	movw	r22, r24
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    27f2:	61 15       	cp	r22, r1
    27f4:	71 05       	cpc	r23, r1
    27f6:	81 05       	cpc	r24, r1
    27f8:	91 05       	cpc	r25, r1
    27fa:	21 f4       	brne	.+8      	; 0x2804 <pf_mount+0xe2>
    27fc:	68 8d       	ldd	r22, Y+24	; 0x18
    27fe:	79 8d       	ldd	r23, Y+25	; 0x19
    2800:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2802:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    2804:	2c 81       	ldd	r18, Y+4	; 0x04
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    2810:	3b 01       	movw	r6, r22
    2812:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	9b 81       	ldd	r25, Y+3	; 0x03
    2818:	a0 e0       	ldi	r26, 0x00	; 0
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	c8 0e       	add	r12, r24
    281e:	d9 1e       	adc	r13, r25
    2820:	ea 1e       	adc	r14, r26
    2822:	fb 1e       	adc	r15, r27
    2824:	f5 01       	movw	r30, r10
    2826:	c2 86       	std	Z+10, r12	; 0x0a
    2828:	d3 86       	std	Z+11, r13	; 0x0b
    282a:	e4 86       	std	Z+12, r14	; 0x0c
    282c:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    2832:	2d 81       	ldd	r18, Y+5	; 0x05
    2834:	3e 81       	ldd	r19, Y+6	; 0x06
    2836:	35 83       	std	Z+5, r19	; 0x05
    2838:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    283a:	8f 81       	ldd	r24, Y+7	; 0x07
    283c:	98 85       	ldd	r25, Y+8	; 0x08
    283e:	7c 01       	movw	r14, r24
    2840:	00 e0       	ldi	r16, 0x00	; 0
    2842:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    2844:	e1 14       	cp	r14, r1
    2846:	f1 04       	cpc	r15, r1
    2848:	01 05       	cpc	r16, r1
    284a:	11 05       	cpc	r17, r1
    284c:	21 f4       	brne	.+8      	; 0x2856 <pf_mount+0x134>
    284e:	ec 88       	ldd	r14, Y+20	; 0x14
    2850:	fd 88       	ldd	r15, Y+21	; 0x15
    2852:	0e 89       	ldd	r16, Y+22	; 0x16
    2854:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	9b 81       	ldd	r25, Y+3	; 0x03
    285a:	a0 e0       	ldi	r26, 0x00	; 0
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e8 1a       	sub	r14, r24
    2860:	f9 0a       	sbc	r15, r25
    2862:	0a 0b       	sbc	r16, r26
    2864:	1b 0b       	sbc	r17, r27
    2866:	e6 18       	sub	r14, r6
    2868:	f7 08       	sbc	r15, r7
    286a:	08 09       	sbc	r16, r8
    286c:	19 09       	sbc	r17, r9
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	36 95       	lsr	r19
    2872:	27 95       	ror	r18
    2874:	8a 95       	dec	r24
    2876:	e1 f7       	brne	.-8      	; 0x2870 <pf_mount+0x14e>
    2878:	c9 01       	movw	r24, r18
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e8 1a       	sub	r14, r24
    2880:	f9 0a       	sbc	r15, r25
    2882:	0a 0b       	sbc	r16, r26
    2884:	1b 0b       	sbc	r17, r27
    2886:	f5 01       	movw	r30, r10
    2888:	22 81       	ldd	r18, Z+2	; 0x02
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e0       	ldi	r20, 0x00	; 0
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	c8 01       	movw	r24, r16
    2892:	b7 01       	movw	r22, r14
    2894:	0e 94 2d 1a 	call	0x345a	; 0x345a <__udivmodsi4>
    2898:	2e 5f       	subi	r18, 0xFE	; 254
    289a:	3f 4f       	sbci	r19, 0xFF	; 255
    289c:	4f 4f       	sbci	r20, 0xFF	; 255
    289e:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    28a0:	f5 01       	movw	r30, r10
    28a2:	26 83       	std	Z+6, r18	; 0x06
    28a4:	37 83       	std	Z+7, r19	; 0x07
    28a6:	40 87       	std	Z+8, r20	; 0x08
    28a8:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    28aa:	27 3f       	cpi	r18, 0xF7	; 247
    28ac:	ff e0       	ldi	r31, 0x0F	; 15
    28ae:	3f 07       	cpc	r19, r31
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	4f 07       	cpc	r20, r31
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	5f 07       	cpc	r21, r31
    28b8:	10 f4       	brcc	.+4      	; 0x28be <pf_mount+0x19c>
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	01 c0       	rjmp	.+2      	; 0x28c0 <pf_mount+0x19e>
    28be:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    28c0:	27 5f       	subi	r18, 0xF7	; 247
    28c2:	3f 4f       	sbci	r19, 0xFF	; 255
    28c4:	40 40       	sbci	r20, 0x00	; 0
    28c6:	50 40       	sbci	r21, 0x00	; 0
    28c8:	08 f0       	brcs	.+2      	; 0x28cc <pf_mount+0x1aa>
    28ca:	83 e0       	ldi	r24, 0x03	; 3
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    28cc:	f5 01       	movw	r30, r10
    28ce:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    28d0:	83 30       	cpi	r24, 0x03	; 3
    28d2:	29 f4       	brne	.+10     	; 0x28de <pf_mount+0x1bc>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    28d4:	88 a1       	ldd	r24, Y+32	; 0x20
    28d6:	99 a1       	ldd	r25, Y+33	; 0x21
    28d8:	aa a1       	ldd	r26, Y+34	; 0x22
    28da:	bb a1       	ldd	r27, Y+35	; 0x23
    28dc:	09 c0       	rjmp	.+18     	; 0x28f0 <pf_mount+0x1ce>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    28de:	f5 01       	movw	r30, r10
    28e0:	82 85       	ldd	r24, Z+10	; 0x0a
    28e2:	93 85       	ldd	r25, Z+11	; 0x0b
    28e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    28e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    28e8:	86 0d       	add	r24, r6
    28ea:	97 1d       	adc	r25, r7
    28ec:	a8 1d       	adc	r26, r8
    28ee:	b9 1d       	adc	r27, r9
    28f0:	86 87       	std	Z+14, r24	; 0x0e
    28f2:	97 87       	std	Z+15, r25	; 0x0f
    28f4:	a0 8b       	std	Z+16, r26	; 0x10
    28f6:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    28f8:	f5 01       	movw	r30, r10
    28fa:	84 81       	ldd	r24, Z+4	; 0x04
    28fc:	95 81       	ldd	r25, Z+5	; 0x05
    28fe:	b4 e0       	ldi	r27, 0x04	; 4
    2900:	96 95       	lsr	r25
    2902:	87 95       	ror	r24
    2904:	ba 95       	dec	r27
    2906:	e1 f7       	brne	.-8      	; 0x2900 <pf_mount+0x1de>
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	22 85       	ldd	r18, Z+10	; 0x0a
    290e:	33 85       	ldd	r19, Z+11	; 0x0b
    2910:	44 85       	ldd	r20, Z+12	; 0x0c
    2912:	55 85       	ldd	r21, Z+13	; 0x0d
    2914:	82 0f       	add	r24, r18
    2916:	93 1f       	adc	r25, r19
    2918:	a4 1f       	adc	r26, r20
    291a:	b5 1f       	adc	r27, r21
    291c:	86 0d       	add	r24, r6
    291e:	97 1d       	adc	r25, r7
    2920:	a8 1d       	adc	r26, r8
    2922:	b9 1d       	adc	r27, r9
    2924:	82 8b       	std	Z+18, r24	; 0x12
    2926:	93 8b       	std	Z+19, r25	; 0x13
    2928:	a4 8b       	std	Z+20, r26	; 0x14
    292a:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    292c:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    292e:	b0 92 82 00 	sts	0x0082, r11
    2932:	a0 92 81 00 	sts	0x0081, r10
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	03 c0       	rjmp	.+6      	; 0x2940 <pf_mount+0x21e>

	return FR_OK;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <pf_mount+0x21e>
    293e:	87 e0       	ldi	r24, 0x07	; 7
}
    2940:	a4 96       	adiw	r28, 0x24	; 36
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	ff 90       	pop	r15
    2956:	ef 90       	pop	r14
    2958:	df 90       	pop	r13
    295a:	cf 90       	pop	r12
    295c:	bf 90       	pop	r11
    295e:	af 90       	pop	r10
    2960:	9f 90       	pop	r9
    2962:	8f 90       	pop	r8
    2964:	7f 90       	pop	r7
    2966:	6f 90       	pop	r6
    2968:	08 95       	ret

0000296a <TOUCH_Reset>:
	
	char temp;
	
	// Init port
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);		// Disable CS
    296a:	c4 9a       	sbi	0x18, 4	; 24
	TOUCH_CS_DDR |= (1<< TOUCH_CS_BIT);		// Turns on CS pin as output
    296c:	bc 9a       	sbi	0x17, 4	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_SCK_BIT);		// Set as output
    296e:	bf 9a       	sbi	0x17, 7	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_MOSI_BIT);		// Set as output
    2970:	bd 9a       	sbi	0x17, 5	; 23
	TOUCH_SPI_PORT |= (1<< TOUCH_MISO_BIT);	// Internal pull up MISO
    2972:	c6 9a       	sbi	0x18, 6	; 24

	// Init spi as master
	//
	SPCR = (1<< SPE) | (1<< MSTR);				// Initialize SPI port every /8 clock
    2974:	80 e5       	ldi	r24, 0x50	; 80
    2976:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<< SPR0);
    2978:	68 9a       	sbi	0x0d, 0	; 13
	SPSR = (1<< SPI2X);
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	8e b9       	out	0x0e, r24	; 14
	temp = SPSR;								// Clear interrupt flag	
    297e:	8e b1       	in	r24, 0x0e	; 14
}
    2980:	08 95       	ret

00002982 <TOUCH_NativeRead>:

//////////////////////////////
//
// TOUCH_NativeRead(&x, &y);
//
bool TOUCH_NativeRead (int *x, int *y) {
    2982:	4f 92       	push	r4
    2984:	5f 92       	push	r5
    2986:	6f 92       	push	r6
    2988:	7f 92       	push	r7
    298a:	8f 92       	push	r8
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	fc 01       	movw	r30, r24
    29a0:	db 01       	movw	r26, r22
	unsigned char buf_data[8];
	int z1, z2, p;

	// Enable touch screen CS
	//
	TOUCH_CS_PORT &= ~(1<< TOUCH_CS_BIT);
    29a2:	c4 98       	cbi	0x18, 4	; 24
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29a4:	83 e9       	ldi	r24, 0x93	; 147
    29a6:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29a8:	77 9b       	sbis	0x0e, 7	; 14
    29aa:	fe cf       	rjmp	.-4      	; 0x29a8 <TOUCH_NativeRead+0x26>
	return (SPDR);						// get data
    29ac:	8f b1       	in	r24, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29ae:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29b0:	77 9b       	sbis	0x0e, 7	; 14
    29b2:	fe cf       	rjmp	.-4      	; 0x29b0 <TOUCH_NativeRead+0x2e>
	return (SPDR);						// get data
    29b4:	9f b1       	in	r25, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29b6:	83 ed       	ldi	r24, 0xD3	; 211
    29b8:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29ba:	77 9b       	sbis	0x0e, 7	; 14
    29bc:	fe cf       	rjmp	.-4      	; 0x29ba <TOUCH_NativeRead+0x38>
	return (SPDR);						// get data
    29be:	2f b1       	in	r18, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29c0:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29c2:	77 9b       	sbis	0x0e, 7	; 14
    29c4:	fe cf       	rjmp	.-4      	; 0x29c2 <TOUCH_NativeRead+0x40>
	return (SPDR);						// get data
    29c6:	4f b1       	in	r20, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29c8:	83 eb       	ldi	r24, 0xB3	; 179
    29ca:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29cc:	77 9b       	sbis	0x0e, 7	; 14
    29ce:	fe cf       	rjmp	.-4      	; 0x29cc <TOUCH_NativeRead+0x4a>
	return (SPDR);						// get data
    29d0:	6f b1       	in	r22, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29d2:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29d4:	77 9b       	sbis	0x0e, 7	; 14
    29d6:	fe cf       	rjmp	.-4      	; 0x29d4 <TOUCH_NativeRead+0x52>
	return (SPDR);						// get data
    29d8:	af b0       	in	r10, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29da:	82 ec       	ldi	r24, 0xC2	; 194
    29dc:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29de:	77 9b       	sbis	0x0e, 7	; 14
    29e0:	fe cf       	rjmp	.-4      	; 0x29de <TOUCH_NativeRead+0x5c>
	return (SPDR);						// get data
    29e2:	5f b0       	in	r5, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29e4:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29e6:	77 9b       	sbis	0x0e, 7	; 14
    29e8:	fe cf       	rjmp	.-4      	; 0x29e6 <TOUCH_NativeRead+0x64>
	return (SPDR);						// get data
    29ea:	cf b0       	in	r12, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    29ec:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    29ee:	77 9b       	sbis	0x0e, 7	; 14
    29f0:	fe cf       	rjmp	.-4      	; 0x29ee <TOUCH_NativeRead+0x6c>
	return (SPDR);						// get data
    29f2:	ef b0       	in	r14, 0x0f	; 15
	buf_data[6] = TOUCH_ReadADC(TOUCH_READ);	// Read ADC data Z2 (7-bit byte High) data: 0ddddddd (bit11-bit5)
	buf_data[7] = TOUCH_ReadADC(TOUCH_READ);	// Read ADC data Z2 (5-bit byte Low)  data: ddddd000 (bit)

	// Disable touch screen CS
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);
    29f4:	c4 9a       	sbi	0x18, 4	; 24

	// Calculate
	//
	*x  = (int)buf_data[0] << 5;	// Shift 7 bit High
	*x |= (int)buf_data[1] >> 3;	// Shift 5 bit low
    29f6:	26 95       	lsr	r18
    29f8:	26 95       	lsr	r18
    29fa:	26 95       	lsr	r18
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	89 2f       	mov	r24, r25
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	55 e0       	ldi	r21, 0x05	; 5
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	5a 95       	dec	r21
    2a0a:	e1 f7       	brne	.-8      	; 0x2a04 <TOUCH_NativeRead+0x82>
    2a0c:	28 2b       	or	r18, r24
    2a0e:	39 2b       	or	r19, r25
    2a10:	31 83       	std	Z+1, r19	; 0x01
    2a12:	20 83       	st	Z, r18
	
	*y  = (int)buf_data[2] << 5;	// Shift 7 bit High
	*y |= (int)buf_data[3] >> 3;	// Shift 5 bit low
    2a14:	66 95       	lsr	r22
    2a16:	66 95       	lsr	r22
    2a18:	66 95       	lsr	r22
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	24 2f       	mov	r18, r20
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	45 e0       	ldi	r20, 0x05	; 5
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	4a 95       	dec	r20
    2a28:	e1 f7       	brne	.-8      	; 0x2a22 <TOUCH_NativeRead+0xa0>
    2a2a:	62 2b       	or	r22, r18
    2a2c:	73 2b       	or	r23, r19
    2a2e:	6d 93       	st	X+, r22
    2a30:	7c 93       	st	X, r23
	
	z1  = (int)buf_data[4] << 5;	// Shift 7 bit High
    2a32:	bb 24       	eor	r11, r11
    2a34:	95 e0       	ldi	r25, 0x05	; 5
    2a36:	aa 0c       	add	r10, r10
    2a38:	bb 1c       	adc	r11, r11
    2a3a:	9a 95       	dec	r25
    2a3c:	e1 f7       	brne	.-8      	; 0x2a36 <TOUCH_NativeRead+0xb4>
	z1 |= (int)buf_data[5] >> 3;	// Shift 5 bit low
	
	z2  = (int)buf_data[6] << 5;	// Shift 7 bit High
    2a3e:	dd 24       	eor	r13, r13
    2a40:	85 e0       	ldi	r24, 0x05	; 5
    2a42:	cc 0c       	add	r12, r12
    2a44:	dd 1c       	adc	r13, r13
    2a46:	8a 95       	dec	r24
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <TOUCH_NativeRead+0xc0>
    2a4a:	44 24       	eor	r4, r4
    2a4c:	88 27       	eor	r24, r24
    2a4e:	77 fd       	sbrc	r23, 7
    2a50:	80 95       	com	r24
    2a52:	98 2f       	mov	r25, r24
    2a54:	0e 94 0c 19 	call	0x3218	; 0x3218 <__floatsisf>
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	59 e3       	ldi	r21, 0x39	; 57
    2a60:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3>
    2a64:	3b 01       	movw	r6, r22
    2a66:	4c 01       	movw	r8, r24
    2a68:	e6 94       	lsr	r14
    2a6a:	e6 94       	lsr	r14
    2a6c:	e6 94       	lsr	r14
    2a6e:	ff 24       	eor	r15, r15
    2a70:	ec 28       	or	r14, r12
    2a72:	fd 28       	or	r15, r13
    2a74:	00 27       	eor	r16, r16
    2a76:	f7 fc       	sbrc	r15, 7
    2a78:	00 95       	com	r16
    2a7a:	10 2f       	mov	r17, r16
    2a7c:	c8 01       	movw	r24, r16
    2a7e:	b7 01       	movw	r22, r14
    2a80:	0e 94 0c 19 	call	0x3218	; 0x3218 <__floatsisf>
    2a84:	7b 01       	movw	r14, r22
    2a86:	8c 01       	movw	r16, r24
    2a88:	56 94       	lsr	r5
    2a8a:	56 94       	lsr	r5
    2a8c:	56 94       	lsr	r5
    2a8e:	65 2d       	mov	r22, r5
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	6a 29       	or	r22, r10
    2a94:	7b 29       	or	r23, r11
    2a96:	88 27       	eor	r24, r24
    2a98:	77 fd       	sbrc	r23, 7
    2a9a:	80 95       	com	r24
    2a9c:	98 2f       	mov	r25, r24
    2a9e:	0e 94 0c 19 	call	0x3218	; 0x3218 <__floatsisf>
    2aa2:	9b 01       	movw	r18, r22
    2aa4:	ac 01       	movw	r20, r24
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	0e 94 71 18 	call	0x30e2	; 0x30e2 <__divsf3>
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 0c 18 	call	0x3018	; 0x3018 <__subsf3>
    2aba:	9b 01       	movw	r18, r22
    2abc:	ac 01       	movw	r20, r24
    2abe:	c4 01       	movw	r24, r8
    2ac0:	b3 01       	movw	r22, r6
    2ac2:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3>
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e2       	ldi	r20, 0x20	; 32
    2acc:	51 e4       	ldi	r21, 0x41	; 65
    2ace:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3>
    2ad2:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__fixsfsi>
    2ad6:	6b 50       	subi	r22, 0x0B	; 11
    2ad8:	70 40       	sbci	r23, 0x00	; 0
    2ada:	6e 30       	cpi	r22, 0x0E	; 14
    2adc:	71 05       	cpc	r23, r1
    2ade:	10 f4       	brcc	.+4      	; 0x2ae4 <TOUCH_NativeRead+0x162>
    2ae0:	44 24       	eor	r4, r4
    2ae2:	43 94       	inc	r4
	//
	p = ((double)*y/4096)*((double)z2/(double)z1-1) *10;
	p = ((p > 10) && (p < 25)) ? true : false;

	return p;
}
    2ae4:	84 2d       	mov	r24, r4
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
    2af2:	bf 90       	pop	r11
    2af4:	af 90       	pop	r10
    2af6:	9f 90       	pop	r9
    2af8:	8f 90       	pop	r8
    2afa:	7f 90       	pop	r7
    2afc:	6f 90       	pop	r6
    2afe:	5f 90       	pop	r5
    2b00:	4f 90       	pop	r4
    2b02:	08 95       	ret

00002b04 <TOUCH_MultipleRead>:

////////////////////////////////
//
// TOUCH_MultipleRead(&x, &y);
//
bool TOUCH_MultipleRead (int *x, int *y) {
    2b04:	2f 92       	push	r2
    2b06:	3f 92       	push	r3
    2b08:	4f 92       	push	r4
    2b0a:	5f 92       	push	r5
    2b0c:	6f 92       	push	r6
    2b0e:	7f 92       	push	r7
    2b10:	8f 92       	push	r8
    2b12:	9f 92       	push	r9
    2b14:	af 92       	push	r10
    2b16:	bf 92       	push	r11
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	2a 97       	sbiw	r28, 0x0a	; 10
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	98 87       	std	Y+8, r25	; 0x08
    2b3a:	8f 83       	std	Y+7, r24	; 0x07
    2b3c:	7a 87       	std	Y+10, r23	; 0x0a
    2b3e:	69 87       	std	Y+9, r22	; 0x09
    2b40:	1e 82       	std	Y+6, r1	; 0x06
    2b42:	1d 82       	std	Y+5, r1	; 0x05
    2b44:	aa 24       	eor	r10, r10
    2b46:	bb 24       	eor	r11, r11
    2b48:	65 01       	movw	r12, r10
    2b4a:	66 24       	eor	r6, r6
    2b4c:	77 24       	eor	r7, r7
    2b4e:	43 01       	movw	r8, r6
    2b50:	22 24       	eor	r2, r2
    2b52:	2a 94       	dec	r2
    2b54:	32 2c       	mov	r3, r2
    2b56:	44 24       	eor	r4, r4
    2b58:	55 24       	eor	r5, r5
    2b5a:	0f ef       	ldi	r16, 0xFF	; 255
    2b5c:	1f ef       	ldi	r17, 0xFF	; 255
    2b5e:	ee 24       	eor	r14, r14
    2b60:	ff 24       	eor	r15, r15
	int tx, ty;
	unsigned int xmin = 0xFFFF, xmax = 0, ymin = 0xFFFF, ymax = 0;

	for(i=0; i<TOUCH_MULTIPLE_SAMPLE_COUNT; i++) {
		
		if (TOUCH_NativeRead(&tx, &ty)) {
    2b62:	ce 01       	movw	r24, r28
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	be 01       	movw	r22, r28
    2b68:	6d 5f       	subi	r22, 0xFD	; 253
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	0e 94 c1 14 	call	0x2982	; 0x2982 <TOUCH_NativeRead>
    2b70:	88 23       	and	r24, r24
    2b72:	49 f1       	breq	.+82     	; 0x2bc6 <TOUCH_MultipleRead+0xc2>
			
			ix += tx;
    2b74:	29 81       	ldd	r18, Y+1	; 0x01
    2b76:	3a 81       	ldd	r19, Y+2	; 0x02
    2b78:	c9 01       	movw	r24, r18
    2b7a:	aa 27       	eor	r26, r26
    2b7c:	97 fd       	sbrc	r25, 7
    2b7e:	a0 95       	com	r26
    2b80:	ba 2f       	mov	r27, r26
    2b82:	a8 0e       	add	r10, r24
    2b84:	b9 1e       	adc	r11, r25
    2b86:	ca 1e       	adc	r12, r26
    2b88:	db 1e       	adc	r13, r27
			iy += ty;
    2b8a:	4b 81       	ldd	r20, Y+3	; 0x03
    2b8c:	5c 81       	ldd	r21, Y+4	; 0x04
    2b8e:	ca 01       	movw	r24, r20
    2b90:	aa 27       	eor	r26, r26
    2b92:	97 fd       	sbrc	r25, 7
    2b94:	a0 95       	com	r26
    2b96:	ba 2f       	mov	r27, r26
    2b98:	68 0e       	add	r6, r24
    2b9a:	79 1e       	adc	r7, r25
    2b9c:	8a 1e       	adc	r8, r26
    2b9e:	9b 1e       	adc	r9, r27
			
			s++;
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	8f 5f       	subi	r24, 0xFF	; 255
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
			
			if (tx > xmax)
    2ba6:	42 16       	cp	r4, r18
    2ba8:	53 06       	cpc	r5, r19
    2baa:	08 f4       	brcc	.+2      	; 0x2bae <TOUCH_MultipleRead+0xaa>
    2bac:	29 01       	movw	r4, r18
    2bae:	22 15       	cp	r18, r2
    2bb0:	33 05       	cpc	r19, r3
    2bb2:	08 f4       	brcc	.+2      	; 0x2bb6 <TOUCH_MultipleRead+0xb2>
    2bb4:	19 01       	movw	r2, r18
				xmax = tx;
			
			if (tx < xmin)
				xmin = tx;
			
			if (ty > ymax)
    2bb6:	ca 01       	movw	r24, r20
    2bb8:	e4 16       	cp	r14, r20
    2bba:	f5 06       	cpc	r15, r21
    2bbc:	08 f4       	brcc	.+2      	; 0x2bc0 <TOUCH_MultipleRead+0xbc>
    2bbe:	7a 01       	movw	r14, r20
				ymax = ty;
			
			if (ty < ymin)
    2bc0:	40 17       	cp	r20, r16
    2bc2:	51 07       	cpc	r21, r17
    2bc4:	08 f0       	brcs	.+2      	; 0x2bc8 <TOUCH_MultipleRead+0xc4>
    2bc6:	c8 01       	movw	r24, r16
	char i, s = 0;
	long ix = 0, iy = 0;
	int tx, ty;
	unsigned int xmin = 0xFFFF, xmax = 0, ymin = 0xFFFF, ymax = 0;

	for(i=0; i<TOUCH_MULTIPLE_SAMPLE_COUNT; i++) {
    2bc8:	ee 81       	ldd	r30, Y+6	; 0x06
    2bca:	ef 5f       	subi	r30, 0xFF	; 255
    2bcc:	ee 83       	std	Y+6, r30	; 0x06
    2bce:	ea 30       	cpi	r30, 0x0A	; 10
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <TOUCH_MultipleRead+0xd2>
    2bd2:	8c 01       	movw	r16, r24
    2bd4:	c6 cf       	rjmp	.-116    	; 0x2b62 <TOUCH_MultipleRead+0x5e>
			if (ty < ymin)
				ymin = ty;
		}
	}
	
	if (s < TOUCH_MULTIPLE_SAMPLE_MIN_COUNT)
    2bd6:	fd 81       	ldd	r31, Y+5	; 0x05
    2bd8:	f5 30       	cpi	r31, 0x05	; 5
    2bda:	48 f1       	brcs	.+82     	; 0x2c2e <TOUCH_MultipleRead+0x12a>
		return false;
	
	// If some nois is here -> cancel
	//
	xmax -= xmin;
    2bdc:	92 01       	movw	r18, r4
    2bde:	22 19       	sub	r18, r2
    2be0:	33 09       	sbc	r19, r3
	ymax -= ymin;
	xmax = (ymax > xmax) ? ymax : xmax;
	
	if (xmax > TOUCH_TRESHOLD)
    2be2:	a7 01       	movw	r20, r14
    2be4:	48 1b       	sub	r20, r24
    2be6:	59 0b       	sbc	r21, r25
    2be8:	ca 01       	movw	r24, r20
    2bea:	42 17       	cp	r20, r18
    2bec:	53 07       	cpc	r21, r19
    2bee:	08 f4       	brcc	.+2      	; 0x2bf2 <TOUCH_MultipleRead+0xee>
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	89 37       	cpi	r24, 0x79	; 121
    2bf4:	91 05       	cpc	r25, r1
    2bf6:	d8 f4       	brcc	.+54     	; 0x2c2e <TOUCH_MultipleRead+0x12a>
		return false;
	
	// Calculate output
	//
	*x = ix / s;
    2bf8:	5d 81       	ldd	r21, Y+5	; 0x05
    2bfa:	e5 2e       	mov	r14, r21
    2bfc:	ff 24       	eor	r15, r15
    2bfe:	00 e0       	ldi	r16, 0x00	; 0
    2c00:	10 e0       	ldi	r17, 0x00	; 0
    2c02:	c6 01       	movw	r24, r12
    2c04:	b5 01       	movw	r22, r10
    2c06:	a8 01       	movw	r20, r16
    2c08:	97 01       	movw	r18, r14
    2c0a:	0e 94 4f 1a 	call	0x349e	; 0x349e <__divmodsi4>
    2c0e:	ef 81       	ldd	r30, Y+7	; 0x07
    2c10:	f8 85       	ldd	r31, Y+8	; 0x08
    2c12:	31 83       	std	Z+1, r19	; 0x01
    2c14:	20 83       	st	Z, r18
	*y = iy / s;
    2c16:	c4 01       	movw	r24, r8
    2c18:	b3 01       	movw	r22, r6
    2c1a:	a8 01       	movw	r20, r16
    2c1c:	97 01       	movw	r18, r14
    2c1e:	0e 94 4f 1a 	call	0x349e	; 0x349e <__divmodsi4>
    2c22:	e9 85       	ldd	r30, Y+9	; 0x09
    2c24:	fa 85       	ldd	r31, Y+10	; 0x0a
    2c26:	31 83       	std	Z+1, r19	; 0x01
    2c28:	20 83       	st	Z, r18
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <TOUCH_MultipleRead+0x12c>

	return true;
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
}
    2c30:	2a 96       	adiw	r28, 0x0a	; 10
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	ff 90       	pop	r15
    2c46:	ef 90       	pop	r14
    2c48:	df 90       	pop	r13
    2c4a:	cf 90       	pop	r12
    2c4c:	bf 90       	pop	r11
    2c4e:	af 90       	pop	r10
    2c50:	9f 90       	pop	r9
    2c52:	8f 90       	pop	r8
    2c54:	7f 90       	pop	r7
    2c56:	6f 90       	pop	r6
    2c58:	5f 90       	pop	r5
    2c5a:	4f 90       	pop	r4
    2c5c:	3f 90       	pop	r3
    2c5e:	2f 90       	pop	r2
    2c60:	08 95       	ret

00002c62 <TOUCH_Get>:

////////////////////////
//
// TOUCH_Read(&x, &y);
//
bool TOUCH_Get (int *x, int *y) {
    2c62:	af 92       	push	r10
    2c64:	bf 92       	push	r11
    2c66:	cf 92       	push	r12
    2c68:	df 92       	push	r13
    2c6a:	ef 92       	push	r14
    2c6c:	ff 92       	push	r15
    2c6e:	0f 93       	push	r16
    2c70:	1f 93       	push	r17
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <TOUCH_Get+0x16>
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <TOUCH_Get+0x18>
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	6c 01       	movw	r12, r24
    2c80:	5b 01       	movw	r10, r22

	int tx, ty;
	double dx, dy;

	if (!TOUCH_MultipleRead(&tx, &ty))
    2c82:	ce 01       	movw	r24, r28
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	be 01       	movw	r22, r28
    2c88:	6d 5f       	subi	r22, 0xFD	; 253
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TOUCH_MultipleRead>
    2c90:	88 23       	and	r24, r24
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <TOUCH_Get+0x34>
    2c94:	5b c0       	rjmp	.+182    	; 0x2d4c <TOUCH_Get+0xea>
		return false;

	// Calculate 320x240
	//
	tx -= TC_x_0;
    2c96:	69 81       	ldd	r22, Y+1	; 0x01
    2c98:	7a 81       	ldd	r23, Y+2	; 0x02
    2c9a:	20 91 85 00 	lds	r18, 0x0085
    2c9e:	30 91 86 00 	lds	r19, 0x0086
    2ca2:	62 1b       	sub	r22, r18
    2ca4:	73 0b       	sbc	r23, r19
	dx = (double)tx / (double)TC_x_100;
	*x = LCD_MAX_WIDTH - (int)(LCD_MAX_WIDTH * dx);
    2ca6:	88 27       	eor	r24, r24
    2ca8:	77 fd       	sbrc	r23, 7
    2caa:	80 95       	com	r24
    2cac:	98 2f       	mov	r25, r24
    2cae:	0e 94 0c 19 	call	0x3218	; 0x3218 <__floatsisf>
    2cb2:	7b 01       	movw	r14, r22
    2cb4:	8c 01       	movw	r16, r24
    2cb6:	60 91 89 00 	lds	r22, 0x0089
    2cba:	70 91 8a 00 	lds	r23, 0x008A
    2cbe:	88 27       	eor	r24, r24
    2cc0:	77 fd       	sbrc	r23, 7
    2cc2:	80 95       	com	r24
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	0e 94 0c 19 	call	0x3218	; 0x3218 <__floatsisf>
    2cca:	9b 01       	movw	r18, r22
    2ccc:	ac 01       	movw	r20, r24
    2cce:	c8 01       	movw	r24, r16
    2cd0:	b7 01       	movw	r22, r14
    2cd2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <__divsf3>
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 ea       	ldi	r20, 0xA0	; 160
    2cdc:	53 e4       	ldi	r21, 0x43	; 67
    2cde:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3>
    2ce2:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__fixsfsi>
    2ce6:	20 e4       	ldi	r18, 0x40	; 64
    2ce8:	31 e0       	ldi	r19, 0x01	; 1
    2cea:	26 1b       	sub	r18, r22
    2cec:	37 0b       	sbc	r19, r23
    2cee:	f6 01       	movw	r30, r12
    2cf0:	31 83       	std	Z+1, r19	; 0x01
    2cf2:	20 83       	st	Z, r18

	ty -= TC_y_0;
    2cf4:	6b 81       	ldd	r22, Y+3	; 0x03
    2cf6:	7c 81       	ldd	r23, Y+4	; 0x04
    2cf8:	20 91 87 00 	lds	r18, 0x0087
    2cfc:	30 91 88 00 	lds	r19, 0x0088
    2d00:	62 1b       	sub	r22, r18
    2d02:	73 0b       	sbc	r23, r19
	dy = (double)ty / (double)TC_y_100;
	*y = (int)(LCD_MAX_HEIGHT * dy);
    2d04:	88 27       	eor	r24, r24
    2d06:	77 fd       	sbrc	r23, 7
    2d08:	80 95       	com	r24
    2d0a:	98 2f       	mov	r25, r24
    2d0c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__floatsisf>
    2d10:	7b 01       	movw	r14, r22
    2d12:	8c 01       	movw	r16, r24
    2d14:	60 91 83 00 	lds	r22, 0x0083
    2d18:	70 91 84 00 	lds	r23, 0x0084
    2d1c:	88 27       	eor	r24, r24
    2d1e:	77 fd       	sbrc	r23, 7
    2d20:	80 95       	com	r24
    2d22:	98 2f       	mov	r25, r24
    2d24:	0e 94 0c 19 	call	0x3218	; 0x3218 <__floatsisf>
    2d28:	9b 01       	movw	r18, r22
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	c8 01       	movw	r24, r16
    2d2e:	b7 01       	movw	r22, r14
    2d30:	0e 94 71 18 	call	0x30e2	; 0x30e2 <__divsf3>
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e7       	ldi	r20, 0x70	; 112
    2d3a:	53 e4       	ldi	r21, 0x43	; 67
    2d3c:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3>
    2d40:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__fixsfsi>
    2d44:	f5 01       	movw	r30, r10
    2d46:	71 83       	std	Z+1, r23	; 0x01
    2d48:	60 83       	st	Z, r22
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
	
	return true;
}
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	ff 90       	pop	r15
    2d5e:	ef 90       	pop	r14
    2d60:	df 90       	pop	r13
    2d62:	cf 90       	pop	r12
    2d64:	bf 90       	pop	r11
    2d66:	af 90       	pop	r10
    2d68:	08 95       	ret

00002d6a <TOUCH_ReadADC>:
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    2d6a:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    2d6c:	77 9b       	sbis	0x0e, 7	; 14
    2d6e:	fe cf       	rjmp	.-4      	; 0x2d6c <TOUCH_ReadADC+0x2>
	return (SPDR);						// get data
    2d70:	8f b1       	in	r24, 0x0f	; 15
}
    2d72:	08 95       	ret

00002d74 <TOUCH_Calibrate>:

///////////////////////
//
// TOUCH_Calibrate();
//
void TOUCH_Calibrate (void) {
    2d74:	ef 92       	push	r14
    2d76:	ff 92       	push	r15
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <TOUCH_Calibrate+0xe>
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <TOUCH_Calibrate+0x10>
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
	
	int tmp, x, y;
	
	// Clean screen and reset TOUCH 
	//
	LCD_Clear(BLACK);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LCD_Clear>
	TOUCH_Reset();
    2d90:	0e 94 b5 14 	call	0x296a	; 0x296a <TOUCH_Reset>
	TOUCH_DOWN_INIT();
    2d94:	8b 98       	cbi	0x11, 3	; 17
    2d96:	93 98       	cbi	0x12, 3	; 18
	
	//////////////////////
	//
	// Write first point 
	//
	LCD_DrawCircle(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, 10, WHITE, false);
    2d98:	80 e2       	ldi	r24, 0x20	; 32
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	68 e1       	ldi	r22, 0x18	; 24
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	4a e0       	ldi	r20, 0x0A	; 10
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	2f ef       	ldi	r18, 0xFF	; 255
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	00 e0       	ldi	r16, 0x00	; 0
    2daa:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, 5, WHITE, false);
    2dae:	80 e2       	ldi	r24, 0x20	; 32
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	68 e1       	ldi	r22, 0x18	; 24
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	45 e0       	ldi	r20, 0x05	; 5
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	2f ef       	ldi	r18, 0xFF	; 255
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
	LCD_SetPoint(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, WHITE);
    2dc2:	80 e2       	ldi	r24, 0x20	; 32
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	68 e1       	ldi	r22, 0x18	; 24
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	4f ef       	ldi	r20, 0xFF	; 255
    2dcc:	5f ef       	ldi	r21, 0xFF	; 255
    2dce:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
	
	// Wait for TOUCH and Read it
	//
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
    2dd2:	83 99       	sbic	0x10, 3	; 16
    2dd4:	fe cf       	rjmp	.-4      	; 0x2dd2 <TOUCH_Calibrate+0x5e>
	while(!TOUCH_MultipleRead(&x, &y));
    2dd6:	03 e0       	ldi	r16, 0x03	; 3
    2dd8:	e0 2e       	mov	r14, r16
    2dda:	f1 2c       	mov	r15, r1
    2ddc:	ec 0e       	add	r14, r28
    2dde:	fd 1e       	adc	r15, r29
    2de0:	8e 01       	movw	r16, r28
    2de2:	0f 5f       	subi	r16, 0xFF	; 255
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255
    2de6:	c8 01       	movw	r24, r16
    2de8:	b7 01       	movw	r22, r14
    2dea:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TOUCH_MultipleRead>
    2dee:	88 23       	and	r24, r24
    2df0:	d1 f3       	breq	.-12     	; 0x2de6 <TOUCH_Calibrate+0x72>

	TC_x_0 = x;
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	9a 81       	ldd	r25, Y+2	; 0x02
    2df6:	90 93 86 00 	sts	0x0086, r25
    2dfa:	80 93 85 00 	sts	0x0085, r24
	TC_y_0 = y;
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	9c 81       	ldd	r25, Y+4	; 0x04
    2e02:	90 93 88 00 	sts	0x0088, r25
    2e06:	80 93 87 00 	sts	0x0087, r24

	while(TOUCH_DOWN);
    2e0a:	83 9b       	sbis	0x10, 3	; 16
    2e0c:	fe cf       	rjmp	.-4      	; 0x2e0a <TOUCH_Calibrate+0x96>
	
	///////////////////////
	//
	// Write second point
	//
	LCD_Clear(BLACK);
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LCD_Clear>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, 10, WHITE, false);
    2e16:	80 e2       	ldi	r24, 0x20	; 32
    2e18:	91 e0       	ldi	r25, 0x01	; 1
    2e1a:	68 e7       	ldi	r22, 0x78	; 120
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	4a e0       	ldi	r20, 0x0A	; 10
    2e20:	50 e0       	ldi	r21, 0x00	; 0
    2e22:	2f ef       	ldi	r18, 0xFF	; 255
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	00 e0       	ldi	r16, 0x00	; 0
    2e28:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, 5, WHITE, false);
    2e2c:	80 e2       	ldi	r24, 0x20	; 32
    2e2e:	91 e0       	ldi	r25, 0x01	; 1
    2e30:	68 e7       	ldi	r22, 0x78	; 120
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	45 e0       	ldi	r20, 0x05	; 5
    2e36:	50 e0       	ldi	r21, 0x00	; 0
    2e38:	2f ef       	ldi	r18, 0xFF	; 255
    2e3a:	3f ef       	ldi	r19, 0xFF	; 255
    2e3c:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
	LCD_SetPoint(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, WHITE);
    2e40:	80 e2       	ldi	r24, 0x20	; 32
    2e42:	91 e0       	ldi	r25, 0x01	; 1
    2e44:	68 e7       	ldi	r22, 0x78	; 120
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	4f ef       	ldi	r20, 0xFF	; 255
    2e4a:	5f ef       	ldi	r21, 0xFF	; 255
    2e4c:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
	
	// Wait for TOUCH and Read it
	//
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
    2e50:	83 99       	sbic	0x10, 3	; 16
    2e52:	fe cf       	rjmp	.-4      	; 0x2e50 <TOUCH_Calibrate+0xdc>
	while(!TOUCH_MultipleRead(&x, &y));
    2e54:	13 e0       	ldi	r17, 0x03	; 3
    2e56:	e1 2e       	mov	r14, r17
    2e58:	f1 2c       	mov	r15, r1
    2e5a:	ec 0e       	add	r14, r28
    2e5c:	fd 1e       	adc	r15, r29
    2e5e:	8e 01       	movw	r16, r28
    2e60:	0f 5f       	subi	r16, 0xFF	; 255
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	c8 01       	movw	r24, r16
    2e66:	b7 01       	movw	r22, r14
    2e68:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TOUCH_MultipleRead>
    2e6c:	88 23       	and	r24, r24
    2e6e:	d1 f3       	breq	.-12     	; 0x2e64 <TOUCH_Calibrate+0xf0>
	
	tmp = (TC_x_0 - x)/8;	// 10%
    2e70:	e9 81       	ldd	r30, Y+1	; 0x01
    2e72:	fa 81       	ldd	r31, Y+2	; 0x02
    2e74:	80 91 85 00 	lds	r24, 0x0085
    2e78:	90 91 86 00 	lds	r25, 0x0086
    2e7c:	8e 1b       	sub	r24, r30
    2e7e:	9f 0b       	sbc	r25, r31
    2e80:	68 e0       	ldi	r22, 0x08	; 8
    2e82:	70 e0       	ldi	r23, 0x00	; 0
    2e84:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__divmodhi4>
	TC_x_100 = tmp*10;		// 100%
    2e88:	9b 01       	movw	r18, r22
    2e8a:	22 0f       	add	r18, r18
    2e8c:	33 1f       	adc	r19, r19
    2e8e:	ab 01       	movw	r20, r22
    2e90:	a3 e0       	ldi	r26, 0x03	; 3
    2e92:	44 0f       	add	r20, r20
    2e94:	55 1f       	adc	r21, r21
    2e96:	aa 95       	dec	r26
    2e98:	e1 f7       	brne	.-8      	; 0x2e92 <TOUCH_Calibrate+0x11e>
    2e9a:	24 0f       	add	r18, r20
    2e9c:	35 1f       	adc	r19, r21
    2e9e:	30 93 8a 00 	sts	0x008A, r19
    2ea2:	20 93 89 00 	sts	0x0089, r18
	TC_x_0 = x - tmp;		// 0%
    2ea6:	e6 1b       	sub	r30, r22
    2ea8:	f7 0b       	sbc	r31, r23
    2eaa:	f0 93 86 00 	sts	0x0086, r31
    2eae:	e0 93 85 00 	sts	0x0085, r30
	
	while(TOUCH_DOWN);
    2eb2:	83 9b       	sbis	0x10, 3	; 16
    2eb4:	fe cf       	rjmp	.-4      	; 0x2eb2 <TOUCH_Calibrate+0x13e>

	//////////////////////
	//
	// Write third point
	//
	LCD_Clear(BLACK);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LCD_Clear>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, 10, WHITE, false);
    2ebe:	80 ea       	ldi	r24, 0xA0	; 160
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	68 ed       	ldi	r22, 0xD8	; 216
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	4a e0       	ldi	r20, 0x0A	; 10
    2ec8:	50 e0       	ldi	r21, 0x00	; 0
    2eca:	2f ef       	ldi	r18, 0xFF	; 255
    2ecc:	3f ef       	ldi	r19, 0xFF	; 255
    2ece:	00 e0       	ldi	r16, 0x00	; 0
    2ed0:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, 5, WHITE, false);
    2ed4:	80 ea       	ldi	r24, 0xA0	; 160
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	68 ed       	ldi	r22, 0xD8	; 216
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	45 e0       	ldi	r20, 0x05	; 5
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	2f ef       	ldi	r18, 0xFF	; 255
    2ee2:	3f ef       	ldi	r19, 0xFF	; 255
    2ee4:	0e 94 a4 08 	call	0x1148	; 0x1148 <LCD_DrawCircle>
	LCD_SetPoint(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, WHITE);
    2ee8:	80 ea       	ldi	r24, 0xA0	; 160
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	68 ed       	ldi	r22, 0xD8	; 216
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	4f ef       	ldi	r20, 0xFF	; 255
    2ef2:	5f ef       	ldi	r21, 0xFF	; 255
    2ef4:	0e 94 91 07 	call	0xf22	; 0xf22 <LCD_SetPoint>
	
	// Wait for TOUCH and Read it
	//
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
    2ef8:	83 99       	sbic	0x10, 3	; 16
    2efa:	fe cf       	rjmp	.-4      	; 0x2ef8 <TOUCH_Calibrate+0x184>
	while(!TOUCH_MultipleRead(&x, &y));
    2efc:	e3 e0       	ldi	r30, 0x03	; 3
    2efe:	ee 2e       	mov	r14, r30
    2f00:	f1 2c       	mov	r15, r1
    2f02:	ec 0e       	add	r14, r28
    2f04:	fd 1e       	adc	r15, r29
    2f06:	8e 01       	movw	r16, r28
    2f08:	0f 5f       	subi	r16, 0xFF	; 255
    2f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0c:	c8 01       	movw	r24, r16
    2f0e:	b7 01       	movw	r22, r14
    2f10:	0e 94 82 15 	call	0x2b04	; 0x2b04 <TOUCH_MultipleRead>
    2f14:	88 23       	and	r24, r24
    2f16:	d1 f3       	breq	.-12     	; 0x2f0c <TOUCH_Calibrate+0x198>
	
	y = (y - TC_y_0)/8;	// 10%
    2f18:	e0 91 87 00 	lds	r30, 0x0087
    2f1c:	f0 91 88 00 	lds	r31, 0x0088
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	9c 81       	ldd	r25, Y+4	; 0x04
    2f24:	8e 1b       	sub	r24, r30
    2f26:	9f 0b       	sbc	r25, r31
    2f28:	68 e0       	ldi	r22, 0x08	; 8
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__divmodhi4>
    2f30:	ab 01       	movw	r20, r22
	TC_y_100 = y*10;		// 100%
    2f32:	cb 01       	movw	r24, r22
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	9a 01       	movw	r18, r20
    2f3a:	63 e0       	ldi	r22, 0x03	; 3
    2f3c:	22 0f       	add	r18, r18
    2f3e:	33 1f       	adc	r19, r19
    2f40:	6a 95       	dec	r22
    2f42:	e1 f7       	brne	.-8      	; 0x2f3c <TOUCH_Calibrate+0x1c8>
    2f44:	82 0f       	add	r24, r18
    2f46:	93 1f       	adc	r25, r19
    2f48:	90 93 84 00 	sts	0x0084, r25
    2f4c:	80 93 83 00 	sts	0x0083, r24
	TC_y_0 -= y;			// 0%
    2f50:	e4 1b       	sub	r30, r20
    2f52:	f5 0b       	sbc	r31, r21
    2f54:	f0 93 88 00 	sts	0x0088, r31
    2f58:	e0 93 87 00 	sts	0x0087, r30
	
	while(TOUCH_DOWN);
    2f5c:	83 9b       	sbis	0x10, 3	; 16
    2f5e:	fe cf       	rjmp	.-4      	; 0x2f5c <TOUCH_Calibrate+0x1e8>
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
	while(!TOUCH_MultipleRead(&x, &y));
	
	y = (y - TC_y_0)/8;	// 10%
    2f60:	5c 83       	std	Y+4, r21	; 0x04
    2f62:	4b 83       	std	Y+3, r20	; 0x03
	TC_y_100 = y*10;		// 100%
	TC_y_0 -= y;			// 0%
	
	while(TOUCH_DOWN);
	LCD_Clear(BLACK);
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <LCD_Clear>
	sprintf(text, "y... 0 %%: %d  100 %%: %d ", TC_y_0, TC_y_100);
	LCD_WriteString(10,220, text, YELLOW, BLACK);

#endif

}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	08 95       	ret

00002f82 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
    2f82:	b8 9a       	sbi	0x17, 0	; 23
	sbi	DDR_DI		; DI: output
    2f84:	ba 9a       	sbi	0x17, 2	; 23
	sbi	DDR_CK		; SCLK: output
    2f86:	b9 9a       	sbi	0x17, 1	; 23
	sbi	PORT_DO		; DO: pull-up
    2f88:	c3 9a       	sbi	0x18, 3	; 24
	ret
    2f8a:	08 95       	ret

00002f8c <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(80)	/* Loop counter for 8mhz*/
    2f8c:	80 e5       	ldi	r24, 0x50	; 80
1:	sbiw	r30, 1		/* 10 clocks per loop */
    2f8e:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    2f90:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    2f92:	31 97       	sbiw	r30, 0x01	; 1
	nop
    2f94:	00 00       	nop
	dec	r24
    2f96:	8a 95       	dec	r24
	brne	1b
    2f98:	d1 f7       	brne	.-12     	; 0x2f8e <dly_100us+0x2>
	ret
    2f9a:	08 95       	ret

00002f9c <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
    2f9c:	02 d0       	rcall	.+4      	; 0x2fa2 <deselect>
	cbi	PORT_CS
    2f9e:	c0 98       	cbi	0x18, 0	; 24
	rjmp	rcv_spi
    2fa0:	01 c0       	rjmp	.+2      	; 0x2fa4 <rcv_spi>

00002fa2 <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
    2fa2:	c0 9a       	sbi	0x18, 0	; 24

00002fa4 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255

00002fa6 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
    2fa6:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
    2fa8:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
    2faa:	c2 9a       	sbi	0x18, 2	; 24
	sbrs	r24, 7		; 
    2fac:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
    2fae:	c2 98       	cbi	0x18, 2	; 24
	lsl	r24		; Get DO from MMC
    2fb0:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
    2fb2:	b3 99       	sbic	0x16, 3	; 22
	inc	r24		; /
    2fb4:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
    2fb6:	c1 9a       	sbi	0x18, 1	; 24
	cbi	PORT_CK		; /
    2fb8:	c1 98       	cbi	0x18, 1	; 24
	dec	r25		; Repeat 8 times
    2fba:	9a 95       	dec	r25
	brne	1b		; /
    2fbc:	a9 f7       	brne	.-22     	; 0x2fa8 <xmit_spi+0x2>
	ret
    2fbe:	08 95       	ret

00002fc0 <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
    2fc0:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
    2fc2:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2fc4:	80 93 57 00 	sts	0x0057, r24
	spm
    2fc8:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    2fca:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    2fce:	80 fd       	sbrc	r24, 0
	rjmp	1b
    2fd0:	fc cf       	rjmp	.-8      	; 0x2fca <flash_erase+0xa>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    2fd2:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2fd4:	80 93 57 00 	sts	0x0057, r24
	spm
    2fd8:	e8 95       	spm

9:	ret
    2fda:	08 95       	ret

00002fdc <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
    2fdc:	0f 92       	push	r0
	push	r1
    2fde:	1f 92       	push	r1
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Fill page buffer
	movw	ZL, r22
    2fe0:	fb 01       	movw	r30, r22
	movw	XL, r20
    2fe2:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
    2fe4:	90 e4       	ldi	r25, 0x40	; 64
1:	ld	r0, X+
    2fe6:	0d 90       	ld	r0, X+
	ld	r1, X+
    2fe8:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
    2fea:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2fec:	80 93 57 00 	sts	0x0057, r24
	spm
    2ff0:	e8 95       	spm
	adiw	ZL, 2
    2ff2:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
    2ff4:	9a 95       	dec	r25
	brne	1b
    2ff6:	b9 f7       	brne	.-18     	; 0x2fe6 <flash_write+0xa>

	; Initiate write operation
	movw	ZL, r22
    2ff8:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
    2ffa:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2ffc:	80 93 57 00 	sts	0x0057, r24
	spm
    3000:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    3002:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    3006:	80 fd       	sbrc	r24, 0
	rjmp	2b
    3008:	fc cf       	rjmp	.-8      	; 0x3002 <flash_write+0x26>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    300a:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    300c:	80 93 57 00 	sts	0x0057, r24
	spm
    3010:	e8 95       	spm

9:	pop	r1
    3012:	1f 90       	pop	r1
	pop	r0
    3014:	0f 90       	pop	r0
	ret
    3016:	08 95       	ret

00003018 <__subsf3>:
    3018:	50 58       	subi	r21, 0x80	; 128

0000301a <__addsf3>:
    301a:	bb 27       	eor	r27, r27
    301c:	aa 27       	eor	r26, r26
    301e:	0e d0       	rcall	.+28     	; 0x303c <__addsf3x>
    3020:	4d c1       	rjmp	.+666    	; 0x32bc <__fp_round>
    3022:	3e d1       	rcall	.+636    	; 0x32a0 <__fp_pscA>
    3024:	30 f0       	brcs	.+12     	; 0x3032 <__addsf3+0x18>
    3026:	43 d1       	rcall	.+646    	; 0x32ae <__fp_pscB>
    3028:	20 f0       	brcs	.+8      	; 0x3032 <__addsf3+0x18>
    302a:	31 f4       	brne	.+12     	; 0x3038 <__addsf3+0x1e>
    302c:	9f 3f       	cpi	r25, 0xFF	; 255
    302e:	11 f4       	brne	.+4      	; 0x3034 <__addsf3+0x1a>
    3030:	1e f4       	brtc	.+6      	; 0x3038 <__addsf3+0x1e>
    3032:	33 c1       	rjmp	.+614    	; 0x329a <__fp_nan>
    3034:	0e f4       	brtc	.+2      	; 0x3038 <__addsf3+0x1e>
    3036:	e0 95       	com	r30
    3038:	e7 fb       	bst	r30, 7
    303a:	29 c1       	rjmp	.+594    	; 0x328e <__fp_inf>

0000303c <__addsf3x>:
    303c:	e9 2f       	mov	r30, r25
    303e:	4f d1       	rcall	.+670    	; 0x32de <__fp_split3>
    3040:	80 f3       	brcs	.-32     	; 0x3022 <__addsf3+0x8>
    3042:	ba 17       	cp	r27, r26
    3044:	62 07       	cpc	r22, r18
    3046:	73 07       	cpc	r23, r19
    3048:	84 07       	cpc	r24, r20
    304a:	95 07       	cpc	r25, r21
    304c:	18 f0       	brcs	.+6      	; 0x3054 <__addsf3x+0x18>
    304e:	71 f4       	brne	.+28     	; 0x306c <__addsf3x+0x30>
    3050:	9e f5       	brtc	.+102    	; 0x30b8 <__addsf3x+0x7c>
    3052:	67 c1       	rjmp	.+718    	; 0x3322 <__fp_zero>
    3054:	0e f4       	brtc	.+2      	; 0x3058 <__addsf3x+0x1c>
    3056:	e0 95       	com	r30
    3058:	0b 2e       	mov	r0, r27
    305a:	ba 2f       	mov	r27, r26
    305c:	a0 2d       	mov	r26, r0
    305e:	0b 01       	movw	r0, r22
    3060:	b9 01       	movw	r22, r18
    3062:	90 01       	movw	r18, r0
    3064:	0c 01       	movw	r0, r24
    3066:	ca 01       	movw	r24, r20
    3068:	a0 01       	movw	r20, r0
    306a:	11 24       	eor	r1, r1
    306c:	ff 27       	eor	r31, r31
    306e:	59 1b       	sub	r21, r25
    3070:	99 f0       	breq	.+38     	; 0x3098 <__addsf3x+0x5c>
    3072:	59 3f       	cpi	r21, 0xF9	; 249
    3074:	50 f4       	brcc	.+20     	; 0x308a <__addsf3x+0x4e>
    3076:	50 3e       	cpi	r21, 0xE0	; 224
    3078:	68 f1       	brcs	.+90     	; 0x30d4 <__addsf3x+0x98>
    307a:	1a 16       	cp	r1, r26
    307c:	f0 40       	sbci	r31, 0x00	; 0
    307e:	a2 2f       	mov	r26, r18
    3080:	23 2f       	mov	r18, r19
    3082:	34 2f       	mov	r19, r20
    3084:	44 27       	eor	r20, r20
    3086:	58 5f       	subi	r21, 0xF8	; 248
    3088:	f3 cf       	rjmp	.-26     	; 0x3070 <__addsf3x+0x34>
    308a:	46 95       	lsr	r20
    308c:	37 95       	ror	r19
    308e:	27 95       	ror	r18
    3090:	a7 95       	ror	r26
    3092:	f0 40       	sbci	r31, 0x00	; 0
    3094:	53 95       	inc	r21
    3096:	c9 f7       	brne	.-14     	; 0x308a <__addsf3x+0x4e>
    3098:	7e f4       	brtc	.+30     	; 0x30b8 <__addsf3x+0x7c>
    309a:	1f 16       	cp	r1, r31
    309c:	ba 0b       	sbc	r27, r26
    309e:	62 0b       	sbc	r22, r18
    30a0:	73 0b       	sbc	r23, r19
    30a2:	84 0b       	sbc	r24, r20
    30a4:	ba f0       	brmi	.+46     	; 0x30d4 <__addsf3x+0x98>
    30a6:	91 50       	subi	r25, 0x01	; 1
    30a8:	a1 f0       	breq	.+40     	; 0x30d2 <__addsf3x+0x96>
    30aa:	ff 0f       	add	r31, r31
    30ac:	bb 1f       	adc	r27, r27
    30ae:	66 1f       	adc	r22, r22
    30b0:	77 1f       	adc	r23, r23
    30b2:	88 1f       	adc	r24, r24
    30b4:	c2 f7       	brpl	.-16     	; 0x30a6 <__addsf3x+0x6a>
    30b6:	0e c0       	rjmp	.+28     	; 0x30d4 <__addsf3x+0x98>
    30b8:	ba 0f       	add	r27, r26
    30ba:	62 1f       	adc	r22, r18
    30bc:	73 1f       	adc	r23, r19
    30be:	84 1f       	adc	r24, r20
    30c0:	48 f4       	brcc	.+18     	; 0x30d4 <__addsf3x+0x98>
    30c2:	87 95       	ror	r24
    30c4:	77 95       	ror	r23
    30c6:	67 95       	ror	r22
    30c8:	b7 95       	ror	r27
    30ca:	f7 95       	ror	r31
    30cc:	9e 3f       	cpi	r25, 0xFE	; 254
    30ce:	08 f0       	brcs	.+2      	; 0x30d2 <__addsf3x+0x96>
    30d0:	b3 cf       	rjmp	.-154    	; 0x3038 <__addsf3+0x1e>
    30d2:	93 95       	inc	r25
    30d4:	88 0f       	add	r24, r24
    30d6:	08 f0       	brcs	.+2      	; 0x30da <__addsf3x+0x9e>
    30d8:	99 27       	eor	r25, r25
    30da:	ee 0f       	add	r30, r30
    30dc:	97 95       	ror	r25
    30de:	87 95       	ror	r24
    30e0:	08 95       	ret

000030e2 <__divsf3>:
    30e2:	0c d0       	rcall	.+24     	; 0x30fc <__divsf3x>
    30e4:	eb c0       	rjmp	.+470    	; 0x32bc <__fp_round>
    30e6:	e3 d0       	rcall	.+454    	; 0x32ae <__fp_pscB>
    30e8:	40 f0       	brcs	.+16     	; 0x30fa <__divsf3+0x18>
    30ea:	da d0       	rcall	.+436    	; 0x32a0 <__fp_pscA>
    30ec:	30 f0       	brcs	.+12     	; 0x30fa <__divsf3+0x18>
    30ee:	21 f4       	brne	.+8      	; 0x30f8 <__divsf3+0x16>
    30f0:	5f 3f       	cpi	r21, 0xFF	; 255
    30f2:	19 f0       	breq	.+6      	; 0x30fa <__divsf3+0x18>
    30f4:	cc c0       	rjmp	.+408    	; 0x328e <__fp_inf>
    30f6:	51 11       	cpse	r21, r1
    30f8:	15 c1       	rjmp	.+554    	; 0x3324 <__fp_szero>
    30fa:	cf c0       	rjmp	.+414    	; 0x329a <__fp_nan>

000030fc <__divsf3x>:
    30fc:	f0 d0       	rcall	.+480    	; 0x32de <__fp_split3>
    30fe:	98 f3       	brcs	.-26     	; 0x30e6 <__divsf3+0x4>

00003100 <__divsf3_pse>:
    3100:	99 23       	and	r25, r25
    3102:	c9 f3       	breq	.-14     	; 0x30f6 <__divsf3+0x14>
    3104:	55 23       	and	r21, r21
    3106:	b1 f3       	breq	.-20     	; 0x30f4 <__divsf3+0x12>
    3108:	95 1b       	sub	r25, r21
    310a:	55 0b       	sbc	r21, r21
    310c:	bb 27       	eor	r27, r27
    310e:	aa 27       	eor	r26, r26
    3110:	62 17       	cp	r22, r18
    3112:	73 07       	cpc	r23, r19
    3114:	84 07       	cpc	r24, r20
    3116:	38 f0       	brcs	.+14     	; 0x3126 <__divsf3_pse+0x26>
    3118:	9f 5f       	subi	r25, 0xFF	; 255
    311a:	5f 4f       	sbci	r21, 0xFF	; 255
    311c:	22 0f       	add	r18, r18
    311e:	33 1f       	adc	r19, r19
    3120:	44 1f       	adc	r20, r20
    3122:	aa 1f       	adc	r26, r26
    3124:	a9 f3       	breq	.-22     	; 0x3110 <__divsf3_pse+0x10>
    3126:	33 d0       	rcall	.+102    	; 0x318e <__divsf3_pse+0x8e>
    3128:	0e 2e       	mov	r0, r30
    312a:	3a f0       	brmi	.+14     	; 0x313a <__divsf3_pse+0x3a>
    312c:	e0 e8       	ldi	r30, 0x80	; 128
    312e:	30 d0       	rcall	.+96     	; 0x3190 <__divsf3_pse+0x90>
    3130:	91 50       	subi	r25, 0x01	; 1
    3132:	50 40       	sbci	r21, 0x00	; 0
    3134:	e6 95       	lsr	r30
    3136:	00 1c       	adc	r0, r0
    3138:	ca f7       	brpl	.-14     	; 0x312c <__divsf3_pse+0x2c>
    313a:	29 d0       	rcall	.+82     	; 0x318e <__divsf3_pse+0x8e>
    313c:	fe 2f       	mov	r31, r30
    313e:	27 d0       	rcall	.+78     	; 0x318e <__divsf3_pse+0x8e>
    3140:	66 0f       	add	r22, r22
    3142:	77 1f       	adc	r23, r23
    3144:	88 1f       	adc	r24, r24
    3146:	bb 1f       	adc	r27, r27
    3148:	26 17       	cp	r18, r22
    314a:	37 07       	cpc	r19, r23
    314c:	48 07       	cpc	r20, r24
    314e:	ab 07       	cpc	r26, r27
    3150:	b0 e8       	ldi	r27, 0x80	; 128
    3152:	09 f0       	breq	.+2      	; 0x3156 <__divsf3_pse+0x56>
    3154:	bb 0b       	sbc	r27, r27
    3156:	80 2d       	mov	r24, r0
    3158:	bf 01       	movw	r22, r30
    315a:	ff 27       	eor	r31, r31
    315c:	93 58       	subi	r25, 0x83	; 131
    315e:	5f 4f       	sbci	r21, 0xFF	; 255
    3160:	2a f0       	brmi	.+10     	; 0x316c <__divsf3_pse+0x6c>
    3162:	9e 3f       	cpi	r25, 0xFE	; 254
    3164:	51 05       	cpc	r21, r1
    3166:	68 f0       	brcs	.+26     	; 0x3182 <__divsf3_pse+0x82>
    3168:	92 c0       	rjmp	.+292    	; 0x328e <__fp_inf>
    316a:	dc c0       	rjmp	.+440    	; 0x3324 <__fp_szero>
    316c:	5f 3f       	cpi	r21, 0xFF	; 255
    316e:	ec f3       	brlt	.-6      	; 0x316a <__divsf3_pse+0x6a>
    3170:	98 3e       	cpi	r25, 0xE8	; 232
    3172:	dc f3       	brlt	.-10     	; 0x316a <__divsf3_pse+0x6a>
    3174:	86 95       	lsr	r24
    3176:	77 95       	ror	r23
    3178:	67 95       	ror	r22
    317a:	b7 95       	ror	r27
    317c:	f7 95       	ror	r31
    317e:	9f 5f       	subi	r25, 0xFF	; 255
    3180:	c9 f7       	brne	.-14     	; 0x3174 <__divsf3_pse+0x74>
    3182:	88 0f       	add	r24, r24
    3184:	91 1d       	adc	r25, r1
    3186:	96 95       	lsr	r25
    3188:	87 95       	ror	r24
    318a:	97 f9       	bld	r25, 7
    318c:	08 95       	ret
    318e:	e1 e0       	ldi	r30, 0x01	; 1
    3190:	66 0f       	add	r22, r22
    3192:	77 1f       	adc	r23, r23
    3194:	88 1f       	adc	r24, r24
    3196:	bb 1f       	adc	r27, r27
    3198:	62 17       	cp	r22, r18
    319a:	73 07       	cpc	r23, r19
    319c:	84 07       	cpc	r24, r20
    319e:	ba 07       	cpc	r27, r26
    31a0:	20 f0       	brcs	.+8      	; 0x31aa <__divsf3_pse+0xaa>
    31a2:	62 1b       	sub	r22, r18
    31a4:	73 0b       	sbc	r23, r19
    31a6:	84 0b       	sbc	r24, r20
    31a8:	ba 0b       	sbc	r27, r26
    31aa:	ee 1f       	adc	r30, r30
    31ac:	88 f7       	brcc	.-30     	; 0x3190 <__divsf3_pse+0x90>
    31ae:	e0 95       	com	r30
    31b0:	08 95       	ret

000031b2 <__fixsfsi>:
    31b2:	04 d0       	rcall	.+8      	; 0x31bc <__fixunssfsi>
    31b4:	68 94       	set
    31b6:	b1 11       	cpse	r27, r1
    31b8:	b5 c0       	rjmp	.+362    	; 0x3324 <__fp_szero>
    31ba:	08 95       	ret

000031bc <__fixunssfsi>:
    31bc:	98 d0       	rcall	.+304    	; 0x32ee <__fp_splitA>
    31be:	88 f0       	brcs	.+34     	; 0x31e2 <__fixunssfsi+0x26>
    31c0:	9f 57       	subi	r25, 0x7F	; 127
    31c2:	90 f0       	brcs	.+36     	; 0x31e8 <__fixunssfsi+0x2c>
    31c4:	b9 2f       	mov	r27, r25
    31c6:	99 27       	eor	r25, r25
    31c8:	b7 51       	subi	r27, 0x17	; 23
    31ca:	a0 f0       	brcs	.+40     	; 0x31f4 <__fixunssfsi+0x38>
    31cc:	d1 f0       	breq	.+52     	; 0x3202 <__fixunssfsi+0x46>
    31ce:	66 0f       	add	r22, r22
    31d0:	77 1f       	adc	r23, r23
    31d2:	88 1f       	adc	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	1a f0       	brmi	.+6      	; 0x31de <__fixunssfsi+0x22>
    31d8:	ba 95       	dec	r27
    31da:	c9 f7       	brne	.-14     	; 0x31ce <__fixunssfsi+0x12>
    31dc:	12 c0       	rjmp	.+36     	; 0x3202 <__fixunssfsi+0x46>
    31de:	b1 30       	cpi	r27, 0x01	; 1
    31e0:	81 f0       	breq	.+32     	; 0x3202 <__fixunssfsi+0x46>
    31e2:	9f d0       	rcall	.+318    	; 0x3322 <__fp_zero>
    31e4:	b1 e0       	ldi	r27, 0x01	; 1
    31e6:	08 95       	ret
    31e8:	9c c0       	rjmp	.+312    	; 0x3322 <__fp_zero>
    31ea:	67 2f       	mov	r22, r23
    31ec:	78 2f       	mov	r23, r24
    31ee:	88 27       	eor	r24, r24
    31f0:	b8 5f       	subi	r27, 0xF8	; 248
    31f2:	39 f0       	breq	.+14     	; 0x3202 <__fixunssfsi+0x46>
    31f4:	b9 3f       	cpi	r27, 0xF9	; 249
    31f6:	cc f3       	brlt	.-14     	; 0x31ea <__fixunssfsi+0x2e>
    31f8:	86 95       	lsr	r24
    31fa:	77 95       	ror	r23
    31fc:	67 95       	ror	r22
    31fe:	b3 95       	inc	r27
    3200:	d9 f7       	brne	.-10     	; 0x31f8 <__fixunssfsi+0x3c>
    3202:	3e f4       	brtc	.+14     	; 0x3212 <__fixunssfsi+0x56>
    3204:	90 95       	com	r25
    3206:	80 95       	com	r24
    3208:	70 95       	com	r23
    320a:	61 95       	neg	r22
    320c:	7f 4f       	sbci	r23, 0xFF	; 255
    320e:	8f 4f       	sbci	r24, 0xFF	; 255
    3210:	9f 4f       	sbci	r25, 0xFF	; 255
    3212:	08 95       	ret

00003214 <__floatunsisf>:
    3214:	e8 94       	clt
    3216:	09 c0       	rjmp	.+18     	; 0x322a <__floatsisf+0x12>

00003218 <__floatsisf>:
    3218:	97 fb       	bst	r25, 7
    321a:	3e f4       	brtc	.+14     	; 0x322a <__floatsisf+0x12>
    321c:	90 95       	com	r25
    321e:	80 95       	com	r24
    3220:	70 95       	com	r23
    3222:	61 95       	neg	r22
    3224:	7f 4f       	sbci	r23, 0xFF	; 255
    3226:	8f 4f       	sbci	r24, 0xFF	; 255
    3228:	9f 4f       	sbci	r25, 0xFF	; 255
    322a:	99 23       	and	r25, r25
    322c:	a9 f0       	breq	.+42     	; 0x3258 <__floatsisf+0x40>
    322e:	f9 2f       	mov	r31, r25
    3230:	96 e9       	ldi	r25, 0x96	; 150
    3232:	bb 27       	eor	r27, r27
    3234:	93 95       	inc	r25
    3236:	f6 95       	lsr	r31
    3238:	87 95       	ror	r24
    323a:	77 95       	ror	r23
    323c:	67 95       	ror	r22
    323e:	b7 95       	ror	r27
    3240:	f1 11       	cpse	r31, r1
    3242:	f8 cf       	rjmp	.-16     	; 0x3234 <__floatsisf+0x1c>
    3244:	fa f4       	brpl	.+62     	; 0x3284 <__floatsisf+0x6c>
    3246:	bb 0f       	add	r27, r27
    3248:	11 f4       	brne	.+4      	; 0x324e <__floatsisf+0x36>
    324a:	60 ff       	sbrs	r22, 0
    324c:	1b c0       	rjmp	.+54     	; 0x3284 <__floatsisf+0x6c>
    324e:	6f 5f       	subi	r22, 0xFF	; 255
    3250:	7f 4f       	sbci	r23, 0xFF	; 255
    3252:	8f 4f       	sbci	r24, 0xFF	; 255
    3254:	9f 4f       	sbci	r25, 0xFF	; 255
    3256:	16 c0       	rjmp	.+44     	; 0x3284 <__floatsisf+0x6c>
    3258:	88 23       	and	r24, r24
    325a:	11 f0       	breq	.+4      	; 0x3260 <__floatsisf+0x48>
    325c:	96 e9       	ldi	r25, 0x96	; 150
    325e:	11 c0       	rjmp	.+34     	; 0x3282 <__floatsisf+0x6a>
    3260:	77 23       	and	r23, r23
    3262:	21 f0       	breq	.+8      	; 0x326c <__floatsisf+0x54>
    3264:	9e e8       	ldi	r25, 0x8E	; 142
    3266:	87 2f       	mov	r24, r23
    3268:	76 2f       	mov	r23, r22
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <__floatsisf+0x5e>
    326c:	66 23       	and	r22, r22
    326e:	71 f0       	breq	.+28     	; 0x328c <__floatsisf+0x74>
    3270:	96 e8       	ldi	r25, 0x86	; 134
    3272:	86 2f       	mov	r24, r22
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	2a f0       	brmi	.+10     	; 0x3284 <__floatsisf+0x6c>
    327a:	9a 95       	dec	r25
    327c:	66 0f       	add	r22, r22
    327e:	77 1f       	adc	r23, r23
    3280:	88 1f       	adc	r24, r24
    3282:	da f7       	brpl	.-10     	; 0x327a <__floatsisf+0x62>
    3284:	88 0f       	add	r24, r24
    3286:	96 95       	lsr	r25
    3288:	87 95       	ror	r24
    328a:	97 f9       	bld	r25, 7
    328c:	08 95       	ret

0000328e <__fp_inf>:
    328e:	97 f9       	bld	r25, 7
    3290:	9f 67       	ori	r25, 0x7F	; 127
    3292:	80 e8       	ldi	r24, 0x80	; 128
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	08 95       	ret

0000329a <__fp_nan>:
    329a:	9f ef       	ldi	r25, 0xFF	; 255
    329c:	80 ec       	ldi	r24, 0xC0	; 192
    329e:	08 95       	ret

000032a0 <__fp_pscA>:
    32a0:	00 24       	eor	r0, r0
    32a2:	0a 94       	dec	r0
    32a4:	16 16       	cp	r1, r22
    32a6:	17 06       	cpc	r1, r23
    32a8:	18 06       	cpc	r1, r24
    32aa:	09 06       	cpc	r0, r25
    32ac:	08 95       	ret

000032ae <__fp_pscB>:
    32ae:	00 24       	eor	r0, r0
    32b0:	0a 94       	dec	r0
    32b2:	12 16       	cp	r1, r18
    32b4:	13 06       	cpc	r1, r19
    32b6:	14 06       	cpc	r1, r20
    32b8:	05 06       	cpc	r0, r21
    32ba:	08 95       	ret

000032bc <__fp_round>:
    32bc:	09 2e       	mov	r0, r25
    32be:	03 94       	inc	r0
    32c0:	00 0c       	add	r0, r0
    32c2:	11 f4       	brne	.+4      	; 0x32c8 <__fp_round+0xc>
    32c4:	88 23       	and	r24, r24
    32c6:	52 f0       	brmi	.+20     	; 0x32dc <__fp_round+0x20>
    32c8:	bb 0f       	add	r27, r27
    32ca:	40 f4       	brcc	.+16     	; 0x32dc <__fp_round+0x20>
    32cc:	bf 2b       	or	r27, r31
    32ce:	11 f4       	brne	.+4      	; 0x32d4 <__fp_round+0x18>
    32d0:	60 ff       	sbrs	r22, 0
    32d2:	04 c0       	rjmp	.+8      	; 0x32dc <__fp_round+0x20>
    32d4:	6f 5f       	subi	r22, 0xFF	; 255
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	8f 4f       	sbci	r24, 0xFF	; 255
    32da:	9f 4f       	sbci	r25, 0xFF	; 255
    32dc:	08 95       	ret

000032de <__fp_split3>:
    32de:	57 fd       	sbrc	r21, 7
    32e0:	90 58       	subi	r25, 0x80	; 128
    32e2:	44 0f       	add	r20, r20
    32e4:	55 1f       	adc	r21, r21
    32e6:	59 f0       	breq	.+22     	; 0x32fe <__fp_splitA+0x10>
    32e8:	5f 3f       	cpi	r21, 0xFF	; 255
    32ea:	71 f0       	breq	.+28     	; 0x3308 <__fp_splitA+0x1a>
    32ec:	47 95       	ror	r20

000032ee <__fp_splitA>:
    32ee:	88 0f       	add	r24, r24
    32f0:	97 fb       	bst	r25, 7
    32f2:	99 1f       	adc	r25, r25
    32f4:	61 f0       	breq	.+24     	; 0x330e <__fp_splitA+0x20>
    32f6:	9f 3f       	cpi	r25, 0xFF	; 255
    32f8:	79 f0       	breq	.+30     	; 0x3318 <__fp_splitA+0x2a>
    32fa:	87 95       	ror	r24
    32fc:	08 95       	ret
    32fe:	12 16       	cp	r1, r18
    3300:	13 06       	cpc	r1, r19
    3302:	14 06       	cpc	r1, r20
    3304:	55 1f       	adc	r21, r21
    3306:	f2 cf       	rjmp	.-28     	; 0x32ec <__fp_split3+0xe>
    3308:	46 95       	lsr	r20
    330a:	f1 df       	rcall	.-30     	; 0x32ee <__fp_splitA>
    330c:	08 c0       	rjmp	.+16     	; 0x331e <__fp_splitA+0x30>
    330e:	16 16       	cp	r1, r22
    3310:	17 06       	cpc	r1, r23
    3312:	18 06       	cpc	r1, r24
    3314:	99 1f       	adc	r25, r25
    3316:	f1 cf       	rjmp	.-30     	; 0x32fa <__fp_splitA+0xc>
    3318:	86 95       	lsr	r24
    331a:	71 05       	cpc	r23, r1
    331c:	61 05       	cpc	r22, r1
    331e:	08 94       	sec
    3320:	08 95       	ret

00003322 <__fp_zero>:
    3322:	e8 94       	clt

00003324 <__fp_szero>:
    3324:	bb 27       	eor	r27, r27
    3326:	66 27       	eor	r22, r22
    3328:	77 27       	eor	r23, r23
    332a:	cb 01       	movw	r24, r22
    332c:	97 f9       	bld	r25, 7
    332e:	08 95       	ret

00003330 <__mulsf3>:
    3330:	0b d0       	rcall	.+22     	; 0x3348 <__mulsf3x>
    3332:	c4 cf       	rjmp	.-120    	; 0x32bc <__fp_round>
    3334:	b5 df       	rcall	.-150    	; 0x32a0 <__fp_pscA>
    3336:	28 f0       	brcs	.+10     	; 0x3342 <__mulsf3+0x12>
    3338:	ba df       	rcall	.-140    	; 0x32ae <__fp_pscB>
    333a:	18 f0       	brcs	.+6      	; 0x3342 <__mulsf3+0x12>
    333c:	95 23       	and	r25, r21
    333e:	09 f0       	breq	.+2      	; 0x3342 <__mulsf3+0x12>
    3340:	a6 cf       	rjmp	.-180    	; 0x328e <__fp_inf>
    3342:	ab cf       	rjmp	.-170    	; 0x329a <__fp_nan>
    3344:	11 24       	eor	r1, r1
    3346:	ee cf       	rjmp	.-36     	; 0x3324 <__fp_szero>

00003348 <__mulsf3x>:
    3348:	ca df       	rcall	.-108    	; 0x32de <__fp_split3>
    334a:	a0 f3       	brcs	.-24     	; 0x3334 <__mulsf3+0x4>

0000334c <__mulsf3_pse>:
    334c:	95 9f       	mul	r25, r21
    334e:	d1 f3       	breq	.-12     	; 0x3344 <__mulsf3+0x14>
    3350:	95 0f       	add	r25, r21
    3352:	50 e0       	ldi	r21, 0x00	; 0
    3354:	55 1f       	adc	r21, r21
    3356:	62 9f       	mul	r22, r18
    3358:	f0 01       	movw	r30, r0
    335a:	72 9f       	mul	r23, r18
    335c:	bb 27       	eor	r27, r27
    335e:	f0 0d       	add	r31, r0
    3360:	b1 1d       	adc	r27, r1
    3362:	63 9f       	mul	r22, r19
    3364:	aa 27       	eor	r26, r26
    3366:	f0 0d       	add	r31, r0
    3368:	b1 1d       	adc	r27, r1
    336a:	aa 1f       	adc	r26, r26
    336c:	64 9f       	mul	r22, r20
    336e:	66 27       	eor	r22, r22
    3370:	b0 0d       	add	r27, r0
    3372:	a1 1d       	adc	r26, r1
    3374:	66 1f       	adc	r22, r22
    3376:	82 9f       	mul	r24, r18
    3378:	22 27       	eor	r18, r18
    337a:	b0 0d       	add	r27, r0
    337c:	a1 1d       	adc	r26, r1
    337e:	62 1f       	adc	r22, r18
    3380:	73 9f       	mul	r23, r19
    3382:	b0 0d       	add	r27, r0
    3384:	a1 1d       	adc	r26, r1
    3386:	62 1f       	adc	r22, r18
    3388:	83 9f       	mul	r24, r19
    338a:	a0 0d       	add	r26, r0
    338c:	61 1d       	adc	r22, r1
    338e:	22 1f       	adc	r18, r18
    3390:	74 9f       	mul	r23, r20
    3392:	33 27       	eor	r19, r19
    3394:	a0 0d       	add	r26, r0
    3396:	61 1d       	adc	r22, r1
    3398:	23 1f       	adc	r18, r19
    339a:	84 9f       	mul	r24, r20
    339c:	60 0d       	add	r22, r0
    339e:	21 1d       	adc	r18, r1
    33a0:	82 2f       	mov	r24, r18
    33a2:	76 2f       	mov	r23, r22
    33a4:	6a 2f       	mov	r22, r26
    33a6:	11 24       	eor	r1, r1
    33a8:	9f 57       	subi	r25, 0x7F	; 127
    33aa:	50 40       	sbci	r21, 0x00	; 0
    33ac:	8a f0       	brmi	.+34     	; 0x33d0 <__mulsf3_pse+0x84>
    33ae:	e1 f0       	breq	.+56     	; 0x33e8 <__mulsf3_pse+0x9c>
    33b0:	88 23       	and	r24, r24
    33b2:	4a f0       	brmi	.+18     	; 0x33c6 <__mulsf3_pse+0x7a>
    33b4:	ee 0f       	add	r30, r30
    33b6:	ff 1f       	adc	r31, r31
    33b8:	bb 1f       	adc	r27, r27
    33ba:	66 1f       	adc	r22, r22
    33bc:	77 1f       	adc	r23, r23
    33be:	88 1f       	adc	r24, r24
    33c0:	91 50       	subi	r25, 0x01	; 1
    33c2:	50 40       	sbci	r21, 0x00	; 0
    33c4:	a9 f7       	brne	.-22     	; 0x33b0 <__mulsf3_pse+0x64>
    33c6:	9e 3f       	cpi	r25, 0xFE	; 254
    33c8:	51 05       	cpc	r21, r1
    33ca:	70 f0       	brcs	.+28     	; 0x33e8 <__mulsf3_pse+0x9c>
    33cc:	60 cf       	rjmp	.-320    	; 0x328e <__fp_inf>
    33ce:	aa cf       	rjmp	.-172    	; 0x3324 <__fp_szero>
    33d0:	5f 3f       	cpi	r21, 0xFF	; 255
    33d2:	ec f3       	brlt	.-6      	; 0x33ce <__mulsf3_pse+0x82>
    33d4:	98 3e       	cpi	r25, 0xE8	; 232
    33d6:	dc f3       	brlt	.-10     	; 0x33ce <__mulsf3_pse+0x82>
    33d8:	86 95       	lsr	r24
    33da:	77 95       	ror	r23
    33dc:	67 95       	ror	r22
    33de:	b7 95       	ror	r27
    33e0:	f7 95       	ror	r31
    33e2:	e7 95       	ror	r30
    33e4:	9f 5f       	subi	r25, 0xFF	; 255
    33e6:	c1 f7       	brne	.-16     	; 0x33d8 <__mulsf3_pse+0x8c>
    33e8:	fe 2b       	or	r31, r30
    33ea:	88 0f       	add	r24, r24
    33ec:	91 1d       	adc	r25, r1
    33ee:	96 95       	lsr	r25
    33f0:	87 95       	ror	r24
    33f2:	97 f9       	bld	r25, 7
    33f4:	08 95       	ret

000033f6 <__mulsi3>:
    33f6:	62 9f       	mul	r22, r18
    33f8:	d0 01       	movw	r26, r0
    33fa:	73 9f       	mul	r23, r19
    33fc:	f0 01       	movw	r30, r0
    33fe:	82 9f       	mul	r24, r18
    3400:	e0 0d       	add	r30, r0
    3402:	f1 1d       	adc	r31, r1
    3404:	64 9f       	mul	r22, r20
    3406:	e0 0d       	add	r30, r0
    3408:	f1 1d       	adc	r31, r1
    340a:	92 9f       	mul	r25, r18
    340c:	f0 0d       	add	r31, r0
    340e:	83 9f       	mul	r24, r19
    3410:	f0 0d       	add	r31, r0
    3412:	74 9f       	mul	r23, r20
    3414:	f0 0d       	add	r31, r0
    3416:	65 9f       	mul	r22, r21
    3418:	f0 0d       	add	r31, r0
    341a:	99 27       	eor	r25, r25
    341c:	72 9f       	mul	r23, r18
    341e:	b0 0d       	add	r27, r0
    3420:	e1 1d       	adc	r30, r1
    3422:	f9 1f       	adc	r31, r25
    3424:	63 9f       	mul	r22, r19
    3426:	b0 0d       	add	r27, r0
    3428:	e1 1d       	adc	r30, r1
    342a:	f9 1f       	adc	r31, r25
    342c:	bd 01       	movw	r22, r26
    342e:	cf 01       	movw	r24, r30
    3430:	11 24       	eor	r1, r1
    3432:	08 95       	ret

00003434 <__divmodhi4>:
    3434:	97 fb       	bst	r25, 7
    3436:	09 2e       	mov	r0, r25
    3438:	07 26       	eor	r0, r23
    343a:	0a d0       	rcall	.+20     	; 0x3450 <__divmodhi4_neg1>
    343c:	77 fd       	sbrc	r23, 7
    343e:	04 d0       	rcall	.+8      	; 0x3448 <__divmodhi4_neg2>
    3440:	49 d0       	rcall	.+146    	; 0x34d4 <__udivmodhi4>
    3442:	06 d0       	rcall	.+12     	; 0x3450 <__divmodhi4_neg1>
    3444:	00 20       	and	r0, r0
    3446:	1a f4       	brpl	.+6      	; 0x344e <__divmodhi4_exit>

00003448 <__divmodhi4_neg2>:
    3448:	70 95       	com	r23
    344a:	61 95       	neg	r22
    344c:	7f 4f       	sbci	r23, 0xFF	; 255

0000344e <__divmodhi4_exit>:
    344e:	08 95       	ret

00003450 <__divmodhi4_neg1>:
    3450:	f6 f7       	brtc	.-4      	; 0x344e <__divmodhi4_exit>
    3452:	90 95       	com	r25
    3454:	81 95       	neg	r24
    3456:	9f 4f       	sbci	r25, 0xFF	; 255
    3458:	08 95       	ret

0000345a <__udivmodsi4>:
    345a:	a1 e2       	ldi	r26, 0x21	; 33
    345c:	1a 2e       	mov	r1, r26
    345e:	aa 1b       	sub	r26, r26
    3460:	bb 1b       	sub	r27, r27
    3462:	fd 01       	movw	r30, r26
    3464:	0d c0       	rjmp	.+26     	; 0x3480 <__udivmodsi4_ep>

00003466 <__udivmodsi4_loop>:
    3466:	aa 1f       	adc	r26, r26
    3468:	bb 1f       	adc	r27, r27
    346a:	ee 1f       	adc	r30, r30
    346c:	ff 1f       	adc	r31, r31
    346e:	a2 17       	cp	r26, r18
    3470:	b3 07       	cpc	r27, r19
    3472:	e4 07       	cpc	r30, r20
    3474:	f5 07       	cpc	r31, r21
    3476:	20 f0       	brcs	.+8      	; 0x3480 <__udivmodsi4_ep>
    3478:	a2 1b       	sub	r26, r18
    347a:	b3 0b       	sbc	r27, r19
    347c:	e4 0b       	sbc	r30, r20
    347e:	f5 0b       	sbc	r31, r21

00003480 <__udivmodsi4_ep>:
    3480:	66 1f       	adc	r22, r22
    3482:	77 1f       	adc	r23, r23
    3484:	88 1f       	adc	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	1a 94       	dec	r1
    348a:	69 f7       	brne	.-38     	; 0x3466 <__udivmodsi4_loop>
    348c:	60 95       	com	r22
    348e:	70 95       	com	r23
    3490:	80 95       	com	r24
    3492:	90 95       	com	r25
    3494:	9b 01       	movw	r18, r22
    3496:	ac 01       	movw	r20, r24
    3498:	bd 01       	movw	r22, r26
    349a:	cf 01       	movw	r24, r30
    349c:	08 95       	ret

0000349e <__divmodsi4>:
    349e:	97 fb       	bst	r25, 7
    34a0:	09 2e       	mov	r0, r25
    34a2:	05 26       	eor	r0, r21
    34a4:	0e d0       	rcall	.+28     	; 0x34c2 <__divmodsi4_neg1>
    34a6:	57 fd       	sbrc	r21, 7
    34a8:	04 d0       	rcall	.+8      	; 0x34b2 <__divmodsi4_neg2>
    34aa:	d7 df       	rcall	.-82     	; 0x345a <__udivmodsi4>
    34ac:	0a d0       	rcall	.+20     	; 0x34c2 <__divmodsi4_neg1>
    34ae:	00 1c       	adc	r0, r0
    34b0:	38 f4       	brcc	.+14     	; 0x34c0 <__divmodsi4_exit>

000034b2 <__divmodsi4_neg2>:
    34b2:	50 95       	com	r21
    34b4:	40 95       	com	r20
    34b6:	30 95       	com	r19
    34b8:	21 95       	neg	r18
    34ba:	3f 4f       	sbci	r19, 0xFF	; 255
    34bc:	4f 4f       	sbci	r20, 0xFF	; 255
    34be:	5f 4f       	sbci	r21, 0xFF	; 255

000034c0 <__divmodsi4_exit>:
    34c0:	08 95       	ret

000034c2 <__divmodsi4_neg1>:
    34c2:	f6 f7       	brtc	.-4      	; 0x34c0 <__divmodsi4_exit>
    34c4:	90 95       	com	r25
    34c6:	80 95       	com	r24
    34c8:	70 95       	com	r23
    34ca:	61 95       	neg	r22
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	8f 4f       	sbci	r24, 0xFF	; 255
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	08 95       	ret

000034d4 <__udivmodhi4>:
    34d4:	aa 1b       	sub	r26, r26
    34d6:	bb 1b       	sub	r27, r27
    34d8:	51 e1       	ldi	r21, 0x11	; 17
    34da:	07 c0       	rjmp	.+14     	; 0x34ea <__udivmodhi4_ep>

000034dc <__udivmodhi4_loop>:
    34dc:	aa 1f       	adc	r26, r26
    34de:	bb 1f       	adc	r27, r27
    34e0:	a6 17       	cp	r26, r22
    34e2:	b7 07       	cpc	r27, r23
    34e4:	10 f0       	brcs	.+4      	; 0x34ea <__udivmodhi4_ep>
    34e6:	a6 1b       	sub	r26, r22
    34e8:	b7 0b       	sbc	r27, r23

000034ea <__udivmodhi4_ep>:
    34ea:	88 1f       	adc	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	5a 95       	dec	r21
    34f0:	a9 f7       	brne	.-22     	; 0x34dc <__udivmodhi4_loop>
    34f2:	80 95       	com	r24
    34f4:	90 95       	com	r25
    34f6:	bc 01       	movw	r22, r24
    34f8:	cd 01       	movw	r24, r26
    34fa:	08 95       	ret

000034fc <do_rand>:
    34fc:	a0 e0       	ldi	r26, 0x00	; 0
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	e4 e8       	ldi	r30, 0x84	; 132
    3502:	fa e1       	ldi	r31, 0x1A	; 26
    3504:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <__prologue_saves__+0x10>
    3508:	ec 01       	movw	r28, r24
    350a:	a8 80       	ld	r10, Y
    350c:	b9 80       	ldd	r11, Y+1	; 0x01
    350e:	ca 80       	ldd	r12, Y+2	; 0x02
    3510:	db 80       	ldd	r13, Y+3	; 0x03
    3512:	a1 14       	cp	r10, r1
    3514:	b1 04       	cpc	r11, r1
    3516:	c1 04       	cpc	r12, r1
    3518:	d1 04       	cpc	r13, r1
    351a:	41 f4       	brne	.+16     	; 0x352c <do_rand+0x30>
    351c:	84 e2       	ldi	r24, 0x24	; 36
    351e:	a8 2e       	mov	r10, r24
    3520:	89 ed       	ldi	r24, 0xD9	; 217
    3522:	b8 2e       	mov	r11, r24
    3524:	8b e5       	ldi	r24, 0x5B	; 91
    3526:	c8 2e       	mov	r12, r24
    3528:	87 e0       	ldi	r24, 0x07	; 7
    352a:	d8 2e       	mov	r13, r24
    352c:	c6 01       	movw	r24, r12
    352e:	b5 01       	movw	r22, r10
    3530:	2d e1       	ldi	r18, 0x1D	; 29
    3532:	33 ef       	ldi	r19, 0xF3	; 243
    3534:	41 e0       	ldi	r20, 0x01	; 1
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	0e 94 4f 1a 	call	0x349e	; 0x349e <__divmodsi4>
    353c:	27 ea       	ldi	r18, 0xA7	; 167
    353e:	31 e4       	ldi	r19, 0x41	; 65
    3540:	40 e0       	ldi	r20, 0x00	; 0
    3542:	50 e0       	ldi	r21, 0x00	; 0
    3544:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    3548:	7b 01       	movw	r14, r22
    354a:	8c 01       	movw	r16, r24
    354c:	c6 01       	movw	r24, r12
    354e:	b5 01       	movw	r22, r10
    3550:	2d e1       	ldi	r18, 0x1D	; 29
    3552:	33 ef       	ldi	r19, 0xF3	; 243
    3554:	41 e0       	ldi	r20, 0x01	; 1
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	0e 94 4f 1a 	call	0x349e	; 0x349e <__divmodsi4>
    355c:	ca 01       	movw	r24, r20
    355e:	b9 01       	movw	r22, r18
    3560:	2c ee       	ldi	r18, 0xEC	; 236
    3562:	34 ef       	ldi	r19, 0xF4	; 244
    3564:	4f ef       	ldi	r20, 0xFF	; 255
    3566:	5f ef       	ldi	r21, 0xFF	; 255
    3568:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <__mulsi3>
    356c:	6e 0d       	add	r22, r14
    356e:	7f 1d       	adc	r23, r15
    3570:	80 1f       	adc	r24, r16
    3572:	91 1f       	adc	r25, r17
    3574:	97 ff       	sbrs	r25, 7
    3576:	04 c0       	rjmp	.+8      	; 0x3580 <do_rand+0x84>
    3578:	61 50       	subi	r22, 0x01	; 1
    357a:	70 40       	sbci	r23, 0x00	; 0
    357c:	80 40       	sbci	r24, 0x00	; 0
    357e:	90 48       	sbci	r25, 0x80	; 128
    3580:	68 83       	st	Y, r22
    3582:	79 83       	std	Y+1, r23	; 0x01
    3584:	8a 83       	std	Y+2, r24	; 0x02
    3586:	9b 83       	std	Y+3, r25	; 0x03
    3588:	9b 01       	movw	r18, r22
    358a:	3f 77       	andi	r19, 0x7F	; 127
    358c:	c9 01       	movw	r24, r18
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	ea e0       	ldi	r30, 0x0A	; 10
    3594:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__epilogue_restores__+0x10>

00003598 <rand_r>:
    3598:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <do_rand>
    359c:	08 95       	ret

0000359e <rand>:
    359e:	8a e7       	ldi	r24, 0x7A	; 122
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <do_rand>
    35a6:	08 95       	ret

000035a8 <srand>:
    35a8:	a0 e0       	ldi	r26, 0x00	; 0
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	80 93 7a 00 	sts	0x007A, r24
    35b0:	90 93 7b 00 	sts	0x007B, r25
    35b4:	a0 93 7c 00 	sts	0x007C, r26
    35b8:	b0 93 7d 00 	sts	0x007D, r27
    35bc:	08 95       	ret

000035be <strcpy>:
    35be:	fb 01       	movw	r30, r22
    35c0:	dc 01       	movw	r26, r24
    35c2:	01 90       	ld	r0, Z+
    35c4:	0d 92       	st	X+, r0
    35c6:	00 20       	and	r0, r0
    35c8:	e1 f7       	brne	.-8      	; 0x35c2 <strcpy+0x4>
    35ca:	08 95       	ret

000035cc <__prologue_saves__>:
    35cc:	2f 92       	push	r2
    35ce:	3f 92       	push	r3
    35d0:	4f 92       	push	r4
    35d2:	5f 92       	push	r5
    35d4:	6f 92       	push	r6
    35d6:	7f 92       	push	r7
    35d8:	8f 92       	push	r8
    35da:	9f 92       	push	r9
    35dc:	af 92       	push	r10
    35de:	bf 92       	push	r11
    35e0:	cf 92       	push	r12
    35e2:	df 92       	push	r13
    35e4:	ef 92       	push	r14
    35e6:	ff 92       	push	r15
    35e8:	0f 93       	push	r16
    35ea:	1f 93       	push	r17
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	ca 1b       	sub	r28, r26
    35f6:	db 0b       	sbc	r29, r27
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	09 94       	ijmp

00003604 <__epilogue_restores__>:
    3604:	2a 88       	ldd	r2, Y+18	; 0x12
    3606:	39 88       	ldd	r3, Y+17	; 0x11
    3608:	48 88       	ldd	r4, Y+16	; 0x10
    360a:	5f 84       	ldd	r5, Y+15	; 0x0f
    360c:	6e 84       	ldd	r6, Y+14	; 0x0e
    360e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3610:	8c 84       	ldd	r8, Y+12	; 0x0c
    3612:	9b 84       	ldd	r9, Y+11	; 0x0b
    3614:	aa 84       	ldd	r10, Y+10	; 0x0a
    3616:	b9 84       	ldd	r11, Y+9	; 0x09
    3618:	c8 84       	ldd	r12, Y+8	; 0x08
    361a:	df 80       	ldd	r13, Y+7	; 0x07
    361c:	ee 80       	ldd	r14, Y+6	; 0x06
    361e:	fd 80       	ldd	r15, Y+5	; 0x05
    3620:	0c 81       	ldd	r16, Y+4	; 0x04
    3622:	1b 81       	ldd	r17, Y+3	; 0x03
    3624:	aa 81       	ldd	r26, Y+2	; 0x02
    3626:	b9 81       	ldd	r27, Y+1	; 0x01
    3628:	ce 0f       	add	r28, r30
    362a:	d1 1d       	adc	r29, r1
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	de bf       	out	0x3e, r29	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	ed 01       	movw	r28, r26
    3638:	08 95       	ret

0000363a <_exit>:
    363a:	f8 94       	cli

0000363c <__stop_program>:
    363c:	ff cf       	rjmp	.-2      	; 0x363c <__stop_program>
