
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00004578  0000460c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000c2  008000c2  0000466e  2**0
                  ALLOC
  3 .stab         00000420  00000000  00000000  00004670  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000a7  00000000  00000000  00004a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000374  00000000  00000000  00004bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000021df  00000000  00000000  00004f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007ab  00000000  00000000  0000712a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f1b  00000000  00000000  000078d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  000097f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000675  00000000  00000000  00009b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000029dd  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  0000cb82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 03 	jmp	0x644	; 0x644 <__ctors_end>
       4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      10:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      14:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      18:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      1c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      20:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      24:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      28:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      2c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      30:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      38:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      3c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      40:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      44:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      48:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      4c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      50:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>

00000054 <font_8x16>:
	...
      68:	18 3c 3c 3c 18 18 00 18 18 00 00 00 00 00 00 00     .<<<............
      78:	66 66 66 00 00 00 00 00 00 00 00 00 00 00 00 00     fff.............
      88:	36 36 7f 36 36 36 7f 36 36 00 00 00 00 00 18 18     66.666.66.......
      98:	3c 66 60 30 18 0c 06 66 3c 18 18 00 00 00 00 70     <f`0...f<......p
      a8:	d8 da 76 0c 18 30 6e 5b 1b 0e 00 00 00 00 00 00     ..v..0n[........
      b8:	38 6c 6c 38 60 6f 66 66 3b 00 00 00 00 00 00 00     8ll8`off;.......
      c8:	18 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      d8:	0c 18 18 30 30 30 30 30 18 18 0c 00 00 00 00 00     ...00000........
      e8:	30 18 18 0c 0c 0c 0c 0c 18 18 30 00 00 00 00 00     0.........0.....
      f8:	00 00 36 1c 7f 1c 36 00 00 00 00 00 00 00 00 00     ..6...6.........
     108:	00 00 18 18 7e 18 18 00 00 00 00 00 00 00 00 00     ....~...........
     118:	00 00 00 00 00 00 1c 1c 0c 18 00 00 00 00 00 00     ................
     128:	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 00     ...~............
     138:	00 00 00 00 00 00 1c 1c 00 00 00 00 00 00 00 06     ................
     148:	06 0c 0c 18 18 30 30 60 60 00 00 00 00 00 00 1e     .....00``.......
     158:	33 37 37 33 3b 3b 33 1e 00 00 00 00 00 00 00 0c     3773;;3.........
     168:	1c 7c 0c 0c 0c 0c 0c 0c 00 00 00 00 00 00 00 3c     .|.............<
     178:	66 66 06 0c 18 30 60 7e 00 00 00 00 00 00 00 3c     ff...0`~.......<
     188:	66 66 06 1c 06 66 66 3c 00 00 00 00 00 00 00 30     ff...ff<.......0
     198:	30 36 36 36 66 7f 06 06 00 00 00 00 00 00 00 7e     0666f..........~
     1a8:	60 60 60 7c 06 06 0c 78 00 00 00 00 00 00 00 1c     ```|...x........
     1b8:	18 30 7c 66 66 66 66 3c 00 00 00 00 00 00 00 7e     .0|ffff<.......~
     1c8:	06 0c 0c 18 18 30 30 30 00 00 00 00 00 00 00 3c     .....000.......<
     1d8:	66 66 76 3c 6e 66 66 3c 00 00 00 00 00 00 00 3c     ffv<nff<.......<
     1e8:	66 66 66 66 3e 0c 18 38 00 00 00 00 00 00 00 00     ffff>..8........
     1f8:	00 1c 1c 00 00 00 1c 1c 00 00 00 00 00 00 00 00     ................
     208:	00 1c 1c 00 00 00 1c 1c 0c 18 00 00 00 00 00 06     ................
     218:	0c 18 30 60 30 18 0c 06 00 00 00 00 00 00 00 00     ..0`0...........
     228:	00 00 7e 00 7e 00 00 00 00 00 00 00 00 00 00 60     ..~.~..........`
     238:	30 18 0c 06 0c 18 30 60 00 00 00 00 00 00 00 3c     0.....0`.......<
     248:	66 66 0c 18 18 00 18 18 00 00 00 00 00 00 00 7e     ff.............~
     258:	c3 c3 cf db db cf c0 7f 00 00 00 00 00 00 00 18     ................
     268:	3c 66 66 66 7e 66 66 66 00 00 00 00 00 00 00 7c     <fff~fff.......|
     278:	66 66 66 7c 66 66 66 7c 00 00 00 00 00 00 00 3c     fff|fff|.......<
     288:	66 66 60 60 60 66 66 3c 00 00 00 00 00 00 00 78     ff```ff<.......x
     298:	6c 66 66 66 66 66 6c 78 00 00 00 00 00 00 00 7e     lffffflx.......~
     2a8:	60 60 60 7c 60 60 60 7e 00 00 00 00 00 00 00 7e     ```|```~.......~
     2b8:	60 60 60 7c 60 60 60 60 00 00 00 00 00 00 00 3c     ```|````.......<
     2c8:	66 66 60 60 6e 66 66 3e 00 00 00 00 00 00 00 66     ff``nff>.......f
     2d8:	66 66 66 7e 66 66 66 66 00 00 00 00 00 00 00 3c     fff~ffff.......<
     2e8:	18 18 18 18 18 18 18 3c 00 00 00 00 00 00 1e 0c     .......<........
     2f8:	0c 0c 0c 0c cc cc cc 78 00 00 00 00 00 00 00 66     .......x.......f
     308:	66 6c 6c 78 6c 6c 66 66 00 00 00 00 00 00 00 60     fllxllff.......`
     318:	60 60 60 60 60 60 60 7e 00 00 00 00 00 00 00 63     ```````~.......c
     328:	63 77 6b 6b 6b 63 63 63 00 00 00 00 00 00 00 63     cwkkkccc.......c
     338:	63 73 7b 6f 67 63 63 63 00 00 00 00 00 00 00 3c     cs{ogccc.......<
     348:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 7c     fffffff<.......|
     358:	66 66 66 7c 60 60 60 60 00 00 00 00 00 00 00 3c     fff|````.......<
     368:	66 66 66 66 66 66 66 3c 0c 06 00 00 00 00 00 7c     fffffff<.......|
     378:	66 66 66 7c 6c 66 66 66 00 00 00 00 00 00 00 3c     fff|lfff.......<
     388:	66 60 30 18 0c 06 66 3c 00 00 00 00 00 00 00 7e     f`0...f<.......~
     398:	18 18 18 18 18 18 18 18 00 00 00 00 00 00 00 66     ...............f
     3a8:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 66     fffffff<.......f
     3b8:	66 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 63     ffffff<........c
     3c8:	63 63 6b 6b 6b 36 36 36 00 00 00 00 00 00 00 66     cckkk666.......f
     3d8:	66 34 18 18 2c 66 66 66 00 00 00 00 00 00 00 66     f4..,fff.......f
     3e8:	66 66 66 3c 18 18 18 18 00 00 00 00 00 00 00 7e     fff<...........~
     3f8:	06 06 0c 18 30 60 60 7e 00 00 00 00 00 00 00 3c     ....0``~.......<
     408:	30 30 30 30 30 30 30 30 30 30 3c 00 00 00 00 60     0000000000<....`
     418:	60 30 30 18 18 0c 0c 06 06 00 00 00 00 00 00 3c     `00............<
     428:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66     ..........<...<f
	...
     450:	00 00 ff 00 00 38 18 0c 00 00 00 00 00 00 00 00     .....8..........
	...
     468:	00 3c 06 06 3e 66 66 3e 00 00 00 00 00 00 00 60     .<..>ff>.......`
     478:	60 7c 66 66 66 66 66 7c 00 00 00 00 00 00 00 00     `|fffff|........
     488:	00 3c 66 60 60 60 66 3c 00 00 00 00 00 00 00 06     .<f```f<........
     498:	06 3e 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .>fffff>........
     4a8:	00 3c 66 66 7e 60 60 3c 00 00 00 00 00 00 00 1e     .<ff~``<........
     4b8:	30 30 30 7e 30 30 30 30 00 00 00 00 00 00 00 00     000~0000........
     4c8:	00 3e 66 66 66 66 66 3e 06 06 7c 00 00 00 00 60     .>fffff>..|....`
     4d8:	60 7c 66 66 66 66 66 66 00 00 00 00 00 00 18 18     `|ffffff........
     4e8:	00 78 18 18 18 18 18 7e 00 00 00 00 00 00 0c 0c     .x.....~........
     4f8:	00 3c 0c 0c 0c 0c 0c 0c 0c 0c 78 00 00 00 00 60     .<........x....`
     508:	60 66 66 6c 78 6c 66 66 00 00 00 00 00 00 00 78     `fflxlff.......x
     518:	18 18 18 18 18 18 18 7e 00 00 00 00 00 00 00 00     .......~........
     528:	00 7e 6b 6b 6b 6b 6b 63 00 00 00 00 00 00 00 00     .~kkkkkc........
     538:	00 7c 66 66 66 66 66 66 00 00 00 00 00 00 00 00     .|ffffff........
     548:	00 3c 66 66 66 66 66 3c 00 00 00 00 00 00 00 00     .<fffff<........
     558:	00 7c 66 66 66 66 66 7c 60 60 60 00 00 00 00 00     .|fffff|```.....
     568:	00 3e 66 66 66 66 66 3e 06 06 06 00 00 00 00 00     .>fffff>........
     578:	00 66 6e 70 60 60 60 60 00 00 00 00 00 00 00 00     .fnp````........
     588:	00 3e 60 60 3c 06 06 7c 00 00 00 00 00 00 00 30     .>``<..|.......0
     598:	30 7e 30 30 30 30 30 1e 00 00 00 00 00 00 00 00     0~00000.........
     5a8:	00 66 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .ffffff>........
     5b8:	00 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 00     .fffff<.........
     5c8:	00 63 6b 6b 6b 6b 36 36 00 00 00 00 00 00 00 00     .ckkkk66........
     5d8:	00 66 66 3c 18 3c 66 66 00 00 00 00 00 00 00 00     .ff<.<ff........
     5e8:	00 66 66 66 66 66 66 3c 0c 18 f0 00 00 00 00 00     .ffffff<........
     5f8:	00 7e 06 0c 18 30 60 7e 00 00 00 00 00 00 00 0c     .~...0`~........
     608:	18 18 18 30 60 30 18 18 18 0c 00 00 00 00 00 18     ...0`0..........
     618:	18 18 18 18 18 18 18 18 18 18 18 00 00 00 00 30     ...............0
     628:	18 18 18 0c 06 0c 18 18 18 30 00 00 00 00 00 71     .........0.....q
     638:	db 8e 00 00 00 00 00 00 00 00 00 00                 ............

00000644 <__ctors_end>:
     644:	11 24       	eor	r1, r1
     646:	1f be       	out	0x3f, r1	; 63
     648:	cf e5       	ldi	r28, 0x5F	; 95
     64a:	d8 e0       	ldi	r29, 0x08	; 8
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	cd bf       	out	0x3d, r28	; 61

00000650 <__do_copy_data>:
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	a0 e6       	ldi	r26, 0x60	; 96
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	e8 e7       	ldi	r30, 0x78	; 120
     658:	f5 e4       	ldi	r31, 0x45	; 69
     65a:	02 c0       	rjmp	.+4      	; 0x660 <.do_copy_data_start>

0000065c <.do_copy_data_loop>:
     65c:	05 90       	lpm	r0, Z+
     65e:	0d 92       	st	X+, r0

00000660 <.do_copy_data_start>:
     660:	a2 3c       	cpi	r26, 0xC2	; 194
     662:	b1 07       	cpc	r27, r17
     664:	d9 f7       	brne	.-10     	; 0x65c <.do_copy_data_loop>

00000666 <__do_clear_bss>:
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	a2 ec       	ldi	r26, 0xC2	; 194
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	01 c0       	rjmp	.+2      	; 0x670 <.do_clear_bss_start>

0000066e <.do_clear_bss_loop>:
     66e:	1d 92       	st	X+, r1

00000670 <.do_clear_bss_start>:
     670:	a0 3d       	cpi	r26, 0xD0	; 208
     672:	b1 07       	cpc	r27, r17
     674:	e1 f7       	brne	.-8      	; 0x66e <.do_clear_bss_loop>
     676:	0e 94 66 06 	call	0xccc	; 0xccc <main>
     67a:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <_exit>

0000067e <__bad_interrupt>:
     67e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000682 <init>:
void init(void) {
	
	// Data bridge and extern clock
	// from Camera to LCD initialization
	//
	HC245_INIT();
     682:	8e 9a       	sbi	0x11, 6	; 17
	EXCLK_INIT();
     684:	b8 9a       	sbi	0x17, 0	; 23
	//
	// and disable it both
	//
	HC245_DISABLE();
     686:	96 9a       	sbi	0x12, 6	; 18
	EXCLK_DISABLE();
     688:	c0 98       	cbi	0x18, 0	; 24
	
	// onboard KEY switch init
	//
	KEY_SW_INIT();
     68a:	8d 98       	cbi	0x11, 5	; 17
     68c:	95 9a       	sbi	0x12, 5	; 18
	
	// LCD initialize
	//
	LCD_DATA_OUTPUT();
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	84 bb       	out	0x14, r24	; 20
    LCD_Init();
     692:	0e 94 68 09 	call	0x12d0	; 0x12d0 <LCD_Init>
	
	// TOUCH Initialize
	//
	TOUCH_Reset();			// Without manual calibration
     696:	0e 94 3a 19 	call	0x3274	; 0x3274 <TOUCH_Reset>
	//TOUCH_Calibrate();	// With manual calibration
}
     69a:	08 95       	ret

0000069c <idle_time>:

/////////////////
//
// idle_time();
//
void idle_time (void) {
     69c:	ef 92       	push	r14
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	15 c0       	rjmp	.+42     	; 0x6ce <idle_time+0x32>
		
		isDrawing = false;
		
		// Do clear if back buttom is pressed
		//	
		if (KEY_SW) {
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	85 99       	sbic	0x10, 5	; 16
     6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <idle_time+0x36>
     6aa:	10 92 c2 00 	sts	0x00C2, r1
			
			// Wait for button release
			//
			while(KEY_SW);
     6ae:	85 9b       	sbis	0x10, 5	; 16
     6b0:	fe cf       	rjmp	.-4      	; 0x6ae <idle_time+0x12>
			
			// Clean screen
			//
			LCD_DrawRectangle(0, 0, LCD_MAX_WIDTH, DRAWING_HEIGHT +1, BLACK, true);
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	40 e4       	ldi	r20, 0x40	; 64
     6bc:	51 e0       	ldi	r21, 0x01	; 1
     6be:	2e ec       	ldi	r18, 0xCE	; 206
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	00 e0       	ldi	r16, 0x00	; 0
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	ee 24       	eor	r14, r14
     6c8:	e3 94       	inc	r14
     6ca:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
     6ce:	80 91 c2 00 	lds	r24, 0x00C2
//
// idle_time();
//
void idle_time (void) {

	while(!TOUCH_DOWN) {
     6d2:	83 99       	sbic	0x10, 3	; 16
     6d4:	e7 cf       	rjmp	.-50     	; 0x6a4 <idle_time+0x8>
     6d6:	80 93 c2 00 	sts	0x00C2, r24
			// Clean screen
			//
			LCD_DrawRectangle(0, 0, LCD_MAX_WIDTH, DRAWING_HEIGHT +1, BLACK, true);
		}
	}
}
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ef 90       	pop	r14
     6e0:	08 95       	ret

000006e2 <draw_color_bar>:

//////////////////////
//
// draw_color_bar();
//
void draw_color_bar (void) {
     6e2:	ef 92       	push	r14
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17

	// Draw color bar
	//
	LCD_DrawRectangle(0, 207, 320, 34, BLACK, true);
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	6f ec       	ldi	r22, 0xCF	; 207
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	40 e4       	ldi	r20, 0x40	; 64
     6f2:	51 e0       	ldi	r21, 0x01	; 1
     6f4:	22 e2       	ldi	r18, 0x22	; 34
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	00 e0       	ldi	r16, 0x00	; 0
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	ee 24       	eor	r14, r14
     6fe:	e3 94       	inc	r14
     700:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	40 e4       	ldi	r20, 0x40	; 64
     70e:	51 e0       	ldi	r21, 0x01	; 1
     710:	20 ef       	ldi	r18, 0xF0	; 240
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>
	LCD_DrawLine(0, 206, 320, 206, WHITE);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	6e ec       	ldi	r22, 0xCE	; 206
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	40 e4       	ldi	r20, 0x40	; 64
     722:	51 e0       	ldi	r21, 0x01	; 1
     724:	2e ec       	ldi	r18, 0xCE	; 206
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	0f ef       	ldi	r16, 0xFF	; 255
     72a:	1f ef       	ldi	r17, 0xFF	; 255
     72c:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>

	LCD_DrawCircle(17, 220, 11, WHITE, !do_alpha);
     730:	00 e0       	ldi	r16, 0x00	; 0
     732:	80 91 7e 00 	lds	r24, 0x007E
     736:	88 23       	and	r24, r24
     738:	09 f4       	brne	.+2      	; 0x73c <draw_color_bar+0x5a>
     73a:	01 e0       	ldi	r16, 0x01	; 1
     73c:	81 e1       	ldi	r24, 0x11	; 17
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	6c ed       	ldi	r22, 0xDC	; 220
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	4b e0       	ldi	r20, 0x0B	; 11
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	3f ef       	ldi	r19, 0xFF	; 255
     74c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	
	LCD_DrawRectangle(40, 208, 34, 26, BLACK, true);
     750:	88 e2       	ldi	r24, 0x28	; 40
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	60 ed       	ldi	r22, 0xD0	; 208
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	42 e2       	ldi	r20, 0x22	; 34
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	2a e1       	ldi	r18, 0x1A	; 26
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	10 e0       	ldi	r17, 0x00	; 0
     764:	ee 24       	eor	r14, r14
     766:	e3 94       	inc	r14
     768:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(75, 208, 34, 26, BLUE, true);
     76c:	8b e4       	ldi	r24, 0x4B	; 75
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	60 ed       	ldi	r22, 0xD0	; 208
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	42 e2       	ldi	r20, 0x22	; 34
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	2a e1       	ldi	r18, 0x1A	; 26
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	0f e1       	ldi	r16, 0x1F	; 31
     77e:	10 e0       	ldi	r17, 0x00	; 0
     780:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(110, 208, 34, 26, GREEN, true);
     784:	8e e6       	ldi	r24, 0x6E	; 110
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	60 ed       	ldi	r22, 0xD0	; 208
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	42 e2       	ldi	r20, 0x22	; 34
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	2a e1       	ldi	r18, 0x1A	; 26
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	00 ee       	ldi	r16, 0xE0	; 224
     796:	17 e0       	ldi	r17, 0x07	; 7
     798:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(145, 208, 34, 26, RED, true);
     79c:	81 e9       	ldi	r24, 0x91	; 145
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	60 ed       	ldi	r22, 0xD0	; 208
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	42 e2       	ldi	r20, 0x22	; 34
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	2a e1       	ldi	r18, 0x1A	; 26
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	00 e0       	ldi	r16, 0x00	; 0
     7ae:	18 ef       	ldi	r17, 0xF8	; 248
     7b0:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(180, 208, 34, 26, MAGENTA, true);
     7b4:	84 eb       	ldi	r24, 0xB4	; 180
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	60 ed       	ldi	r22, 0xD0	; 208
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	42 e2       	ldi	r20, 0x22	; 34
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	2a e1       	ldi	r18, 0x1A	; 26
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	0f e1       	ldi	r16, 0x1F	; 31
     7c6:	18 ef       	ldi	r17, 0xF8	; 248
     7c8:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(215, 208, 34, 26, ORANGE, true);
     7cc:	87 ed       	ldi	r24, 0xD7	; 215
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	60 ed       	ldi	r22, 0xD0	; 208
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	42 e2       	ldi	r20, 0x22	; 34
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	2a e1       	ldi	r18, 0x1A	; 26
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	00 e0       	ldi	r16, 0x00	; 0
     7de:	1c ef       	ldi	r17, 0xFC	; 252
     7e0:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(250, 208, 34, 26, YELLOW, true);
     7e4:	8a ef       	ldi	r24, 0xFA	; 250
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	60 ed       	ldi	r22, 0xD0	; 208
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	42 e2       	ldi	r20, 0x22	; 34
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	2a e1       	ldi	r18, 0x1A	; 26
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	00 ee       	ldi	r16, 0xE0	; 224
     7f6:	1f ef       	ldi	r17, 0xFF	; 255
     7f8:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(285, 208, 35, 26, WHITE, true);
     7fc:	8d e1       	ldi	r24, 0x1D	; 29
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	60 ed       	ldi	r22, 0xD0	; 208
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	43 e2       	ldi	r20, 0x23	; 35
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	2a e1       	ldi	r18, 0x1A	; 26
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	0f ef       	ldi	r16, 0xFF	; 255
     80e:	1f ef       	ldi	r17, 0xFF	; 255
     810:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	
	// Draw selected color
	//
	LCD_DrawRectangle(0, 235, 320, 5, color, true);
     814:	00 91 7b 00 	lds	r16, 0x007B
     818:	10 91 7c 00 	lds	r17, 0x007C
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	6b ee       	ldi	r22, 0xEB	; 235
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	40 e4       	ldi	r20, 0x40	; 64
     826:	51 e0       	ldi	r21, 0x01	; 1
     828:	25 e0       	ldi	r18, 0x05	; 5
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
}
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ef 90       	pop	r14
     836:	08 95       	ret

00000838 <color_bar>:

/////////////////
//
// color_bar();
//
void color_bar (void) {
     838:	ef 92       	push	r14
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17

	if (x < 40) {
     83e:	80 91 cc 00 	lds	r24, 0x00CC
     842:	90 91 cd 00 	lds	r25, 0x00CD
     846:	88 97       	sbiw	r24, 0x28	; 40
     848:	6c f4       	brge	.+26     	; 0x864 <__stack+0x5>
		
		do_alpha = (do_alpha) ? false : true;
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	80 91 7e 00 	lds	r24, 0x007E
     850:	88 23       	and	r24, r24
     852:	09 f4       	brne	.+2      	; 0x856 <color_bar+0x1e>
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	90 93 7e 00 	sts	0x007E, r25
		
		draw_color_bar();
     85a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <draw_color_bar>
		
		while(TOUCH_DOWN);
     85e:	83 9b       	sbis	0x10, 3	; 16
     860:	fe cf       	rjmp	.-4      	; 0x85e <color_bar+0x26>
     862:	27 c0       	rjmp	.+78     	; 0x8b2 <__stack+0x53>
		return;
	}
	
	// Get color from bar
	//
	LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	40 e4       	ldi	r20, 0x40	; 64
     86e:	51 e0       	ldi	r21, 0x01	; 1
     870:	20 ef       	ldi	r18, 0xF0	; 240
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>
	color = LCD_GetPoint(x, y);
     878:	60 91 ce 00 	lds	r22, 0x00CE
     87c:	70 91 cf 00 	lds	r23, 0x00CF
     880:	80 91 cc 00 	lds	r24, 0x00CC
     884:	90 91 cd 00 	lds	r25, 0x00CD
     888:	0e 94 c0 07 	call	0xf80	; 0xf80 <LCD_GetPoint>
     88c:	8c 01       	movw	r16, r24
     88e:	90 93 7c 00 	sts	0x007C, r25
     892:	80 93 7b 00 	sts	0x007B, r24
	
	// Show color in color line
	//
	LCD_DrawRectangle(0, 235, 320, 5, color, true);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	6b ee       	ldi	r22, 0xEB	; 235
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	40 e4       	ldi	r20, 0x40	; 64
     8a0:	51 e0       	ldi	r21, 0x01	; 1
     8a2:	25 e0       	ldi	r18, 0x05	; 5
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	ee 24       	eor	r14, r14
     8a8:	e3 94       	inc	r14
     8aa:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>

	while(TOUCH_DOWN);
     8ae:	83 9b       	sbis	0x10, 3	; 16
     8b0:	fe cf       	rjmp	.-4      	; 0x8ae <__stack+0x4f>
}
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ef 90       	pop	r14
     8b8:	08 95       	ret

000008ba <draw>:

////////////
//
// draw();
//
void draw (void) {
     8ba:	ef 92       	push	r14
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17

	if (!isDrawing) {
     8c0:	80 91 c2 00 	lds	r24, 0x00C2
     8c4:	88 23       	and	r24, r24
     8c6:	99 f4       	brne	.+38     	; 0x8ee <draw+0x34>
		
		isDrawing = true;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 c2 00 	sts	0x00C2, r24
		
		last_x = x;
     8ce:	80 91 cc 00 	lds	r24, 0x00CC
     8d2:	90 91 cd 00 	lds	r25, 0x00CD
     8d6:	90 93 c4 00 	sts	0x00C4, r25
     8da:	80 93 c3 00 	sts	0x00C3, r24
		last_y = y;
     8de:	80 91 ce 00 	lds	r24, 0x00CE
     8e2:	90 91 cf 00 	lds	r25, 0x00CF
     8e6:	90 93 c6 00 	sts	0x00C6, r25
     8ea:	80 93 c5 00 	sts	0x00C5, r24
	}
	
	// Draw pen
	//
	LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	40 e4       	ldi	r20, 0x40	; 64
     8f8:	51 e0       	ldi	r21, 0x01	; 1
     8fa:	20 ef       	ldi	r18, 0xF0	; 240
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>

	// Alpha lines 3x3 matrix
	//
	if (do_alpha) {
     902:	80 91 7e 00 	lds	r24, 0x007E
     906:	e0 91 cc 00 	lds	r30, 0x00CC
     90a:	f0 91 cd 00 	lds	r31, 0x00CD
     90e:	60 91 ce 00 	lds	r22, 0x00CE
     912:	70 91 cf 00 	lds	r23, 0x00CF
     916:	40 91 c3 00 	lds	r20, 0x00C3
     91a:	50 91 c4 00 	lds	r21, 0x00C4
     91e:	20 91 c5 00 	lds	r18, 0x00C5
     922:	30 91 c6 00 	lds	r19, 0x00C6
     926:	00 91 7b 00 	lds	r16, 0x007B
     92a:	10 91 7c 00 	lds	r17, 0x007C
     92e:	88 23       	and	r24, r24
     930:	09 f4       	brne	.+2      	; 0x934 <draw+0x7a>
     932:	f0 c0       	rjmp	.+480    	; 0xb14 <draw+0x25a>
		
		LCD_DrawLineAlpha(x, y, last_x, last_y, color, alpha);
     934:	cf 01       	movw	r24, r30
     936:	e0 90 7d 00 	lds	r14, 0x007D
     93a:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x, y +1, last_x, last_y +1, color, alpha);
     93e:	60 91 ce 00 	lds	r22, 0x00CE
     942:	70 91 cf 00 	lds	r23, 0x00CF
     946:	6f 5f       	subi	r22, 0xFF	; 255
     948:	7f 4f       	sbci	r23, 0xFF	; 255
     94a:	40 91 c3 00 	lds	r20, 0x00C3
     94e:	50 91 c4 00 	lds	r21, 0x00C4
     952:	20 91 c5 00 	lds	r18, 0x00C5
     956:	30 91 c6 00 	lds	r19, 0x00C6
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	00 91 7b 00 	lds	r16, 0x007B
     962:	10 91 7c 00 	lds	r17, 0x007C
     966:	80 91 cc 00 	lds	r24, 0x00CC
     96a:	90 91 cd 00 	lds	r25, 0x00CD
     96e:	e0 90 7d 00 	lds	r14, 0x007D
     972:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x, y +2, last_x, last_y +2, color, alpha);
     976:	60 91 ce 00 	lds	r22, 0x00CE
     97a:	70 91 cf 00 	lds	r23, 0x00CF
     97e:	6e 5f       	subi	r22, 0xFE	; 254
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	40 91 c3 00 	lds	r20, 0x00C3
     986:	50 91 c4 00 	lds	r21, 0x00C4
     98a:	20 91 c5 00 	lds	r18, 0x00C5
     98e:	30 91 c6 00 	lds	r19, 0x00C6
     992:	2e 5f       	subi	r18, 0xFE	; 254
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	00 91 7b 00 	lds	r16, 0x007B
     99a:	10 91 7c 00 	lds	r17, 0x007C
     99e:	80 91 cc 00 	lds	r24, 0x00CC
     9a2:	90 91 cd 00 	lds	r25, 0x00CD
     9a6:	e0 90 7d 00 	lds	r14, 0x007D
     9aa:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x +1, y, last_x +1, last_y, color, alpha);
     9ae:	80 91 cc 00 	lds	r24, 0x00CC
     9b2:	90 91 cd 00 	lds	r25, 0x00CD
     9b6:	60 91 ce 00 	lds	r22, 0x00CE
     9ba:	70 91 cf 00 	lds	r23, 0x00CF
     9be:	40 91 c3 00 	lds	r20, 0x00C3
     9c2:	50 91 c4 00 	lds	r21, 0x00C4
     9c6:	4f 5f       	subi	r20, 0xFF	; 255
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	20 91 c5 00 	lds	r18, 0x00C5
     9ce:	30 91 c6 00 	lds	r19, 0x00C6
     9d2:	00 91 7b 00 	lds	r16, 0x007B
     9d6:	10 91 7c 00 	lds	r17, 0x007C
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	e0 90 7d 00 	lds	r14, 0x007D
     9e0:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x +1, y +1, last_x +1, last_y +1, color, alpha);
     9e4:	80 91 cc 00 	lds	r24, 0x00CC
     9e8:	90 91 cd 00 	lds	r25, 0x00CD
     9ec:	60 91 ce 00 	lds	r22, 0x00CE
     9f0:	70 91 cf 00 	lds	r23, 0x00CF
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	40 91 c3 00 	lds	r20, 0x00C3
     9fc:	50 91 c4 00 	lds	r21, 0x00C4
     a00:	4f 5f       	subi	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	20 91 c5 00 	lds	r18, 0x00C5
     a08:	30 91 c6 00 	lds	r19, 0x00C6
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	00 91 7b 00 	lds	r16, 0x007B
     a14:	10 91 7c 00 	lds	r17, 0x007C
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	e0 90 7d 00 	lds	r14, 0x007D
     a1e:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x +1, y +2, last_x +1, last_y +2, color, alpha);
     a22:	80 91 cc 00 	lds	r24, 0x00CC
     a26:	90 91 cd 00 	lds	r25, 0x00CD
     a2a:	60 91 ce 00 	lds	r22, 0x00CE
     a2e:	70 91 cf 00 	lds	r23, 0x00CF
     a32:	6e 5f       	subi	r22, 0xFE	; 254
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	40 91 c3 00 	lds	r20, 0x00C3
     a3a:	50 91 c4 00 	lds	r21, 0x00C4
     a3e:	4f 5f       	subi	r20, 0xFF	; 255
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	20 91 c5 00 	lds	r18, 0x00C5
     a46:	30 91 c6 00 	lds	r19, 0x00C6
     a4a:	2e 5f       	subi	r18, 0xFE	; 254
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
     a4e:	00 91 7b 00 	lds	r16, 0x007B
     a52:	10 91 7c 00 	lds	r17, 0x007C
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	e0 90 7d 00 	lds	r14, 0x007D
     a5c:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x +2, y, last_x +2, last_y, color, alpha);
     a60:	80 91 cc 00 	lds	r24, 0x00CC
     a64:	90 91 cd 00 	lds	r25, 0x00CD
     a68:	60 91 ce 00 	lds	r22, 0x00CE
     a6c:	70 91 cf 00 	lds	r23, 0x00CF
     a70:	40 91 c3 00 	lds	r20, 0x00C3
     a74:	50 91 c4 00 	lds	r21, 0x00C4
     a78:	4e 5f       	subi	r20, 0xFE	; 254
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	20 91 c5 00 	lds	r18, 0x00C5
     a80:	30 91 c6 00 	lds	r19, 0x00C6
     a84:	00 91 7b 00 	lds	r16, 0x007B
     a88:	10 91 7c 00 	lds	r17, 0x007C
     a8c:	02 96       	adiw	r24, 0x02	; 2
     a8e:	e0 90 7d 00 	lds	r14, 0x007D
     a92:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x +2, y +1, last_x +2, last_y +1, color, alpha);
     a96:	80 91 cc 00 	lds	r24, 0x00CC
     a9a:	90 91 cd 00 	lds	r25, 0x00CD
     a9e:	60 91 ce 00 	lds	r22, 0x00CE
     aa2:	70 91 cf 00 	lds	r23, 0x00CF
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	40 91 c3 00 	lds	r20, 0x00C3
     aae:	50 91 c4 00 	lds	r21, 0x00C4
     ab2:	4e 5f       	subi	r20, 0xFE	; 254
     ab4:	5f 4f       	sbci	r21, 0xFF	; 255
     ab6:	20 91 c5 00 	lds	r18, 0x00C5
     aba:	30 91 c6 00 	lds	r19, 0x00C6
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	00 91 7b 00 	lds	r16, 0x007B
     ac6:	10 91 7c 00 	lds	r17, 0x007C
     aca:	02 96       	adiw	r24, 0x02	; 2
     acc:	e0 90 7d 00 	lds	r14, 0x007D
     ad0:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
		LCD_DrawLineAlpha(x +2, y +2, last_x +2, last_y +2, color, alpha);
     ad4:	80 91 cc 00 	lds	r24, 0x00CC
     ad8:	90 91 cd 00 	lds	r25, 0x00CD
     adc:	60 91 ce 00 	lds	r22, 0x00CE
     ae0:	70 91 cf 00 	lds	r23, 0x00CF
     ae4:	6e 5f       	subi	r22, 0xFE	; 254
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	40 91 c3 00 	lds	r20, 0x00C3
     aec:	50 91 c4 00 	lds	r21, 0x00C4
     af0:	4e 5f       	subi	r20, 0xFE	; 254
     af2:	5f 4f       	sbci	r21, 0xFF	; 255
     af4:	20 91 c5 00 	lds	r18, 0x00C5
     af8:	30 91 c6 00 	lds	r19, 0x00C6
     afc:	2e 5f       	subi	r18, 0xFE	; 254
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	00 91 7b 00 	lds	r16, 0x007B
     b04:	10 91 7c 00 	lds	r17, 0x007C
     b08:	02 96       	adiw	r24, 0x02	; 2
     b0a:	e0 90 7d 00 	lds	r14, 0x007D
     b0e:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_DrawLineAlpha>
     b12:	53 c0       	rjmp	.+166    	; 0xbba <draw+0x300>
	
	// Normal lines 2x2 matrix
	//
	else {
	
		LCD_DrawLine(x, y, last_x, last_y, color);
     b14:	cf 01       	movw	r24, r30
     b16:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
		LCD_DrawLine(x, y +1, last_x, last_y +1, color);
     b1a:	60 91 ce 00 	lds	r22, 0x00CE
     b1e:	70 91 cf 00 	lds	r23, 0x00CF
     b22:	6f 5f       	subi	r22, 0xFF	; 255
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	40 91 c3 00 	lds	r20, 0x00C3
     b2a:	50 91 c4 00 	lds	r21, 0x00C4
     b2e:	20 91 c5 00 	lds	r18, 0x00C5
     b32:	30 91 c6 00 	lds	r19, 0x00C6
     b36:	2f 5f       	subi	r18, 0xFF	; 255
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	00 91 7b 00 	lds	r16, 0x007B
     b3e:	10 91 7c 00 	lds	r17, 0x007C
     b42:	80 91 cc 00 	lds	r24, 0x00CC
     b46:	90 91 cd 00 	lds	r25, 0x00CD
     b4a:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
		LCD_DrawLine(x +1, y, last_x +1, last_y, color);
     b4e:	80 91 cc 00 	lds	r24, 0x00CC
     b52:	90 91 cd 00 	lds	r25, 0x00CD
     b56:	60 91 ce 00 	lds	r22, 0x00CE
     b5a:	70 91 cf 00 	lds	r23, 0x00CF
     b5e:	40 91 c3 00 	lds	r20, 0x00C3
     b62:	50 91 c4 00 	lds	r21, 0x00C4
     b66:	4f 5f       	subi	r20, 0xFF	; 255
     b68:	5f 4f       	sbci	r21, 0xFF	; 255
     b6a:	20 91 c5 00 	lds	r18, 0x00C5
     b6e:	30 91 c6 00 	lds	r19, 0x00C6
     b72:	00 91 7b 00 	lds	r16, 0x007B
     b76:	10 91 7c 00 	lds	r17, 0x007C
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
		LCD_DrawLine(x +1, y +1, last_x +1, last_y +1, color);
     b80:	80 91 cc 00 	lds	r24, 0x00CC
     b84:	90 91 cd 00 	lds	r25, 0x00CD
     b88:	60 91 ce 00 	lds	r22, 0x00CE
     b8c:	70 91 cf 00 	lds	r23, 0x00CF
     b90:	6f 5f       	subi	r22, 0xFF	; 255
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	40 91 c3 00 	lds	r20, 0x00C3
     b98:	50 91 c4 00 	lds	r21, 0x00C4
     b9c:	4f 5f       	subi	r20, 0xFF	; 255
     b9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ba0:	20 91 c5 00 	lds	r18, 0x00C5
     ba4:	30 91 c6 00 	lds	r19, 0x00C6
     ba8:	2f 5f       	subi	r18, 0xFF	; 255
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	00 91 7b 00 	lds	r16, 0x007B
     bb0:	10 91 7c 00 	lds	r17, 0x007C
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
	}

	last_x = x;
     bba:	80 91 cc 00 	lds	r24, 0x00CC
     bbe:	90 91 cd 00 	lds	r25, 0x00CD
     bc2:	90 93 c4 00 	sts	0x00C4, r25
     bc6:	80 93 c3 00 	sts	0x00C3, r24
	last_y = y;
     bca:	80 91 ce 00 	lds	r24, 0x00CE
     bce:	90 91 cf 00 	lds	r25, 0x00CF
     bd2:	90 93 c6 00 	sts	0x00C6, r25
     bd6:	80 93 c5 00 	sts	0x00C5, r24
}
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ef 90       	pop	r14
     be0:	08 95       	ret

00000be2 <touch_circles>:
*//////////////////////////////////////////////


// touch_circles();
//
void touch_circles (void) {
     be2:	af 92       	push	r10
     be4:	bf 92       	push	r11
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	c4 56       	subi	r28, 0x64	; 100
     bfc:	d0 40       	sbci	r29, 0x00	; 0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61

	char text[100];

	// Make sure nothing is touching
	//
	while(TOUCH_DOWN);
     c08:	83 9b       	sbis	0x10, 3	; 16
     c0a:	fe cf       	rjmp	.-4      	; 0xc08 <touch_circles+0x26>
	
	// Draw message box on start
	//
	LCD_DrawRectangle(55, 107, 212, 24, ORANGE, false);
     c0c:	87 e3       	ldi	r24, 0x37	; 55
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	6b e6       	ldi	r22, 0x6B	; 107
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	44 ed       	ldi	r20, 0xD4	; 212
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	28 e1       	ldi	r18, 0x18	; 24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	1c ef       	ldi	r17, 0xFC	; 252
     c20:	ee 24       	eor	r14, r14
     c22:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	LCD_DrawRectangle(54, 106, 212, 24, YELLOW, false);
     c26:	86 e3       	ldi	r24, 0x36	; 54
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	6a e6       	ldi	r22, 0x6A	; 106
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	44 ed       	ldi	r20, 0xD4	; 212
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	28 e1       	ldi	r18, 0x18	; 24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	00 ee       	ldi	r16, 0xE0	; 224
     c38:	1f ef       	ldi	r17, 0xFF	; 255
     c3a:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
	sprintf(text, " Newman's touch circles.. ");
     c3e:	8e 01       	movw	r16, r28
     c40:	0f 5f       	subi	r16, 0xFF	; 255
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	c8 01       	movw	r24, r16
     c46:	60 e6       	ldi	r22, 0x60	; 96
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <strcpy>
	LCD_WriteString(56,110, text, YELLOW, BLACK);
     c4e:	88 e3       	ldi	r24, 0x38	; 56
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	6e e6       	ldi	r22, 0x6E	; 110
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	a8 01       	movw	r20, r16
     c58:	20 ee       	ldi	r18, 0xE0	; 224
     c5a:	3f ef       	ldi	r19, 0xFF	; 255
     c5c:	00 e0       	ldi	r16, 0x00	; 0
     c5e:	10 e0       	ldi	r17, 0x00	; 0
     c60:	0e 94 89 07 	call	0xf12	; 0xf12 <LCD_WriteString>
	
	// Wait for touch
	//
	while(!TOUCH_DOWN);
     c64:	83 99       	sbic	0x10, 3	; 16
     c66:	fe cf       	rjmp	.-4      	; 0xc64 <touch_circles+0x82>
     c68:	2e c0       	rjmp	.+92     	; 0xcc6 <touch_circles+0xe4>
		
		// Draw few circles
		//
		for(int i=0; i<30; i++) {
			
			LCD_DrawCircle(rand()%319, rand()%239, rand()%100, rand()<<1, true);
     c6a:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <rand>
     c6e:	8c 01       	movw	r16, r24
     c70:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <rand>
     c74:	7c 01       	movw	r14, r24
     c76:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <rand>
     c7a:	6c 01       	movw	r12, r24
     c7c:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <rand>
     c80:	9c 01       	movw	r18, r24
     c82:	c8 01       	movw	r24, r16
     c84:	6f e3       	ldi	r22, 0x3F	; 63
     c86:	71 e0       	ldi	r23, 0x01	; 1
     c88:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__divmodhi4>
     c8c:	8c 01       	movw	r16, r24
     c8e:	c7 01       	movw	r24, r14
     c90:	6f ee       	ldi	r22, 0xEF	; 239
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__divmodhi4>
     c98:	fc 01       	movw	r30, r24
     c9a:	c6 01       	movw	r24, r12
     c9c:	64 e6       	ldi	r22, 0x64	; 100
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__divmodhi4>
     ca4:	ac 01       	movw	r20, r24
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	c8 01       	movw	r24, r16
     cac:	bf 01       	movw	r22, r30
     cae:	01 e0       	ldi	r16, 0x01	; 1
     cb0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	//
	while(true) {
		
		// Draw few circles
		//
		for(int i=0; i<30; i++) {
     cb4:	08 94       	sec
     cb6:	a1 1c       	adc	r10, r1
     cb8:	b1 1c       	adc	r11, r1
     cba:	8e e1       	ldi	r24, 0x1E	; 30
     cbc:	a8 16       	cp	r10, r24
     cbe:	b1 04       	cpc	r11, r1
     cc0:	a4 f2       	brlt	.-88     	; 0xc6a <touch_circles+0x88>
			LCD_DrawCircle(rand()%319, rand()%239, rand()%100, rand()<<1, true);
		}
		
		// Wait for touch
		//
		while(!TOUCH_DOWN);
     cc2:	83 99       	sbic	0x10, 3	; 16
     cc4:	fe cf       	rjmp	.-4      	; 0xcc2 <touch_circles+0xe0>
     cc6:	aa 24       	eor	r10, r10
     cc8:	bb 24       	eor	r11, r11
     cca:	f7 cf       	rjmp	.-18     	; 0xcba <touch_circles+0xd8>

00000ccc <main>:
//
int main (void) {
	
	// Initialize board and periphery
	//
	init();
     ccc:	0e 94 41 03 	call	0x682	; 0x682 <init>
	
	//////////////////////////////////////////////////////////
	//
	// If board button is pressing down, start touch circles
	//
	if (KEY_SW) {
     cd0:	85 99       	sbic	0x10, 5	; 16
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <main+0xc>
		
		touch_circles();
     cd4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <touch_circles>
	// Otherwise do Drawing
	//
	
	// Draw color bar and clean draw space
	//
	LCD_Clear(BLACK);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_Clear>
	draw_color_bar();
     ce0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <draw_color_bar>
		///////////////
		// there is check if
		// clear button is pressed
		// and other
		//
		idle_time();
     ce4:	0e 94 4e 03 	call	0x69c	; 0x69c <idle_time>
		
		// If pen is down
		//
		if (TOUCH_Get(&x, &y)) {
     ce8:	8c ec       	ldi	r24, 0xCC	; 204
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	6e ec       	ldi	r22, 0xCE	; 206
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <TOUCH_Get>
     cf4:	88 23       	and	r24, r24
     cf6:	b1 f3       	breq	.-20     	; 0xce4 <main+0x18>
			
			// Do draw
			//
			if (y < DRAWING_HEIGHT) {
     cf8:	80 91 ce 00 	lds	r24, 0x00CE
     cfc:	90 91 cf 00 	lds	r25, 0x00CF
     d00:	8d 3c       	cpi	r24, 0xCD	; 205
     d02:	91 05       	cpc	r25, r1
     d04:	1c f4       	brge	.+6      	; 0xd0c <main+0x40>
				
				draw();
     d06:	0e 94 5d 04 	call	0x8ba	; 0x8ba <draw>
     d0a:	ec cf       	rjmp	.-40     	; 0xce4 <main+0x18>
			} 
			
			// if touch to the color table
			//
			else if (!isDrawing) {
     d0c:	80 91 c2 00 	lds	r24, 0x00C2
     d10:	88 23       	and	r24, r24
     d12:	41 f7       	brne	.-48     	; 0xce4 <main+0x18>
				
				color_bar();
     d14:	0e 94 1c 04 	call	0x838	; 0x838 <color_bar>
     d18:	e5 cf       	rjmp	.-54     	; 0xce4 <main+0x18>

00000d1a <LCD_RD_DATA>:
//
unsigned int LCD_RD_DATA (void) {

	unsigned int dh, dl, color;
	
	LCD_DATA_INPUT();
     d1a:	14 ba       	out	0x14, r1	; 20
	
	LCD_WR_H();
     d1c:	c3 98       	cbi	0x18, 3	; 24
	LCD_RS_H();
     d1e:	de 9a       	sbi	0x1b, 6	; 27
    LCD_CS_L();  
     d20:	dd 98       	cbi	0x1b, 5	; 27
    LCD_RD_L();
     d22:	df 98       	cbi	0x1b, 7	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	98 2f       	mov	r25, r24
     d28:	9a 95       	dec	r25
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <LCD_RD_DATA+0xe>
	
	_delay_us(1);
    dh = LCD_DATA_PIN;
     d2c:	43 b3       	in	r20, 0x13	; 19
     d2e:	50 e0       	ldi	r21, 0x00	; 0
	
    LCD_RD_H();
     d30:	df 9a       	sbi	0x1b, 7	; 27
    LCD_RD_L();
     d32:	df 98       	cbi	0x1b, 7	; 27
     d34:	8a 95       	dec	r24
     d36:	f1 f7       	brne	.-4      	; 0xd34 <LCD_RD_DATA+0x1a>
	
	_delay_us(1);
    dl = LCD_DATA_PIN; 
     d38:	83 b3       	in	r24, 0x13	; 19
     d3a:	90 e0       	ldi	r25, 0x00	; 0
	
    LCD_RD_H();
     d3c:	df 9a       	sbi	0x1b, 7	; 27
    LCD_CS_H();
     d3e:	dd 9a       	sbi	0x1b, 5	; 27
	
	// Swap BGR to RGB
	//
	color = dh >> 3;			// B canal
     d40:	ba 01       	movw	r22, r20
     d42:	e3 e0       	ldi	r30, 0x03	; 3
     d44:	76 95       	lsr	r23
     d46:	67 95       	ror	r22
     d48:	ea 95       	dec	r30
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <LCD_RD_DATA+0x2a>
	color |= (dh & 0x07) <<8;	// high 3 bits G canal
     d4c:	9c 01       	movw	r18, r24
     d4e:	20 7e       	andi	r18, 0xE0	; 224
     d50:	30 70       	andi	r19, 0x00	; 0
     d52:	26 2b       	or	r18, r22
     d54:	37 2b       	or	r19, r23
	color |= dl & 0xE0;			// low 3 bits G canal
     d56:	98 2f       	mov	r25, r24
     d58:	88 27       	eor	r24, r24
     d5a:	99 0f       	add	r25, r25
     d5c:	99 0f       	add	r25, r25
     d5e:	99 0f       	add	r25, r25
     d60:	28 2b       	or	r18, r24
     d62:	39 2b       	or	r19, r25
	color |= (dl & 0x1F) <<11;	// R canal 
	
	LCD_DATA_OUTPUT();
     d64:	8f ef       	ldi	r24, 0xFF	; 255
     d66:	84 bb       	out	0x14, r24	; 20
     d68:	47 70       	andi	r20, 0x07	; 7
     d6a:	50 70       	andi	r21, 0x00	; 0
     d6c:	54 2f       	mov	r21, r20
     d6e:	44 27       	eor	r20, r20
     d70:	24 2b       	or	r18, r20
     d72:	35 2b       	or	r19, r21
	
	return color;
}
     d74:	c9 01       	movw	r24, r18
     d76:	08 95       	ret

00000d78 <LCD_WR_DATA>:
//
// write data to LCD bus
//
void LCD_WR_DATA (unsigned int data) {

	LCD_RD_H();
     d78:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     d7a:	de 9a       	sbi	0x1b, 6	; 27
    LCD_CS_L();  
     d7c:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     d7e:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data >> 8;
     d80:	95 bb       	out	0x15, r25	; 21
	
    LCD_WR_H();
     d82:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     d84:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data & 0XFF; 
     d86:	85 bb       	out	0x15, r24	; 21
	
    LCD_WR_H();
     d88:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     d8a:	dd 9a       	sbi	0x1b, 5	; 27
}
     d8c:	08 95       	ret

00000d8e <LCD_WR_INDEX>:
//
// Write register index
//
void LCD_WR_INDEX (unsigned int index) {

    LCD_RD_H();
     d8e:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_L();
     d90:	de 98       	cbi	0x1b, 6	; 27
    LCD_CS_L();  
     d92:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     d94:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index >> 8; 
     d96:	95 bb       	out	0x15, r25	; 21

    LCD_WR_H();
     d98:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     d9a:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index & 0XFF; 
     d9c:	85 bb       	out	0x15, r24	; 21

    LCD_WR_H();
     d9e:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     da0:	dd 9a       	sbi	0x1b, 5	; 27
}
     da2:	08 95       	ret

00000da4 <LCD_WR_REGISTER>:

///////////////////
//
// Write register
//
void LCD_WR_REGISTER (unsigned int index, unsigned int data) {
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	8b 01       	movw	r16, r22

    LCD_WR_INDEX(index);
     daa:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_WR_INDEX>
    LCD_WR_DATA(data);
     dae:	c8 01       	movw	r24, r16
     db0:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_WR_DATA>
}
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <LCD_Scroll>:

///////////////////
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {
     dba:	bc 01       	movw	r22, r24
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <LCD_Scroll+0x8>

    while (y < 0)
        y += 320;
     dbe:	60 5c       	subi	r22, 0xC0	; 192
     dc0:	7e 4f       	sbci	r23, 0xFE	; 254
//
// LCD_Scroll(y);
//
void LCD_Scroll (int y) {

    while (y < 0)
     dc2:	77 fd       	sbrc	r23, 7
     dc4:	fc cf       	rjmp	.-8      	; 0xdbe <LCD_Scroll+0x4>
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <LCD_Scroll+0x12>
        y += 320;
	
    while (y >= 320)
        y -= 320;
     dc8:	60 54       	subi	r22, 0x40	; 64
     dca:	71 40       	sbci	r23, 0x01	; 1
void LCD_Scroll (int y) {

    while (y < 0)
        y += 320;
	
    while (y >= 320)
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	60 34       	cpi	r22, 0x40	; 64
     dd0:	78 07       	cpc	r23, r24
     dd2:	d4 f7       	brge	.-12     	; 0xdc8 <LCD_Scroll+0xe>
        y -= 320;
	
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, y);
     dd4:	8a e6       	ldi	r24, 0x6A	; 106
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
}
     ddc:	08 95       	ret

00000dde <LCD_MultipleWrite>:
//
void LCD_MultipleWrite (unsigned long count, unsigned int color) {
	
	// LCD select enable
	//
	LCD_RD_H();
     dde:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     de0:	de 9a       	sbi	0x1b, 6	; 27
	LCD_CS_L();
     de2:	dd 98       	cbi	0x1b, 5	; 27
     de4:	0a c0       	rjmp	.+20     	; 0xdfa <LCD_MultipleWrite+0x1c>
	
	while(count--) {
		
		LCD_WR_L();
     de6:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT = color >> 8; 
     de8:	55 bb       	out	0x15, r21	; 21
		
		LCD_WR_H();
     dea:	c3 98       	cbi	0x18, 3	; 24
		LCD_WR_L();
     dec:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT = color & 0XFF; 
     dee:	45 bb       	out	0x15, r20	; 21
		
		LCD_WR_H();
     df0:	c3 98       	cbi	0x18, 3	; 24
     df2:	61 50       	subi	r22, 0x01	; 1
     df4:	70 40       	sbci	r23, 0x00	; 0
     df6:	80 40       	sbci	r24, 0x00	; 0
     df8:	90 40       	sbci	r25, 0x00	; 0
	//
	LCD_RD_H();
	LCD_RS_H();
	LCD_CS_L();
	
	while(count--) {
     dfa:	61 15       	cp	r22, r1
     dfc:	71 05       	cpc	r23, r1
     dfe:	81 05       	cpc	r24, r1
     e00:	91 05       	cpc	r25, r1
     e02:	89 f7       	brne	.-30     	; 0xde6 <LCD_MultipleWrite+0x8>
		LCD_WR_H();
	}
 
	// LCD select disable
	//
	LCD_CS_H();
     e04:	dd 9a       	sbi	0x1b, 5	; 27
}
     e06:	08 95       	ret

00000e08 <LCD_SetBounds>:

////////////////////////////////////////
//
// LCD_SetBounds(x, y, width, height);
//
void LCD_SetBounds (unsigned int x, unsigned int y, unsigned int width, unsigned int height) {
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	7c 01       	movw	r14, r24
     e1e:	8b 01       	movw	r16, r22
     e20:	4a 01       	movw	r8, r20
     e22:	59 01       	movw	r10, r18

	// my Vertical
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     e24:	ff ee       	ldi	r31, 0xEF	; 239
     e26:	cf 2e       	mov	r12, r31
     e28:	d1 2c       	mov	r13, r1
     e2a:	c6 1a       	sub	r12, r22
     e2c:	d7 0a       	sbc	r13, r23
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	b6 01       	movw	r22, r12
     e34:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_START, LCD_MAX_HEIGHT -y -height);
     e38:	10 95       	com	r17
     e3a:	01 95       	neg	r16
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	00 51       	subi	r16, 0x10	; 16
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	0a 19       	sub	r16, r10
     e44:	1b 09       	sbc	r17, r11
     e46:	80 e5       	ldi	r24, 0x50	; 80
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	b8 01       	movw	r22, r16
     e4c:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_END, LCD_MAX_HEIGHT -y -1);
     e50:	81 e5       	ldi	r24, 0x51	; 81
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	b6 01       	movw	r22, r12
     e56:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// my Horizontal
	//
	LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);
     e5a:	81 e2       	ldi	r24, 0x21	; 33
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	b7 01       	movw	r22, r14
     e60:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_START, x);
     e64:	82 e5       	ldi	r24, 0x52	; 82
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b7 01       	movw	r22, r14
     e6a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_END, x + width -1);
     e6e:	08 94       	sec
     e70:	e1 08       	sbc	r14, r1
     e72:	f1 08       	sbc	r15, r1
     e74:	e8 0c       	add	r14, r8
     e76:	f9 1c       	adc	r15, r9
     e78:	83 e5       	ldi	r24, 0x53	; 83
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	b7 01       	movw	r22, r14
     e7e:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// Set Read & Write data registrer
	//
	LCD_WR_GRAM;
     e82:	82 e2       	ldi	r24, 0x22	; 34
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_WR_INDEX>
}
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	df 90       	pop	r13
     e94:	cf 90       	pop	r12
     e96:	bf 90       	pop	r11
     e98:	af 90       	pop	r10
     e9a:	9f 90       	pop	r9
     e9c:	8f 90       	pop	r8
     e9e:	08 95       	ret

00000ea0 <LCD_WriteChar>:

///////////////////////////////////////////////
//
// LCD_WriteChar(x, y, ichar, color, bcolor);
//
void LCD_WriteChar (unsigned int x, unsigned int y, char ichar, unsigned int color, unsigned int bcolor) {
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	f4 2e       	mov	r15, r20
     eb4:	59 01       	movw	r10, r18
     eb6:	68 01       	movw	r12, r16

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
     eb8:	48 e0       	ldi	r20, 0x08	; 8
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	20 e1       	ldi	r18, 0x10	; 16
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>
     ec4:	cf 2d       	mov	r28, r15
     ec6:	d0 e0       	ldi	r29, 0x00	; 0
     ec8:	a4 e0       	ldi	r26, 0x04	; 4
     eca:	cc 0f       	add	r28, r28
     ecc:	dd 1f       	adc	r29, r29
     ece:	aa 95       	dec	r26
     ed0:	e1 f7       	brne	.-8      	; 0xeca <LCD_WriteChar+0x2a>
     ed2:	cc 5a       	subi	r28, 0xAC	; 172
     ed4:	d1 40       	sbci	r29, 0x01	; 1
     ed6:	00 e0       	ldi	r16, 0x00	; 0
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
     ed8:	fe 01       	movw	r30, r28
     eda:	f4 90       	lpm	r15, Z+
     edc:	10 e0       	ldi	r17, 0x00	; 0
		
		for(column = 0; column < 8; column++) {
			
			if (data & 0x80)
     ede:	f7 fe       	sbrs	r15, 7
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <LCD_WriteChar+0x46>
				
				LCD_WR_DATA(color);
     ee2:	c5 01       	movw	r24, r10
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <LCD_WriteChar+0x48>
			else
				LCD_WR_DATA(bcolor);
     ee6:	c6 01       	movw	r24, r12
     ee8:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_WR_DATA>
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
		
		for(column = 0; column < 8; column++) {
     eec:	1f 5f       	subi	r17, 0xFF	; 255
     eee:	18 30       	cpi	r17, 0x08	; 8
     ef0:	11 f0       	breq	.+4      	; 0xef6 <LCD_WriteChar+0x56>
				
				LCD_WR_DATA(color);
			else
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
     ef2:	ff 0c       	add	r15, r15
     ef4:	f4 cf       	rjmp	.-24     	; 0xede <LCD_WriteChar+0x3e>

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
  
	for(line = 0; line < 16; line++) {
     ef6:	0f 5f       	subi	r16, 0xFF	; 255
     ef8:	21 96       	adiw	r28, 0x01	; 1
     efa:	00 31       	cpi	r16, 0x10	; 16
     efc:	69 f7       	brne	.-38     	; 0xed8 <LCD_WriteChar+0x38>
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
		}
	}
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	bf 90       	pop	r11
     f0e:	af 90       	pop	r10
     f10:	08 95       	ret

00000f12 <LCD_WriteString>:

//////////////////////////////////////////////////
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x, unsigned int y, char *string, unsigned int color, unsigned int bcolor) {
     f12:	8f 92       	push	r8
     f14:	9f 92       	push	r9
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	7c 01       	movw	r14, r24
     f2c:	4b 01       	movw	r8, r22
     f2e:	ea 01       	movw	r28, r20
     f30:	59 01       	movw	r10, r18
     f32:	68 01       	movw	r12, r16
     f34:	0b c0       	rjmp	.+22     	; 0xf4c <LCD_WriteString+0x3a>

	while(*string) {
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
     f36:	21 96       	adiw	r28, 0x01	; 1
     f38:	c7 01       	movw	r24, r14
     f3a:	b4 01       	movw	r22, r8
     f3c:	95 01       	movw	r18, r10
     f3e:	86 01       	movw	r16, r12
     f40:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_WriteChar>
		x += 8;
     f44:	88 e0       	ldi	r24, 0x08	; 8
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	e8 0e       	add	r14, r24
     f4a:	f9 1e       	adc	r15, r25
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString (unsigned int x, unsigned int y, char *string, unsigned int color, unsigned int bcolor) {

	while(*string) {
     f4c:	48 81       	ld	r20, Y
     f4e:	44 23       	and	r20, r20
     f50:	91 f7       	brne	.-28     	; 0xf36 <LCD_WriteString+0x24>
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
		x += 8;
	}
	
	LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	40 e4       	ldi	r20, 0x40	; 64
     f5c:	51 e0       	ldi	r21, 0x01	; 1
     f5e:	20 ef       	ldi	r18, 0xF0	; 240
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	9f 90       	pop	r9
     f7c:	8f 90       	pop	r8
     f7e:	08 95       	ret

00000f80 <LCD_GetPoint>:

///////////////////////////////
//
// LCD_GetPoint(x, y);
//
unsigned int LCD_GetPoint (unsigned int x, unsigned int y) {
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
     f86:	cb 01       	movw	r24, r22

	if ((x >= LCD_MAX_WIDTH) || (y >= LCD_MAX_HEIGHT))
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	c0 34       	cpi	r28, 0x40	; 64
     f8c:	d2 07       	cpc	r29, r18
     f8e:	d0 f4       	brcc	.+52     	; 0xfc4 <LCD_GetPoint+0x44>
     f90:	60 3f       	cpi	r22, 0xF0	; 240
     f92:	71 05       	cpc	r23, r1
     f94:	b8 f4       	brcc	.+46     	; 0xfc4 <LCD_GetPoint+0x44>
		return false;
	
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     f96:	6f ee       	ldi	r22, 0xEF	; 239
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	68 1b       	sub	r22, r24
     f9c:	79 0b       	sbc	r23, r25
     f9e:	80 e2       	ldi	r24, 0x20	; 32
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);   
     fa6:	81 e2       	ldi	r24, 0x21	; 33
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	be 01       	movw	r22, r28
     fac:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_GRAM;
     fb0:	82 e2       	ldi	r24, 0x22	; 34
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_WR_INDEX>
	
	LCD_RD_DATA();	// Dummy read
     fb8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCD_RD_DATA>
	
	return LCD_RD_DATA();
     fbc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCD_RD_DATA>
     fc0:	9c 01       	movw	r18, r24
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <LCD_GetPoint+0x48>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
}
     fc8:	c9 01       	movw	r24, r18
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	08 95       	ret

00000fd0 <LCD_SetPoint>:

///////////////////////////////
//
// LCD_SetPoint(x, y, color);
//
void LCD_SetPoint (unsigned int x, unsigned int y,unsigned int color) {
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8a 01       	movw	r16, r20

	if ((x >= LCD_MAX_WIDTH) || (y >= LCD_MAX_HEIGHT))
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	c0 34       	cpi	r28, 0x40	; 64
     fe2:	d2 07       	cpc	r29, r18
     fe4:	b8 f4       	brcc	.+46     	; 0x1014 <LCD_SetPoint+0x44>
     fe6:	60 3f       	cpi	r22, 0xF0	; 240
     fe8:	71 05       	cpc	r23, r1
     fea:	a0 f4       	brcc	.+40     	; 0x1014 <LCD_SetPoint+0x44>
		return;
	
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     fec:	6f ee       	ldi	r22, 0xEF	; 239
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	68 1b       	sub	r22, r24
     ff2:	79 0b       	sbc	r23, r25
     ff4:	80 e2       	ldi	r24, 0x20	; 32
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);   
     ffc:	81 e2       	ldi	r24, 0x21	; 33
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	be 01       	movw	r22, r28
    1002:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_GRAM;
    1006:	82 e2       	ldi	r24, 0x22	; 34
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <LCD_WR_INDEX>
	LCD_WR_DATA(color);
    100e:	c8 01       	movw	r24, r16
    1010:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_WR_DATA>
}
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

0000101e <LCD_DrawLine>:

/////////////////////////////////////////
//
// LCD_DrawLine(x, y, xx, yy, color);
//
void LCD_DrawLine (unsigned int x, unsigned int y, unsigned int xx, unsigned int yy, unsigned int color) {
    101e:	2f 92       	push	r2
    1020:	3f 92       	push	r3
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	28 97       	sbiw	r28, 0x08	; 8
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	1c 01       	movw	r2, r24
    1054:	2b 01       	movw	r4, r22
    1056:	1c 83       	std	Y+4, r17	; 0x04
    1058:	0b 83       	std	Y+3, r16	; 0x03

    int t, distance;
    int xerr=0, yerr=0, delta_x, delta_y;
    int incx, incy;

	if (((xx+x)/2) >= LCD_MAX_WIDTH)
    105a:	ca 01       	movw	r24, r20
    105c:	82 0d       	add	r24, r2
    105e:	93 1d       	adc	r25, r3
    1060:	80 58       	subi	r24, 0x80	; 128
    1062:	92 40       	sbci	r25, 0x02	; 2
    1064:	08 f0       	brcs	.+2      	; 0x1068 <LCD_DrawLine+0x4a>
    1066:	75 c0       	rjmp	.+234    	; 0x1152 <LCD_DrawLine+0x134>
		return;

	if (((yy+y)/2) >= LCD_MAX_HEIGHT)
    1068:	c9 01       	movw	r24, r18
    106a:	84 0d       	add	r24, r4
    106c:	95 1d       	adc	r25, r5
    106e:	80 5e       	subi	r24, 0xE0	; 224
    1070:	91 40       	sbci	r25, 0x01	; 1
    1072:	08 f0       	brcs	.+2      	; 0x1076 <LCD_DrawLine+0x58>
    1074:	6e c0       	rjmp	.+220    	; 0x1152 <LCD_DrawLine+0x134>
		return;

    // Compute the distances in both directions
	//
    delta_x = xx - x;
    1076:	42 19       	sub	r20, r2
    1078:	53 09       	sbc	r21, r3
    delta_y = yy - y;
    107a:	24 19       	sub	r18, r4
    107c:	35 09       	sbc	r19, r5

    // Compute the direction of the increment,
    // an increment of 0 means either a horizontal or vertical line.
	//
    if(delta_x > 0) 
    107e:	14 16       	cp	r1, r20
    1080:	15 06       	cpc	r1, r21
    1082:	2c f4       	brge	.+10     	; 0x108e <LCD_DrawLine+0x70>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	0a c0       	rjmp	.+20     	; 0x10a2 <LCD_DrawLine+0x84>
		
		incx = 1;
    else 
	if(delta_x == 0) 
    108e:	41 15       	cp	r20, r1
    1090:	51 05       	cpc	r21, r1
    1092:	29 f0       	breq	.+10     	; 0x109e <LCD_DrawLine+0x80>
    1094:	ef ef       	ldi	r30, 0xFF	; 255
    1096:	ff ef       	ldi	r31, 0xFF	; 255
    1098:	fa 83       	std	Y+2, r31	; 0x02
    109a:	e9 83       	std	Y+1, r30	; 0x01
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <LCD_DrawLine+0x84>
    109e:	1a 82       	std	Y+2, r1	; 0x02
    10a0:	19 82       	std	Y+1, r1	; 0x01
		
		incx=0;
    else 
		incx = -1;

    if(delta_y > 0)
    10a2:	12 16       	cp	r1, r18
    10a4:	13 06       	cpc	r1, r19
    10a6:	24 f4       	brge	.+8      	; 0x10b0 <LCD_DrawLine+0x92>
    10a8:	b1 e0       	ldi	r27, 0x01	; 1
    10aa:	6b 2e       	mov	r6, r27
    10ac:	71 2c       	mov	r7, r1
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <LCD_DrawLine+0xa4>
		
		incy = 1;
    else 
	if(delta_y == 0)
    10b0:	21 15       	cp	r18, r1
    10b2:	31 05       	cpc	r19, r1
    10b4:	21 f0       	breq	.+8      	; 0x10be <LCD_DrawLine+0xa0>
    10b6:	66 24       	eor	r6, r6
    10b8:	6a 94       	dec	r6
    10ba:	76 2c       	mov	r7, r6
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <LCD_DrawLine+0xa4>
    10be:	66 24       	eor	r6, r6
    10c0:	77 24       	eor	r7, r7
    else 
		incy = -1;

    // Determine which distance is greater
	//
    delta_x = (delta_x < 0) ? delta_x *-1 : delta_x;	//abs(delta_x);
    10c2:	5a 01       	movw	r10, r20
    10c4:	57 ff       	sbrs	r21, 7
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <LCD_DrawLine+0xb2>
    10c8:	b0 94       	com	r11
    10ca:	a1 94       	neg	r10
    10cc:	b1 08       	sbc	r11, r1
    10ce:	b3 94       	inc	r11
    delta_y = (delta_y < 0) ? delta_y *-1 : delta_y;	//abs(delta_y);
    10d0:	69 01       	movw	r12, r18
    10d2:	37 ff       	sbrs	r19, 7
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <LCD_DrawLine+0xc0>
    10d6:	d0 94       	com	r13
    10d8:	c1 94       	neg	r12
    10da:	d1 08       	sbc	r13, r1
    10dc:	d3 94       	inc	r13
    10de:	86 01       	movw	r16, r12
    10e0:	ca 14       	cp	r12, r10
    10e2:	db 04       	cpc	r13, r11
    10e4:	0c f4       	brge	.+2      	; 0x10e8 <LCD_DrawLine+0xca>
    10e6:	85 01       	movw	r16, r10
    10e8:	88 24       	eor	r8, r8
    10ea:	99 24       	eor	r9, r9
    10ec:	ee 24       	eor	r14, r14
    10ee:	ff 24       	eor	r15, r15
    10f0:	18 86       	std	Y+8, r1	; 0x08
    10f2:	1f 82       	std	Y+7, r1	; 0x07
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
    10f4:	c8 01       	movw	r24, r16
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	25 c0       	rjmp	.+74     	; 0x1148 <LCD_DrawLine+0x12a>
		
        LCD_SetPoint(x, y, color);
    10fe:	c1 01       	movw	r24, r2
    1100:	b2 01       	movw	r22, r4
    1102:	4b 81       	ldd	r20, Y+3	; 0x03
    1104:	5c 81       	ldd	r21, Y+4	; 0x04
    1106:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
        
        xerr += delta_x;
    110a:	ea 0c       	add	r14, r10
    110c:	fb 1c       	adc	r15, r11
        yerr += delta_y;
    110e:	ef 81       	ldd	r30, Y+7	; 0x07
    1110:	f8 85       	ldd	r31, Y+8	; 0x08
    1112:	ec 0d       	add	r30, r12
    1114:	fd 1d       	adc	r31, r13
    1116:	f8 87       	std	Y+8, r31	; 0x08
    1118:	ef 83       	std	Y+7, r30	; 0x07
		
        if(xerr > distance) {
    111a:	0e 15       	cp	r16, r14
    111c:	1f 05       	cpc	r17, r15
    111e:	34 f4       	brge	.+12     	; 0x112c <LCD_DrawLine+0x10e>
			
            xerr -= distance;
    1120:	e0 1a       	sub	r14, r16
    1122:	f1 0a       	sbc	r15, r17
            x += incx;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	28 0e       	add	r2, r24
    112a:	39 1e       	adc	r3, r25
        }
		
        if(yerr > distance) {
    112c:	ef 81       	ldd	r30, Y+7	; 0x07
    112e:	f8 85       	ldd	r31, Y+8	; 0x08
    1130:	0e 17       	cp	r16, r30
    1132:	1f 07       	cpc	r17, r31
    1134:	34 f4       	brge	.+12     	; 0x1142 <LCD_DrawLine+0x124>
			
            yerr -= distance;
    1136:	e0 1b       	sub	r30, r16
    1138:	f1 0b       	sbc	r31, r17
    113a:	f8 87       	std	Y+8, r31	; 0x08
    113c:	ef 83       	std	Y+7, r30	; 0x07
            y += incy;
    113e:	46 0c       	add	r4, r6
    1140:	57 1c       	adc	r5, r7
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
    1142:	08 94       	sec
    1144:	81 1c       	adc	r8, r1
    1146:	91 1c       	adc	r9, r1
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	88 15       	cp	r24, r8
    114e:	99 05       	cpc	r25, r9
    1150:	b4 f6       	brge	.-84     	; 0x10fe <LCD_DrawLine+0xe0>
			
            yerr -= distance;
            y += incy;
        }
    }
}
    1152:	28 96       	adiw	r28, 0x08	; 8
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	5f 90       	pop	r5
    117c:	4f 90       	pop	r4
    117e:	3f 90       	pop	r3
    1180:	2f 90       	pop	r2
    1182:	08 95       	ret

00001184 <LCD_DrawRectangle>:

/////////////////////////////////////////////////////////
//
// LCD_DrawRectangle(x, y, width, height, color, fill);
//
void LCD_DrawRectangle (int x, int y, unsigned int width, unsigned int height, unsigned int color, bool fill) {
    1184:	6f 92       	push	r6
    1186:	7f 92       	push	r7
    1188:	8f 92       	push	r8
    118a:	9f 92       	push	r9
    118c:	af 92       	push	r10
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	6a 01       	movw	r12, r20
    11a2:	38 01       	movw	r6, r16
    11a4:	4e 2d       	mov	r20, r14

	unsigned long count;
    int right = x + width;
    11a6:	c8 0e       	add	r12, r24
    11a8:	d9 1e       	adc	r13, r25
    int bottom = y + height;

	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
    11aa:	51 e4       	ldi	r21, 0x41	; 65
    11ac:	c5 16       	cp	r12, r21
    11ae:	51 e0       	ldi	r21, 0x01	; 1
    11b0:	d5 06       	cpc	r13, r21
    11b2:	24 f0       	brlt	.+8      	; 0x11bc <LCD_DrawRectangle+0x38>
    11b4:	10 e4       	ldi	r17, 0x40	; 64
    11b6:	c1 2e       	mov	r12, r17
    11b8:	11 e0       	ldi	r17, 0x01	; 1
    11ba:	d1 2e       	mov	r13, r17
    bottom = min(bottom, LCD_MAX_HEIGHT);
	
    x = max(x, 0);
    11bc:	5c 01       	movw	r10, r24
    11be:	97 ff       	sbrs	r25, 7
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <LCD_DrawRectangle+0x42>
    11c2:	aa 24       	eor	r10, r10
    11c4:	bb 24       	eor	r11, r11
    y = max(y, 0);
	
    width = right - x;
    11c6:	86 01       	movw	r16, r12
    11c8:	0a 19       	sub	r16, r10
    11ca:	1b 09       	sbc	r17, r11
    height = bottom - y;
	
    if ((width <= 0) || (height <= 0) || (bottom < 0))
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <LCD_DrawRectangle+0x4c>
    11ce:	5d c0       	rjmp	.+186    	; 0x128a <LCD_DrawRectangle+0x106>
//
void LCD_DrawRectangle (int x, int y, unsigned int width, unsigned int height, unsigned int color, bool fill) {

	unsigned long count;
    int right = x + width;
    int bottom = y + height;
    11d0:	e9 01       	movw	r28, r18
    11d2:	c6 0f       	add	r28, r22
    11d4:	d7 1f       	adc	r29, r23

	// Fit to display area
	//
    right = min(right, LCD_MAX_WIDTH);
    bottom = min(bottom, LCD_MAX_HEIGHT);
    11d6:	c1 3f       	cpi	r28, 0xF1	; 241
    11d8:	d1 05       	cpc	r29, r1
    11da:	14 f0       	brlt	.+4      	; 0x11e0 <LCD_DrawRectangle+0x5c>
    11dc:	c0 ef       	ldi	r28, 0xF0	; 240
    11de:	d0 e0       	ldi	r29, 0x00	; 0
	
    x = max(x, 0);
    y = max(y, 0);
    11e0:	7b 01       	movw	r14, r22
    11e2:	77 ff       	sbrs	r23, 7
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <LCD_DrawRectangle+0x66>
    11e6:	ee 24       	eor	r14, r14
    11e8:	ff 24       	eor	r15, r15
	
    width = right - x;
    height = bottom - y;
    11ea:	4e 01       	movw	r8, r28
    11ec:	8e 18       	sub	r8, r14
    11ee:	9f 08       	sbc	r9, r15
	
    if ((width <= 0) || (height <= 0) || (bottom < 0))
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <LCD_DrawRectangle+0x70>
    11f2:	4b c0       	rjmp	.+150    	; 0x128a <LCD_DrawRectangle+0x106>
    11f4:	d7 fd       	sbrc	r29, 7
    11f6:	49 c0       	rjmp	.+146    	; 0x128a <LCD_DrawRectangle+0x106>
		return;
	
	if ((y >= LCD_MAX_HEIGHT) || (right <= 0) || (x >= LCD_MAX_WIDTH))
    11f8:	80 ef       	ldi	r24, 0xF0	; 240
    11fa:	e8 16       	cp	r14, r24
    11fc:	f1 04       	cpc	r15, r1
    11fe:	0c f0       	brlt	.+2      	; 0x1202 <LCD_DrawRectangle+0x7e>
    1200:	44 c0       	rjmp	.+136    	; 0x128a <LCD_DrawRectangle+0x106>
    1202:	1c 14       	cp	r1, r12
    1204:	1d 04       	cpc	r1, r13
    1206:	0c f0       	brlt	.+2      	; 0x120a <LCD_DrawRectangle+0x86>
    1208:	40 c0       	rjmp	.+128    	; 0x128a <LCD_DrawRectangle+0x106>
    120a:	50 e4       	ldi	r21, 0x40	; 64
    120c:	a5 16       	cp	r10, r21
    120e:	51 e0       	ldi	r21, 0x01	; 1
    1210:	b5 06       	cpc	r11, r21
    1212:	dc f5       	brge	.+118    	; 0x128a <LCD_DrawRectangle+0x106>
        return;    

	// Fill it
	//
	if (fill) {
    1214:	44 23       	and	r20, r20
    1216:	91 f0       	breq	.+36     	; 0x123c <LCD_DrawRectangle+0xb8>
		
		count = (unsigned long)width *height;
		
		// Set bounds
		//
		LCD_SetBounds(x, y, width, height);
    1218:	c5 01       	movw	r24, r10
    121a:	b7 01       	movw	r22, r14
    121c:	a8 01       	movw	r20, r16
    121e:	94 01       	movw	r18, r8
    1220:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>
	
		LCD_MultipleWrite(count, color);
    1224:	b4 01       	movw	r22, r8
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	98 01       	movw	r18, r16
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    1234:	a3 01       	movw	r20, r6
    1236:	0e 94 ef 06 	call	0xdde	; 0xdde <LCD_MultipleWrite>
    123a:	27 c0       	rjmp	.+78     	; 0x128a <LCD_DrawRectangle+0x106>
	//
	else {
		
		// Set bounds
		//
		LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	40 e4       	ldi	r20, 0x40	; 64
    1246:	51 e0       	ldi	r21, 0x01	; 1
    1248:	20 ef       	ldi	r18, 0xF0	; 240
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>
		
		// Draw outline
		//
		LCD_DrawLine(x, y, x +width, y, color);
    1250:	0a 0d       	add	r16, r10
    1252:	1b 1d       	adc	r17, r11
    1254:	c5 01       	movw	r24, r10
    1256:	b7 01       	movw	r22, r14
    1258:	a8 01       	movw	r20, r16
    125a:	97 01       	movw	r18, r14
    125c:	83 01       	movw	r16, r6
    125e:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
		LCD_DrawLine(x, bottom, right, bottom, color);
    1262:	c5 01       	movw	r24, r10
    1264:	be 01       	movw	r22, r28
    1266:	a6 01       	movw	r20, r12
    1268:	9e 01       	movw	r18, r28
    126a:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
		LCD_DrawLine(right, y, right, bottom, color);
    126e:	c6 01       	movw	r24, r12
    1270:	b7 01       	movw	r22, r14
    1272:	a6 01       	movw	r20, r12
    1274:	9e 01       	movw	r18, r28
    1276:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
		LCD_DrawLine(x, y, x, y +height, color);
    127a:	8e 0c       	add	r8, r14
    127c:	9f 1c       	adc	r9, r15
    127e:	c5 01       	movw	r24, r10
    1280:	b7 01       	movw	r22, r14
    1282:	a5 01       	movw	r20, r10
    1284:	94 01       	movw	r18, r8
    1286:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_DrawLine>
	}
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	bf 90       	pop	r11
    129c:	af 90       	pop	r10
    129e:	9f 90       	pop	r9
    12a0:	8f 90       	pop	r8
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	08 95       	ret

000012a8 <LCD_Clear>:
//
// LCD_Clear(color);
//
// color is RGB(5-6-5) format
//
void LCD_Clear (unsigned int color) {
    12a8:	ef 92       	push	r14
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	8c 01       	movw	r16, r24

	LCD_DrawRectangle(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT, color, true);
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	40 e4       	ldi	r20, 0x40	; 64
    12ba:	51 e0       	ldi	r21, 0x01	; 1
    12bc:	20 ef       	ldi	r18, 0xF0	; 240
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	ee 24       	eor	r14, r14
    12c2:	e3 94       	inc	r14
    12c4:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
}
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ef 90       	pop	r14
    12ce:	08 95       	ret

000012d0 <LCD_Init>:
//
// LCD initialization
//
void LCD_Init (void) {

	LCD_PORT_INI();
    12d0:	8f 9a       	sbi	0x11, 7	; 17
    12d2:	d5 9a       	sbi	0x1a, 5	; 26
    12d4:	d6 9a       	sbi	0x1a, 6	; 26
    12d6:	bb 9a       	sbi	0x17, 3	; 23
    12d8:	d7 9a       	sbi	0x1a, 7	; 26
    12da:	b9 9a       	sbi	0x17, 1	; 23
 
	// LCD Reset
	//
	LCD_RST_L();
    12dc:	c1 98       	cbi	0x18, 1	; 24
    12de:	88 ee       	ldi	r24, 0xE8	; 232
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12e2:	28 ec       	ldi	r18, 0xC8	; 200
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	f9 01       	movw	r30, r18
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <LCD_Init+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ee:	d9 f7       	brne	.-10     	; 0x12e6 <LCD_Init+0x16>
	_delay_ms(100);
	LCD_RST_H();
    12f0:	c1 9a       	sbi	0x18, 1	; 24
    12f2:	88 ee       	ldi	r24, 0xE8	; 232
    12f4:	93 e0       	ldi	r25, 0x03	; 3
    12f6:	28 ec       	ldi	r18, 0xC8	; 200
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	31 97       	sbiw	r30, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <LCD_Init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	d9 f7       	brne	.-10     	; 0x12fa <LCD_Init+0x2a>
	_delay_ms(100); 
	
	// SET registers
	//
	LCD_WR_REGISTER(0x00E3,0x3008); 					// Set the internal timing;   
    1304:	83 ee       	ldi	r24, 0xE3	; 227
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	68 e0       	ldi	r22, 0x08	; 8
    130a:	70 e3       	ldi	r23, 0x30	; 48
    130c:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00E7,0x0012); 					// Set the internal timing;   
    1310:	87 ee       	ldi	r24, 0xE7	; 231
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	62 e1       	ldi	r22, 0x12	; 18
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00Ef,0x1231); 					// Set the internal timing;   
    131c:	8f ee       	ldi	r24, 0xEF	; 239
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	61 e3       	ldi	r22, 0x31	; 49
    1322:	72 e1       	ldi	r23, 0x12	; 18
    1324:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_START_OSC,0x0001);				// Start Oscilator
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    1334:	84 ef       	ldi	r24, 0xF4	; 244
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	28 ec       	ldi	r18, 0xC8	; 200
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	f9 01       	movw	r30, r18
    133e:	31 97       	sbiw	r30, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <LCD_Init+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1342:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	d9 f7       	brne	.-10     	; 0x133c <LCD_Init+0x6c>
	_delay_ms(50);

    LCD_WR_REGISTER(LCD_DRIVE_OUTPUT, 0x0000);			// Set standard drive mode
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_DRIVE_WAVE, 0x0700);			// Line inversion
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	77 e0       	ldi	r23, 0x07	; 7
    135a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// 16 bits System interface (65536 colors)
	//
	LCD_WR_REGISTER(LCD_ENTRY_MODE,0x1028); 			// [12]BGR mode, [5:4]display rotate and [3]Landscape
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	68 e2       	ldi	r22, 0x28	; 40
    1364:	70 e1       	ldi	r23, 0x10	; 16
    1366:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_RESIZE_CTRL, 0x0000);			// No resize
    136a:	84 e0       	ldi	r24, 0x04	; 4
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL2, 0x0202);			// Back & front porch = 2
    1376:	88 e0       	ldi	r24, 0x08	; 8
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	72 e0       	ldi	r23, 0x02	; 2
    137e:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL3, 0x0000);			// Non-display area refresh cycle
    1382:	89 e0       	ldi	r24, 0x09	; 9
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL4, 0x0000);			// FMARK function OFF
    138e:	8a e0       	ldi	r24, 0x0A	; 10
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
				
	// Select System interface
	//
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE1, 0x0000);	// 16-bit RGB interface, internal clock (Still pictures))
    139a:	8c e0       	ldi	r24, 0x0C	; 12
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_FRM_MARKER_POS, 0x0000);		// Frame marker Position
    13a6:	8d e0       	ldi	r24, 0x0D	; 13
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE2, 0x0000);	// RGB interface polarity
    13b2:	8f e0       	ldi	r24, 0x0F	; 15
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>

	// Power On sequence 
	//
	LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x0000);
    13be:	80 e1       	ldi	r24, 0x10	; 16
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0007);			// Vci x1
    13ca:	81 e1       	ldi	r24, 0x11	; 17
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	67 e0       	ldi	r22, 0x07	; 7
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x0000);
    13d6:	82 e1       	ldi	r24, 0x12	; 18
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x0000);
    13e2:	83 e1       	ldi	r24, 0x13	; 19
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    13ee:	80 ed       	ldi	r24, 0xD0	; 208
    13f0:	97 e0       	ldi	r25, 0x07	; 7
    13f2:	28 ec       	ldi	r18, 0xC8	; 200
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	f9 01       	movw	r30, r18
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <LCD_Init+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	d9 f7       	brne	.-10     	; 0x13f6 <LCD_Init+0x126>
    _delay_ms(200);										// Dis-charge capacitor power voltage
    
    LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x1590);			// Power supply startup, Source driver enable
    1400:	80 e1       	ldi	r24, 0x10	; 16
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	60 e9       	ldi	r22, 0x90	; 144
    1406:	75 e1       	ldi	r23, 0x15	; 21
    1408:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0227);			// Step-up circuit1	Fosc/4, Step-up circuit2 Fosc/16
    140c:	81 e1       	ldi	r24, 0x11	; 17
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	67 e2       	ldi	r22, 0x27	; 39
    1412:	72 e0       	ldi	r23, 0x02	; 2
    1414:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    1418:	84 ef       	ldi	r24, 0xF4	; 244
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	28 ec       	ldi	r18, 0xC8	; 200
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	31 97       	sbiw	r30, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <LCD_Init+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	d9 f7       	brne	.-10     	; 0x1420 <LCD_Init+0x150>
    _delay_ms(50);

	LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x001e);			// Internal reference voltage= Vci;
    142a:	82 e1       	ldi	r24, 0x12	; 18
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	6e e1       	ldi	r22, 0x1E	; 30
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    1436:	84 ef       	ldi	r24, 0xF4	; 244
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	28 ec       	ldi	r18, 0xC8	; 200
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	f9 01       	movw	r30, r18
    1440:	31 97       	sbiw	r30, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <LCD_Init+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1446:	d9 f7       	brne	.-10     	; 0x143e <LCD_Init+0x16e>
    _delay_ms(50);
	
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x1500);			// VCOM amplitude x1.04
    1448:	83 e1       	ldi	r24, 0x13	; 19
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	75 e1       	ldi	r23, 0x15	; 21
    1450:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL7, 0x0026);			// VCOMH x0.875
    1454:	89 e2       	ldi	r24, 0x29	; 41
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	66 e2       	ldi	r22, 0x26	; 38
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    1460:	84 ef       	ldi	r24, 0xF4	; 244
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	28 ec       	ldi	r18, 0xC8	; 200
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	f9 01       	movw	r30, r18
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <LCD_Init+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1470:	d9 f7       	brne	.-10     	; 0x1468 <LCD_Init+0x198>
    _delay_ms(50);
    
	// Adjust the Gamma Curve
	//
	LCD_WR_REGISTER(LCD_GAMMA_CTRL1,0x0007);
    1472:	80 e3       	ldi	r24, 0x30	; 48
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	67 e0       	ldi	r22, 0x07	; 7
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL2,0x0707);
    147e:	81 e3       	ldi	r24, 0x31	; 49
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	67 e0       	ldi	r22, 0x07	; 7
    1484:	77 e0       	ldi	r23, 0x07	; 7
    1486:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL3,0x0107);
    148a:	82 e3       	ldi	r24, 0x32	; 50
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	67 e0       	ldi	r22, 0x07	; 7
    1490:	71 e0       	ldi	r23, 0x01	; 1
    1492:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL4,0x0206);
    1496:	85 e3       	ldi	r24, 0x35	; 53
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	66 e0       	ldi	r22, 0x06	; 6
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL5,0x0406);
    14a2:	86 e3       	ldi	r24, 0x36	; 54
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	66 e0       	ldi	r22, 0x06	; 6
    14a8:	74 e0       	ldi	r23, 0x04	; 4
    14aa:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL6,0x0101);
    14ae:	87 e3       	ldi	r24, 0x37	; 55
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	61 e0       	ldi	r22, 0x01	; 1
    14b4:	71 e0       	ldi	r23, 0x01	; 1
    14b6:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL7,0x0101);
    14ba:	88 e3       	ldi	r24, 0x38	; 56
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL8,0x0207);
    14c6:	89 e3       	ldi	r24, 0x39	; 57
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	67 e0       	ldi	r22, 0x07	; 7
    14cc:	72 e0       	ldi	r23, 0x02	; 2
    14ce:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL9,0x0504);
    14d2:	8c e3       	ldi	r24, 0x3C	; 60
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	64 e0       	ldi	r22, 0x04	; 4
    14d8:	75 e0       	ldi	r23, 0x05	; 5
    14da:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL10,0x0806);
    14de:	8d e3       	ldi	r24, 0x3D	; 61
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	66 e0       	ldi	r22, 0x06	; 6
    14e4:	78 e0       	ldi	r23, 0x08	; 8
    14e6:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// Set frame rate
	//
	LCD_WR_REGISTER(LCD_FRAME_RATE, 0x000F);
    14ea:	8b e2       	ldi	r24, 0x2B	; 43
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	6f e0       	ldi	r22, 0x0F	; 15
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// Set GRAM area
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS,0x0000);			// Horizontal GRAM address
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS,0x0000);			// Vertical GRAM address
    1502:	81 e2       	ldi	r24, 0x21	; 33
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_START, 0x0000);		// Horizontal GRAM Start Address
    150e:	80 e5       	ldi	r24, 0x50	; 80
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_END, 0x00EF);		// Horizontal GRAM End Address
    151a:	81 e5       	ldi	r24, 0x51	; 81
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	6f ee       	ldi	r22, 0xEF	; 239
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_START, 0x0000);		// Vertical GRAM Start Address
    1526:	82 e5       	ldi	r24, 0x52	; 82
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_END, 0x013F);			// Vertical GRAM Start Address
    1532:	83 e5       	ldi	r24, 0x53	; 83
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	6f e3       	ldi	r22, 0x3F	; 63
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// Gater scan control
	//
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL1, 0x2700);		// Gate Scan for 320 lines
    153e:	80 e6       	ldi	r24, 0x60	; 96
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	77 e2       	ldi	r23, 0x27	; 39
    1546:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL2, 0x0003);		// From G1 to G320, vertical scroll enable
    154a:	81 e6       	ldi	r24, 0x61	; 97
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	63 e0       	ldi	r22, 0x03	; 3
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, 0x0000);		// Set scrolling line to 0x00
    1556:	8a e6       	ldi	r24, 0x6A	; 106
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// Partial display control (not used for now)
	//
	LCD_WR_REGISTER(LCD_PART_IMG1_DISP_POS, 0x0000);
    1562:	80 e8       	ldi	r24, 0x80	; 128
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_START_AD, 0x0000);
    156e:	81 e8       	ldi	r24, 0x81	; 129
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_END_AD, 0x0000);
    157a:	82 e8       	ldi	r24, 0x82	; 130
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_DISP_POS, 0x0000);
    1586:	83 e8       	ldi	r24, 0x83	; 131
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_START_AD, 0x0000);
    1592:	84 e8       	ldi	r24, 0x84	; 132
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_END_AD, 0x0000);
    159e:	85 e8       	ldi	r24, 0x85	; 133
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>

	// Panel interface control
	//
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE1, 0x0010);		// 16 clocks per line
    15aa:	80 e9       	ldi	r24, 0x90	; 144
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	60 e1       	ldi	r22, 0x10	; 16
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE2, 0x0600);		// try 0x00 // gate output non-overlap 6 clocks period
    15b6:	82 e9       	ldi	r24, 0x92	; 146
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	76 e0       	ldi	r23, 0x06	; 6
    15be:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE3, 0x0003);		// ???
    15c2:	83 e9       	ldi	r24, 0x93	; 147
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	63 e0       	ldi	r22, 0x03	; 3
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE4, 0x0110);		// H1 - 16 clocks per line period, 4 DOTCLKS division ratio with RGB synchron
    15ce:	85 e9       	ldi	r24, 0x95	; 149
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	60 e1       	ldi	r22, 0x10	; 16
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE5, 0x0000);		// ???
    15da:	87 e9       	ldi	r24, 0x97	; 151
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE6, 0x0000);		// ???
    15e6:	88 e9       	ldi	r24, 0x98	; 152
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	
	// Display ON with 262K color, normal display follow
	//
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL1, 0x0133); 
    15f2:	87 e0       	ldi	r24, 0x07	; 7
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	63 e3       	ldi	r22, 0x33	; 51
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	0e 94 d2 06 	call	0xda4	; 0xda4 <LCD_WR_REGISTER>
	LCD_Clear(BLACK);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_Clear>
	
	// Set LCD backlight on
	//
	LCD_BL_H();	
    1606:	97 9a       	sbi	0x12, 7	; 18

}
    1608:	08 95       	ret

0000160a <LCD_DrawLineAlpha>:

///////////////////////////////////////////////////
//
// LCD_DrawLineAlpha(x, y, xx, yy, color, alpha);
//
void LCD_DrawLineAlpha (unsigned int x, unsigned int y, unsigned int xx, unsigned int yy, unsigned int color, unsigned char alpha) {
    160a:	2f 92       	push	r2
    160c:	3f 92       	push	r3
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	a4 97       	sbiw	r28, 0x24	; 36
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	98 8b       	std	Y+16, r25	; 0x10
    1640:	8f 87       	std	Y+15, r24	; 0x0f
    1642:	7a 8b       	std	Y+18, r23	; 0x12
    1644:	69 8b       	std	Y+17, r22	; 0x11
    1646:	5a 01       	movw	r10, r20
    1648:	29 01       	movw	r4, r18
    164a:	48 01       	movw	r8, r16
	double dalpha;
	int i= 0;
	
	// Compute alpha
	//
	if (!alpha)
    164c:	ee 20       	and	r14, r14
    164e:	09 f4       	brne	.+2      	; 0x1652 <LCD_DrawLineAlpha+0x48>
    1650:	97 c1       	rjmp	.+814    	; 0x1980 <LCD_DrawLineAlpha+0x376>
		return;
	
	alpha = min(alpha, 100);
	dalpha = (double)100 / alpha;
    1652:	8e 2d       	mov	r24, r14
    1654:	85 36       	cpi	r24, 0x65	; 101
    1656:	08 f0       	brcs	.+2      	; 0x165a <LCD_DrawLineAlpha+0x50>
    1658:	84 e6       	ldi	r24, 0x64	; 100
    165a:	c8 2e       	mov	r12, r24
    165c:	dd 24       	eor	r13, r13
    165e:	b6 01       	movw	r22, r12
    1660:	88 27       	eor	r24, r24
    1662:	77 fd       	sbrc	r23, 7
    1664:	80 95       	com	r24
    1666:	98 2f       	mov	r25, r24
    1668:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    166c:	9b 01       	movw	r18, r22
    166e:	ac 01       	movw	r20, r24
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	88 ec       	ldi	r24, 0xC8	; 200
    1676:	92 e4       	ldi	r25, 0x42	; 66
    1678:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    167c:	7b 01       	movw	r14, r22
    167e:	8c 01       	movw	r16, r24
	
	// Calculate RGB
	//
	R = (double)(color >> 11) / dalpha;
    1680:	b4 01       	movw	r22, r8
    1682:	67 2f       	mov	r22, r23
    1684:	77 27       	eor	r23, r23
    1686:	66 95       	lsr	r22
    1688:	66 95       	lsr	r22
    168a:	66 95       	lsr	r22
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    1694:	a8 01       	movw	r20, r16
    1696:	97 01       	movw	r18, r14
    1698:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    169c:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fixunssfsi>
    16a0:	7e 83       	std	Y+6, r23	; 0x06
    16a2:	6d 83       	std	Y+5, r22	; 0x05
	G = (double)((color << 5) >>10) / dalpha;
    16a4:	b4 01       	movw	r22, r8
    16a6:	55 e0       	ldi	r21, 0x05	; 5
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	5a 95       	dec	r21
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <LCD_DrawLineAlpha+0x9e>
    16b0:	67 2f       	mov	r22, r23
    16b2:	77 27       	eor	r23, r23
    16b4:	66 95       	lsr	r22
    16b6:	66 95       	lsr	r22
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    16c0:	a8 01       	movw	r20, r16
    16c2:	97 01       	movw	r18, r14
    16c4:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    16c8:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fixunssfsi>
    16cc:	7c 83       	std	Y+4, r23	; 0x04
    16ce:	6b 83       	std	Y+3, r22	; 0x03
	B = (double)(color & 0x1F) / dalpha;
    16d0:	2f e1       	ldi	r18, 0x1F	; 31
    16d2:	82 22       	and	r8, r18
    16d4:	99 24       	eor	r9, r9
    16d6:	b4 01       	movw	r22, r8
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    16e0:	a8 01       	movw	r20, r16
    16e2:	97 01       	movw	r18, r14
    16e4:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    16e8:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fixunssfsi>
    16ec:	8b 01       	movw	r16, r22
	
	// Calculate alpha for reading
	//
	dalpha = (double)100 / (100 - alpha);
    16ee:	64 e6       	ldi	r22, 0x64	; 100
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	6c 19       	sub	r22, r12
    16f4:	7d 09       	sbc	r23, r13
    16f6:	88 27       	eor	r24, r24
    16f8:	77 fd       	sbrc	r23, 7
    16fa:	80 95       	com	r24
    16fc:	98 2f       	mov	r25, r24
    16fe:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    1702:	9b 01       	movw	r18, r22
    1704:	ac 01       	movw	r20, r24
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	92 e4       	ldi	r25, 0x42	; 66
    170e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    1712:	3b 01       	movw	r6, r22
    1714:	4c 01       	movw	r8, r24

	// Compute the distances in both directions
	//
    delta_x = xx - x;
    1716:	a5 01       	movw	r20, r10
    1718:	8f 85       	ldd	r24, Y+15	; 0x0f
    171a:	98 89       	ldd	r25, Y+16	; 0x10
    171c:	48 1b       	sub	r20, r24
    171e:	59 0b       	sbc	r21, r25
    delta_y = yy - y;
    1720:	92 01       	movw	r18, r4
    1722:	a9 89       	ldd	r26, Y+17	; 0x11
    1724:	ba 89       	ldd	r27, Y+18	; 0x12
    1726:	2a 1b       	sub	r18, r26
    1728:	3b 0b       	sbc	r19, r27

    // Compute the direction of the increment,
    // an increment of 0 means either a horizontal or vertical line.
	//
    if(delta_x > 0) 
    172a:	14 16       	cp	r1, r20
    172c:	15 06       	cpc	r1, r21
    172e:	2c f4       	brge	.+10     	; 0x173a <LCD_DrawLineAlpha+0x130>
    1730:	e1 e0       	ldi	r30, 0x01	; 1
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	fa 87       	std	Y+10, r31	; 0x0a
    1736:	e9 87       	std	Y+9, r30	; 0x09
    1738:	0a c0       	rjmp	.+20     	; 0x174e <LCD_DrawLineAlpha+0x144>
		
		incx = 1;
    else 
	if(delta_x == 0) 
    173a:	41 15       	cp	r20, r1
    173c:	51 05       	cpc	r21, r1
    173e:	29 f0       	breq	.+10     	; 0x174a <LCD_DrawLineAlpha+0x140>
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	9f ef       	ldi	r25, 0xFF	; 255
    1744:	9a 87       	std	Y+10, r25	; 0x0a
    1746:	89 87       	std	Y+9, r24	; 0x09
    1748:	02 c0       	rjmp	.+4      	; 0x174e <LCD_DrawLineAlpha+0x144>
    174a:	1a 86       	std	Y+10, r1	; 0x0a
    174c:	19 86       	std	Y+9, r1	; 0x09
		
		incx=0;
    else 
		incx = -1;

    if(delta_y > 0)
    174e:	12 16       	cp	r1, r18
    1750:	13 06       	cpc	r1, r19
    1752:	2c f4       	brge	.+10     	; 0x175e <LCD_DrawLineAlpha+0x154>
    1754:	a1 e0       	ldi	r26, 0x01	; 1
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	b8 87       	std	Y+8, r27	; 0x08
    175a:	af 83       	std	Y+7, r26	; 0x07
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <LCD_DrawLineAlpha+0x168>
		
		incy = 1;
    else 
	if(delta_y == 0)
    175e:	21 15       	cp	r18, r1
    1760:	31 05       	cpc	r19, r1
    1762:	29 f0       	breq	.+10     	; 0x176e <LCD_DrawLineAlpha+0x164>
    1764:	ef ef       	ldi	r30, 0xFF	; 255
    1766:	ff ef       	ldi	r31, 0xFF	; 255
    1768:	f8 87       	std	Y+8, r31	; 0x08
    176a:	ef 83       	std	Y+7, r30	; 0x07
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <LCD_DrawLineAlpha+0x168>
    176e:	18 86       	std	Y+8, r1	; 0x08
    1770:	1f 82       	std	Y+7, r1	; 0x07
    else 
		incy = -1;

    // Determine which distance is greater
	//
    delta_x = (delta_x < 0) ? delta_x *-1 : delta_x;	//abs(delta_x);
    1772:	2a 01       	movw	r4, r20
    1774:	57 ff       	sbrs	r21, 7
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <LCD_DrawLineAlpha+0x176>
    1778:	50 94       	com	r5
    177a:	41 94       	neg	r4
    177c:	51 08       	sbc	r5, r1
    177e:	53 94       	inc	r5
    delta_y = (delta_y < 0) ? delta_y *-1 : delta_y;	//abs(delta_y);
    1780:	59 01       	movw	r10, r18
    1782:	37 ff       	sbrs	r19, 7
    1784:	04 c0       	rjmp	.+8      	; 0x178e <LCD_DrawLineAlpha+0x184>
    1786:	b0 94       	com	r11
    1788:	a1 94       	neg	r10
    178a:	b1 08       	sbc	r11, r1
    178c:	b3 94       	inc	r11
    178e:	65 01       	movw	r12, r10
    1790:	a4 14       	cp	r10, r4
    1792:	b5 04       	cpc	r11, r5
    1794:	0c f4       	brge	.+2      	; 0x1798 <LCD_DrawLineAlpha+0x18e>
    1796:	62 01       	movw	r12, r4
    1798:	1e 86       	std	Y+14, r1	; 0x0e
    179a:	1d 86       	std	Y+13, r1	; 0x0d
    179c:	1c 86       	std	Y+12, r1	; 0x0c
    179e:	1b 86       	std	Y+11, r1	; 0x0b
    17a0:	22 24       	eor	r2, r2
    17a2:	33 24       	eor	r3, r3
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
    17a4:	96 01       	movw	r18, r12
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	3e 8b       	std	Y+22, r19	; 0x16
    17ac:	2d 8b       	std	Y+21, r18	; 0x15
		tcolor = LCD_GetPoint(x, y);
		
		// Calculate Color
		//
		tR = R + (double)(tcolor >> 11) / dalpha;
		tG = G + (double)((tcolor << 5) >>10) / dalpha;
    17ae:	ab 81       	ldd	r26, Y+3	; 0x03
    17b0:	bc 81       	ldd	r27, Y+4	; 0x04
    17b2:	cd 01       	movw	r24, r26
    17b4:	a0 e0       	ldi	r26, 0x00	; 0
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	8f 8b       	std	Y+23, r24	; 0x17
    17ba:	98 8f       	std	Y+24, r25	; 0x18
    17bc:	a9 8f       	std	Y+25, r26	; 0x19
    17be:	ba 8f       	std	Y+26, r27	; 0x1a
		// 
		tcolor = LCD_GetPoint(x, y);
		
		// Calculate Color
		//
		tR = R + (double)(tcolor >> 11) / dalpha;
    17c0:	ad 81       	ldd	r26, Y+5	; 0x05
    17c2:	be 81       	ldd	r27, Y+6	; 0x06
    17c4:	cd 01       	movw	r24, r26
    17c6:	a0 e0       	ldi	r26, 0x00	; 0
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	8b 8f       	std	Y+27, r24	; 0x1b
    17cc:	9c 8f       	std	Y+28, r25	; 0x1c
    17ce:	ad 8f       	std	Y+29, r26	; 0x1d
    17d0:	be 8f       	std	Y+30, r27	; 0x1e
		tG = G + (double)((tcolor << 5) >>10) / dalpha;
		tB = B + (double)(tcolor & 0x1F) / dalpha;
    17d2:	c8 01       	movw	r24, r16
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	8f 8f       	std	Y+31, r24	; 0x1f
    17da:	98 a3       	std	Y+32, r25	; 0x20
    17dc:	a9 a3       	std	Y+33, r26	; 0x21
    17de:	ba a3       	std	Y+34, r27	; 0x22
    17e0:	c7 c0       	rjmp	.+398    	; 0x1970 <LCD_DrawLineAlpha+0x366>
	//
    for(t=0; t <= distance+1; t++) {
		
		// Get color of this point
		// 
		tcolor = LCD_GetPoint(x, y);
    17e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e4:	98 89       	ldd	r25, Y+16	; 0x10
    17e6:	69 89       	ldd	r22, Y+17	; 0x11
    17e8:	7a 89       	ldd	r23, Y+18	; 0x12
    17ea:	0e 94 c0 07 	call	0xf80	; 0xf80 <LCD_GetPoint>
    17ee:	9c a3       	std	Y+36, r25	; 0x24
    17f0:	8b a3       	std	Y+35, r24	; 0x23
		color |= tG << 5;
		color |= tB & 0x1F;
		
		// Draw
		//
		if (i++ > 1)
    17f2:	ad 85       	ldd	r26, Y+13	; 0x0d
    17f4:	be 85       	ldd	r27, Y+14	; 0x0e
    17f6:	12 97       	sbiw	r26, 0x02	; 2
    17f8:	0c f4       	brge	.+2      	; 0x17fc <LCD_DrawLineAlpha+0x1f2>
    17fa:	91 c0       	rjmp	.+290    	; 0x191e <LCD_DrawLineAlpha+0x314>
		tcolor = LCD_GetPoint(x, y);
		
		// Calculate Color
		//
		tR = R + (double)(tcolor >> 11) / dalpha;
		tG = G + (double)((tcolor << 5) >>10) / dalpha;
    17fc:	6f 89       	ldd	r22, Y+23	; 0x17
    17fe:	78 8d       	ldd	r23, Y+24	; 0x18
    1800:	89 8d       	ldd	r24, Y+25	; 0x19
    1802:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1804:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    1808:	7b 01       	movw	r14, r22
    180a:	8c 01       	movw	r16, r24
    180c:	6b a1       	ldd	r22, Y+35	; 0x23
    180e:	7c a1       	ldd	r23, Y+36	; 0x24
    1810:	35 e0       	ldi	r19, 0x05	; 5
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	3a 95       	dec	r19
    1818:	e1 f7       	brne	.-8      	; 0x1812 <LCD_DrawLineAlpha+0x208>
    181a:	67 2f       	mov	r22, r23
    181c:	77 27       	eor	r23, r23
    181e:	66 95       	lsr	r22
    1820:	66 95       	lsr	r22
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    182a:	a4 01       	movw	r20, r8
    182c:	93 01       	movw	r18, r6
    182e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    1832:	9b 01       	movw	r18, r22
    1834:	ac 01       	movw	r20, r24
    1836:	c8 01       	movw	r24, r16
    1838:	b7 01       	movw	r22, r14
    183a:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__addsf3>
    183e:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fixunssfsi>
    1842:	6b 8b       	std	Y+19, r22	; 0x13
    1844:	7c 8b       	std	Y+20, r23	; 0x14
		// 
		tcolor = LCD_GetPoint(x, y);
		
		// Calculate Color
		//
		tR = R + (double)(tcolor >> 11) / dalpha;
    1846:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1848:	7c 8d       	ldd	r23, Y+28	; 0x1c
    184a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    184e:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    1852:	7b 01       	movw	r14, r22
    1854:	8c 01       	movw	r16, r24
    1856:	6b a1       	ldd	r22, Y+35	; 0x23
    1858:	7c a1       	ldd	r23, Y+36	; 0x24
    185a:	67 2f       	mov	r22, r23
    185c:	77 27       	eor	r23, r23
    185e:	66 95       	lsr	r22
    1860:	66 95       	lsr	r22
    1862:	66 95       	lsr	r22
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    186c:	a4 01       	movw	r20, r8
    186e:	93 01       	movw	r18, r6
    1870:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    1874:	9b 01       	movw	r18, r22
    1876:	ac 01       	movw	r20, r24
    1878:	c8 01       	movw	r24, r16
    187a:	b7 01       	movw	r22, r14
    187c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__addsf3>
    1880:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fixunssfsi>
		
		tR = min(tR, 0x1F);
		tG = min(tG, 0x3F);
		tB = min(tB, 0x1F);
		
		color = tR << 11;
    1884:	cb 01       	movw	r24, r22
    1886:	60 32       	cpi	r22, 0x20	; 32
    1888:	71 05       	cpc	r23, r1
    188a:	10 f0       	brcs	.+4      	; 0x1890 <LCD_DrawLineAlpha+0x286>
    188c:	8f e1       	ldi	r24, 0x1F	; 31
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	fe 2f       	mov	r31, r30
    1894:	ee 27       	eor	r30, r30
    1896:	ff 0f       	add	r31, r31
    1898:	ff 0f       	add	r31, r31
    189a:	ff 0f       	add	r31, r31
    189c:	fa 83       	std	Y+2, r31	; 0x02
    189e:	e9 83       	std	Y+1, r30	; 0x01
		
		// Calculate Color
		//
		tR = R + (double)(tcolor >> 11) / dalpha;
		tG = G + (double)((tcolor << 5) >>10) / dalpha;
		tB = B + (double)(tcolor & 0x1F) / dalpha;
    18a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18a2:	78 a1       	ldd	r23, Y+32	; 0x20
    18a4:	89 a1       	ldd	r24, Y+33	; 0x21
    18a6:	9a a1       	ldd	r25, Y+34	; 0x22
    18a8:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    18ac:	7b 01       	movw	r14, r22
    18ae:	8c 01       	movw	r16, r24
    18b0:	2b a1       	ldd	r18, Y+35	; 0x23
    18b2:	3c a1       	ldd	r19, Y+36	; 0x24
    18b4:	2f 71       	andi	r18, 0x1F	; 31
    18b6:	30 70       	andi	r19, 0x00	; 0
    18b8:	b9 01       	movw	r22, r18
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatunsisf>
    18c2:	a4 01       	movw	r20, r8
    18c4:	93 01       	movw	r18, r6
    18c6:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	c8 01       	movw	r24, r16
    18d0:	b7 01       	movw	r22, r14
    18d2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__addsf3>
    18d6:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fixunssfsi>
		tR = min(tR, 0x1F);
		tG = min(tG, 0x3F);
		tB = min(tB, 0x1F);
		
		color = tR << 11;
		color |= tG << 5;
    18da:	2b 89       	ldd	r18, Y+19	; 0x13
    18dc:	3c 89       	ldd	r19, Y+20	; 0x14
    18de:	c9 01       	movw	r24, r18
    18e0:	80 34       	cpi	r24, 0x40	; 64
    18e2:	91 05       	cpc	r25, r1
    18e4:	10 f0       	brcs	.+4      	; 0x18ea <LCD_DrawLineAlpha+0x2e0>
    18e6:	8f e3       	ldi	r24, 0x3F	; 63
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	ac 01       	movw	r20, r24
    18ec:	05 e0       	ldi	r16, 0x05	; 5
    18ee:	44 0f       	add	r20, r20
    18f0:	55 1f       	adc	r21, r21
    18f2:	0a 95       	dec	r16
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <LCD_DrawLineAlpha+0x2e4>
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	48 2b       	or	r20, r24
    18fc:	59 2b       	or	r21, r25
		color |= tB & 0x1F;
		
		// Draw
		//
		if (i++ > 1)
			LCD_SetPoint(x, y, color);
    18fe:	9b 01       	movw	r18, r22
    1900:	60 32       	cpi	r22, 0x20	; 32
    1902:	71 05       	cpc	r23, r1
    1904:	10 f0       	brcs	.+4      	; 0x190a <LCD_DrawLineAlpha+0x300>
    1906:	2f e1       	ldi	r18, 0x1F	; 31
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	2f 71       	andi	r18, 0x1F	; 31
    190c:	30 70       	andi	r19, 0x00	; 0
    190e:	42 2b       	or	r20, r18
    1910:	53 2b       	or	r21, r19
    1912:	8f 85       	ldd	r24, Y+15	; 0x0f
    1914:	98 89       	ldd	r25, Y+16	; 0x10
    1916:	69 89       	ldd	r22, Y+17	; 0x11
    1918:	7a 89       	ldd	r23, Y+18	; 0x12
    191a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
        
        xerr += delta_x;
    191e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1920:	bc 85       	ldd	r27, Y+12	; 0x0c
    1922:	a4 0d       	add	r26, r4
    1924:	b5 1d       	adc	r27, r5
    1926:	bc 87       	std	Y+12, r27	; 0x0c
    1928:	ab 87       	std	Y+11, r26	; 0x0b
        yerr += delta_y;
    192a:	2a 0c       	add	r2, r10
    192c:	3b 1c       	adc	r3, r11
		
        if(xerr > distance) {
    192e:	ca 16       	cp	r12, r26
    1930:	db 06       	cpc	r13, r27
    1932:	64 f4       	brge	.+24     	; 0x194c <LCD_DrawLineAlpha+0x342>
			
            xerr -= distance;
    1934:	ac 19       	sub	r26, r12
    1936:	bd 09       	sbc	r27, r13
    1938:	bc 87       	std	Y+12, r27	; 0x0c
    193a:	ab 87       	std	Y+11, r26	; 0x0b
            x += incx;
    193c:	ef 85       	ldd	r30, Y+15	; 0x0f
    193e:	f8 89       	ldd	r31, Y+16	; 0x10
    1940:	29 85       	ldd	r18, Y+9	; 0x09
    1942:	3a 85       	ldd	r19, Y+10	; 0x0a
    1944:	e2 0f       	add	r30, r18
    1946:	f3 1f       	adc	r31, r19
    1948:	f8 8b       	std	Y+16, r31	; 0x10
    194a:	ef 87       	std	Y+15, r30	; 0x0f
        }
		
        if(yerr > distance) {
    194c:	c2 14       	cp	r12, r2
    194e:	d3 04       	cpc	r13, r3
    1950:	54 f4       	brge	.+20     	; 0x1966 <LCD_DrawLineAlpha+0x35c>
			
            yerr -= distance;
    1952:	2c 18       	sub	r2, r12
    1954:	3d 08       	sbc	r3, r13
            y += incy;
    1956:	89 89       	ldd	r24, Y+17	; 0x11
    1958:	9a 89       	ldd	r25, Y+18	; 0x12
    195a:	af 81       	ldd	r26, Y+7	; 0x07
    195c:	b8 85       	ldd	r27, Y+8	; 0x08
    195e:	8a 0f       	add	r24, r26
    1960:	9b 1f       	adc	r25, r27
    1962:	9a 8b       	std	Y+18, r25	; 0x12
    1964:	89 8b       	std	Y+17, r24	; 0x11
    else
		distance = delta_y;

    // Draw the line
	//
    for(t=0; t <= distance+1; t++) {
    1966:	ed 85       	ldd	r30, Y+13	; 0x0d
    1968:	fe 85       	ldd	r31, Y+14	; 0x0e
    196a:	31 96       	adiw	r30, 0x01	; 1
    196c:	fe 87       	std	Y+14, r31	; 0x0e
    196e:	ed 87       	std	Y+13, r30	; 0x0d
    1970:	2d 85       	ldd	r18, Y+13	; 0x0d
    1972:	3e 85       	ldd	r19, Y+14	; 0x0e
    1974:	8d 89       	ldd	r24, Y+21	; 0x15
    1976:	9e 89       	ldd	r25, Y+22	; 0x16
    1978:	82 17       	cp	r24, r18
    197a:	93 07       	cpc	r25, r19
    197c:	0c f0       	brlt	.+2      	; 0x1980 <LCD_DrawLineAlpha+0x376>
    197e:	31 cf       	rjmp	.-414    	; 0x17e2 <LCD_DrawLineAlpha+0x1d8>
			
            yerr -= distance;
            y += incy;
        }
    }
}
    1980:	a4 96       	adiw	r28, 0x24	; 36
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	7f 90       	pop	r7
    19a6:	6f 90       	pop	r6
    19a8:	5f 90       	pop	r5
    19aa:	4f 90       	pop	r4
    19ac:	3f 90       	pop	r3
    19ae:	2f 90       	pop	r2
    19b0:	08 95       	ret

000019b2 <LCD_Draw4.1775>:
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {


	// Draw 4 mirrored points
	//
	void LCD_Draw4 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color) {
    19b2:	6f 92       	push	r6
    19b4:	7f 92       	push	r7
    19b6:	8f 92       	push	r8
    19b8:	9f 92       	push	r9
    19ba:	af 92       	push	r10
    19bc:	bf 92       	push	r11
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	7a 01       	movw	r14, r20
    19d0:	e9 01       	movw	r28, r18
    19d2:	68 01       	movw	r12, r16
		
		int	mx, my;
		
		mx = x - dx;
    19d4:	9c 01       	movw	r18, r24
    19d6:	3c 01       	movw	r6, r24
    19d8:	64 1a       	sub	r6, r20
    19da:	75 0a       	sbc	r7, r21
		my = y - dy;
    19dc:	4b 01       	movw	r8, r22
    19de:	8c 1a       	sub	r8, r28
    19e0:	9d 0a       	sbc	r9, r29
		
		x += dx;
    19e2:	5a 01       	movw	r10, r20
    19e4:	a2 0e       	add	r10, r18
    19e6:	b3 1e       	adc	r11, r19
		y += dy;
    19e8:	8e 01       	movw	r16, r28
    19ea:	06 0f       	add	r16, r22
    19ec:	17 1f       	adc	r17, r23
		
		LCD_SetPoint(x, y, color);
    19ee:	c5 01       	movw	r24, r10
    19f0:	b8 01       	movw	r22, r16
    19f2:	a6 01       	movw	r20, r12
    19f4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
		
		if (dx != 0)
    19f8:	ef 28       	or	r14, r15
    19fa:	29 f0       	breq	.+10     	; 0x1a06 <LCD_Draw4.1775+0x54>
			LCD_SetPoint(mx, y, color);
    19fc:	c3 01       	movw	r24, r6
    19fe:	b8 01       	movw	r22, r16
    1a00:	a6 01       	movw	r20, r12
    1a02:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
		
		if (dy != 0)
    1a06:	cd 2b       	or	r28, r29
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <LCD_Draw4.1775+0x62>
			LCD_SetPoint(x, my, color);
    1a0a:	c5 01       	movw	r24, r10
    1a0c:	b4 01       	movw	r22, r8
    1a0e:	a6 01       	movw	r20, r12
    1a10:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
		
		LCD_SetPoint(mx, my, color);
    1a14:	c3 01       	movw	r24, r6
    1a16:	b4 01       	movw	r22, r8
    1a18:	a6 01       	movw	r20, r12
    1a1a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
	}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	bf 90       	pop	r11
    1a30:	af 90       	pop	r10
    1a32:	9f 90       	pop	r9
    1a34:	8f 90       	pop	r8
    1a36:	7f 90       	pop	r7
    1a38:	6f 90       	pop	r6
    1a3a:	08 95       	ret

00001a3c <LCD_DrawCircle>:

///////////////////////////////////////////////
//
// LCD_DrawCircle(x, y, radius, color, fill);
//
void LCD_DrawCircle (int x, int y, unsigned int radius, unsigned int color, bool fill) {
    1a3c:	2f 92       	push	r2
    1a3e:	3f 92       	push	r3
    1a40:	4f 92       	push	r4
    1a42:	5f 92       	push	r5
    1a44:	6f 92       	push	r6
    1a46:	7f 92       	push	r7
    1a48:	8f 92       	push	r8
    1a4a:	9f 92       	push	r9
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	2a 97       	sbiw	r28, 0x0a	; 10
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	8e 83       	std	Y+6, r24	; 0x06
    1a72:	9f 83       	std	Y+7, r25	; 0x07
    1a74:	68 87       	std	Y+8, r22	; 0x08
    1a76:	f7 2e       	mov	r15, r23
    1a78:	3c 83       	std	Y+4, r19	; 0x04
    1a7a:	2b 83       	std	Y+3, r18	; 0x03
    1a7c:	0d 83       	std	Y+5, r16	; 0x05
			if (dx != dy)
				LCD_Draw4(x, y, dy, dx, color);
		}
	}

	int error = -radius;
    1a7e:	88 27       	eor	r24, r24
    1a80:	99 27       	eor	r25, r25
    1a82:	84 1b       	sub	r24, r20
    1a84:	95 0b       	sbc	r25, r21
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
	int dx = radius;
    1a8a:	1a 01       	movw	r2, r20
    1a8c:	1a 86       	std	Y+10, r1	; 0x0a
    1a8e:	19 86       	std	Y+9, r1	; 0x09
    1a90:	88 c0       	rjmp	.+272    	; 0x1ba2 <LCD_DrawCircle+0x166>

	// Draw 8 mirrored points
	//
	void LCD_Draw8 (int x, int y, unsigned int dx, unsigned int dy, unsigned int color, bool fill) {
		
		if (fill) {
    1a92:	9d 81       	ldd	r25, Y+5	; 0x05
    1a94:	99 23       	and	r25, r25
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <LCD_DrawCircle+0x5e>
    1a98:	4d c0       	rjmp	.+154    	; 0x1b34 <LCD_DrawCircle+0xf8>
			
			LCD_DrawRectangle(x-dy, y-dx, dy<< 1, 1, color, true);
    1a9a:	ce 80       	ldd	r12, Y+6	; 0x06
    1a9c:	df 80       	ldd	r13, Y+7	; 0x07
    1a9e:	26 01       	movw	r4, r12
    1aa0:	e9 85       	ldd	r30, Y+9	; 0x09
    1aa2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1aa4:	4e 1a       	sub	r4, r30
    1aa6:	5f 0a       	sbc	r5, r31
    1aa8:	a8 84       	ldd	r10, Y+8	; 0x08
    1aaa:	bf 2c       	mov	r11, r15
    1aac:	3f 01       	movw	r6, r30
    1aae:	66 0c       	add	r6, r6
    1ab0:	77 1c       	adc	r7, r7
    1ab2:	b5 01       	movw	r22, r10
    1ab4:	62 19       	sub	r22, r2
    1ab6:	73 09       	sbc	r23, r3
    1ab8:	c2 01       	movw	r24, r4
    1aba:	a3 01       	movw	r20, r6
    1abc:	21 e0       	ldi	r18, 0x01	; 1
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	0b 81       	ldd	r16, Y+3	; 0x03
    1ac2:	1c 81       	ldd	r17, Y+4	; 0x04
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	e3 94       	inc	r14
    1ac8:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
			LCD_DrawRectangle(x-dx, y-dy, dx<< 1, 1, color, true);
    1acc:	c2 18       	sub	r12, r2
    1ace:	d3 08       	sbc	r13, r3
    1ad0:	41 01       	movw	r8, r2
    1ad2:	88 0c       	add	r8, r8
    1ad4:	99 1c       	adc	r9, r9
    1ad6:	b5 01       	movw	r22, r10
    1ad8:	49 85       	ldd	r20, Y+9	; 0x09
    1ada:	5a 85       	ldd	r21, Y+10	; 0x0a
    1adc:	64 1b       	sub	r22, r20
    1ade:	75 0b       	sbc	r23, r21
    1ae0:	c6 01       	movw	r24, r12
    1ae2:	a4 01       	movw	r20, r8
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	0b 81       	ldd	r16, Y+3	; 0x03
    1aea:	1c 81       	ldd	r17, Y+4	; 0x04
    1aec:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
			LCD_DrawRectangle(x-dx, y+dy, dx<< 1, 1, color, true);
    1af0:	69 85       	ldd	r22, Y+9	; 0x09
    1af2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1af4:	6a 0d       	add	r22, r10
    1af6:	7b 1d       	adc	r23, r11
    1af8:	c6 01       	movw	r24, r12
    1afa:	a4 01       	movw	r20, r8
    1afc:	21 e0       	ldi	r18, 0x01	; 1
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	0b 81       	ldd	r16, Y+3	; 0x03
    1b02:	1c 81       	ldd	r17, Y+4	; 0x04
    1b04:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
			LCD_DrawRectangle(x-dy, y+dx, dy<< 1, 1, color, true);
    1b08:	a2 0c       	add	r10, r2
    1b0a:	b3 1c       	adc	r11, r3
    1b0c:	c2 01       	movw	r24, r4
    1b0e:	b5 01       	movw	r22, r10
    1b10:	a3 01       	movw	r20, r6
    1b12:	21 e0       	ldi	r18, 0x01	; 1
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	0b 81       	ldd	r16, Y+3	; 0x03
    1b18:	1c 81       	ldd	r17, Y+4	; 0x04
    1b1a:	0e 94 c2 08 	call	0x1184	; 0x1184 <LCD_DrawRectangle>
			LCD_SetBounds(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	40 e4       	ldi	r20, 0x40	; 64
    1b28:	51 e0       	ldi	r21, 0x01	; 1
    1b2a:	20 ef       	ldi	r18, 0xF0	; 240
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	0e 94 04 07 	call	0xe08	; 0xe08 <LCD_SetBounds>
    1b32:	1b c0       	rjmp	.+54     	; 0x1b6a <LCD_DrawCircle+0x12e>
		}
		else {
			
			LCD_Draw4(x, y, dx, dy, color);
    1b34:	8e 81       	ldd	r24, Y+6	; 0x06
    1b36:	9f 81       	ldd	r25, Y+7	; 0x07
    1b38:	68 85       	ldd	r22, Y+8	; 0x08
    1b3a:	7f 2d       	mov	r23, r15
    1b3c:	a1 01       	movw	r20, r2
    1b3e:	29 85       	ldd	r18, Y+9	; 0x09
    1b40:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b42:	0b 81       	ldd	r16, Y+3	; 0x03
    1b44:	1c 81       	ldd	r17, Y+4	; 0x04
    1b46:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <LCD_Draw4.1775>
			
			if (dx != dy)
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	28 16       	cp	r2, r24
    1b50:	39 06       	cpc	r3, r25
    1b52:	59 f0       	breq	.+22     	; 0x1b6a <LCD_DrawCircle+0x12e>
				LCD_Draw4(x, y, dy, dx, color);
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	9f 81       	ldd	r25, Y+7	; 0x07
    1b58:	68 85       	ldd	r22, Y+8	; 0x08
    1b5a:	7f 2d       	mov	r23, r15
    1b5c:	49 85       	ldd	r20, Y+9	; 0x09
    1b5e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b60:	91 01       	movw	r18, r2
    1b62:	0b 81       	ldd	r16, Y+3	; 0x03
    1b64:	1c 81       	ldd	r17, Y+4	; 0x04
    1b66:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <LCD_Draw4.1775>
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
		dy++;
    1b6a:	29 85       	ldd	r18, Y+9	; 0x09
    1b6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b6e:	2f 5f       	subi	r18, 0xFF	; 255
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
	//
	while (dx >= dy) {
		
		LCD_Draw8(x, y, dx, dy, color, fill);
		
		error += dy;
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	49 85       	ldd	r20, Y+9	; 0x09
    1b78:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b7a:	e4 0f       	add	r30, r20
    1b7c:	f5 1f       	adc	r31, r21
		dy++;
		error += dy;
    1b7e:	e2 0f       	add	r30, r18
    1b80:	f3 1f       	adc	r31, r19
    1b82:	fa 83       	std	Y+2, r31	; 0x02
    1b84:	e9 83       	std	Y+1, r30	; 0x01
		
		if (error >= 0) {
    1b86:	f7 fd       	sbrc	r31, 7
    1b88:	0a c0       	rjmp	.+20     	; 0x1b9e <LCD_DrawCircle+0x162>
			
			dx--;
    1b8a:	08 94       	sec
    1b8c:	21 08       	sbc	r2, r1
    1b8e:	31 08       	sbc	r3, r1
			error -= dx<< 1;
    1b90:	c1 01       	movw	r24, r2
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	e8 1b       	sub	r30, r24
    1b98:	f9 0b       	sbc	r31, r25
    1b9a:	fa 83       	std	Y+2, r31	; 0x02
    1b9c:	e9 83       	std	Y+1, r30	; 0x01
    1b9e:	3a 87       	std	Y+10, r19	; 0x0a
    1ba0:	29 87       	std	Y+9, r18	; 0x09
	int dx = radius;
	int dy = 0;

	//	draws in 4 strips from top down and middle up + reflection about y
	//
	while (dx >= dy) {
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	28 16       	cp	r2, r24
    1ba8:	39 06       	cpc	r3, r25
    1baa:	0c f0       	brlt	.+2      	; 0x1bae <LCD_DrawCircle+0x172>
    1bac:	72 cf       	rjmp	.-284    	; 0x1a92 <LCD_DrawCircle+0x56>
			
			dx--;
			error -= dx<< 1;
		}
	}
}
    1bae:	2a 96       	adiw	r28, 0x0a	; 10
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	7f 90       	pop	r7
    1bd4:	6f 90       	pop	r6
    1bd6:	5f 90       	pop	r5
    1bd8:	4f 90       	pop	r4
    1bda:	3f 90       	pop	r3
    1bdc:	2f 90       	pop	r2
    1bde:	08 95       	ret

00001be0 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    1be0:	df 92       	push	r13
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	d8 2e       	mov	r13, r24
    1bec:	7a 01       	movw	r14, r20
    1bee:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1bf0:	87 ff       	sbrs	r24, 7
    1bf2:	0b c0       	rjmp	.+22     	; 0x1c0a <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1bf4:	87 e7       	ldi	r24, 0x77	; 119
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
		if (res > 1) return res;
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	98 f5       	brcc	.+102    	; 0x1c6c <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1c06:	8f e7       	ldi	r24, 0x7F	; 127
    1c08:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    1c0a:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1c0c:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
	SELECT();
    1c10:	c3 98       	cbi	0x18, 3	; 24
	rcv_spi();
    1c12:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    1c16:	8d 2d       	mov	r24, r13
    1c18:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    1c1c:	81 2f       	mov	r24, r17
    1c1e:	99 27       	eor	r25, r25
    1c20:	aa 27       	eor	r26, r26
    1c22:	bb 27       	eor	r27, r27
    1c24:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    1c28:	c8 01       	movw	r24, r16
    1c2a:	aa 27       	eor	r26, r26
    1c2c:	bb 27       	eor	r27, r27
    1c2e:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    1c32:	bb 27       	eor	r27, r27
    1c34:	a1 2f       	mov	r26, r17
    1c36:	90 2f       	mov	r25, r16
    1c38:	8f 2d       	mov	r24, r15
    1c3a:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    1c3e:	8e 2d       	mov	r24, r14
    1c40:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    1c44:	80 e4       	ldi	r24, 0x40	; 64
    1c46:	d8 16       	cp	r13, r24
    1c48:	11 f4       	brne	.+4      	; 0x1c4e <send_cmd+0x6e>
    1c4a:	85 e9       	ldi	r24, 0x95	; 149
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1c4e:	88 e4       	ldi	r24, 0x48	; 72
    1c50:	d8 16       	cp	r13, r24
    1c52:	11 f4       	brne	.+4      	; 0x1c58 <send_cmd+0x78>
    1c54:	87 e8       	ldi	r24, 0x87	; 135
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <send_cmd+0x7a>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    1c5a:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
    1c5e:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    1c60:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
	} while ((res & 0x80) && --n);
    1c64:	87 ff       	sbrs	r24, 7
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <send_cmd+0x8c>
    1c68:	11 50       	subi	r17, 0x01	; 1
    1c6a:	d1 f7       	brne	.-12     	; 0x1c60 <send_cmd+0x80>

	return res;			/* Return with the response value */
}
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	08 95       	ret

00001c78 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	6c 01       	movw	r12, r24
    1c8a:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    1c8c:	80 91 c9 00 	lds	r24, 0x00C9
    1c90:	83 fd       	sbrc	r24, 3
    1c92:	07 c0       	rjmp	.+14     	; 0x1ca2 <disk_readp+0x2a>
    1c94:	39 e0       	ldi	r19, 0x09	; 9
    1c96:	44 0f       	add	r20, r20
    1c98:	55 1f       	adc	r21, r21
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	3a 95       	dec	r19
    1ca0:	d1 f7       	brne	.-12     	; 0x1c96 <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    1ca2:	81 e5       	ldi	r24, 0x51	; 81
    1ca4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1ca8:	88 23       	and	r24, r24
    1caa:	61 f5       	brne	.+88     	; 0x1d04 <disk_readp+0x8c>
    1cac:	c0 e4       	ldi	r28, 0x40	; 64
    1cae:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
    1cb0:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
		} while (rc == 0xFF && --bc);
    1cb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb6:	19 f4       	brne	.+6      	; 0x1cbe <disk_readp+0x46>
    1cb8:	21 97       	sbiw	r28, 0x01	; 1
    1cba:	d1 f7       	brne	.-12     	; 0x1cb0 <disk_readp+0x38>
    1cbc:	23 c0       	rjmp	.+70     	; 0x1d04 <disk_readp+0x8c>

		if (rc == 0xFE) {				/* A data packet arrived */
    1cbe:	8e 3f       	cpi	r24, 0xFE	; 254
    1cc0:	09 f5       	brne	.+66     	; 0x1d04 <disk_readp+0x8c>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
    1cc2:	e1 14       	cp	r14, r1
    1cc4:	f1 04       	cpc	r15, r1
    1cc6:	29 f0       	breq	.+10     	; 0x1cd2 <disk_readp+0x5a>
    1cc8:	e7 01       	movw	r28, r14
				do rcv_spi(); while (--ofs);
    1cca:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1cce:	21 97       	sbiw	r28, 0x01	; 1
    1cd0:	e1 f7       	brne	.-8      	; 0x1cca <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    1cd2:	c1 14       	cp	r12, r1
    1cd4:	d1 04       	cpc	r13, r1
    1cd6:	41 f0       	breq	.+16     	; 0x1ce8 <disk_readp+0x70>
    1cd8:	e8 01       	movw	r28, r16
				do {
					*buff++ = rcv_spi();
    1cda:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1cde:	f6 01       	movw	r30, r12
    1ce0:	81 93       	st	Z+, r24
    1ce2:	6f 01       	movw	r12, r30
				} while (--cnt);
    1ce4:	21 97       	sbiw	r28, 0x01	; 1
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <disk_readp+0x62>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
    1ce8:	cc 27       	eor	r28, r28
    1cea:	dd 27       	eor	r29, r29
    1cec:	ce 19       	sub	r28, r14
    1cee:	df 09       	sbc	r29, r15
    1cf0:	ce 5f       	subi	r28, 0xFE	; 254
    1cf2:	dd 4f       	sbci	r29, 0xFD	; 253
    1cf4:	c0 1b       	sub	r28, r16
    1cf6:	d1 0b       	sbc	r29, r17
					*buff++ = rcv_spi();
				} while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    1cf8:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1cfc:	21 97       	sbiw	r28, 0x01	; 1
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <disk_readp+0x80>
    1d00:	10 e0       	ldi	r17, 0x00	; 0
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <disk_readp+0x8e>
    1d04:	11 e0       	ldi	r17, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
    1d06:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1d08:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>

	return res;
}
    1d0c:	81 2f       	mov	r24, r17
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	8c 01       	movw	r16, r24
	WORD bc;
	static WORD wc;

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	d9 f0       	breq	.+54     	; 0x1d64 <disk_writep+0x44>
		bc = (WORD)sa;
    1d2e:	ea 01       	movw	r28, r20
    1d30:	0f c0       	rjmp	.+30     	; 0x1d50 <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1d32:	f8 01       	movw	r30, r16
    1d34:	81 91       	ld	r24, Z+
    1d36:	8f 01       	movw	r16, r30
    1d38:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
			wc--; bc--;
    1d3c:	80 91 c7 00 	lds	r24, 0x00C7
    1d40:	90 91 c8 00 	lds	r25, 0x00C8
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	90 93 c8 00 	sts	0x00C8, r25
    1d4a:	80 93 c7 00 	sts	0x00C7, r24
    1d4e:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    1d50:	20 97       	sbiw	r28, 0x00	; 0
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <disk_writep+0x36>
    1d54:	52 c0       	rjmp	.+164    	; 0x1dfa <disk_writep+0xda>
    1d56:	80 91 c7 00 	lds	r24, 0x00C7
    1d5a:	90 91 c8 00 	lds	r25, 0x00C8
    1d5e:	89 2b       	or	r24, r25
    1d60:	41 f7       	brne	.-48     	; 0x1d32 <disk_writep+0x12>
    1d62:	4b c0       	rjmp	.+150    	; 0x1dfa <disk_writep+0xda>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1d64:	41 15       	cp	r20, r1
    1d66:	51 05       	cpc	r21, r1
    1d68:	61 05       	cpc	r22, r1
    1d6a:	71 05       	cpc	r23, r1
    1d6c:	f9 f0       	breq	.+62     	; 0x1dac <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1d6e:	80 91 c9 00 	lds	r24, 0x00C9
    1d72:	83 fd       	sbrc	r24, 3
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <disk_writep+0x64>
    1d76:	e9 e0       	ldi	r30, 0x09	; 9
    1d78:	44 0f       	add	r20, r20
    1d7a:	55 1f       	adc	r21, r21
    1d7c:	66 1f       	adc	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	ea 95       	dec	r30
    1d82:	d1 f7       	brne	.-12     	; 0x1d78 <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1d84:	88 e5       	ldi	r24, 0x58	; 88
    1d86:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1d8a:	88 23       	and	r24, r24
    1d8c:	11 f0       	breq	.+4      	; 0x1d92 <disk_writep+0x72>
    1d8e:	11 e0       	ldi	r17, 0x01	; 1
    1d90:	35 c0       	rjmp	.+106    	; 0x1dfc <disk_writep+0xdc>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
    1d98:	8e ef       	ldi	r24, 0xFE	; 254
    1d9a:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
				wc = 512;							/* Set byte counter */
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	90 93 c8 00 	sts	0x00C8, r25
    1da6:	80 93 c7 00 	sts	0x00C7, r24
    1daa:	27 c0       	rjmp	.+78     	; 0x1dfa <disk_writep+0xda>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    1dac:	c0 91 c7 00 	lds	r28, 0x00C7
    1db0:	d0 91 c8 00 	lds	r29, 0x00C8
    1db4:	22 96       	adiw	r28, 0x02	; 2
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	0e 94 cf 1c 	call	0x399e	; 0x399e <xmit_spi>
    1dbe:	21 97       	sbiw	r28, 0x01	; 1
    1dc0:	20 97       	sbiw	r28, 0x00	; 0
    1dc2:	d1 f7       	brne	.-12     	; 0x1db8 <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
    1dc4:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1dc8:	8f 71       	andi	r24, 0x1F	; 31
    1dca:	85 30       	cpi	r24, 0x05	; 5
    1dcc:	89 f4       	brne	.+34     	; 0x1df0 <disk_writep+0xd0>
    1dce:	c8 e8       	ldi	r28, 0x88	; 136
    1dd0:	d3 e1       	ldi	r29, 0x13	; 19
    1dd2:	03 c0       	rjmp	.+6      	; 0x1dda <disk_writep+0xba>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
    1dd4:	0e 94 c2 1c 	call	0x3984	; 0x3984 <dly_100us>
    1dd8:	21 97       	sbiw	r28, 0x01	; 1
    1dda:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1dde:	8f 3f       	cpi	r24, 0xFF	; 255
    1de0:	19 f0       	breq	.+6      	; 0x1de8 <disk_writep+0xc8>
    1de2:	20 97       	sbiw	r28, 0x00	; 0
    1de4:	b9 f7       	brne	.-18     	; 0x1dd4 <disk_writep+0xb4>
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <disk_writep+0xd0>
				if (bc) res = RES_OK;
    1de8:	cd 2b       	or	r28, r29
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <disk_writep+0xd0>
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <disk_writep+0xd2>
    1df0:	11 e0       	ldi	r17, 0x01	; 1
			}
			DESELECT();
    1df2:	c3 9a       	sbi	0x18, 3	; 24
			rcv_spi();
    1df4:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <disk_writep+0xdc>
    1dfa:	10 e0       	ldi	r17, 0x00	; 0
		}
	}

	return res;
}
    1dfc:	81 2f       	mov	r24, r17
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret

00001e08 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    1e08:	cf 92       	push	r12
    1e0a:	df 92       	push	r13
    1e0c:	ef 92       	push	r14
    1e0e:	ff 92       	push	r15
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <disk_initialize+0x12>
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <disk_initialize+0x14>
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
    1e20:	80 91 c9 00 	lds	r24, 0x00C9
    1e24:	88 23       	and	r24, r24
    1e26:	51 f0       	breq	.+20     	; 0x1e3c <disk_initialize+0x34>
    1e28:	c3 99       	sbic	0x18, 3	; 24
    1e2a:	08 c0       	rjmp	.+16     	; 0x1e3c <disk_initialize+0x34>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
    1e3c:	0e 94 bd 1c 	call	0x397a	; 0x397a <init_spi>
	DESELECT();
    1e40:	c3 9a       	sbi	0x18, 3	; 24
    1e42:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
    1e44:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1e48:	11 50       	subi	r17, 0x01	; 1
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1e4c:	80 e4       	ldi	r24, 0x40	; 64
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <disk_initialize+0x58>
    1e5e:	69 c0       	rjmp	.+210    	; 0x1f32 <disk_initialize+0x12a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1e60:	88 e4       	ldi	r24, 0x48	; 72
    1e62:	4a ea       	ldi	r20, 0xAA	; 170
    1e64:	51 e0       	ldi	r21, 0x01	; 1
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	e1 f5       	brne	.+120    	; 0x1eea <disk_initialize+0xe2>
    1e72:	6e 01       	movw	r12, r28
    1e74:	08 94       	sec
    1e76:	c1 1c       	adc	r12, r1
    1e78:	d1 1c       	adc	r13, r1
    1e7a:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1e7c:	8e 01       	movw	r16, r28
    1e7e:	0b 5f       	subi	r16, 0xFB	; 251
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1e86:	f7 01       	movw	r30, r14
    1e88:	81 93       	st	Z+, r24
    1e8a:	7f 01       	movw	r14, r30
    1e8c:	e0 17       	cp	r30, r16
    1e8e:	f1 07       	cpc	r31, r17
    1e90:	c1 f7       	brne	.-16     	; 0x1e82 <disk_initialize+0x7a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <disk_initialize+0x92>
    1e98:	4c c0       	rjmp	.+152    	; 0x1f32 <disk_initialize+0x12a>
    1e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9c:	8a 3a       	cpi	r24, 0xAA	; 170
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <disk_initialize+0x9a>
    1ea0:	48 c0       	rjmp	.+144    	; 0x1f32 <disk_initialize+0x12a>
    1ea2:	00 e1       	ldi	r16, 0x10	; 16
    1ea4:	17 e2       	ldi	r17, 0x27	; 39
    1ea6:	06 c0       	rjmp	.+12     	; 0x1eb4 <disk_initialize+0xac>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1ea8:	0e 94 c2 1c 	call	0x3984	; 0x3984 <dly_100us>
    1eac:	01 50       	subi	r16, 0x01	; 1
    1eae:	10 40       	sbci	r17, 0x00	; 0
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <disk_initialize+0xac>
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <disk_initialize+0x12a>
    1eb4:	89 ee       	ldi	r24, 0xE9	; 233
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	70 e4       	ldi	r23, 0x40	; 64
    1ebe:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1ec2:	88 23       	and	r24, r24
    1ec4:	89 f7       	brne	.-30     	; 0x1ea8 <disk_initialize+0xa0>
    1ec6:	4c c0       	rjmp	.+152    	; 0x1f60 <disk_initialize+0x158>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1ec8:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1ecc:	f6 01       	movw	r30, r12
    1ece:	81 93       	st	Z+, r24
    1ed0:	6f 01       	movw	r12, r30
    1ed2:	ee 15       	cp	r30, r14
    1ed4:	ff 05       	cpc	r31, r15
    1ed6:	c1 f7       	brne	.-16     	; 0x1ec8 <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	86 fd       	sbrc	r24, 6
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <disk_initialize+0xdc>
    1ede:	04 e0       	ldi	r16, 0x04	; 4
    1ee0:	f0 2e       	mov	r15, r16
    1ee2:	28 c0       	rjmp	.+80     	; 0x1f34 <disk_initialize+0x12c>
    1ee4:	1c e0       	ldi	r17, 0x0C	; 12
    1ee6:	f1 2e       	mov	r15, r17
    1ee8:	25 c0       	rjmp	.+74     	; 0x1f34 <disk_initialize+0x12c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1eea:	89 ee       	ldi	r24, 0xE9	; 233
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	28 f0       	brcs	.+10     	; 0x1f06 <disk_initialize+0xfe>
    1efc:	b1 e4       	ldi	r27, 0x41	; 65
    1efe:	eb 2e       	mov	r14, r27
    1f00:	ff 24       	eor	r15, r15
    1f02:	f3 94       	inc	r15
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <disk_initialize+0x106>
    1f06:	a9 ee       	ldi	r26, 0xE9	; 233
    1f08:	ea 2e       	mov	r14, r26
    1f0a:	f2 e0       	ldi	r31, 0x02	; 2
    1f0c:	ff 2e       	mov	r15, r31
    1f0e:	00 e1       	ldi	r16, 0x10	; 16
    1f10:	17 e2       	ldi	r17, 0x27	; 39
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    1f14:	0e 94 c2 1c 	call	0x3984	; 0x3984 <dly_100us>
    1f18:	01 50       	subi	r16, 0x01	; 1
    1f1a:	10 40       	sbci	r17, 0x00	; 0
    1f1c:	51 f0       	breq	.+20     	; 0x1f32 <disk_initialize+0x12a>
    1f1e:	8e 2d       	mov	r24, r14
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1f2c:	88 23       	and	r24, r24
    1f2e:	91 f7       	brne	.-28     	; 0x1f14 <disk_initialize+0x10c>
    1f30:	22 c0       	rjmp	.+68     	; 0x1f76 <disk_initialize+0x16e>
    1f32:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1f34:	f0 92 c9 00 	sts	0x00C9, r15
	DESELECT();
    1f38:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1f3a:	0e 94 ce 1c 	call	0x399c	; 0x399c <rcv_spi>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	ff 20       	and	r15, r15
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <disk_initialize+0x13e>
    1f44:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1f60:	8a e7       	ldi	r24, 0x7A	; 122
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1f6e:	88 23       	and	r24, r24
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <disk_initialize+0x16c>
    1f72:	aa cf       	rjmp	.-172    	; 0x1ec8 <disk_initialize+0xc0>
    1f74:	de cf       	rjmp	.-68     	; 0x1f32 <disk_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1f76:	80 e5       	ldi	r24, 0x50	; 80
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	52 e0       	ldi	r21, 0x02	; 2
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <send_cmd>
    1f84:	88 23       	and	r24, r24
    1f86:	a9 f6       	brne	.-86     	; 0x1f32 <disk_initialize+0x12a>
    1f88:	d5 cf       	rjmp	.-86     	; 0x1f34 <disk_initialize+0x12c>

00001f8a <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
    1f9c:	c0 91 ca 00 	lds	r28, 0x00CA
    1fa0:	d0 91 cb 00 	lds	r29, 0x00CB


	dj->index = 0;
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	11 82       	std	Z+1, r1	; 0x01
    1fa8:	10 82       	st	Z, r1
	clst = dj->sclust;
    1faa:	24 81       	ldd	r18, Z+4	; 0x04
    1fac:	35 81       	ldd	r19, Z+5	; 0x05
    1fae:	46 81       	ldd	r20, Z+6	; 0x06
    1fb0:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    1fb2:	21 30       	cpi	r18, 0x01	; 1
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	41 05       	cpc	r20, r1
    1fb8:	51 05       	cpc	r21, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <dir_rewind+0x34>
    1fbc:	5b c0       	rjmp	.+182    	; 0x2074 <dir_rewind+0xea>
    1fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc2:	a8 85       	ldd	r26, Y+8	; 0x08
    1fc4:	b9 85       	ldd	r27, Y+9	; 0x09
    1fc6:	28 17       	cp	r18, r24
    1fc8:	39 07       	cpc	r19, r25
    1fca:	4a 07       	cpc	r20, r26
    1fcc:	5b 07       	cpc	r21, r27
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <dir_rewind+0x48>
    1fd0:	51 c0       	rjmp	.+162    	; 0x2074 <dir_rewind+0xea>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1fd2:	21 15       	cp	r18, r1
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	41 05       	cpc	r20, r1
    1fd8:	51 05       	cpc	r21, r1
    1fda:	39 f4       	brne	.+14     	; 0x1fea <dir_rewind+0x60>
    1fdc:	88 81       	ld	r24, Y
    1fde:	83 30       	cpi	r24, 0x03	; 3
    1fe0:	21 f4       	brne	.+8      	; 0x1fea <dir_rewind+0x60>
		clst = (CLUST)fs->dirbase;
    1fe2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fe4:	3f 85       	ldd	r19, Y+15	; 0x0f
    1fe6:	48 89       	ldd	r20, Y+16	; 0x10
    1fe8:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
    1fea:	f6 01       	movw	r30, r12
    1fec:	20 87       	std	Z+8, r18	; 0x08
    1fee:	31 87       	std	Z+9, r19	; 0x09
    1ff0:	42 87       	std	Z+10, r20	; 0x0a
    1ff2:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    1ff4:	21 15       	cp	r18, r1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	41 05       	cpc	r20, r1
    1ffa:	51 05       	cpc	r21, r1
    1ffc:	81 f1       	breq	.+96     	; 0x205e <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
    1ffe:	8e ef       	ldi	r24, 0xFE	; 254
    2000:	e8 2e       	mov	r14, r24
    2002:	8f ef       	ldi	r24, 0xFF	; 255
    2004:	f8 2e       	mov	r15, r24
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	08 2f       	mov	r16, r24
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	18 2f       	mov	r17, r24
    200e:	e2 0e       	add	r14, r18
    2010:	f3 1e       	adc	r15, r19
    2012:	04 1f       	adc	r16, r20
    2014:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2016:	8e 81       	ldd	r24, Y+6	; 0x06
    2018:	9f 81       	ldd	r25, Y+7	; 0x07
    201a:	a8 85       	ldd	r26, Y+8	; 0x08
    201c:	b9 85       	ldd	r27, Y+9	; 0x09
    201e:	02 97       	sbiw	r24, 0x02	; 2
    2020:	a1 09       	sbc	r26, r1
    2022:	b1 09       	sbc	r27, r1
    2024:	e8 16       	cp	r14, r24
    2026:	f9 06       	cpc	r15, r25
    2028:	0a 07       	cpc	r16, r26
    202a:	1b 07       	cpc	r17, r27
    202c:	28 f0       	brcs	.+10     	; 0x2038 <dir_rewind+0xae>
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	17 c0       	rjmp	.+46     	; 0x2066 <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
    2038:	2a 81       	ldd	r18, Y+2	; 0x02
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	c8 01       	movw	r24, r16
    2042:	b7 01       	movw	r22, r14
    2044:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    2048:	9b 01       	movw	r18, r22
    204a:	ac 01       	movw	r20, r24
    204c:	8a 89       	ldd	r24, Y+18	; 0x12
    204e:	9b 89       	ldd	r25, Y+19	; 0x13
    2050:	ac 89       	ldd	r26, Y+20	; 0x14
    2052:	bd 89       	ldd	r27, Y+21	; 0x15
    2054:	28 0f       	add	r18, r24
    2056:	39 1f       	adc	r19, r25
    2058:	4a 1f       	adc	r20, r26
    205a:	5b 1f       	adc	r21, r27
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <dir_rewind+0xdc>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    205e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2060:	3f 85       	ldd	r19, Y+15	; 0x0f
    2062:	48 89       	ldd	r20, Y+16	; 0x10
    2064:	59 89       	ldd	r21, Y+17	; 0x11
    2066:	f6 01       	movw	r30, r12
    2068:	24 87       	std	Z+12, r18	; 0x0c
    206a:	35 87       	std	Z+13, r19	; 0x0d
    206c:	46 87       	std	Z+14, r20	; 0x0e
    206e:	57 87       	std	Z+15, r21	; 0x0f
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
    2074:	81 e0       	ldi	r24, 0x01	; 1
}
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	cf 90       	pop	r12
    2086:	08 95       	ret

00002088 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    2088:	6f 92       	push	r6
    208a:	7f 92       	push	r7
    208c:	8f 92       	push	r8
    208e:	9f 92       	push	r9
    2090:	af 92       	push	r10
    2092:	bf 92       	push	r11
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <get_fat+0x1e>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <get_fat+0x20>
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	4b 01       	movw	r8, r22
    20ae:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
    20b0:	60 90 ca 00 	lds	r6, 0x00CA
    20b4:	70 90 cb 00 	lds	r7, 0x00CB


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	88 16       	cp	r8, r24
    20bc:	91 04       	cpc	r9, r1
    20be:	a1 04       	cpc	r10, r1
    20c0:	b1 04       	cpc	r11, r1
    20c2:	08 f4       	brcc	.+2      	; 0x20c6 <get_fat+0x3e>
    20c4:	b4 c0       	rjmp	.+360    	; 0x222e <get_fat+0x1a6>
    20c6:	f3 01       	movw	r30, r6
    20c8:	86 81       	ldd	r24, Z+6	; 0x06
    20ca:	97 81       	ldd	r25, Z+7	; 0x07
    20cc:	a0 85       	ldd	r26, Z+8	; 0x08
    20ce:	b1 85       	ldd	r27, Z+9	; 0x09
    20d0:	88 16       	cp	r8, r24
    20d2:	99 06       	cpc	r9, r25
    20d4:	aa 06       	cpc	r10, r26
    20d6:	bb 06       	cpc	r11, r27
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <get_fat+0x54>
    20da:	a9 c0       	rjmp	.+338    	; 0x222e <get_fat+0x1a6>
		return 1;

	switch (fs->fs_type) {
    20dc:	80 81       	ld	r24, Z
    20de:	82 30       	cpi	r24, 0x02	; 2
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <get_fat+0x5c>
    20e2:	5f c0       	rjmp	.+190    	; 0x21a2 <get_fat+0x11a>
    20e4:	83 30       	cpi	r24, 0x03	; 3
    20e6:	09 f4       	brne	.+2      	; 0x20ea <get_fat+0x62>
    20e8:	7b c0       	rjmp	.+246    	; 0x21e0 <get_fat+0x158>
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <get_fat+0x68>
    20ee:	9f c0       	rjmp	.+318    	; 0x222e <get_fat+0x1a6>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
    20f0:	c4 01       	movw	r24, r8
    20f2:	96 95       	lsr	r25
    20f4:	87 95       	ror	r24
    20f6:	88 0d       	add	r24, r8
    20f8:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
    20fa:	9c 01       	movw	r18, r24
    20fc:	31 70       	andi	r19, 0x01	; 1
    20fe:	89 2f       	mov	r24, r25
    2100:	99 27       	eor	r25, r25
    2102:	86 95       	lsr	r24
    2104:	6c 01       	movw	r12, r24
    2106:	ee 24       	eor	r14, r14
    2108:	ff 24       	eor	r15, r15
    210a:	f3 01       	movw	r30, r6
    210c:	42 85       	ldd	r20, Z+10	; 0x0a
    210e:	53 85       	ldd	r21, Z+11	; 0x0b
    2110:	64 85       	ldd	r22, Z+12	; 0x0c
    2112:	75 85       	ldd	r23, Z+13	; 0x0d
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
    2118:	f1 e0       	ldi	r31, 0x01	; 1
    211a:	2f 3f       	cpi	r18, 0xFF	; 255
    211c:	3f 07       	cpc	r19, r31
    211e:	49 f0       	breq	.+18     	; 0x2132 <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
    2120:	c4 0e       	add	r12, r20
    2122:	d5 1e       	adc	r13, r21
    2124:	e6 1e       	adc	r14, r22
    2126:	f7 1e       	adc	r15, r23
    2128:	b7 01       	movw	r22, r14
    212a:	a6 01       	movw	r20, r12
    212c:	02 e0       	ldi	r16, 0x02	; 2
    212e:	10 e0       	ldi	r17, 0x00	; 0
    2130:	1e c0       	rjmp	.+60     	; 0x216e <get_fat+0xe6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
    2132:	4c 0d       	add	r20, r12
    2134:	5d 1d       	adc	r21, r13
    2136:	6e 1d       	adc	r22, r14
    2138:	7f 1d       	adc	r23, r15
    213a:	2f ef       	ldi	r18, 0xFF	; 255
    213c:	31 e0       	ldi	r19, 0x01	; 1
    213e:	01 e0       	ldi	r16, 0x01	; 1
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    2146:	88 23       	and	r24, r24
    2148:	09 f0       	breq	.+2      	; 0x214c <get_fat+0xc4>
    214a:	71 c0       	rjmp	.+226    	; 0x222e <get_fat+0x1a6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
    214c:	f3 01       	movw	r30, r6
    214e:	42 85       	ldd	r20, Z+10	; 0x0a
    2150:	53 85       	ldd	r21, Z+11	; 0x0b
    2152:	64 85       	ldd	r22, Z+12	; 0x0c
    2154:	75 85       	ldd	r23, Z+13	; 0x0d
    2156:	4f 5f       	subi	r20, 0xFF	; 255
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	6f 4f       	sbci	r22, 0xFF	; 255
    215c:	7f 4f       	sbci	r23, 0xFF	; 255
    215e:	4c 0d       	add	r20, r12
    2160:	5d 1d       	adc	r21, r13
    2162:	6e 1d       	adc	r22, r14
    2164:	7f 1d       	adc	r23, r15
    2166:	ce 01       	movw	r24, r28
    2168:	02 96       	adiw	r24, 0x02	; 2
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    2172:	88 23       	and	r24, r24
    2174:	09 f0       	breq	.+2      	; 0x2178 <get_fat+0xf0>
    2176:	5b c0       	rjmp	.+182    	; 0x222e <get_fat+0x1a6>
		}
		wc = LD_WORD(buf);
    2178:	69 81       	ldd	r22, Y+1	; 0x01
    217a:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    217c:	c4 01       	movw	r24, r8
    217e:	81 70       	andi	r24, 0x01	; 1
    2180:	90 70       	andi	r25, 0x00	; 0
    2182:	89 2b       	or	r24, r25
    2184:	39 f0       	breq	.+14     	; 0x2194 <get_fat+0x10c>
    2186:	a4 e0       	ldi	r26, 0x04	; 4
    2188:	76 95       	lsr	r23
    218a:	67 95       	ror	r22
    218c:	aa 95       	dec	r26
    218e:	e1 f7       	brne	.-8      	; 0x2188 <get_fat+0x100>
    2190:	9b 01       	movw	r18, r22
    2192:	23 c0       	rjmp	.+70     	; 0x21da <get_fat+0x152>
    2194:	9b 01       	movw	r18, r22
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	3f 70       	andi	r19, 0x0F	; 15
    219c:	40 70       	andi	r20, 0x00	; 0
    219e:	50 70       	andi	r21, 0x00	; 0
    21a0:	4a c0       	rjmp	.+148    	; 0x2236 <get_fat+0x1ae>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    21a2:	77 27       	eor	r23, r23
    21a4:	6b 2d       	mov	r22, r11
    21a6:	5a 2d       	mov	r21, r10
    21a8:	49 2d       	mov	r20, r9
    21aa:	f3 01       	movw	r30, r6
    21ac:	82 85       	ldd	r24, Z+10	; 0x0a
    21ae:	93 85       	ldd	r25, Z+11	; 0x0b
    21b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    21b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    21b4:	48 0f       	add	r20, r24
    21b6:	59 1f       	adc	r21, r25
    21b8:	6a 1f       	adc	r22, r26
    21ba:	7b 1f       	adc	r23, r27
    21bc:	94 01       	movw	r18, r8
    21be:	30 70       	andi	r19, 0x00	; 0
    21c0:	22 0f       	add	r18, r18
    21c2:	33 1f       	adc	r19, r19
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	02 e0       	ldi	r16, 0x02	; 2
    21ca:	10 e0       	ldi	r17, 0x00	; 0
    21cc:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    21d0:	88 23       	and	r24, r24
    21d2:	69 f5       	brne	.+90     	; 0x222e <get_fat+0x1a6>
		return LD_WORD(buf);
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	9c 01       	movw	r18, r24
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	2b c0       	rjmp	.+86     	; 0x2236 <get_fat+0x1ae>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    21e0:	b5 01       	movw	r22, r10
    21e2:	a4 01       	movw	r20, r8
    21e4:	27 e0       	ldi	r18, 0x07	; 7
    21e6:	76 95       	lsr	r23
    21e8:	67 95       	ror	r22
    21ea:	57 95       	ror	r21
    21ec:	47 95       	ror	r20
    21ee:	2a 95       	dec	r18
    21f0:	d1 f7       	brne	.-12     	; 0x21e6 <get_fat+0x15e>
    21f2:	f3 01       	movw	r30, r6
    21f4:	82 85       	ldd	r24, Z+10	; 0x0a
    21f6:	93 85       	ldd	r25, Z+11	; 0x0b
    21f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    21fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    21fc:	48 0f       	add	r20, r24
    21fe:	59 1f       	adc	r21, r25
    2200:	6a 1f       	adc	r22, r26
    2202:	7b 1f       	adc	r23, r27
    2204:	94 01       	movw	r18, r8
    2206:	2f 77       	andi	r18, 0x7F	; 127
    2208:	30 70       	andi	r19, 0x00	; 0
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	22 0f       	add	r18, r18
    2210:	33 1f       	adc	r19, r19
    2212:	ce 01       	movw	r24, r28
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	04 e0       	ldi	r16, 0x04	; 4
    2218:	10 e0       	ldi	r17, 0x00	; 0
    221a:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    221e:	88 23       	and	r24, r24
    2220:	31 f4       	brne	.+12     	; 0x222e <get_fat+0x1a6>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    2222:	29 81       	ldd	r18, Y+1	; 0x01
    2224:	3a 81       	ldd	r19, Y+2	; 0x02
    2226:	4b 81       	ldd	r20, Y+3	; 0x03
    2228:	5c 81       	ldd	r21, Y+4	; 0x04
    222a:	5f 70       	andi	r21, 0x0F	; 15
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <get_fat+0x1ae>
    222e:	21 e0       	ldi	r18, 0x01	; 1
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    2236:	b9 01       	movw	r22, r18
    2238:	ca 01       	movw	r24, r20
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	bf 90       	pop	r11
    2254:	af 90       	pop	r10
    2256:	9f 90       	pop	r9
    2258:	8f 90       	pop	r8
    225a:	7f 90       	pop	r7
    225c:	6f 90       	pop	r6
    225e:	08 95       	ret

00002260 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    2276:	c0 91 ca 00 	lds	r28, 0x00CA
    227a:	d0 91 cb 00 	lds	r29, 0x00CB


	i = dj->index + 1;
    227e:	fc 01       	movw	r30, r24
    2280:	c0 80       	ld	r12, Z
    2282:	d1 80       	ldd	r13, Z+1	; 0x01
    2284:	08 94       	sec
    2286:	c1 1c       	adc	r12, r1
    2288:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    228a:	c1 14       	cp	r12, r1
    228c:	d1 04       	cpc	r13, r1
    228e:	09 f4       	brne	.+2      	; 0x2292 <dir_next+0x32>
    2290:	8f c0       	rjmp	.+286    	; 0x23b0 <dir_next+0x150>
    2292:	24 85       	ldd	r18, Z+12	; 0x0c
    2294:	35 85       	ldd	r19, Z+13	; 0x0d
    2296:	46 85       	ldd	r20, Z+14	; 0x0e
    2298:	57 85       	ldd	r21, Z+15	; 0x0f
    229a:	21 15       	cp	r18, r1
    229c:	31 05       	cpc	r19, r1
    229e:	41 05       	cpc	r20, r1
    22a0:	51 05       	cpc	r21, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <dir_next+0x46>
    22a4:	85 c0       	rjmp	.+266    	; 0x23b0 <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    22a6:	c6 01       	movw	r24, r12
    22a8:	8f 70       	andi	r24, 0x0F	; 15
    22aa:	90 70       	andi	r25, 0x00	; 0
    22ac:	89 2b       	or	r24, r25
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <dir_next+0x52>
    22b0:	7a c0       	rjmp	.+244    	; 0x23a6 <dir_next+0x146>
		dj->sect++;			/* Next sector */
    22b2:	2f 5f       	subi	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	4f 4f       	sbci	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	24 87       	std	Z+12, r18	; 0x0c
    22bc:	35 87       	std	Z+13, r19	; 0x0d
    22be:	46 87       	std	Z+14, r20	; 0x0e
    22c0:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    22c2:	40 85       	ldd	r20, Z+8	; 0x08
    22c4:	51 85       	ldd	r21, Z+9	; 0x09
    22c6:	62 85       	ldd	r22, Z+10	; 0x0a
    22c8:	73 85       	ldd	r23, Z+11	; 0x0b
    22ca:	41 15       	cp	r20, r1
    22cc:	51 05       	cpc	r21, r1
    22ce:	61 05       	cpc	r22, r1
    22d0:	71 05       	cpc	r23, r1
    22d2:	39 f4       	brne	.+14     	; 0x22e2 <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    22d4:	8c 81       	ldd	r24, Y+4	; 0x04
    22d6:	9d 81       	ldd	r25, Y+5	; 0x05
    22d8:	c8 16       	cp	r12, r24
    22da:	d9 06       	cpc	r13, r25
    22dc:	08 f4       	brcc	.+2      	; 0x22e0 <dir_next+0x80>
    22de:	63 c0       	rjmp	.+198    	; 0x23a6 <dir_next+0x146>
    22e0:	67 c0       	rjmp	.+206    	; 0x23b0 <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	96 01       	movw	r18, r12
    22ea:	e4 e0       	ldi	r30, 0x04	; 4
    22ec:	36 95       	lsr	r19
    22ee:	27 95       	ror	r18
    22f0:	ea 95       	dec	r30
    22f2:	e1 f7       	brne	.-8      	; 0x22ec <dir_next+0x8c>
    22f4:	82 23       	and	r24, r18
    22f6:	93 23       	and	r25, r19
    22f8:	89 2b       	or	r24, r25
    22fa:	09 f0       	breq	.+2      	; 0x22fe <dir_next+0x9e>
    22fc:	54 c0       	rjmp	.+168    	; 0x23a6 <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
    22fe:	cb 01       	movw	r24, r22
    2300:	ba 01       	movw	r22, r20
    2302:	0e 94 44 10 	call	0x2088	; 0x2088 <get_fat>
    2306:	9b 01       	movw	r18, r22
    2308:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
    230a:	62 30       	cpi	r22, 0x02	; 2
    230c:	71 05       	cpc	r23, r1
    230e:	81 05       	cpc	r24, r1
    2310:	91 05       	cpc	r25, r1
    2312:	10 f4       	brcc	.+4      	; 0x2318 <dir_next+0xb8>
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	4d c0       	rjmp	.+154    	; 0x23b2 <dir_next+0x152>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	a8 85       	ldd	r26, Y+8	; 0x08
    231e:	b9 85       	ldd	r27, Y+9	; 0x09
    2320:	28 17       	cp	r18, r24
    2322:	39 07       	cpc	r19, r25
    2324:	4a 07       	cpc	r20, r26
    2326:	5b 07       	cpc	r21, r27
    2328:	08 f0       	brcs	.+2      	; 0x232c <dir_next+0xcc>
    232a:	42 c0       	rjmp	.+132    	; 0x23b0 <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    232c:	f5 01       	movw	r30, r10
    232e:	20 87       	std	Z+8, r18	; 0x08
    2330:	31 87       	std	Z+9, r19	; 0x09
    2332:	42 87       	std	Z+10, r20	; 0x0a
    2334:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2336:	c0 91 ca 00 	lds	r28, 0x00CA
    233a:	d0 91 cb 00 	lds	r29, 0x00CB


	clst -= 2;
    233e:	8e ef       	ldi	r24, 0xFE	; 254
    2340:	e8 2e       	mov	r14, r24
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	f8 2e       	mov	r15, r24
    2346:	8f ef       	ldi	r24, 0xFF	; 255
    2348:	08 2f       	mov	r16, r24
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	18 2f       	mov	r17, r24
    234e:	e2 0e       	add	r14, r18
    2350:	f3 1e       	adc	r15, r19
    2352:	04 1f       	adc	r16, r20
    2354:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2356:	8e 81       	ldd	r24, Y+6	; 0x06
    2358:	9f 81       	ldd	r25, Y+7	; 0x07
    235a:	a8 85       	ldd	r26, Y+8	; 0x08
    235c:	b9 85       	ldd	r27, Y+9	; 0x09
    235e:	02 97       	sbiw	r24, 0x02	; 2
    2360:	a1 09       	sbc	r26, r1
    2362:	b1 09       	sbc	r27, r1
    2364:	e8 16       	cp	r14, r24
    2366:	f9 06       	cpc	r15, r25
    2368:	0a 07       	cpc	r16, r26
    236a:	1b 07       	cpc	r17, r27
    236c:	28 f0       	brcs	.+10     	; 0x2378 <dir_next+0x118>
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	12 c0       	rjmp	.+36     	; 0x239c <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
    2378:	2a 81       	ldd	r18, Y+2	; 0x02
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	c8 01       	movw	r24, r16
    2382:	b7 01       	movw	r22, r14
    2384:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    2388:	9b 01       	movw	r18, r22
    238a:	ac 01       	movw	r20, r24
    238c:	8a 89       	ldd	r24, Y+18	; 0x12
    238e:	9b 89       	ldd	r25, Y+19	; 0x13
    2390:	ac 89       	ldd	r26, Y+20	; 0x14
    2392:	bd 89       	ldd	r27, Y+21	; 0x15
    2394:	28 0f       	add	r18, r24
    2396:	39 1f       	adc	r19, r25
    2398:	4a 1f       	adc	r20, r26
    239a:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
    239c:	f5 01       	movw	r30, r10
    239e:	24 87       	std	Z+12, r18	; 0x0c
    23a0:	35 87       	std	Z+13, r19	; 0x0d
    23a2:	46 87       	std	Z+14, r20	; 0x0e
    23a4:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
    23a6:	f5 01       	movw	r30, r10
    23a8:	d1 82       	std	Z+1, r13	; 0x01
    23aa:	c0 82       	st	Z, r12
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <dir_next+0x152>

	return FR_OK;
    23b0:	83 e0       	ldi	r24, 0x03	; 3
}
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	ef 90       	pop	r14
    23be:	df 90       	pop	r13
    23c0:	cf 90       	pop	r12
    23c2:	bf 90       	pop	r11
    23c4:	af 90       	pop	r10
    23c6:	08 95       	ret

000023c8 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    23c8:	2f 92       	push	r2
    23ca:	3f 92       	push	r3
    23cc:	4f 92       	push	r4
    23ce:	5f 92       	push	r5
    23d0:	6f 92       	push	r6
    23d2:	7f 92       	push	r7
    23d4:	8f 92       	push	r8
    23d6:	9f 92       	push	r9
    23d8:	af 92       	push	r10
    23da:	bf 92       	push	r11
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    23ee:	c0 91 ca 00 	lds	r28, 0x00CA
    23f2:	d0 91 cb 00 	lds	r29, 0x00CB


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    23f6:	20 97       	sbiw	r28, 0x00	; 0
    23f8:	11 f4       	brne	.+4      	; 0x23fe <pf_lseek+0x36>
    23fa:	86 e0       	ldi	r24, 0x06	; 6
    23fc:	02 c1       	rjmp	.+516    	; 0x2602 <pf_lseek+0x23a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	80 fd       	sbrc	r24, 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <pf_lseek+0x40>
    2404:	85 e0       	ldi	r24, 0x05	; 5
    2406:	fd c0       	rjmp	.+506    	; 0x2602 <pf_lseek+0x23a>
    2408:	ea 8c       	ldd	r14, Y+26	; 0x1a
    240a:	fb 8c       	ldd	r15, Y+27	; 0x1b
    240c:	0c 8d       	ldd	r16, Y+28	; 0x1c
    240e:	1d 8d       	ldd	r17, Y+29	; 0x1d
    2410:	4e 2f       	mov	r20, r30
    2412:	59 2f       	mov	r21, r25
    2414:	cb 01       	movw	r24, r22
    2416:	da 01       	movw	r26, r20
    2418:	3c 01       	movw	r6, r24
    241a:	4d 01       	movw	r8, r26
    241c:	e6 14       	cp	r14, r6
    241e:	f7 04       	cpc	r15, r7
    2420:	08 05       	cpc	r16, r8
    2422:	19 05       	cpc	r17, r9
    2424:	10 f4       	brcc	.+4      	; 0x242a <pf_lseek+0x62>
    2426:	37 01       	movw	r6, r14
    2428:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
    242a:	ee 88       	ldd	r14, Y+22	; 0x16
    242c:	ff 88       	ldd	r15, Y+23	; 0x17
    242e:	08 8d       	ldd	r16, Y+24	; 0x18
    2430:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
    2432:	1e 8a       	std	Y+22, r1	; 0x16
    2434:	1f 8a       	std	Y+23, r1	; 0x17
    2436:	18 8e       	std	Y+24, r1	; 0x18
    2438:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
    243a:	61 14       	cp	r6, r1
    243c:	71 04       	cpc	r7, r1
    243e:	81 04       	cpc	r8, r1
    2440:	91 04       	cpc	r9, r1
    2442:	09 f4       	brne	.+2      	; 0x2446 <pf_lseek+0x7e>
    2444:	da c0       	rjmp	.+436    	; 0x25fa <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	a8 2e       	mov	r10, r24
    244a:	bb 24       	eor	r11, r11
    244c:	cc 24       	eor	r12, r12
    244e:	dd 24       	eor	r13, r13
    2450:	b9 e0       	ldi	r27, 0x09	; 9
    2452:	aa 0c       	add	r10, r10
    2454:	bb 1c       	adc	r11, r11
    2456:	cc 1c       	adc	r12, r12
    2458:	dd 1c       	adc	r13, r13
    245a:	ba 95       	dec	r27
    245c:	d1 f7       	brne	.-12     	; 0x2452 <pf_lseek+0x8a>
		if (ifptr > 0 &&
    245e:	e1 14       	cp	r14, r1
    2460:	f1 04       	cpc	r15, r1
    2462:	01 05       	cpc	r16, r1
    2464:	11 05       	cpc	r17, r1
    2466:	b1 f1       	breq	.+108    	; 0x24d4 <pf_lseek+0x10c>
    2468:	17 01       	movw	r2, r14
    246a:	28 01       	movw	r4, r16
    246c:	08 94       	sec
    246e:	21 08       	sbc	r2, r1
    2470:	31 08       	sbc	r3, r1
    2472:	41 08       	sbc	r4, r1
    2474:	51 08       	sbc	r5, r1
    2476:	c4 01       	movw	r24, r8
    2478:	b3 01       	movw	r22, r6
    247a:	61 50       	subi	r22, 0x01	; 1
    247c:	70 40       	sbci	r23, 0x00	; 0
    247e:	80 40       	sbci	r24, 0x00	; 0
    2480:	90 40       	sbci	r25, 0x00	; 0
    2482:	a6 01       	movw	r20, r12
    2484:	95 01       	movw	r18, r10
    2486:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__udivmodsi4>
    248a:	79 01       	movw	r14, r18
    248c:	8a 01       	movw	r16, r20
    248e:	c2 01       	movw	r24, r4
    2490:	b1 01       	movw	r22, r2
    2492:	a6 01       	movw	r20, r12
    2494:	95 01       	movw	r18, r10
    2496:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__udivmodsi4>
    249a:	e2 16       	cp	r14, r18
    249c:	f3 06       	cpc	r15, r19
    249e:	04 07       	cpc	r16, r20
    24a0:	15 07       	cpc	r17, r21
    24a2:	c0 f0       	brcs	.+48     	; 0x24d4 <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    24a4:	88 27       	eor	r24, r24
    24a6:	99 27       	eor	r25, r25
    24a8:	dc 01       	movw	r26, r24
    24aa:	8a 19       	sub	r24, r10
    24ac:	9b 09       	sbc	r25, r11
    24ae:	ac 09       	sbc	r26, r12
    24b0:	bd 09       	sbc	r27, r13
    24b2:	82 21       	and	r24, r2
    24b4:	93 21       	and	r25, r3
    24b6:	a4 21       	and	r26, r4
    24b8:	b5 21       	and	r27, r5
    24ba:	8e 8b       	std	Y+22, r24	; 0x16
    24bc:	9f 8b       	std	Y+23, r25	; 0x17
    24be:	a8 8f       	std	Y+24, r26	; 0x18
    24c0:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
    24c2:	68 1a       	sub	r6, r24
    24c4:	79 0a       	sbc	r7, r25
    24c6:	8a 0a       	sbc	r8, r26
    24c8:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
    24ca:	2a a1       	ldd	r18, Y+34	; 0x22
    24cc:	3b a1       	ldd	r19, Y+35	; 0x23
    24ce:	4c a1       	ldd	r20, Y+36	; 0x24
    24d0:	5d a1       	ldd	r21, Y+37	; 0x25
    24d2:	33 c0       	rjmp	.+102    	; 0x253a <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    24d4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    24d6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    24d8:	48 a1       	ldd	r20, Y+32	; 0x20
    24da:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
    24dc:	2a a3       	std	Y+34, r18	; 0x22
    24de:	3b a3       	std	Y+35, r19	; 0x23
    24e0:	4c a3       	std	Y+36, r20	; 0x24
    24e2:	5d a3       	std	Y+37, r21	; 0x25
    24e4:	2a c0       	rjmp	.+84     	; 0x253a <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    24e6:	ca 01       	movw	r24, r20
    24e8:	b9 01       	movw	r22, r18
    24ea:	0e 94 44 10 	call	0x2088	; 0x2088 <get_fat>
    24ee:	9b 01       	movw	r18, r22
    24f0:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    24f2:	62 30       	cpi	r22, 0x02	; 2
    24f4:	71 05       	cpc	r23, r1
    24f6:	81 05       	cpc	r24, r1
    24f8:	91 05       	cpc	r25, r1
    24fa:	08 f4       	brcc	.+2      	; 0x24fe <pf_lseek+0x136>
    24fc:	80 c0       	rjmp	.+256    	; 0x25fe <pf_lseek+0x236>
    24fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2500:	9f 81       	ldd	r25, Y+7	; 0x07
    2502:	a8 85       	ldd	r26, Y+8	; 0x08
    2504:	b9 85       	ldd	r27, Y+9	; 0x09
    2506:	28 17       	cp	r18, r24
    2508:	39 07       	cpc	r19, r25
    250a:	4a 07       	cpc	r20, r26
    250c:	5b 07       	cpc	r21, r27
    250e:	08 f0       	brcs	.+2      	; 0x2512 <pf_lseek+0x14a>
    2510:	76 c0       	rjmp	.+236    	; 0x25fe <pf_lseek+0x236>
			fs->curr_clust = clst;
    2512:	2a a3       	std	Y+34, r18	; 0x22
    2514:	3b a3       	std	Y+35, r19	; 0x23
    2516:	4c a3       	std	Y+36, r20	; 0x24
    2518:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
    251a:	8e 89       	ldd	r24, Y+22	; 0x16
    251c:	9f 89       	ldd	r25, Y+23	; 0x17
    251e:	a8 8d       	ldd	r26, Y+24	; 0x18
    2520:	b9 8d       	ldd	r27, Y+25	; 0x19
    2522:	8a 0d       	add	r24, r10
    2524:	9b 1d       	adc	r25, r11
    2526:	ac 1d       	adc	r26, r12
    2528:	bd 1d       	adc	r27, r13
    252a:	8e 8b       	std	Y+22, r24	; 0x16
    252c:	9f 8b       	std	Y+23, r25	; 0x17
    252e:	a8 8f       	std	Y+24, r26	; 0x18
    2530:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
    2532:	6a 18       	sub	r6, r10
    2534:	7b 08       	sbc	r7, r11
    2536:	8c 08       	sbc	r8, r12
    2538:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    253a:	a6 14       	cp	r10, r6
    253c:	b7 04       	cpc	r11, r7
    253e:	c8 04       	cpc	r12, r8
    2540:	d9 04       	cpc	r13, r9
    2542:	88 f2       	brcs	.-94     	; 0x24e6 <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    2544:	ee 88       	ldd	r14, Y+22	; 0x16
    2546:	ff 88       	ldd	r15, Y+23	; 0x17
    2548:	08 8d       	ldd	r16, Y+24	; 0x18
    254a:	19 8d       	ldd	r17, Y+25	; 0x19
    254c:	e6 0c       	add	r14, r6
    254e:	f7 1c       	adc	r15, r7
    2550:	08 1d       	adc	r16, r8
    2552:	19 1d       	adc	r17, r9
    2554:	ee 8a       	std	Y+22, r14	; 0x16
    2556:	ff 8a       	std	Y+23, r15	; 0x17
    2558:	08 8f       	std	Y+24, r16	; 0x18
    255a:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    255c:	80 90 ca 00 	lds	r8, 0x00CA
    2560:	90 90 cb 00 	lds	r9, 0x00CB


	clst -= 2;
    2564:	ae ef       	ldi	r26, 0xFE	; 254
    2566:	aa 2e       	mov	r10, r26
    2568:	af ef       	ldi	r26, 0xFF	; 255
    256a:	ba 2e       	mov	r11, r26
    256c:	af ef       	ldi	r26, 0xFF	; 255
    256e:	ca 2e       	mov	r12, r26
    2570:	af ef       	ldi	r26, 0xFF	; 255
    2572:	da 2e       	mov	r13, r26
    2574:	a2 0e       	add	r10, r18
    2576:	b3 1e       	adc	r11, r19
    2578:	c4 1e       	adc	r12, r20
    257a:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    257c:	f4 01       	movw	r30, r8
    257e:	86 81       	ldd	r24, Z+6	; 0x06
    2580:	97 81       	ldd	r25, Z+7	; 0x07
    2582:	a0 85       	ldd	r26, Z+8	; 0x08
    2584:	b1 85       	ldd	r27, Z+9	; 0x09
    2586:	02 97       	sbiw	r24, 0x02	; 2
    2588:	a1 09       	sbc	r26, r1
    258a:	b1 09       	sbc	r27, r1
    258c:	a8 16       	cp	r10, r24
    258e:	b9 06       	cpc	r11, r25
    2590:	ca 06       	cpc	r12, r26
    2592:	db 06       	cpc	r13, r27
    2594:	a0 f5       	brcc	.+104    	; 0x25fe <pf_lseek+0x236>
	return (DWORD)clst * fs->csize + fs->database;
    2596:	22 81       	ldd	r18, Z+2	; 0x02
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	c6 01       	movw	r24, r12
    25a0:	b5 01       	movw	r22, r10
    25a2:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    25a6:	9b 01       	movw	r18, r22
    25a8:	ac 01       	movw	r20, r24
    25aa:	f4 01       	movw	r30, r8
    25ac:	82 89       	ldd	r24, Z+18	; 0x12
    25ae:	93 89       	ldd	r25, Z+19	; 0x13
    25b0:	a4 89       	ldd	r26, Z+20	; 0x14
    25b2:	b5 89       	ldd	r27, Z+21	; 0x15
    25b4:	28 0f       	add	r18, r24
    25b6:	39 1f       	adc	r19, r25
    25b8:	4a 1f       	adc	r20, r26
    25ba:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
    25bc:	21 15       	cp	r18, r1
    25be:	31 05       	cpc	r19, r1
    25c0:	41 05       	cpc	r20, r1
    25c2:	51 05       	cpc	r21, r1
    25c4:	e1 f0       	breq	.+56     	; 0x25fe <pf_lseek+0x236>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    25c6:	f9 e0       	ldi	r31, 0x09	; 9
    25c8:	16 95       	lsr	r17
    25ca:	07 95       	ror	r16
    25cc:	f7 94       	ror	r15
    25ce:	e7 94       	ror	r14
    25d0:	fa 95       	dec	r31
    25d2:	d1 f7       	brne	.-12     	; 0x25c8 <pf_lseek+0x200>
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	aa 27       	eor	r26, r26
    25dc:	97 fd       	sbrc	r25, 7
    25de:	a0 95       	com	r26
    25e0:	ba 2f       	mov	r27, r26
    25e2:	e8 22       	and	r14, r24
    25e4:	f9 22       	and	r15, r25
    25e6:	0a 23       	and	r16, r26
    25e8:	1b 23       	and	r17, r27
    25ea:	2e 0d       	add	r18, r14
    25ec:	3f 1d       	adc	r19, r15
    25ee:	40 1f       	adc	r20, r16
    25f0:	51 1f       	adc	r21, r17
    25f2:	2e a3       	std	Y+38, r18	; 0x26
    25f4:	3f a3       	std	Y+39, r19	; 0x27
    25f6:	48 a7       	std	Y+40, r20	; 0x28
    25f8:	59 a7       	std	Y+41, r21	; 0x29
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <pf_lseek+0x23a>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
    25fe:	19 82       	std	Y+1, r1	; 0x01
    2600:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	ef 90       	pop	r14
    260e:	df 90       	pop	r13
    2610:	cf 90       	pop	r12
    2612:	bf 90       	pop	r11
    2614:	af 90       	pop	r10
    2616:	9f 90       	pop	r9
    2618:	8f 90       	pop	r8
    261a:	7f 90       	pop	r7
    261c:	6f 90       	pop	r6
    261e:	5f 90       	pop	r5
    2620:	4f 90       	pop	r4
    2622:	3f 90       	pop	r3
    2624:	2f 90       	pop	r2
    2626:	08 95       	ret

00002628 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2628:	af 92       	push	r10
    262a:	bf 92       	push	r11
    262c:	cf 92       	push	r12
    262e:	df 92       	push	r13
    2630:	ef 92       	push	r14
    2632:	ff 92       	push	r15
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	ac 97       	sbiw	r28, 0x2c	; 44
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	7c 01       	movw	r14, r24
    264e:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    2650:	80 91 ca 00 	lds	r24, 0x00CA
    2654:	90 91 cb 00 	lds	r25, 0x00CB
    2658:	89 2b       	or	r24, r25
    265a:	11 f4       	brne	.+4      	; 0x2660 <pf_readdir+0x38>
    265c:	86 e0       	ldi	r24, 0x06	; 6
    265e:	b0 c0       	rjmp	.+352    	; 0x27c0 <pf_readdir+0x198>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    2660:	ce 01       	movw	r24, r28
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	d7 01       	movw	r26, r14
    2666:	13 96       	adiw	r26, 0x03	; 3
    2668:	9c 93       	st	X, r25
    266a:	8e 93       	st	-X, r24
    266c:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
    266e:	61 15       	cp	r22, r1
    2670:	71 05       	cpc	r23, r1
    2672:	39 f0       	breq	.+14     	; 0x2682 <pf_readdir+0x5a>
    2674:	83 e0       	ldi	r24, 0x03	; 3
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    2676:	0d e0       	ldi	r16, 0x0D	; 13
    2678:	a0 2e       	mov	r10, r16
    267a:	b1 2c       	mov	r11, r1
    267c:	ac 0e       	add	r10, r28
    267e:	bd 1e       	adc	r11, r29
    2680:	28 c0       	rjmp	.+80     	; 0x26d2 <pf_readdir+0xaa>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
    2682:	c7 01       	movw	r24, r14
    2684:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <dir_rewind>
    2688:	9b c0       	rjmp	.+310    	; 0x27c0 <pf_readdir+0x198>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    268a:	f7 01       	movw	r30, r14
    268c:	20 81       	ld	r18, Z
    268e:	31 81       	ldd	r19, Z+1	; 0x01
    2690:	2f 70       	andi	r18, 0x0F	; 15
    2692:	30 70       	andi	r19, 0x00	; 0
    2694:	15 e0       	ldi	r17, 0x05	; 5
    2696:	22 0f       	add	r18, r18
    2698:	33 1f       	adc	r19, r19
    269a:	1a 95       	dec	r17
    269c:	e1 f7       	brne	.-8      	; 0x2696 <pf_readdir+0x6e>
    269e:	c5 01       	movw	r24, r10
    26a0:	00 e2       	ldi	r16, 0x20	; 32
    26a2:	10 e0       	ldi	r17, 0x00	; 0
    26a4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    26a8:	88 23       	and	r24, r24
    26aa:	11 f0       	breq	.+4      	; 0x26b0 <pf_readdir+0x88>
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	1f c0       	rjmp	.+62     	; 0x26ee <pf_readdir+0xc6>
		c = dir[DIR_Name];
    26b0:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    26b2:	99 23       	and	r25, r25
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <pf_readdir+0x90>
    26b6:	95 c0       	rjmp	.+298    	; 0x27e2 <pf_readdir+0x1ba>
		a = dir[DIR_Attr] & AM_MASK;
    26b8:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    26ba:	95 3e       	cpi	r25, 0xE5	; 229
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <pf_readdir+0xa0>
    26be:	9e 32       	cpi	r25, 0x2E	; 46
    26c0:	19 f0       	breq	.+6      	; 0x26c8 <pf_readdir+0xa0>
    26c2:	8f 73       	andi	r24, 0x3F	; 63
    26c4:	83 ff       	sbrs	r24, 3
    26c6:	1d c0       	rjmp	.+58     	; 0x2702 <pf_readdir+0xda>
			break;
		res = dir_next(dj);			/* Next entry */
    26c8:	c7 01       	movw	r24, r14
    26ca:	0e 94 30 11 	call	0x2260	; 0x2260 <dir_next>
		if (res != FR_OK) break;
    26ce:	88 23       	and	r24, r24
    26d0:	71 f4       	brne	.+28     	; 0x26ee <pf_readdir+0xc6>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    26d2:	d7 01       	movw	r26, r14
    26d4:	1c 96       	adiw	r26, 0x0c	; 12
    26d6:	4d 91       	ld	r20, X+
    26d8:	5d 91       	ld	r21, X+
    26da:	6d 91       	ld	r22, X+
    26dc:	7c 91       	ld	r23, X
    26de:	1f 97       	sbiw	r26, 0x0f	; 15
    26e0:	41 15       	cp	r20, r1
    26e2:	51 05       	cpc	r21, r1
    26e4:	61 05       	cpc	r22, r1
    26e6:	71 05       	cpc	r23, r1
    26e8:	81 f6       	brne	.-96     	; 0x268a <pf_readdir+0x62>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    26ea:	88 23       	and	r24, r24
    26ec:	51 f0       	breq	.+20     	; 0x2702 <pf_readdir+0xda>
    26ee:	f7 01       	movw	r30, r14
    26f0:	14 86       	std	Z+12, r1	; 0x0c
    26f2:	15 86       	std	Z+13, r1	; 0x0d
    26f4:	16 86       	std	Z+14, r1	; 0x0e
    26f6:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    26f8:	83 30       	cpi	r24, 0x03	; 3
    26fa:	19 f0       	breq	.+6      	; 0x2702 <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    26fc:	88 23       	and	r24, r24
    26fe:	09 f0       	breq	.+2      	; 0x2702 <pf_readdir+0xda>
    2700:	5f c0       	rjmp	.+190    	; 0x27c0 <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    2702:	96 01       	movw	r18, r12
    2704:	27 5f       	subi	r18, 0xF7	; 247
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    2708:	f7 01       	movw	r30, r14
    270a:	84 85       	ldd	r24, Z+12	; 0x0c
    270c:	95 85       	ldd	r25, Z+13	; 0x0d
    270e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2710:	b7 85       	ldd	r27, Z+15	; 0x0f
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	a1 05       	cpc	r26, r1
    2716:	b1 05       	cpc	r27, r1
    2718:	09 f4       	brne	.+2      	; 0x271c <pf_readdir+0xf4>
    271a:	43 c0       	rjmp	.+134    	; 0x27a2 <pf_readdir+0x17a>
    271c:	fe 01       	movw	r30, r28
    271e:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    2720:	ae 01       	movw	r20, r28
    2722:	4b 5e       	subi	r20, 0xEB	; 235
    2724:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
    2726:	80 81       	ld	r24, Z
			if (c == ' ') break;
    2728:	80 32       	cpi	r24, 0x20	; 32
    272a:	51 f0       	breq	.+20     	; 0x2740 <pf_readdir+0x118>
			if (c == 0x05) c = 0xE5;
    272c:	85 30       	cpi	r24, 0x05	; 5
    272e:	09 f4       	brne	.+2      	; 0x2732 <pf_readdir+0x10a>
    2730:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    2732:	d9 01       	movw	r26, r18
    2734:	8d 93       	st	X+, r24
    2736:	9d 01       	movw	r18, r26
    2738:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    273a:	e4 17       	cp	r30, r20
    273c:	f5 07       	cpc	r31, r21
    273e:	99 f7       	brne	.-26     	; 0x2726 <pf_readdir+0xfe>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    2740:	8d 89       	ldd	r24, Y+21	; 0x15
    2742:	80 32       	cpi	r24, 0x20	; 32
    2744:	99 f0       	breq	.+38     	; 0x276c <pf_readdir+0x144>
			*p++ = '.';
    2746:	8e e2       	ldi	r24, 0x2E	; 46
    2748:	f9 01       	movw	r30, r18
    274a:	81 93       	st	Z+, r24
    274c:	9f 01       	movw	r18, r30
    274e:	fe 01       	movw	r30, r28
    2750:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
    2752:	ae 01       	movw	r20, r28
    2754:	48 5e       	subi	r20, 0xE8	; 232
    2756:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
    2758:	80 81       	ld	r24, Z
				if (c == ' ') break;
    275a:	80 32       	cpi	r24, 0x20	; 32
    275c:	39 f0       	breq	.+14     	; 0x276c <pf_readdir+0x144>
				*p++ = c;
    275e:	d9 01       	movw	r26, r18
    2760:	8d 93       	st	X+, r24
    2762:	9d 01       	movw	r18, r26
    2764:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    2766:	e4 17       	cp	r30, r20
    2768:	f5 07       	cpc	r31, r21
    276a:	b1 f7       	brne	.-20     	; 0x2758 <pf_readdir+0x130>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    276c:	88 8d       	ldd	r24, Y+24	; 0x18
    276e:	f6 01       	movw	r30, r12
    2770:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    2772:	fe 01       	movw	r30, r28
    2774:	3d 96       	adiw	r30, 0x0d	; 13
    2776:	44 8d       	ldd	r20, Z+28	; 0x1c
    2778:	55 8d       	ldd	r21, Z+29	; 0x1d
    277a:	66 8d       	ldd	r22, Z+30	; 0x1e
    277c:	77 8d       	ldd	r23, Z+31	; 0x1f
    277e:	d6 01       	movw	r26, r12
    2780:	4d 93       	st	X+, r20
    2782:	5d 93       	st	X+, r21
    2784:	6d 93       	st	X+, r22
    2786:	7c 93       	st	X, r23
    2788:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    278a:	80 8d       	ldd	r24, Z+24	; 0x18
    278c:	91 8d       	ldd	r25, Z+25	; 0x19
    278e:	15 96       	adiw	r26, 0x05	; 5
    2790:	9c 93       	st	X, r25
    2792:	8e 93       	st	-X, r24
    2794:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    2796:	86 89       	ldd	r24, Z+22	; 0x16
    2798:	97 89       	ldd	r25, Z+23	; 0x17
    279a:	17 96       	adiw	r26, 0x07	; 7
    279c:	9c 93       	st	X, r25
    279e:	8e 93       	st	-X, r24
    27a0:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
    27a2:	f9 01       	movw	r30, r18
    27a4:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    27a6:	c7 01       	movw	r24, r14
    27a8:	0e 94 30 11 	call	0x2260	; 0x2260 <dir_next>
				if (res == FR_NO_FILE) {
    27ac:	83 30       	cpi	r24, 0x03	; 3
    27ae:	41 f4       	brne	.+16     	; 0x27c0 <pf_readdir+0x198>
					dj->sect = 0;
    27b0:	d7 01       	movw	r26, r14
    27b2:	1c 96       	adiw	r26, 0x0c	; 12
    27b4:	1d 92       	st	X+, r1
    27b6:	1d 92       	st	X+, r1
    27b8:	1d 92       	st	X+, r1
    27ba:	1c 92       	st	X, r1
    27bc:	1f 97       	sbiw	r26, 0x0f	; 15
    27be:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
    27c0:	ac 96       	adiw	r28, 0x2c	; 44
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	df 90       	pop	r13
    27da:	cf 90       	pop	r12
    27dc:	bf 90       	pop	r11
    27de:	af 90       	pop	r10
    27e0:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    27e2:	83 e0       	ldi	r24, 0x03	; 3
    27e4:	84 cf       	rjmp	.-248    	; 0x26ee <pf_readdir+0xc6>

000027e6 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    27e6:	6f 92       	push	r6
    27e8:	7f 92       	push	r7
    27ea:	8f 92       	push	r8
    27ec:	9f 92       	push	r9
    27ee:	af 92       	push	r10
    27f0:	bf 92       	push	r11
    27f2:	cf 92       	push	r12
    27f4:	df 92       	push	r13
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	0f 93       	push	r16
    27fc:	1f 93       	push	r17
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	ec 01       	movw	r28, r24
    2804:	6b 01       	movw	r12, r22
    2806:	7a 01       	movw	r14, r20
    2808:	03 c0       	rjmp	.+6      	; 0x2810 <follow_path+0x2a>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    280a:	08 94       	sec
    280c:	e1 1c       	adc	r14, r1
    280e:	f1 1c       	adc	r15, r1
    2810:	f7 01       	movw	r30, r14
    2812:	80 81       	ld	r24, Z
    2814:	80 32       	cpi	r24, 0x20	; 32
    2816:	c9 f3       	breq	.-14     	; 0x280a <follow_path+0x24>
	if (*path == '/') path++;			/* Strip heading separator */
    2818:	8f 32       	cpi	r24, 0x2F	; 47
    281a:	19 f4       	brne	.+6      	; 0x2822 <follow_path+0x3c>
    281c:	08 94       	sec
    281e:	e1 1c       	adc	r14, r1
    2820:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    2822:	1c 82       	std	Y+4, r1	; 0x04
    2824:	1d 82       	std	Y+5, r1	; 0x05
    2826:	1e 82       	std	Y+6, r1	; 0x06
    2828:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    282a:	f7 01       	movw	r30, r14
    282c:	80 81       	ld	r24, Z
    282e:	81 32       	cpi	r24, 0x21	; 33
    2830:	38 f4       	brcc	.+14     	; 0x2840 <follow_path+0x5a>
		res = dir_rewind(dj);
    2832:	ce 01       	movw	r24, r28
    2834:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <dir_rewind>
    2838:	b8 2e       	mov	r11, r24
		dir[0] = 0;
    283a:	f6 01       	movw	r30, r12
    283c:	10 82       	st	Z, r1
    283e:	a5 c0       	rjmp	.+330    	; 0x298a <follow_path+0x1a4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    2840:	a0 e2       	ldi	r26, 0x20	; 32
    2842:	6a 2e       	mov	r6, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    2844:	77 24       	eor	r7, r7
    2846:	73 94       	inc	r7
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2848:	fb e0       	ldi	r31, 0x0B	; 11
    284a:	8f 2e       	mov	r8, r31
    284c:	91 2c       	mov	r9, r1
    284e:	8c 0c       	add	r8, r12
    2850:	9d 1c       	adc	r9, r13
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    2852:	aa 81       	ldd	r26, Y+2	; 0x02
    2854:	bb 81       	ldd	r27, Y+3	; 0x03
    2856:	fd 01       	movw	r30, r26
    2858:	8b e0       	ldi	r24, 0x0B	; 11
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <follow_path+0x7a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    285e:	61 92       	st	Z+, r6
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	2f ef       	ldi	r18, 0xFF	; 255
    2864:	8f 3f       	cpi	r24, 0xFF	; 255
    2866:	92 07       	cpc	r25, r18
    2868:	d1 f7       	brne	.-12     	; 0x285e <follow_path+0x78>
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	aa 24       	eor	r10, r10
    286e:	38 e0       	ldi	r19, 0x08	; 8
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <follow_path+0x90>
    2872:	28 e0       	ldi	r18, 0x08	; 8
    2874:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    2876:	f7 01       	movw	r30, r14
    2878:	ea 0d       	add	r30, r10
    287a:	f1 1d       	adc	r31, r1
    287c:	90 81       	ld	r25, Z
    287e:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    2880:	91 32       	cpi	r25, 0x21	; 33
    2882:	b0 f0       	brcs	.+44     	; 0x28b0 <follow_path+0xca>
    2884:	9f 32       	cpi	r25, 0x2F	; 47
    2886:	a1 f0       	breq	.+40     	; 0x28b0 <follow_path+0xca>
		if (c == '.' || i >= ni) {
    2888:	9e 32       	cpi	r25, 0x2E	; 46
    288a:	11 f0       	breq	.+4      	; 0x2890 <follow_path+0xaa>
    288c:	23 17       	cp	r18, r19
    288e:	28 f0       	brcs	.+10     	; 0x289a <follow_path+0xb4>
			if (ni != 8 || c != '.') break;
    2890:	38 30       	cpi	r19, 0x08	; 8
    2892:	71 f4       	brne	.+28     	; 0x28b0 <follow_path+0xca>
    2894:	9e 32       	cpi	r25, 0x2E	; 46
    2896:	69 f3       	breq	.-38     	; 0x2872 <follow_path+0x8c>
    2898:	0b c0       	rjmp	.+22     	; 0x28b0 <follow_path+0xca>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    289a:	89 2f       	mov	r24, r25
    289c:	81 56       	subi	r24, 0x61	; 97
    289e:	8a 31       	cpi	r24, 0x1A	; 26
    28a0:	08 f4       	brcc	.+2      	; 0x28a4 <follow_path+0xbe>
    28a2:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    28a4:	fd 01       	movw	r30, r26
    28a6:	e2 0f       	add	r30, r18
    28a8:	f1 1d       	adc	r31, r1
    28aa:	90 83       	st	Z, r25
    28ac:	2f 5f       	subi	r18, 0xFF	; 255
    28ae:	e3 cf       	rjmp	.-58     	; 0x2876 <follow_path+0x90>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    28b0:	1b 96       	adiw	r26, 0x0b	; 11
    28b2:	1c 92       	st	X, r1
    28b4:	1b 97       	sbiw	r26, 0x0b	; 11
    28b6:	91 32       	cpi	r25, 0x21	; 33
    28b8:	10 f4       	brcc	.+4      	; 0x28be <follow_path+0xd8>
    28ba:	1b 96       	adiw	r26, 0x0b	; 11
    28bc:	7c 92       	st	X, r7
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    28be:	ce 01       	movw	r24, r28
    28c0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <dir_rewind>
    28c4:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
    28c6:	88 23       	and	r24, r24
    28c8:	d1 f5       	brne	.+116    	; 0x293e <follow_path+0x158>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    28ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    28cc:	5d 85       	ldd	r21, Y+13	; 0x0d
    28ce:	6e 85       	ldd	r22, Y+14	; 0x0e
    28d0:	7f 85       	ldd	r23, Y+15	; 0x0f
    28d2:	28 81       	ld	r18, Y
    28d4:	39 81       	ldd	r19, Y+1	; 0x01
    28d6:	2f 70       	andi	r18, 0x0F	; 15
    28d8:	30 70       	andi	r19, 0x00	; 0
    28da:	e5 e0       	ldi	r30, 0x05	; 5
    28dc:	22 0f       	add	r18, r18
    28de:	33 1f       	adc	r19, r19
    28e0:	ea 95       	dec	r30
    28e2:	e1 f7       	brne	.-8      	; 0x28dc <follow_path+0xf6>
    28e4:	c6 01       	movw	r24, r12
    28e6:	00 e2       	ldi	r16, 0x20	; 32
    28e8:	10 e0       	ldi	r17, 0x00	; 0
    28ea:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    28ee:	88 23       	and	r24, r24
    28f0:	11 f0       	breq	.+4      	; 0x28f6 <follow_path+0x110>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	23 c0       	rjmp	.+70     	; 0x293c <follow_path+0x156>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    28f6:	f6 01       	movw	r30, r12
    28f8:	80 81       	ld	r24, Z
    28fa:	88 23       	and	r24, r24
    28fc:	09 f4       	brne	.+2      	; 0x2900 <follow_path+0x11a>
    28fe:	55 c0       	rjmp	.+170    	; 0x29aa <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    2900:	f4 01       	movw	r30, r8
    2902:	80 81       	ld	r24, Z
    2904:	83 fd       	sbrc	r24, 3
    2906:	15 c0       	rjmp	.+42     	; 0x2932 <follow_path+0x14c>
    2908:	d6 01       	movw	r26, r12
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	9b 81       	ldd	r25, Y+3	; 0x03
    290e:	9c 01       	movw	r18, r24
    2910:	f9 01       	movw	r30, r18
    2912:	2b e0       	ldi	r18, 0x0B	; 11
    2914:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2916:	21 50       	subi	r18, 0x01	; 1
    2918:	30 40       	sbci	r19, 0x00	; 0
    291a:	8f ef       	ldi	r24, 0xFF	; 255
    291c:	2f 3f       	cpi	r18, 0xFF	; 255
    291e:	38 07       	cpc	r19, r24
    2920:	09 f4       	brne	.+2      	; 0x2924 <follow_path+0x13e>
    2922:	46 c0       	rjmp	.+140    	; 0x29b0 <follow_path+0x1ca>
    2924:	9c 91       	ld	r25, X
    2926:	80 81       	ld	r24, Z
    2928:	98 17       	cp	r25, r24
    292a:	19 f4       	brne	.+6      	; 0x2932 <follow_path+0x14c>
    292c:	11 96       	adiw	r26, 0x01	; 1
    292e:	31 96       	adiw	r30, 0x01	; 1
    2930:	f2 cf       	rjmp	.-28     	; 0x2916 <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    2932:	ce 01       	movw	r24, r28
    2934:	0e 94 30 11 	call	0x2260	; 0x2260 <dir_next>
	} while (res == FR_OK);
    2938:	88 23       	and	r24, r24
    293a:	39 f2       	breq	.-114    	; 0x28ca <follow_path+0xe4>
    293c:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    293e:	e3 e0       	ldi	r30, 0x03	; 3
    2940:	be 16       	cp	r11, r30
    2942:	19 f5       	brne	.+70     	; 0x298a <follow_path+0x1a4>
    2944:	ea 81       	ldd	r30, Y+2	; 0x02
    2946:	fb 81       	ldd	r31, Y+3	; 0x03
    2948:	83 85       	ldd	r24, Z+11	; 0x0b
    294a:	88 23       	and	r24, r24
    294c:	e1 f0       	breq	.+56     	; 0x2986 <follow_path+0x1a0>
    294e:	1d c0       	rjmp	.+58     	; 0x298a <follow_path+0x1a4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    2950:	f4 01       	movw	r30, r8
    2952:	80 81       	ld	r24, Z
    2954:	84 ff       	sbrs	r24, 4
    2956:	17 c0       	rjmp	.+46     	; 0x2986 <follow_path+0x1a0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    2958:	ea 0c       	add	r14, r10
    295a:	f1 1c       	adc	r15, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    295c:	f6 01       	movw	r30, r12
    295e:	84 89       	ldd	r24, Z+20	; 0x14
    2960:	95 89       	ldd	r25, Z+21	; 0x15
    2962:	a0 e0       	ldi	r26, 0x00	; 0
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	dc 01       	movw	r26, r24
    2968:	99 27       	eor	r25, r25
    296a:	88 27       	eor	r24, r24
    296c:	22 8d       	ldd	r18, Z+26	; 0x1a
    296e:	33 8d       	ldd	r19, Z+27	; 0x1b
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	82 2b       	or	r24, r18
    2976:	93 2b       	or	r25, r19
    2978:	a4 2b       	or	r26, r20
    297a:	b5 2b       	or	r27, r21
    297c:	8c 83       	std	Y+4, r24	; 0x04
    297e:	9d 83       	std	Y+5, r25	; 0x05
    2980:	ae 83       	std	Y+6, r26	; 0x06
    2982:	bf 83       	std	Y+7, r27	; 0x07
    2984:	66 cf       	rjmp	.-308    	; 0x2852 <follow_path+0x6c>
		}
    2986:	94 e0       	ldi	r25, 0x04	; 4
    2988:	b9 2e       	mov	r11, r25
	}

	return res;
}
    298a:	8b 2d       	mov	r24, r11
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	ff 90       	pop	r15
    2996:	ef 90       	pop	r14
    2998:	df 90       	pop	r13
    299a:	cf 90       	pop	r12
    299c:	bf 90       	pop	r11
    299e:	af 90       	pop	r10
    29a0:	9f 90       	pop	r9
    29a2:	8f 90       	pop	r8
    29a4:	7f 90       	pop	r7
    29a6:	6f 90       	pop	r6
    29a8:	08 95       	ret
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    29aa:	83 e0       	ldi	r24, 0x03	; 3
    29ac:	b8 2e       	mov	r11, r24
    29ae:	ca cf       	rjmp	.-108    	; 0x2944 <follow_path+0x15e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    29b0:	ea 81       	ldd	r30, Y+2	; 0x02
    29b2:	fb 81       	ldd	r31, Y+3	; 0x03
    29b4:	83 85       	ldd	r24, Z+11	; 0x0b
    29b6:	88 23       	and	r24, r24
    29b8:	59 f2       	breq	.-106    	; 0x2950 <follow_path+0x16a>
    29ba:	e7 cf       	rjmp	.-50     	; 0x298a <follow_path+0x1a4>

000029bc <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    29bc:	ef 92       	push	r14
    29be:	ff 92       	push	r15
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	ac 97       	sbiw	r28, 0x2c	; 44
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	8c 01       	movw	r16, r24
    29da:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    29dc:	80 91 ca 00 	lds	r24, 0x00CA
    29e0:	90 91 cb 00 	lds	r25, 0x00CB
    29e4:	89 2b       	or	r24, r25
    29e6:	11 f4       	brne	.+4      	; 0x29ec <pf_opendir+0x30>
    29e8:	86 e0       	ldi	r24, 0x06	; 6
    29ea:	31 c0       	rjmp	.+98     	; 0x2a4e <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    29ec:	ce 01       	movw	r24, r28
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	f8 01       	movw	r30, r16
    29f2:	93 83       	std	Z+3, r25	; 0x03
    29f4:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    29f6:	3d e0       	ldi	r19, 0x0D	; 13
    29f8:	e3 2e       	mov	r14, r19
    29fa:	f1 2c       	mov	r15, r1
    29fc:	ec 0e       	add	r14, r28
    29fe:	fd 1e       	adc	r15, r29
    2a00:	c8 01       	movw	r24, r16
    2a02:	b7 01       	movw	r22, r14
    2a04:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    2a08:	88 23       	and	r24, r24
    2a0a:	f1 f4       	brne	.+60     	; 0x2a48 <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
    2a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0e:	88 23       	and	r24, r24
    2a10:	c1 f0       	breq	.+48     	; 0x2a42 <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    2a12:	88 8d       	ldd	r24, Y+24	; 0x18
    2a14:	84 ff       	sbrs	r24, 4
    2a16:	1a c0       	rjmp	.+52     	; 0x2a4c <pf_opendir+0x90>
					dj->sclust = LD_CLUST(dir);
    2a18:	f7 01       	movw	r30, r14
    2a1a:	84 89       	ldd	r24, Z+20	; 0x14
    2a1c:	95 89       	ldd	r25, Z+21	; 0x15
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	dc 01       	movw	r26, r24
    2a24:	99 27       	eor	r25, r25
    2a26:	88 27       	eor	r24, r24
    2a28:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a2a:	33 8d       	ldd	r19, Z+27	; 0x1b
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	82 2b       	or	r24, r18
    2a32:	93 2b       	or	r25, r19
    2a34:	a4 2b       	or	r26, r20
    2a36:	b5 2b       	or	r27, r21
    2a38:	f8 01       	movw	r30, r16
    2a3a:	84 83       	std	Z+4, r24	; 0x04
    2a3c:	95 83       	std	Z+5, r25	; 0x05
    2a3e:	a6 83       	std	Z+6, r26	; 0x06
    2a40:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    2a42:	c8 01       	movw	r24, r16
    2a44:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2a48:	83 30       	cpi	r24, 0x03	; 3
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <pf_opendir+0x92>
    2a4c:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    2a4e:	ac 96       	adiw	r28, 0x2c	; 44
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	08 95       	ret

00002a68 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	ec 97       	sbiw	r28, 0x3c	; 60
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    2a86:	00 91 ca 00 	lds	r16, 0x00CA
    2a8a:	10 91 cb 00 	lds	r17, 0x00CB


	if (!fs)						/* Check file system */
    2a8e:	01 15       	cp	r16, r1
    2a90:	11 05       	cpc	r17, r1
    2a92:	11 f4       	brne	.+4      	; 0x2a98 <pf_open+0x30>
    2a94:	66 e0       	ldi	r22, 0x06	; 6
    2a96:	40 c0       	rjmp	.+128    	; 0x2b18 <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    2a98:	f8 01       	movw	r30, r16
    2a9a:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	98 8b       	std	Y+16, r25	; 0x10
    2aa2:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    2aa4:	6d e1       	ldi	r22, 0x1D	; 29
    2aa6:	e6 2e       	mov	r14, r22
    2aa8:	f1 2c       	mov	r15, r1
    2aaa:	ec 0e       	add	r14, r28
    2aac:	fd 1e       	adc	r15, r29
    2aae:	ce 01       	movw	r24, r28
    2ab0:	0d 96       	adiw	r24, 0x0d	; 13
    2ab2:	b7 01       	movw	r22, r14
    2ab4:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <follow_path>
    2ab8:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    2aba:	88 23       	and	r24, r24
    2abc:	69 f5       	brne	.+90     	; 0x2b18 <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    2abe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac0:	88 23       	and	r24, r24
    2ac2:	49 f1       	breq	.+82     	; 0x2b16 <pf_open+0xae>
    2ac4:	88 a5       	ldd	r24, Y+40	; 0x28
    2ac6:	84 fd       	sbrc	r24, 4
    2ac8:	26 c0       	rjmp	.+76     	; 0x2b16 <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    2aca:	f7 01       	movw	r30, r14
    2acc:	84 89       	ldd	r24, Z+20	; 0x14
    2ace:	95 89       	ldd	r25, Z+21	; 0x15
    2ad0:	a0 e0       	ldi	r26, 0x00	; 0
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	99 27       	eor	r25, r25
    2ad8:	88 27       	eor	r24, r24
    2ada:	22 8d       	ldd	r18, Z+26	; 0x1a
    2adc:	33 8d       	ldd	r19, Z+27	; 0x1b
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	82 2b       	or	r24, r18
    2ae4:	93 2b       	or	r25, r19
    2ae6:	a4 2b       	or	r26, r20
    2ae8:	b5 2b       	or	r27, r21
    2aea:	f8 01       	movw	r30, r16
    2aec:	86 8f       	std	Z+30, r24	; 0x1e
    2aee:	97 8f       	std	Z+31, r25	; 0x1f
    2af0:	a0 a3       	std	Z+32, r26	; 0x20
    2af2:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2af4:	f7 01       	movw	r30, r14
    2af6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2af8:	95 8d       	ldd	r25, Z+29	; 0x1d
    2afa:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2afc:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2afe:	f8 01       	movw	r30, r16
    2b00:	82 8f       	std	Z+26, r24	; 0x1a
    2b02:	93 8f       	std	Z+27, r25	; 0x1b
    2b04:	a4 8f       	std	Z+28, r26	; 0x1c
    2b06:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    2b08:	16 8a       	std	Z+22, r1	; 0x16
    2b0a:	17 8a       	std	Z+23, r1	; 0x17
    2b0c:	10 8e       	std	Z+24, r1	; 0x18
    2b0e:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	81 83       	std	Z+1, r24	; 0x01
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <pf_open+0xb0>

	return FR_OK;
    2b16:	63 e0       	ldi	r22, 0x03	; 3
}
    2b18:	86 2f       	mov	r24, r22
    2b1a:	ec 96       	adiw	r28, 0x3c	; 60
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	08 95       	ret

00002b34 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    2b34:	4f 92       	push	r4
    2b36:	5f 92       	push	r5
    2b38:	6f 92       	push	r6
    2b3a:	7f 92       	push	r7
    2b3c:	8f 92       	push	r8
    2b3e:	9f 92       	push	r9
    2b40:	af 92       	push	r10
    2b42:	bf 92       	push	r11
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	3c 01       	movw	r6, r24
    2b56:	6b 01       	movw	r12, r22
    2b58:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    2b5a:	c0 91 ca 00 	lds	r28, 0x00CA
    2b5e:	d0 91 cb 00 	lds	r29, 0x00CB


	*br = 0;
    2b62:	fa 01       	movw	r30, r20
    2b64:	11 82       	std	Z+1, r1	; 0x01
    2b66:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    2b68:	20 97       	sbiw	r28, 0x00	; 0
    2b6a:	11 f4       	brne	.+4      	; 0x2b70 <pf_read+0x3c>
    2b6c:	86 e0       	ldi	r24, 0x06	; 6
    2b6e:	ca c0       	rjmp	.+404    	; 0x2d04 <pf_read+0x1d0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	80 fd       	sbrc	r24, 0
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <pf_read+0x46>
    2b76:	85 e0       	ldi	r24, 0x05	; 5
    2b78:	c5 c0       	rjmp	.+394    	; 0x2d04 <pf_read+0x1d0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    2b7a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2b7c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2b7e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2b80:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2b82:	8e 89       	ldd	r24, Y+22	; 0x16
    2b84:	9f 89       	ldd	r25, Y+23	; 0x17
    2b86:	a8 8d       	ldd	r26, Y+24	; 0x18
    2b88:	b9 8d       	ldd	r27, Y+25	; 0x19
    2b8a:	28 1b       	sub	r18, r24
    2b8c:	39 0b       	sbc	r19, r25
    2b8e:	4a 0b       	sbc	r20, r26
    2b90:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    2b92:	cb 01       	movw	r24, r22
    2b94:	a0 e0       	ldi	r26, 0x00	; 0
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	28 17       	cp	r18, r24
    2b9a:	39 07       	cpc	r19, r25
    2b9c:	4a 07       	cpc	r20, r26
    2b9e:	5b 07       	cpc	r21, r27
    2ba0:	08 f4       	brcc	.+2      	; 0x2ba4 <pf_read+0x70>
    2ba2:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    2ba4:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    2ba6:	41 2c       	mov	r4, r1
    2ba8:	e2 e0       	ldi	r30, 0x02	; 2
    2baa:	5e 2e       	mov	r5, r30
    2bac:	a3 c0       	rjmp	.+326    	; 0x2cf4 <pf_read+0x1c0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    2bae:	2e 89       	ldd	r18, Y+22	; 0x16
    2bb0:	3f 89       	ldd	r19, Y+23	; 0x17
    2bb2:	48 8d       	ldd	r20, Y+24	; 0x18
    2bb4:	59 8d       	ldd	r21, Y+25	; 0x19
    2bb6:	da 01       	movw	r26, r20
    2bb8:	c9 01       	movw	r24, r18
    2bba:	91 70       	andi	r25, 0x01	; 1
    2bbc:	a0 70       	andi	r26, 0x00	; 0
    2bbe:	b0 70       	andi	r27, 0x00	; 0
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	a1 05       	cpc	r26, r1
    2bc4:	b1 05       	cpc	r27, r1
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <pf_read+0x96>
    2bc8:	60 c0       	rjmp	.+192    	; 0x2c8a <pf_read+0x156>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    2bca:	da 01       	movw	r26, r20
    2bcc:	c9 01       	movw	r24, r18
    2bce:	79 e0       	ldi	r23, 0x09	; 9
    2bd0:	b6 95       	lsr	r27
    2bd2:	a7 95       	ror	r26
    2bd4:	97 95       	ror	r25
    2bd6:	87 95       	ror	r24
    2bd8:	7a 95       	dec	r23
    2bda:	d1 f7       	brne	.-12     	; 0x2bd0 <pf_read+0x9c>
    2bdc:	fa 80       	ldd	r15, Y+2	; 0x02
    2bde:	fa 94       	dec	r15
    2be0:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    2be2:	d1 f4       	brne	.+52     	; 0x2c18 <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    2be4:	21 15       	cp	r18, r1
    2be6:	31 05       	cpc	r19, r1
    2be8:	41 05       	cpc	r20, r1
    2bea:	51 05       	cpc	r21, r1
    2bec:	29 f4       	brne	.+10     	; 0x2bf8 <pf_read+0xc4>
    2bee:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2bf0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2bf2:	88 a1       	ldd	r24, Y+32	; 0x20
    2bf4:	99 a1       	ldd	r25, Y+33	; 0x21
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <pf_read+0xd0>
    2bf8:	6a a1       	ldd	r22, Y+34	; 0x22
    2bfa:	7b a1       	ldd	r23, Y+35	; 0x23
    2bfc:	8c a1       	ldd	r24, Y+36	; 0x24
    2bfe:	9d a1       	ldd	r25, Y+37	; 0x25
    2c00:	0e 94 44 10 	call	0x2088	; 0x2088 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    2c04:	62 30       	cpi	r22, 0x02	; 2
    2c06:	71 05       	cpc	r23, r1
    2c08:	81 05       	cpc	r24, r1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	08 f4       	brcc	.+2      	; 0x2c10 <pf_read+0xdc>
    2c0e:	78 c0       	rjmp	.+240    	; 0x2d00 <pf_read+0x1cc>
				fs->curr_clust = clst;				/* Update current cluster */
    2c10:	6a a3       	std	Y+34, r22	; 0x22
    2c12:	7b a3       	std	Y+35, r23	; 0x23
    2c14:	8c a3       	std	Y+36, r24	; 0x24
    2c16:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2c18:	00 91 ca 00 	lds	r16, 0x00CA
    2c1c:	10 91 cb 00 	lds	r17, 0x00CB


	clst -= 2;
    2c20:	2a a1       	ldd	r18, Y+34	; 0x22
    2c22:	3b a1       	ldd	r19, Y+35	; 0x23
    2c24:	4c a1       	ldd	r20, Y+36	; 0x24
    2c26:	5d a1       	ldd	r21, Y+37	; 0x25
    2c28:	22 50       	subi	r18, 0x02	; 2
    2c2a:	30 40       	sbci	r19, 0x00	; 0
    2c2c:	40 40       	sbci	r20, 0x00	; 0
    2c2e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2c30:	f8 01       	movw	r30, r16
    2c32:	86 81       	ldd	r24, Z+6	; 0x06
    2c34:	97 81       	ldd	r25, Z+7	; 0x07
    2c36:	a0 85       	ldd	r26, Z+8	; 0x08
    2c38:	b1 85       	ldd	r27, Z+9	; 0x09
    2c3a:	02 97       	sbiw	r24, 0x02	; 2
    2c3c:	a1 09       	sbc	r26, r1
    2c3e:	b1 09       	sbc	r27, r1
    2c40:	28 17       	cp	r18, r24
    2c42:	39 07       	cpc	r19, r25
    2c44:	4a 07       	cpc	r20, r26
    2c46:	5b 07       	cpc	r21, r27
    2c48:	08 f0       	brcs	.+2      	; 0x2c4c <pf_read+0x118>
    2c4a:	5a c0       	rjmp	.+180    	; 0x2d00 <pf_read+0x1cc>
	return (DWORD)clst * fs->csize + fs->database;
    2c4c:	62 81       	ldd	r22, Z+2	; 0x02
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    2c58:	9b 01       	movw	r18, r22
    2c5a:	ac 01       	movw	r20, r24
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	82 89       	ldd	r24, Z+18	; 0x12
    2c60:	93 89       	ldd	r25, Z+19	; 0x13
    2c62:	a4 89       	ldd	r26, Z+20	; 0x14
    2c64:	b5 89       	ldd	r27, Z+21	; 0x15
    2c66:	28 0f       	add	r18, r24
    2c68:	39 1f       	adc	r19, r25
    2c6a:	4a 1f       	adc	r20, r26
    2c6c:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    2c6e:	21 15       	cp	r18, r1
    2c70:	31 05       	cpc	r19, r1
    2c72:	41 05       	cpc	r20, r1
    2c74:	51 05       	cpc	r21, r1
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <pf_read+0x146>
    2c78:	43 c0       	rjmp	.+134    	; 0x2d00 <pf_read+0x1cc>
			fs->dsect = sect + cs;
    2c7a:	2f 0d       	add	r18, r15
    2c7c:	31 1d       	adc	r19, r1
    2c7e:	41 1d       	adc	r20, r1
    2c80:	51 1d       	adc	r21, r1
    2c82:	2e a3       	std	Y+38, r18	; 0x26
    2c84:	3f a3       	std	Y+39, r19	; 0x27
    2c86:	48 a7       	std	Y+40, r20	; 0x28
    2c88:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    2c8a:	2e 89       	ldd	r18, Y+22	; 0x16
    2c8c:	3f 89       	ldd	r19, Y+23	; 0x17
    2c8e:	31 70       	andi	r19, 0x01	; 1
    2c90:	c2 01       	movw	r24, r4
    2c92:	82 1b       	sub	r24, r18
    2c94:	93 0b       	sbc	r25, r19
    2c96:	76 01       	movw	r14, r12
    2c98:	8c 15       	cp	r24, r12
    2c9a:	9d 05       	cpc	r25, r13
    2c9c:	08 f4       	brcc	.+2      	; 0x2ca0 <pf_read+0x16c>
    2c9e:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    2ca0:	61 14       	cp	r6, r1
    2ca2:	71 04       	cpc	r7, r1
    2ca4:	19 f4       	brne	.+6      	; 0x2cac <pf_read+0x178>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	01 c0       	rjmp	.+2      	; 0x2cae <pf_read+0x17a>
    2cac:	c5 01       	movw	r24, r10
    2cae:	4e a1       	ldd	r20, Y+38	; 0x26
    2cb0:	5f a1       	ldd	r21, Y+39	; 0x27
    2cb2:	68 a5       	ldd	r22, Y+40	; 0x28
    2cb4:	79 a5       	ldd	r23, Y+41	; 0x29
    2cb6:	87 01       	movw	r16, r14
    2cb8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
		if (dr) goto fr_abort;
    2cbc:	88 23       	and	r24, r24
    2cbe:	01 f5       	brne	.+64     	; 0x2d00 <pf_read+0x1cc>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    2cc0:	c7 01       	movw	r24, r14
    2cc2:	a0 e0       	ldi	r26, 0x00	; 0
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	2e 89       	ldd	r18, Y+22	; 0x16
    2cc8:	3f 89       	ldd	r19, Y+23	; 0x17
    2cca:	48 8d       	ldd	r20, Y+24	; 0x18
    2ccc:	59 8d       	ldd	r21, Y+25	; 0x19
    2cce:	28 0f       	add	r18, r24
    2cd0:	39 1f       	adc	r19, r25
    2cd2:	4a 1f       	adc	r20, r26
    2cd4:	5b 1f       	adc	r21, r27
    2cd6:	2e 8b       	std	Y+22, r18	; 0x16
    2cd8:	3f 8b       	std	Y+23, r19	; 0x17
    2cda:	48 8f       	std	Y+24, r20	; 0x18
    2cdc:	59 8f       	std	Y+25, r21	; 0x19
    2cde:	ae 0c       	add	r10, r14
    2ce0:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    2ce2:	ce 18       	sub	r12, r14
    2ce4:	df 08       	sbc	r13, r15
    2ce6:	f4 01       	movw	r30, r8
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	8e 0d       	add	r24, r14
    2cee:	9f 1d       	adc	r25, r15
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    2cf4:	c1 14       	cp	r12, r1
    2cf6:	d1 04       	cpc	r13, r1
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <pf_read+0x1c8>
    2cfa:	59 cf       	rjmp	.-334    	; 0x2bae <pf_read+0x7a>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <pf_read+0x1d0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    2d00:	19 82       	std	Y+1, r1	; 0x01
    2d02:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	1f 91       	pop	r17
    2d0a:	0f 91       	pop	r16
    2d0c:	ff 90       	pop	r15
    2d0e:	ef 90       	pop	r14
    2d10:	df 90       	pop	r13
    2d12:	cf 90       	pop	r12
    2d14:	bf 90       	pop	r11
    2d16:	af 90       	pop	r10
    2d18:	9f 90       	pop	r9
    2d1a:	8f 90       	pop	r8
    2d1c:	7f 90       	pop	r7
    2d1e:	6f 90       	pop	r6
    2d20:	5f 90       	pop	r5
    2d22:	4f 90       	pop	r4
    2d24:	08 95       	ret

00002d26 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2d26:	af 92       	push	r10
    2d28:	bf 92       	push	r11
    2d2a:	cf 92       	push	r12
    2d2c:	df 92       	push	r13
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	b8 2e       	mov	r11, r24
    2d3c:	a9 2e       	mov	r10, r25
    2d3e:	6a 01       	movw	r12, r20
    2d40:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    2d42:	2e ef       	ldi	r18, 0xFE	; 254
    2d44:	31 e0       	ldi	r19, 0x01	; 1
    2d46:	02 e0       	ldi	r16, 0x02	; 2
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    2d4a:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    2d4e:	88 23       	and	r24, r24
    2d50:	11 f0       	breq	.+4      	; 0x2d56 <check_fs+0x30>
    2d52:	23 e0       	ldi	r18, 0x03	; 3
    2d54:	33 c0       	rjmp	.+102    	; 0x2dbc <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    2d56:	cb 2d       	mov	r28, r11
    2d58:	da 2d       	mov	r29, r10
    2d5a:	88 81       	ld	r24, Y
    2d5c:	99 81       	ldd	r25, Y+1	; 0x01
    2d5e:	85 55       	subi	r24, 0x55	; 85
    2d60:	9a 4a       	sbci	r25, 0xAA	; 170
    2d62:	11 f0       	breq	.+4      	; 0x2d68 <check_fs+0x42>
    2d64:	22 e0       	ldi	r18, 0x02	; 2
    2d66:	2a c0       	rjmp	.+84     	; 0x2dbc <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    2d68:	8b 2d       	mov	r24, r11
    2d6a:	9a 2d       	mov	r25, r10
    2d6c:	b7 01       	movw	r22, r14
    2d6e:	a6 01       	movw	r20, r12
    2d70:	26 e3       	ldi	r18, 0x36	; 54
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	02 e0       	ldi	r16, 0x02	; 2
    2d76:	10 e0       	ldi	r17, 0x00	; 0
    2d78:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    2d7c:	88 23       	and	r24, r24
    2d7e:	39 f4       	brne	.+14     	; 0x2d8e <check_fs+0x68>
    2d80:	88 81       	ld	r24, Y
    2d82:	99 81       	ldd	r25, Y+1	; 0x01
    2d84:	86 54       	subi	r24, 0x46	; 70
    2d86:	91 44       	sbci	r25, 0x41	; 65
    2d88:	11 f4       	brne	.+4      	; 0x2d8e <check_fs+0x68>
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	17 c0       	rjmp	.+46     	; 0x2dbc <check_fs+0x96>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    2d8e:	8b 2d       	mov	r24, r11
    2d90:	9a 2d       	mov	r25, r10
    2d92:	b7 01       	movw	r22, r14
    2d94:	a6 01       	movw	r20, r12
    2d96:	22 e5       	ldi	r18, 0x52	; 82
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	02 e0       	ldi	r16, 0x02	; 2
    2d9c:	10 e0       	ldi	r17, 0x00	; 0
    2d9e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    2da2:	88 23       	and	r24, r24
    2da4:	11 f0       	breq	.+4      	; 0x2daa <check_fs+0x84>
    2da6:	21 e0       	ldi	r18, 0x01	; 1
    2da8:	09 c0       	rjmp	.+18     	; 0x2dbc <check_fs+0x96>
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	88 81       	ld	r24, Y
    2dae:	99 81       	ldd	r25, Y+1	; 0x01
    2db0:	86 54       	subi	r24, 0x46	; 70
    2db2:	91 44       	sbci	r25, 0x41	; 65
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <check_fs+0x92>
    2db6:	21 e0       	ldi	r18, 0x01	; 1
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    2dbc:	82 2f       	mov	r24, r18
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	ff 90       	pop	r15
    2dc8:	ef 90       	pop	r14
    2dca:	df 90       	pop	r13
    2dcc:	cf 90       	pop	r12
    2dce:	bf 90       	pop	r11
    2dd0:	af 90       	pop	r10
    2dd2:	08 95       	ret

00002dd4 <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    2dd4:	4f 92       	push	r4
    2dd6:	5f 92       	push	r5
    2dd8:	6f 92       	push	r6
    2dda:	7f 92       	push	r7
    2ddc:	8f 92       	push	r8
    2dde:	9f 92       	push	r9
    2de0:	af 92       	push	r10
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	fc 01       	movw	r30, r24
    2df6:	5b 01       	movw	r10, r22
    2df8:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    2dfa:	c0 91 ca 00 	lds	r28, 0x00CA
    2dfe:	d0 91 cb 00 	lds	r29, 0x00CB


	*bw = 0;
    2e02:	da 01       	movw	r26, r20
    2e04:	1d 92       	st	X+, r1
    2e06:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    2e08:	20 97       	sbiw	r28, 0x00	; 0
    2e0a:	11 f4       	brne	.+4      	; 0x2e10 <pf_write+0x3c>
    2e0c:	86 e0       	ldi	r24, 0x06	; 6
    2e0e:	fd c0       	rjmp	.+506    	; 0x300a <pf_write+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	80 fd       	sbrc	r24, 0
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <pf_write+0x48>
    2e18:	85 e0       	ldi	r24, 0x05	; 5
    2e1a:	f7 c0       	rjmp	.+494    	; 0x300a <pf_write+0x236>
    2e1c:	80 74       	andi	r24, 0x40	; 64
    2e1e:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    2e20:	61 15       	cp	r22, r1
    2e22:	71 05       	cpc	r23, r1
    2e24:	89 f4       	brne	.+34     	; 0x2e48 <pf_write+0x74>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    2e26:	89 2b       	or	r24, r25
    2e28:	59 f0       	breq	.+22     	; 0x2e40 <pf_write+0x6c>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	50 e0       	ldi	r21, 0x00	; 0
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <disk_writep>
    2e3a:	88 23       	and	r24, r24
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <pf_write+0x6c>
    2e3e:	e3 c0       	rjmp	.+454    	; 0x3006 <pf_write+0x232>
		fs->flag &= ~FA__WIP;
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	8f 7b       	andi	r24, 0xBF	; 191
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	dd c0       	rjmp	.+442    	; 0x3002 <pf_write+0x22e>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    2e48:	89 2b       	or	r24, r25
    2e4a:	51 f4       	brne	.+20     	; 0x2e60 <pf_write+0x8c>
			fs->fptr &= 0xFFFFFE00;
    2e4c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e4e:	9f 89       	ldd	r25, Y+23	; 0x17
    2e50:	a8 8d       	ldd	r26, Y+24	; 0x18
    2e52:	b9 8d       	ldd	r27, Y+25	; 0x19
    2e54:	80 70       	andi	r24, 0x00	; 0
    2e56:	9e 7f       	andi	r25, 0xFE	; 254
    2e58:	8e 8b       	std	Y+22, r24	; 0x16
    2e5a:	9f 8b       	std	Y+23, r25	; 0x17
    2e5c:	a8 8f       	std	Y+24, r26	; 0x18
    2e5e:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    2e60:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2e62:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2e64:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2e66:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2e68:	8e 89       	ldd	r24, Y+22	; 0x16
    2e6a:	9f 89       	ldd	r25, Y+23	; 0x17
    2e6c:	a8 8d       	ldd	r26, Y+24	; 0x18
    2e6e:	b9 8d       	ldd	r27, Y+25	; 0x19
    2e70:	28 1b       	sub	r18, r24
    2e72:	39 0b       	sbc	r19, r25
    2e74:	4a 0b       	sbc	r20, r26
    2e76:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    2e78:	c5 01       	movw	r24, r10
    2e7a:	a0 e0       	ldi	r26, 0x00	; 0
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	28 17       	cp	r18, r24
    2e80:	39 07       	cpc	r19, r25
    2e82:	4a 07       	cpc	r20, r26
    2e84:	5b 07       	cpc	r21, r27
    2e86:	08 f4       	brcc	.+2      	; 0x2e8a <pf_write+0xb6>
    2e88:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    2e8a:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    2e8c:	41 2c       	mov	r4, r1
    2e8e:	a2 e0       	ldi	r26, 0x02	; 2
    2e90:	5a 2e       	mov	r5, r26
    2e92:	b3 c0       	rjmp	.+358    	; 0x2ffa <pf_write+0x226>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    2e94:	2e 89       	ldd	r18, Y+22	; 0x16
    2e96:	3f 89       	ldd	r19, Y+23	; 0x17
    2e98:	48 8d       	ldd	r20, Y+24	; 0x18
    2e9a:	59 8d       	ldd	r21, Y+25	; 0x19
    2e9c:	c9 01       	movw	r24, r18
    2e9e:	91 70       	andi	r25, 0x01	; 1
    2ea0:	89 2b       	or	r24, r25
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <pf_write+0xd2>
    2ea4:	6c c0       	rjmp	.+216    	; 0x2f7e <pf_write+0x1aa>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    2ea6:	da 01       	movw	r26, r20
    2ea8:	c9 01       	movw	r24, r18
    2eaa:	f9 e0       	ldi	r31, 0x09	; 9
    2eac:	b6 95       	lsr	r27
    2eae:	a7 95       	ror	r26
    2eb0:	97 95       	ror	r25
    2eb2:	87 95       	ror	r24
    2eb4:	fa 95       	dec	r31
    2eb6:	d1 f7       	brne	.-12     	; 0x2eac <pf_write+0xd8>
    2eb8:	fa 80       	ldd	r15, Y+2	; 0x02
    2eba:	fa 94       	dec	r15
    2ebc:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    2ebe:	d1 f4       	brne	.+52     	; 0x2ef4 <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    2ec0:	21 15       	cp	r18, r1
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	41 05       	cpc	r20, r1
    2ec6:	51 05       	cpc	r21, r1
    2ec8:	29 f4       	brne	.+10     	; 0x2ed4 <pf_write+0x100>
    2eca:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2ecc:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2ece:	88 a1       	ldd	r24, Y+32	; 0x20
    2ed0:	99 a1       	ldd	r25, Y+33	; 0x21
    2ed2:	06 c0       	rjmp	.+12     	; 0x2ee0 <pf_write+0x10c>
    2ed4:	6a a1       	ldd	r22, Y+34	; 0x22
    2ed6:	7b a1       	ldd	r23, Y+35	; 0x23
    2ed8:	8c a1       	ldd	r24, Y+36	; 0x24
    2eda:	9d a1       	ldd	r25, Y+37	; 0x25
    2edc:	0e 94 44 10 	call	0x2088	; 0x2088 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    2ee0:	62 30       	cpi	r22, 0x02	; 2
    2ee2:	71 05       	cpc	r23, r1
    2ee4:	81 05       	cpc	r24, r1
    2ee6:	91 05       	cpc	r25, r1
    2ee8:	08 f4       	brcc	.+2      	; 0x2eec <pf_write+0x118>
    2eea:	8d c0       	rjmp	.+282    	; 0x3006 <pf_write+0x232>
				fs->curr_clust = clst;				/* Update current cluster */
    2eec:	6a a3       	std	Y+34, r22	; 0x22
    2eee:	7b a3       	std	Y+35, r23	; 0x23
    2ef0:	8c a3       	std	Y+36, r24	; 0x24
    2ef2:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    2ef4:	00 91 ca 00 	lds	r16, 0x00CA
    2ef8:	10 91 cb 00 	lds	r17, 0x00CB


	clst -= 2;
    2efc:	2a a1       	ldd	r18, Y+34	; 0x22
    2efe:	3b a1       	ldd	r19, Y+35	; 0x23
    2f00:	4c a1       	ldd	r20, Y+36	; 0x24
    2f02:	5d a1       	ldd	r21, Y+37	; 0x25
    2f04:	22 50       	subi	r18, 0x02	; 2
    2f06:	30 40       	sbci	r19, 0x00	; 0
    2f08:	40 40       	sbci	r20, 0x00	; 0
    2f0a:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	86 81       	ldd	r24, Z+6	; 0x06
    2f10:	97 81       	ldd	r25, Z+7	; 0x07
    2f12:	a0 85       	ldd	r26, Z+8	; 0x08
    2f14:	b1 85       	ldd	r27, Z+9	; 0x09
    2f16:	02 97       	sbiw	r24, 0x02	; 2
    2f18:	a1 09       	sbc	r26, r1
    2f1a:	b1 09       	sbc	r27, r1
    2f1c:	28 17       	cp	r18, r24
    2f1e:	39 07       	cpc	r19, r25
    2f20:	4a 07       	cpc	r20, r26
    2f22:	5b 07       	cpc	r21, r27
    2f24:	08 f0       	brcs	.+2      	; 0x2f28 <pf_write+0x154>
    2f26:	6f c0       	rjmp	.+222    	; 0x3006 <pf_write+0x232>
	return (DWORD)clst * fs->csize + fs->database;
    2f28:	62 81       	ldd	r22, Z+2	; 0x02
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    2f34:	9b 01       	movw	r18, r22
    2f36:	ac 01       	movw	r20, r24
    2f38:	f8 01       	movw	r30, r16
    2f3a:	82 89       	ldd	r24, Z+18	; 0x12
    2f3c:	93 89       	ldd	r25, Z+19	; 0x13
    2f3e:	a4 89       	ldd	r26, Z+20	; 0x14
    2f40:	b5 89       	ldd	r27, Z+21	; 0x15
    2f42:	28 0f       	add	r18, r24
    2f44:	39 1f       	adc	r19, r25
    2f46:	4a 1f       	adc	r20, r26
    2f48:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    2f4a:	21 15       	cp	r18, r1
    2f4c:	31 05       	cpc	r19, r1
    2f4e:	41 05       	cpc	r20, r1
    2f50:	51 05       	cpc	r21, r1
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <pf_write+0x182>
    2f54:	58 c0       	rjmp	.+176    	; 0x3006 <pf_write+0x232>
			fs->dsect = sect + cs;
    2f56:	ba 01       	movw	r22, r20
    2f58:	a9 01       	movw	r20, r18
    2f5a:	4f 0d       	add	r20, r15
    2f5c:	51 1d       	adc	r21, r1
    2f5e:	61 1d       	adc	r22, r1
    2f60:	71 1d       	adc	r23, r1
    2f62:	4e a3       	std	Y+38, r20	; 0x26
    2f64:	5f a3       	std	Y+39, r21	; 0x27
    2f66:	68 a7       	std	Y+40, r22	; 0x28
    2f68:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <disk_writep>
    2f72:	88 23       	and	r24, r24
    2f74:	09 f0       	breq	.+2      	; 0x2f78 <pf_write+0x1a4>
    2f76:	47 c0       	rjmp	.+142    	; 0x3006 <pf_write+0x232>
			fs->flag |= FA__WIP;
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	80 64       	ori	r24, 0x40	; 64
    2f7c:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    2f7e:	8e 89       	ldd	r24, Y+22	; 0x16
    2f80:	9f 89       	ldd	r25, Y+23	; 0x17
    2f82:	91 70       	andi	r25, 0x01	; 1
    2f84:	92 01       	movw	r18, r4
    2f86:	28 1b       	sub	r18, r24
    2f88:	39 0b       	sbc	r19, r25
    2f8a:	65 01       	movw	r12, r10
    2f8c:	2a 15       	cp	r18, r10
    2f8e:	3b 05       	cpc	r19, r11
    2f90:	08 f4       	brcc	.+2      	; 0x2f94 <pf_write+0x1c0>
    2f92:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    2f94:	76 01       	movw	r14, r12
    2f96:	00 e0       	ldi	r16, 0x00	; 0
    2f98:	10 e0       	ldi	r17, 0x00	; 0
    2f9a:	c4 01       	movw	r24, r8
    2f9c:	b8 01       	movw	r22, r16
    2f9e:	a7 01       	movw	r20, r14
    2fa0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <disk_writep>
    2fa4:	88 23       	and	r24, r24
    2fa6:	79 f5       	brne	.+94     	; 0x3006 <pf_write+0x232>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    2fa8:	8e 89       	ldd	r24, Y+22	; 0x16
    2faa:	9f 89       	ldd	r25, Y+23	; 0x17
    2fac:	a8 8d       	ldd	r26, Y+24	; 0x18
    2fae:	b9 8d       	ldd	r27, Y+25	; 0x19
    2fb0:	8e 0d       	add	r24, r14
    2fb2:	9f 1d       	adc	r25, r15
    2fb4:	a0 1f       	adc	r26, r16
    2fb6:	b1 1f       	adc	r27, r17
    2fb8:	9c 01       	movw	r18, r24
    2fba:	8e 8b       	std	Y+22, r24	; 0x16
    2fbc:	9f 8b       	std	Y+23, r25	; 0x17
    2fbe:	a8 8f       	std	Y+24, r26	; 0x18
    2fc0:	b9 8f       	std	Y+25, r27	; 0x19
		btw -= wcnt; *bw += wcnt;
    2fc2:	d3 01       	movw	r26, r6
    2fc4:	8d 91       	ld	r24, X+
    2fc6:	9c 91       	ld	r25, X
    2fc8:	11 97       	sbiw	r26, 0x01	; 1
    2fca:	8c 0d       	add	r24, r12
    2fcc:	9d 1d       	adc	r25, r13
    2fce:	8d 93       	st	X+, r24
    2fd0:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    2fd2:	31 70       	andi	r19, 0x01	; 1
    2fd4:	23 2b       	or	r18, r19
    2fd6:	69 f4       	brne	.+26     	; 0x2ff2 <pf_write+0x21e>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	70 e0       	ldi	r23, 0x00	; 0
    2fe4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <disk_writep>
    2fe8:	88 23       	and	r24, r24
    2fea:	69 f4       	brne	.+26     	; 0x3006 <pf_write+0x232>
			fs->flag &= ~FA__WIP;
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	8f 7b       	andi	r24, 0xBF	; 191
    2ff0:	89 83       	std	Y+1, r24	; 0x01
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    2ff2:	8c 0c       	add	r8, r12
    2ff4:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    2ff6:	ac 18       	sub	r10, r12
    2ff8:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    2ffa:	a1 14       	cp	r10, r1
    2ffc:	b1 04       	cpc	r11, r1
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <pf_write+0x22e>
    3000:	49 cf       	rjmp	.-366    	; 0x2e94 <pf_write+0xc0>
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	02 c0       	rjmp	.+4      	; 0x300a <pf_write+0x236>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    3006:	19 82       	std	Y+1, r1	; 0x01
    3008:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	ff 90       	pop	r15
    3014:	ef 90       	pop	r14
    3016:	df 90       	pop	r13
    3018:	cf 90       	pop	r12
    301a:	bf 90       	pop	r11
    301c:	af 90       	pop	r10
    301e:	9f 90       	pop	r9
    3020:	8f 90       	pop	r8
    3022:	7f 90       	pop	r7
    3024:	6f 90       	pop	r6
    3026:	5f 90       	pop	r5
    3028:	4f 90       	pop	r4
    302a:	08 95       	ret

0000302c <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    302c:	6f 92       	push	r6
    302e:	7f 92       	push	r7
    3030:	8f 92       	push	r8
    3032:	9f 92       	push	r9
    3034:	af 92       	push	r10
    3036:	bf 92       	push	r11
    3038:	cf 92       	push	r12
    303a:	df 92       	push	r13
    303c:	ef 92       	push	r14
    303e:	ff 92       	push	r15
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	a4 97       	sbiw	r28, 0x24	; 36
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    305a:	10 92 cb 00 	sts	0x00CB, r1
    305e:	10 92 ca 00 	sts	0x00CA, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	09 f4       	brne	.+2      	; 0x3068 <pf_mount+0x3c>
    3066:	ec c0       	rjmp	.+472    	; 0x3240 <pf_mount+0x214>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    3068:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <disk_initialize>
    306c:	80 ff       	sbrs	r24, 0
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <pf_mount+0x48>
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	eb c0       	rjmp	.+470    	; 0x324a <pf_mount+0x21e>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    3074:	4e 01       	movw	r8, r28
    3076:	08 94       	sec
    3078:	81 1c       	adc	r8, r1
    307a:	91 1c       	adc	r9, r1
    307c:	c4 01       	movw	r24, r8
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	0e 94 93 16 	call	0x2d26	; 0x2d26 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    308a:	81 30       	cpi	r24, 0x01	; 1
    308c:	21 f0       	breq	.+8      	; 0x3096 <pf_mount+0x6a>
    308e:	cc 24       	eor	r12, r12
    3090:	dd 24       	eor	r13, r13
    3092:	76 01       	movw	r14, r12
    3094:	1b c0       	rjmp	.+54     	; 0x30cc <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    3096:	c4 01       	movw	r24, r8
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	50 e0       	ldi	r21, 0x00	; 0
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	70 e0       	ldi	r23, 0x00	; 0
    30a0:	2e eb       	ldi	r18, 0xBE	; 190
    30a2:	31 e0       	ldi	r19, 0x01	; 1
    30a4:	00 e1       	ldi	r16, 0x10	; 16
    30a6:	10 e0       	ldi	r17, 0x00	; 0
    30a8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    30ac:	88 23       	and	r24, r24
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <pf_mount+0x86>
    30b0:	c9 c0       	rjmp	.+402    	; 0x3244 <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	88 23       	and	r24, r24
    30b6:	09 f4       	brne	.+2      	; 0x30ba <pf_mount+0x8e>
    30b8:	c7 c0       	rjmp	.+398    	; 0x3248 <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    30ba:	c9 84       	ldd	r12, Y+9	; 0x09
    30bc:	da 84       	ldd	r13, Y+10	; 0x0a
    30be:	eb 84       	ldd	r14, Y+11	; 0x0b
    30c0:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    30c2:	c4 01       	movw	r24, r8
    30c4:	b7 01       	movw	r22, r14
    30c6:	a6 01       	movw	r20, r12
    30c8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    30cc:	83 30       	cpi	r24, 0x03	; 3
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <pf_mount+0xa6>
    30d0:	b9 c0       	rjmp	.+370    	; 0x3244 <pf_mount+0x218>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    30d2:	88 23       	and	r24, r24
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <pf_mount+0xac>
    30d6:	b8 c0       	rjmp	.+368    	; 0x3248 <pf_mount+0x21c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    30d8:	ce 01       	movw	r24, r28
    30da:	01 96       	adiw	r24, 0x01	; 1
    30dc:	b7 01       	movw	r22, r14
    30de:	a6 01       	movw	r20, r12
    30e0:	2d e0       	ldi	r18, 0x0D	; 13
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	04 e2       	ldi	r16, 0x24	; 36
    30e6:	10 e0       	ldi	r17, 0x00	; 0
    30e8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <disk_readp>
    30ec:	88 23       	and	r24, r24
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <pf_mount+0xc6>
    30f0:	a9 c0       	rjmp	.+338    	; 0x3244 <pf_mount+0x218>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    30f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    30f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    30f6:	bc 01       	movw	r22, r24
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    30fc:	61 15       	cp	r22, r1
    30fe:	71 05       	cpc	r23, r1
    3100:	81 05       	cpc	r24, r1
    3102:	91 05       	cpc	r25, r1
    3104:	21 f4       	brne	.+8      	; 0x310e <pf_mount+0xe2>
    3106:	68 8d       	ldd	r22, Y+24	; 0x18
    3108:	79 8d       	ldd	r23, Y+25	; 0x19
    310a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    310c:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    310e:	2c 81       	ldd	r18, Y+4	; 0x04
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	50 e0       	ldi	r21, 0x00	; 0
    3116:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    311a:	3b 01       	movw	r6, r22
    311c:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	9b 81       	ldd	r25, Y+3	; 0x03
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	c8 0e       	add	r12, r24
    3128:	d9 1e       	adc	r13, r25
    312a:	ea 1e       	adc	r14, r26
    312c:	fb 1e       	adc	r15, r27
    312e:	f5 01       	movw	r30, r10
    3130:	c2 86       	std	Z+10, r12	; 0x0a
    3132:	d3 86       	std	Z+11, r13	; 0x0b
    3134:	e4 86       	std	Z+12, r14	; 0x0c
    3136:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    313c:	2d 81       	ldd	r18, Y+5	; 0x05
    313e:	3e 81       	ldd	r19, Y+6	; 0x06
    3140:	35 83       	std	Z+5, r19	; 0x05
    3142:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    3144:	8f 81       	ldd	r24, Y+7	; 0x07
    3146:	98 85       	ldd	r25, Y+8	; 0x08
    3148:	7c 01       	movw	r14, r24
    314a:	00 e0       	ldi	r16, 0x00	; 0
    314c:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    314e:	e1 14       	cp	r14, r1
    3150:	f1 04       	cpc	r15, r1
    3152:	01 05       	cpc	r16, r1
    3154:	11 05       	cpc	r17, r1
    3156:	21 f4       	brne	.+8      	; 0x3160 <pf_mount+0x134>
    3158:	ec 88       	ldd	r14, Y+20	; 0x14
    315a:	fd 88       	ldd	r15, Y+21	; 0x15
    315c:	0e 89       	ldd	r16, Y+22	; 0x16
    315e:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	9b 81       	ldd	r25, Y+3	; 0x03
    3164:	a0 e0       	ldi	r26, 0x00	; 0
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e8 1a       	sub	r14, r24
    316a:	f9 0a       	sbc	r15, r25
    316c:	0a 0b       	sbc	r16, r26
    316e:	1b 0b       	sbc	r17, r27
    3170:	e6 18       	sub	r14, r6
    3172:	f7 08       	sbc	r15, r7
    3174:	08 09       	sbc	r16, r8
    3176:	19 09       	sbc	r17, r9
    3178:	84 e0       	ldi	r24, 0x04	; 4
    317a:	36 95       	lsr	r19
    317c:	27 95       	ror	r18
    317e:	8a 95       	dec	r24
    3180:	e1 f7       	brne	.-8      	; 0x317a <pf_mount+0x14e>
    3182:	c9 01       	movw	r24, r18
    3184:	a0 e0       	ldi	r26, 0x00	; 0
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e8 1a       	sub	r14, r24
    318a:	f9 0a       	sbc	r15, r25
    318c:	0a 0b       	sbc	r16, r26
    318e:	1b 0b       	sbc	r17, r27
    3190:	f5 01       	movw	r30, r10
    3192:	22 81       	ldd	r18, Z+2	; 0x02
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	40 e0       	ldi	r20, 0x00	; 0
    3198:	50 e0       	ldi	r21, 0x00	; 0
    319a:	c8 01       	movw	r24, r16
    319c:	b7 01       	movw	r22, r14
    319e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__udivmodsi4>
    31a2:	2e 5f       	subi	r18, 0xFE	; 254
    31a4:	3f 4f       	sbci	r19, 0xFF	; 255
    31a6:	4f 4f       	sbci	r20, 0xFF	; 255
    31a8:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    31aa:	f5 01       	movw	r30, r10
    31ac:	26 83       	std	Z+6, r18	; 0x06
    31ae:	37 83       	std	Z+7, r19	; 0x07
    31b0:	40 87       	std	Z+8, r20	; 0x08
    31b2:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    31b4:	27 3f       	cpi	r18, 0xF7	; 247
    31b6:	ff e0       	ldi	r31, 0x0F	; 15
    31b8:	3f 07       	cpc	r19, r31
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	4f 07       	cpc	r20, r31
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	5f 07       	cpc	r21, r31
    31c2:	10 f4       	brcc	.+4      	; 0x31c8 <pf_mount+0x19c>
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <pf_mount+0x19e>
    31c8:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    31ca:	27 5f       	subi	r18, 0xF7	; 247
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	40 40       	sbci	r20, 0x00	; 0
    31d0:	50 40       	sbci	r21, 0x00	; 0
    31d2:	08 f0       	brcs	.+2      	; 0x31d6 <pf_mount+0x1aa>
    31d4:	83 e0       	ldi	r24, 0x03	; 3
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    31d6:	f5 01       	movw	r30, r10
    31d8:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    31da:	83 30       	cpi	r24, 0x03	; 3
    31dc:	29 f4       	brne	.+10     	; 0x31e8 <pf_mount+0x1bc>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    31de:	88 a1       	ldd	r24, Y+32	; 0x20
    31e0:	99 a1       	ldd	r25, Y+33	; 0x21
    31e2:	aa a1       	ldd	r26, Y+34	; 0x22
    31e4:	bb a1       	ldd	r27, Y+35	; 0x23
    31e6:	09 c0       	rjmp	.+18     	; 0x31fa <pf_mount+0x1ce>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    31e8:	f5 01       	movw	r30, r10
    31ea:	82 85       	ldd	r24, Z+10	; 0x0a
    31ec:	93 85       	ldd	r25, Z+11	; 0x0b
    31ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    31f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    31f2:	86 0d       	add	r24, r6
    31f4:	97 1d       	adc	r25, r7
    31f6:	a8 1d       	adc	r26, r8
    31f8:	b9 1d       	adc	r27, r9
    31fa:	86 87       	std	Z+14, r24	; 0x0e
    31fc:	97 87       	std	Z+15, r25	; 0x0f
    31fe:	a0 8b       	std	Z+16, r26	; 0x10
    3200:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    3202:	f5 01       	movw	r30, r10
    3204:	84 81       	ldd	r24, Z+4	; 0x04
    3206:	95 81       	ldd	r25, Z+5	; 0x05
    3208:	b4 e0       	ldi	r27, 0x04	; 4
    320a:	96 95       	lsr	r25
    320c:	87 95       	ror	r24
    320e:	ba 95       	dec	r27
    3210:	e1 f7       	brne	.-8      	; 0x320a <pf_mount+0x1de>
    3212:	a0 e0       	ldi	r26, 0x00	; 0
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	22 85       	ldd	r18, Z+10	; 0x0a
    3218:	33 85       	ldd	r19, Z+11	; 0x0b
    321a:	44 85       	ldd	r20, Z+12	; 0x0c
    321c:	55 85       	ldd	r21, Z+13	; 0x0d
    321e:	82 0f       	add	r24, r18
    3220:	93 1f       	adc	r25, r19
    3222:	a4 1f       	adc	r26, r20
    3224:	b5 1f       	adc	r27, r21
    3226:	86 0d       	add	r24, r6
    3228:	97 1d       	adc	r25, r7
    322a:	a8 1d       	adc	r26, r8
    322c:	b9 1d       	adc	r27, r9
    322e:	82 8b       	std	Z+18, r24	; 0x12
    3230:	93 8b       	std	Z+19, r25	; 0x13
    3232:	a4 8b       	std	Z+20, r26	; 0x14
    3234:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    3236:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    3238:	b0 92 cb 00 	sts	0x00CB, r11
    323c:	a0 92 ca 00 	sts	0x00CA, r10
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	03 c0       	rjmp	.+6      	; 0x324a <pf_mount+0x21e>

	return FR_OK;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	01 c0       	rjmp	.+2      	; 0x324a <pf_mount+0x21e>
    3248:	87 e0       	ldi	r24, 0x07	; 7
}
    324a:	a4 96       	adiw	r28, 0x24	; 36
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	df 90       	pop	r13
    3264:	cf 90       	pop	r12
    3266:	bf 90       	pop	r11
    3268:	af 90       	pop	r10
    326a:	9f 90       	pop	r9
    326c:	8f 90       	pop	r8
    326e:	7f 90       	pop	r7
    3270:	6f 90       	pop	r6
    3272:	08 95       	ret

00003274 <TOUCH_Reset>:
	
	char temp;
	
	// Init port
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);		// Disable CS
    3274:	c4 9a       	sbi	0x18, 4	; 24
	TOUCH_CS_DDR |= (1<< TOUCH_CS_BIT);		// Turns on CS pin as output
    3276:	bc 9a       	sbi	0x17, 4	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_SCK_BIT);		// Set as output
    3278:	bf 9a       	sbi	0x17, 7	; 23
	TOUCH_SPI_DDR |= (1<< TOUCH_MOSI_BIT);		// Set as output
    327a:	bd 9a       	sbi	0x17, 5	; 23
	TOUCH_SPI_PORT |= (1<< TOUCH_MISO_BIT);	// Internal pull up MISO
    327c:	c6 9a       	sbi	0x18, 6	; 24

	// Init spi as master
	//
	SPCR = (1<< SPE) | (1<< MSTR);				// Initialize SPI port every /8 clock
    327e:	80 e5       	ldi	r24, 0x50	; 80
    3280:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1<< SPR0);
    3282:	68 9a       	sbi	0x0d, 0	; 13
	SPSR = (1<< SPI2X);
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	8e b9       	out	0x0e, r24	; 14
	temp = SPSR;								// Clear interrupt flag	
    3288:	8e b1       	in	r24, 0x0e	; 14
	
	// Init external pin
	//
	TOUCH_DOWN_INIT();
    328a:	8b 98       	cbi	0x11, 3	; 17
    328c:	93 98       	cbi	0x12, 3	; 18
}
    328e:	08 95       	ret

00003290 <TOUCH_NativeRead>:

//////////////////////////////
//
// TOUCH_NativeRead(&x, &y);
//
bool TOUCH_NativeRead (int *x, int *y) {
    3290:	4f 92       	push	r4
    3292:	5f 92       	push	r5
    3294:	6f 92       	push	r6
    3296:	7f 92       	push	r7
    3298:	8f 92       	push	r8
    329a:	9f 92       	push	r9
    329c:	af 92       	push	r10
    329e:	bf 92       	push	r11
    32a0:	cf 92       	push	r12
    32a2:	df 92       	push	r13
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	fc 01       	movw	r30, r24
    32ae:	db 01       	movw	r26, r22
	unsigned char buf_data[8];
	int z1, z2, p;

	// Enable touch screen CS
	//
	TOUCH_CS_PORT &= ~(1<< TOUCH_CS_BIT);
    32b0:	c4 98       	cbi	0x18, 4	; 24
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32b2:	83 e9       	ldi	r24, 0x93	; 147
    32b4:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32b6:	77 9b       	sbis	0x0e, 7	; 14
    32b8:	fe cf       	rjmp	.-4      	; 0x32b6 <TOUCH_NativeRead+0x26>
	return (SPDR);						// get data
    32ba:	8f b1       	in	r24, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32bc:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32be:	77 9b       	sbis	0x0e, 7	; 14
    32c0:	fe cf       	rjmp	.-4      	; 0x32be <TOUCH_NativeRead+0x2e>
	return (SPDR);						// get data
    32c2:	9f b1       	in	r25, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32c4:	83 ed       	ldi	r24, 0xD3	; 211
    32c6:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32c8:	77 9b       	sbis	0x0e, 7	; 14
    32ca:	fe cf       	rjmp	.-4      	; 0x32c8 <TOUCH_NativeRead+0x38>
	return (SPDR);						// get data
    32cc:	2f b1       	in	r18, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32ce:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32d0:	77 9b       	sbis	0x0e, 7	; 14
    32d2:	fe cf       	rjmp	.-4      	; 0x32d0 <TOUCH_NativeRead+0x40>
	return (SPDR);						// get data
    32d4:	4f b1       	in	r20, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32d6:	83 eb       	ldi	r24, 0xB3	; 179
    32d8:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32da:	77 9b       	sbis	0x0e, 7	; 14
    32dc:	fe cf       	rjmp	.-4      	; 0x32da <TOUCH_NativeRead+0x4a>
	return (SPDR);						// get data
    32de:	6f b1       	in	r22, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32e0:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32e2:	77 9b       	sbis	0x0e, 7	; 14
    32e4:	fe cf       	rjmp	.-4      	; 0x32e2 <TOUCH_NativeRead+0x52>
	return (SPDR);						// get data
    32e6:	af b0       	in	r10, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32e8:	82 ec       	ldi	r24, 0xC2	; 194
    32ea:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32ec:	77 9b       	sbis	0x0e, 7	; 14
    32ee:	fe cf       	rjmp	.-4      	; 0x32ec <TOUCH_NativeRead+0x5c>
	return (SPDR);						// get data
    32f0:	5f b0       	in	r5, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32f2:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32f4:	77 9b       	sbis	0x0e, 7	; 14
    32f6:	fe cf       	rjmp	.-4      	; 0x32f4 <TOUCH_NativeRead+0x64>
	return (SPDR);						// get data
    32f8:	cf b0       	in	r12, 0x0f	; 15
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    32fa:	1f b8       	out	0x0f, r1	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    32fc:	77 9b       	sbis	0x0e, 7	; 14
    32fe:	fe cf       	rjmp	.-4      	; 0x32fc <TOUCH_NativeRead+0x6c>
	return (SPDR);						// get data
    3300:	ef b0       	in	r14, 0x0f	; 15
	buf_data[6] = TOUCH_ReadADC(TOUCH_READ);	// Read ADC data Z2 (7-bit byte High) data: 0ddddddd (bit11-bit5)
	buf_data[7] = TOUCH_ReadADC(TOUCH_READ);	// Read ADC data Z2 (5-bit byte Low)  data: ddddd000 (bit)

	// Disable touch screen CS
	//
	TOUCH_CS_PORT |= (1<< TOUCH_CS_BIT);
    3302:	c4 9a       	sbi	0x18, 4	; 24

	// Calculate
	//
	*x  = (int)buf_data[0] << 5;	// Shift 7 bit High
	*x |= (int)buf_data[1] >> 3;	// Shift 5 bit low
    3304:	26 95       	lsr	r18
    3306:	26 95       	lsr	r18
    3308:	26 95       	lsr	r18
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	89 2f       	mov	r24, r25
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	55 e0       	ldi	r21, 0x05	; 5
    3312:	88 0f       	add	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	5a 95       	dec	r21
    3318:	e1 f7       	brne	.-8      	; 0x3312 <TOUCH_NativeRead+0x82>
    331a:	28 2b       	or	r18, r24
    331c:	39 2b       	or	r19, r25
    331e:	31 83       	std	Z+1, r19	; 0x01
    3320:	20 83       	st	Z, r18
	
	*y  = (int)buf_data[2] << 5;	// Shift 7 bit High
	*y |= (int)buf_data[3] >> 3;	// Shift 5 bit low
    3322:	66 95       	lsr	r22
    3324:	66 95       	lsr	r22
    3326:	66 95       	lsr	r22
    3328:	70 e0       	ldi	r23, 0x00	; 0
    332a:	24 2f       	mov	r18, r20
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	45 e0       	ldi	r20, 0x05	; 5
    3330:	22 0f       	add	r18, r18
    3332:	33 1f       	adc	r19, r19
    3334:	4a 95       	dec	r20
    3336:	e1 f7       	brne	.-8      	; 0x3330 <TOUCH_NativeRead+0xa0>
    3338:	62 2b       	or	r22, r18
    333a:	73 2b       	or	r23, r19
    333c:	6d 93       	st	X+, r22
    333e:	7c 93       	st	X, r23
	
	z1  = (int)buf_data[4] << 5;	// Shift 7 bit High
    3340:	bb 24       	eor	r11, r11
    3342:	95 e0       	ldi	r25, 0x05	; 5
    3344:	aa 0c       	add	r10, r10
    3346:	bb 1c       	adc	r11, r11
    3348:	9a 95       	dec	r25
    334a:	e1 f7       	brne	.-8      	; 0x3344 <TOUCH_NativeRead+0xb4>
	z1 |= (int)buf_data[5] >> 3;	// Shift 5 bit low
	
	z2  = (int)buf_data[6] << 5;	// Shift 7 bit High
    334c:	dd 24       	eor	r13, r13
    334e:	85 e0       	ldi	r24, 0x05	; 5
    3350:	cc 0c       	add	r12, r12
    3352:	dd 1c       	adc	r13, r13
    3354:	8a 95       	dec	r24
    3356:	e1 f7       	brne	.-8      	; 0x3350 <TOUCH_NativeRead+0xc0>
    3358:	44 24       	eor	r4, r4
    335a:	88 27       	eor	r24, r24
    335c:	77 fd       	sbrc	r23, 7
    335e:	80 95       	com	r24
    3360:	98 2f       	mov	r25, r24
    3362:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	59 e3       	ldi	r21, 0x39	; 57
    336e:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__mulsf3>
    3372:	3b 01       	movw	r6, r22
    3374:	4c 01       	movw	r8, r24
    3376:	e6 94       	lsr	r14
    3378:	e6 94       	lsr	r14
    337a:	e6 94       	lsr	r14
    337c:	ff 24       	eor	r15, r15
    337e:	ec 28       	or	r14, r12
    3380:	fd 28       	or	r15, r13
    3382:	00 27       	eor	r16, r16
    3384:	f7 fc       	sbrc	r15, 7
    3386:	00 95       	com	r16
    3388:	10 2f       	mov	r17, r16
    338a:	c8 01       	movw	r24, r16
    338c:	b7 01       	movw	r22, r14
    338e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    3392:	7b 01       	movw	r14, r22
    3394:	8c 01       	movw	r16, r24
    3396:	56 94       	lsr	r5
    3398:	56 94       	lsr	r5
    339a:	56 94       	lsr	r5
    339c:	65 2d       	mov	r22, r5
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	6a 29       	or	r22, r10
    33a2:	7b 29       	or	r23, r11
    33a4:	88 27       	eor	r24, r24
    33a6:	77 fd       	sbrc	r23, 7
    33a8:	80 95       	com	r24
    33aa:	98 2f       	mov	r25, r24
    33ac:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    33b0:	9b 01       	movw	r18, r22
    33b2:	ac 01       	movw	r20, r24
    33b4:	c8 01       	movw	r24, r16
    33b6:	b7 01       	movw	r22, r14
    33b8:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e8       	ldi	r20, 0x80	; 128
    33c2:	5f e3       	ldi	r21, 0x3F	; 63
    33c4:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__subsf3>
    33c8:	9b 01       	movw	r18, r22
    33ca:	ac 01       	movw	r20, r24
    33cc:	c4 01       	movw	r24, r8
    33ce:	b3 01       	movw	r22, r6
    33d0:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__mulsf3>
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e2       	ldi	r20, 0x20	; 32
    33da:	51 e4       	ldi	r21, 0x41	; 65
    33dc:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__mulsf3>
    33e0:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <__fixsfsi>
    33e4:	6b 50       	subi	r22, 0x0B	; 11
    33e6:	70 40       	sbci	r23, 0x00	; 0
    33e8:	68 31       	cpi	r22, 0x18	; 24
    33ea:	71 05       	cpc	r23, r1
    33ec:	10 f4       	brcc	.+4      	; 0x33f2 <TOUCH_NativeRead+0x162>
    33ee:	44 24       	eor	r4, r4
    33f0:	43 94       	inc	r4
	//
	p = ((double)*y/4096)*((double)z2/(double)z1-1) *10;
	p = ((p > 10) && (p < 35)) ? true : false;

	return p;
}
    33f2:	84 2d       	mov	r24, r4
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	ff 90       	pop	r15
    33fa:	ef 90       	pop	r14
    33fc:	df 90       	pop	r13
    33fe:	cf 90       	pop	r12
    3400:	bf 90       	pop	r11
    3402:	af 90       	pop	r10
    3404:	9f 90       	pop	r9
    3406:	8f 90       	pop	r8
    3408:	7f 90       	pop	r7
    340a:	6f 90       	pop	r6
    340c:	5f 90       	pop	r5
    340e:	4f 90       	pop	r4
    3410:	08 95       	ret

00003412 <TOUCH_MultipleRead>:

////////////////////////////////
//
// TOUCH_MultipleRead(&x, &y);
//
bool TOUCH_MultipleRead (int *x, int *y) {
    3412:	2f 92       	push	r2
    3414:	3f 92       	push	r3
    3416:	4f 92       	push	r4
    3418:	5f 92       	push	r5
    341a:	6f 92       	push	r6
    341c:	7f 92       	push	r7
    341e:	8f 92       	push	r8
    3420:	9f 92       	push	r9
    3422:	af 92       	push	r10
    3424:	bf 92       	push	r11
    3426:	cf 92       	push	r12
    3428:	df 92       	push	r13
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	2a 97       	sbiw	r28, 0x0a	; 10
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	98 87       	std	Y+8, r25	; 0x08
    3448:	8f 83       	std	Y+7, r24	; 0x07
    344a:	7a 87       	std	Y+10, r23	; 0x0a
    344c:	69 87       	std	Y+9, r22	; 0x09
    344e:	1e 82       	std	Y+6, r1	; 0x06
    3450:	1d 82       	std	Y+5, r1	; 0x05
    3452:	aa 24       	eor	r10, r10
    3454:	bb 24       	eor	r11, r11
    3456:	65 01       	movw	r12, r10
    3458:	66 24       	eor	r6, r6
    345a:	77 24       	eor	r7, r7
    345c:	43 01       	movw	r8, r6
    345e:	22 24       	eor	r2, r2
    3460:	2a 94       	dec	r2
    3462:	32 2c       	mov	r3, r2
    3464:	44 24       	eor	r4, r4
    3466:	55 24       	eor	r5, r5
    3468:	0f ef       	ldi	r16, 0xFF	; 255
    346a:	1f ef       	ldi	r17, 0xFF	; 255
    346c:	ee 24       	eor	r14, r14
    346e:	ff 24       	eor	r15, r15
	int tx, ty;
	unsigned int xmin = 0xFFFF, xmax = 0, ymin = 0xFFFF, ymax = 0;

	for(i=0; i<TOUCH_MULTIPLE_SAMPLE_COUNT; i++) {
		
		if (TOUCH_NativeRead(&tx, &ty)) {
    3470:	ce 01       	movw	r24, r28
    3472:	01 96       	adiw	r24, 0x01	; 1
    3474:	be 01       	movw	r22, r28
    3476:	6d 5f       	subi	r22, 0xFD	; 253
    3478:	7f 4f       	sbci	r23, 0xFF	; 255
    347a:	0e 94 48 19 	call	0x3290	; 0x3290 <TOUCH_NativeRead>
    347e:	88 23       	and	r24, r24
    3480:	49 f1       	breq	.+82     	; 0x34d4 <TOUCH_MultipleRead+0xc2>
			
			ix += tx;
    3482:	29 81       	ldd	r18, Y+1	; 0x01
    3484:	3a 81       	ldd	r19, Y+2	; 0x02
    3486:	c9 01       	movw	r24, r18
    3488:	aa 27       	eor	r26, r26
    348a:	97 fd       	sbrc	r25, 7
    348c:	a0 95       	com	r26
    348e:	ba 2f       	mov	r27, r26
    3490:	a8 0e       	add	r10, r24
    3492:	b9 1e       	adc	r11, r25
    3494:	ca 1e       	adc	r12, r26
    3496:	db 1e       	adc	r13, r27
			iy += ty;
    3498:	4b 81       	ldd	r20, Y+3	; 0x03
    349a:	5c 81       	ldd	r21, Y+4	; 0x04
    349c:	ca 01       	movw	r24, r20
    349e:	aa 27       	eor	r26, r26
    34a0:	97 fd       	sbrc	r25, 7
    34a2:	a0 95       	com	r26
    34a4:	ba 2f       	mov	r27, r26
    34a6:	68 0e       	add	r6, r24
    34a8:	79 1e       	adc	r7, r25
    34aa:	8a 1e       	adc	r8, r26
    34ac:	9b 1e       	adc	r9, r27
			
			s++;
    34ae:	8d 81       	ldd	r24, Y+5	; 0x05
    34b0:	8f 5f       	subi	r24, 0xFF	; 255
    34b2:	8d 83       	std	Y+5, r24	; 0x05
			
			if (tx > xmax)
    34b4:	42 16       	cp	r4, r18
    34b6:	53 06       	cpc	r5, r19
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <TOUCH_MultipleRead+0xaa>
    34ba:	29 01       	movw	r4, r18
    34bc:	22 15       	cp	r18, r2
    34be:	33 05       	cpc	r19, r3
    34c0:	08 f4       	brcc	.+2      	; 0x34c4 <TOUCH_MultipleRead+0xb2>
    34c2:	19 01       	movw	r2, r18
				xmax = tx;
			
			if (tx < xmin)
				xmin = tx;
			
			if (ty > ymax)
    34c4:	ca 01       	movw	r24, r20
    34c6:	e4 16       	cp	r14, r20
    34c8:	f5 06       	cpc	r15, r21
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <TOUCH_MultipleRead+0xbc>
    34cc:	7a 01       	movw	r14, r20
				ymax = ty;
			
			if (ty < ymin)
    34ce:	40 17       	cp	r20, r16
    34d0:	51 07       	cpc	r21, r17
    34d2:	08 f0       	brcs	.+2      	; 0x34d6 <TOUCH_MultipleRead+0xc4>
    34d4:	c8 01       	movw	r24, r16
	char i, s = 0;
	long ix = 0, iy = 0;
	int tx, ty;
	unsigned int xmin = 0xFFFF, xmax = 0, ymin = 0xFFFF, ymax = 0;

	for(i=0; i<TOUCH_MULTIPLE_SAMPLE_COUNT; i++) {
    34d6:	ee 81       	ldd	r30, Y+6	; 0x06
    34d8:	ef 5f       	subi	r30, 0xFF	; 255
    34da:	ee 83       	std	Y+6, r30	; 0x06
    34dc:	ec 30       	cpi	r30, 0x0C	; 12
    34de:	11 f0       	breq	.+4      	; 0x34e4 <TOUCH_MultipleRead+0xd2>
    34e0:	8c 01       	movw	r16, r24
    34e2:	c6 cf       	rjmp	.-116    	; 0x3470 <TOUCH_MultipleRead+0x5e>
			if (ty < ymin)
				ymin = ty;
		}
	}
	
	if (s < TOUCH_MULTIPLE_SAMPLE_MIN_COUNT)
    34e4:	fd 81       	ldd	r31, Y+5	; 0x05
    34e6:	f5 30       	cpi	r31, 0x05	; 5
    34e8:	48 f1       	brcs	.+82     	; 0x353c <TOUCH_MultipleRead+0x12a>
		return false;
	
	// If some nois is here -> cancel
	//
	xmax -= xmin;
    34ea:	92 01       	movw	r18, r4
    34ec:	22 19       	sub	r18, r2
    34ee:	33 09       	sbc	r19, r3
	ymax -= ymin;
	xmax = (ymax > xmax) ? ymax : xmax;
	
	if (xmax > TOUCH_TRESHOLD)
    34f0:	a7 01       	movw	r20, r14
    34f2:	48 1b       	sub	r20, r24
    34f4:	59 0b       	sbc	r21, r25
    34f6:	ca 01       	movw	r24, r20
    34f8:	42 17       	cp	r20, r18
    34fa:	53 07       	cpc	r21, r19
    34fc:	08 f4       	brcc	.+2      	; 0x3500 <TOUCH_MultipleRead+0xee>
    34fe:	c9 01       	movw	r24, r18
    3500:	89 37       	cpi	r24, 0x79	; 121
    3502:	91 05       	cpc	r25, r1
    3504:	d8 f4       	brcc	.+54     	; 0x353c <TOUCH_MultipleRead+0x12a>
		return false;
	
	// Calculate output
	//
	*x = ix / s;
    3506:	5d 81       	ldd	r21, Y+5	; 0x05
    3508:	e5 2e       	mov	r14, r21
    350a:	ff 24       	eor	r15, r15
    350c:	00 e0       	ldi	r16, 0x00	; 0
    350e:	10 e0       	ldi	r17, 0x00	; 0
    3510:	c6 01       	movw	r24, r12
    3512:	b5 01       	movw	r22, r10
    3514:	a8 01       	movw	r20, r16
    3516:	97 01       	movw	r18, r14
    3518:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__divmodsi4>
    351c:	ef 81       	ldd	r30, Y+7	; 0x07
    351e:	f8 85       	ldd	r31, Y+8	; 0x08
    3520:	31 83       	std	Z+1, r19	; 0x01
    3522:	20 83       	st	Z, r18
	*y = iy / s;
    3524:	c4 01       	movw	r24, r8
    3526:	b3 01       	movw	r22, r6
    3528:	a8 01       	movw	r20, r16
    352a:	97 01       	movw	r18, r14
    352c:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__divmodsi4>
    3530:	e9 85       	ldd	r30, Y+9	; 0x09
    3532:	fa 85       	ldd	r31, Y+10	; 0x0a
    3534:	31 83       	std	Z+1, r19	; 0x01
    3536:	20 83       	st	Z, r18
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	01 c0       	rjmp	.+2      	; 0x353e <TOUCH_MultipleRead+0x12c>

	return true;
    353c:	80 e0       	ldi	r24, 0x00	; 0
}
    353e:	2a 96       	adiw	r28, 0x0a	; 10
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	bf 90       	pop	r11
    355c:	af 90       	pop	r10
    355e:	9f 90       	pop	r9
    3560:	8f 90       	pop	r8
    3562:	7f 90       	pop	r7
    3564:	6f 90       	pop	r6
    3566:	5f 90       	pop	r5
    3568:	4f 90       	pop	r4
    356a:	3f 90       	pop	r3
    356c:	2f 90       	pop	r2
    356e:	08 95       	ret

00003570 <TOUCH_Get>:

///////////////////////
//
// TOUCH_Get(&x, &y);
//
bool TOUCH_Get (int *x, int *y) {
    3570:	af 92       	push	r10
    3572:	bf 92       	push	r11
    3574:	cf 92       	push	r12
    3576:	df 92       	push	r13
    3578:	ef 92       	push	r14
    357a:	ff 92       	push	r15
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <TOUCH_Get+0x16>
    3586:	00 d0       	rcall	.+0      	; 0x3588 <TOUCH_Get+0x18>
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	6c 01       	movw	r12, r24
    358e:	5b 01       	movw	r10, r22

	int tx, ty;
	double dx, dy;

	if (!TOUCH_MultipleRead(&tx, &ty))
    3590:	ce 01       	movw	r24, r28
    3592:	01 96       	adiw	r24, 0x01	; 1
    3594:	be 01       	movw	r22, r28
    3596:	6d 5f       	subi	r22, 0xFD	; 253
    3598:	7f 4f       	sbci	r23, 0xFF	; 255
    359a:	0e 94 09 1a 	call	0x3412	; 0x3412 <TOUCH_MultipleRead>
    359e:	88 23       	and	r24, r24
    35a0:	09 f4       	brne	.+2      	; 0x35a4 <TOUCH_Get+0x34>
    35a2:	5b c0       	rjmp	.+182    	; 0x365a <TOUCH_Get+0xea>
		return false;

	// Calculate 320x240
	//
	tx -= TC_x_0;
    35a4:	69 81       	ldd	r22, Y+1	; 0x01
    35a6:	7a 81       	ldd	r23, Y+2	; 0x02
    35a8:	20 91 b5 00 	lds	r18, 0x00B5
    35ac:	30 91 b6 00 	lds	r19, 0x00B6
    35b0:	62 1b       	sub	r22, r18
    35b2:	73 0b       	sbc	r23, r19
	dx = (double)tx / (double)TC_x_100;
	*x = LCD_MAX_WIDTH - (int)(LCD_MAX_WIDTH * dx);
    35b4:	88 27       	eor	r24, r24
    35b6:	77 fd       	sbrc	r23, 7
    35b8:	80 95       	com	r24
    35ba:	98 2f       	mov	r25, r24
    35bc:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    35c0:	7b 01       	movw	r14, r22
    35c2:	8c 01       	movw	r16, r24
    35c4:	60 91 b7 00 	lds	r22, 0x00B7
    35c8:	70 91 b8 00 	lds	r23, 0x00B8
    35cc:	88 27       	eor	r24, r24
    35ce:	77 fd       	sbrc	r23, 7
    35d0:	80 95       	com	r24
    35d2:	98 2f       	mov	r25, r24
    35d4:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    35d8:	9b 01       	movw	r18, r22
    35da:	ac 01       	movw	r20, r24
    35dc:	c8 01       	movw	r24, r16
    35de:	b7 01       	movw	r22, r14
    35e0:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 ea       	ldi	r20, 0xA0	; 160
    35ea:	53 e4       	ldi	r21, 0x43	; 67
    35ec:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__mulsf3>
    35f0:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <__fixsfsi>
    35f4:	20 e4       	ldi	r18, 0x40	; 64
    35f6:	31 e0       	ldi	r19, 0x01	; 1
    35f8:	26 1b       	sub	r18, r22
    35fa:	37 0b       	sbc	r19, r23
    35fc:	f6 01       	movw	r30, r12
    35fe:	31 83       	std	Z+1, r19	; 0x01
    3600:	20 83       	st	Z, r18

	ty -= TC_y_0;
    3602:	6b 81       	ldd	r22, Y+3	; 0x03
    3604:	7c 81       	ldd	r23, Y+4	; 0x04
    3606:	20 91 b9 00 	lds	r18, 0x00B9
    360a:	30 91 ba 00 	lds	r19, 0x00BA
    360e:	62 1b       	sub	r22, r18
    3610:	73 0b       	sbc	r23, r19
	dy = (double)ty / (double)TC_y_100;
	*y = (int)(LCD_MAX_HEIGHT * dy);
    3612:	88 27       	eor	r24, r24
    3614:	77 fd       	sbrc	r23, 7
    3616:	80 95       	com	r24
    3618:	98 2f       	mov	r25, r24
    361a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    361e:	7b 01       	movw	r14, r22
    3620:	8c 01       	movw	r16, r24
    3622:	60 91 bb 00 	lds	r22, 0x00BB
    3626:	70 91 bc 00 	lds	r23, 0x00BC
    362a:	88 27       	eor	r24, r24
    362c:	77 fd       	sbrc	r23, 7
    362e:	80 95       	com	r24
    3630:	98 2f       	mov	r25, r24
    3632:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__floatsisf>
    3636:	9b 01       	movw	r18, r22
    3638:	ac 01       	movw	r20, r24
    363a:	c8 01       	movw	r24, r16
    363c:	b7 01       	movw	r22, r14
    363e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <__divsf3>
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e7       	ldi	r20, 0x70	; 112
    3648:	53 e4       	ldi	r21, 0x43	; 67
    364a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <__mulsf3>
    364e:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <__fixsfsi>
    3652:	f5 01       	movw	r30, r10
    3654:	71 83       	std	Z+1, r23	; 0x01
    3656:	60 83       	st	Z, r22
    3658:	81 e0       	ldi	r24, 0x01	; 1
	
	return true;
}
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	df 90       	pop	r13
    3670:	cf 90       	pop	r12
    3672:	bf 90       	pop	r11
    3674:	af 90       	pop	r10
    3676:	08 95       	ret

00003678 <TOUCH_ReadADC>:
//
// TOUCH_ReadADC(axis);
//
unsigned char TOUCH_ReadADC (unsigned char axis) {

	SPDR = axis;
    3678:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<< SPIF)));		// wait for complete
    367a:	77 9b       	sbis	0x0e, 7	; 14
    367c:	fe cf       	rjmp	.-4      	; 0x367a <TOUCH_ReadADC+0x2>
	return (SPDR);						// get data
    367e:	8f b1       	in	r24, 0x0f	; 15
}
    3680:	08 95       	ret

00003682 <TOUCH_Calibrate>:

///////////////////////
//
// TOUCH_Calibrate();
//
void TOUCH_Calibrate (void) {
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	df 93       	push	r29
    368c:	cf 93       	push	r28
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	c8 56       	subi	r28, 0x68	; 104
    3694:	d0 40       	sbci	r29, 0x00	; 0
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
	
	int tmp, x, y;
	
	// Clean screen and reset TOUCH 
	//
	LCD_Clear(BLACK);
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_Clear>
	TOUCH_Reset();
    36a8:	0e 94 3a 19 	call	0x3274	; 0x3274 <TOUCH_Reset>

	//////////////////////
	//
	// Write first point 
	//
	LCD_DrawCircle(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, 10, WHITE, false);
    36ac:	80 e2       	ldi	r24, 0x20	; 32
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	68 e1       	ldi	r22, 0x18	; 24
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	4a e0       	ldi	r20, 0x0A	; 10
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	2f ef       	ldi	r18, 0xFF	; 255
    36ba:	3f ef       	ldi	r19, 0xFF	; 255
    36bc:	00 e0       	ldi	r16, 0x00	; 0
    36be:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, 5, WHITE, false);
    36c2:	80 e2       	ldi	r24, 0x20	; 32
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	68 e1       	ldi	r22, 0x18	; 24
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	45 e0       	ldi	r20, 0x05	; 5
    36cc:	50 e0       	ldi	r21, 0x00	; 0
    36ce:	2f ef       	ldi	r18, 0xFF	; 255
    36d0:	3f ef       	ldi	r19, 0xFF	; 255
    36d2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	LCD_SetPoint(LCD_MAX_WIDTH/10, LCD_MAX_HEIGHT/10, WHITE);
    36d6:	80 e2       	ldi	r24, 0x20	; 32
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	68 e1       	ldi	r22, 0x18	; 24
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	4f ef       	ldi	r20, 0xFF	; 255
    36e0:	5f ef       	ldi	r21, 0xFF	; 255
    36e2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
	
	// Wait for TOUCH and Read it
	//
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
    36e6:	83 99       	sbic	0x10, 3	; 16
    36e8:	fe cf       	rjmp	.-4      	; 0x36e6 <TOUCH_Calibrate+0x64>
	while(!TOUCH_MultipleRead(&x, &y));
    36ea:	93 e0       	ldi	r25, 0x03	; 3
    36ec:	e9 2e       	mov	r14, r25
    36ee:	f1 2c       	mov	r15, r1
    36f0:	ec 0e       	add	r14, r28
    36f2:	fd 1e       	adc	r15, r29
    36f4:	8e 01       	movw	r16, r28
    36f6:	0f 5f       	subi	r16, 0xFF	; 255
    36f8:	1f 4f       	sbci	r17, 0xFF	; 255
    36fa:	c8 01       	movw	r24, r16
    36fc:	b7 01       	movw	r22, r14
    36fe:	0e 94 09 1a 	call	0x3412	; 0x3412 <TOUCH_MultipleRead>
    3702:	88 23       	and	r24, r24
    3704:	d1 f3       	breq	.-12     	; 0x36fa <TOUCH_Calibrate+0x78>

	TC_x_0 = x;
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	9a 81       	ldd	r25, Y+2	; 0x02
    370a:	90 93 b6 00 	sts	0x00B6, r25
    370e:	80 93 b5 00 	sts	0x00B5, r24
	TC_y_0 = y;
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	9c 81       	ldd	r25, Y+4	; 0x04
    3716:	90 93 ba 00 	sts	0x00BA, r25
    371a:	80 93 b9 00 	sts	0x00B9, r24

	while(TOUCH_DOWN);
    371e:	83 9b       	sbis	0x10, 3	; 16
    3720:	fe cf       	rjmp	.-4      	; 0x371e <TOUCH_Calibrate+0x9c>
	
	///////////////////////
	//
	// Write second point
	//
	LCD_Clear(BLACK);
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_Clear>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, 10, WHITE, false);
    372a:	80 e2       	ldi	r24, 0x20	; 32
    372c:	91 e0       	ldi	r25, 0x01	; 1
    372e:	68 e7       	ldi	r22, 0x78	; 120
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	4a e0       	ldi	r20, 0x0A	; 10
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	2f ef       	ldi	r18, 0xFF	; 255
    3738:	3f ef       	ldi	r19, 0xFF	; 255
    373a:	00 e0       	ldi	r16, 0x00	; 0
    373c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, 5, WHITE, false);
    3740:	80 e2       	ldi	r24, 0x20	; 32
    3742:	91 e0       	ldi	r25, 0x01	; 1
    3744:	68 e7       	ldi	r22, 0x78	; 120
    3746:	70 e0       	ldi	r23, 0x00	; 0
    3748:	45 e0       	ldi	r20, 0x05	; 5
    374a:	50 e0       	ldi	r21, 0x00	; 0
    374c:	2f ef       	ldi	r18, 0xFF	; 255
    374e:	3f ef       	ldi	r19, 0xFF	; 255
    3750:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	LCD_SetPoint(LCD_MAX_WIDTH/10*9, LCD_MAX_HEIGHT/10*5, WHITE);
    3754:	80 e2       	ldi	r24, 0x20	; 32
    3756:	91 e0       	ldi	r25, 0x01	; 1
    3758:	68 e7       	ldi	r22, 0x78	; 120
    375a:	70 e0       	ldi	r23, 0x00	; 0
    375c:	4f ef       	ldi	r20, 0xFF	; 255
    375e:	5f ef       	ldi	r21, 0xFF	; 255
    3760:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
	
	// Wait for TOUCH and Read it
	//
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
    3764:	83 99       	sbic	0x10, 3	; 16
    3766:	fe cf       	rjmp	.-4      	; 0x3764 <TOUCH_Calibrate+0xe2>
	while(!TOUCH_MultipleRead(&x, &y));
    3768:	83 e0       	ldi	r24, 0x03	; 3
    376a:	e8 2e       	mov	r14, r24
    376c:	f1 2c       	mov	r15, r1
    376e:	ec 0e       	add	r14, r28
    3770:	fd 1e       	adc	r15, r29
    3772:	8e 01       	movw	r16, r28
    3774:	0f 5f       	subi	r16, 0xFF	; 255
    3776:	1f 4f       	sbci	r17, 0xFF	; 255
    3778:	c8 01       	movw	r24, r16
    377a:	b7 01       	movw	r22, r14
    377c:	0e 94 09 1a 	call	0x3412	; 0x3412 <TOUCH_MultipleRead>
    3780:	88 23       	and	r24, r24
    3782:	d1 f3       	breq	.-12     	; 0x3778 <TOUCH_Calibrate+0xf6>
	
	tmp = (TC_x_0 - x)/8;	// 10%
    3784:	e9 81       	ldd	r30, Y+1	; 0x01
    3786:	fa 81       	ldd	r31, Y+2	; 0x02
    3788:	80 91 b5 00 	lds	r24, 0x00B5
    378c:	90 91 b6 00 	lds	r25, 0x00B6
    3790:	8e 1b       	sub	r24, r30
    3792:	9f 0b       	sbc	r25, r31
    3794:	68 e0       	ldi	r22, 0x08	; 8
    3796:	70 e0       	ldi	r23, 0x00	; 0
    3798:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__divmodhi4>
	TC_x_100 = tmp*10;		// 100%
    379c:	9b 01       	movw	r18, r22
    379e:	22 0f       	add	r18, r18
    37a0:	33 1f       	adc	r19, r19
    37a2:	ab 01       	movw	r20, r22
    37a4:	13 e0       	ldi	r17, 0x03	; 3
    37a6:	44 0f       	add	r20, r20
    37a8:	55 1f       	adc	r21, r21
    37aa:	1a 95       	dec	r17
    37ac:	e1 f7       	brne	.-8      	; 0x37a6 <TOUCH_Calibrate+0x124>
    37ae:	24 0f       	add	r18, r20
    37b0:	35 1f       	adc	r19, r21
    37b2:	30 93 b8 00 	sts	0x00B8, r19
    37b6:	20 93 b7 00 	sts	0x00B7, r18
	TC_x_0 = x - tmp;		// 0%
    37ba:	e6 1b       	sub	r30, r22
    37bc:	f7 0b       	sbc	r31, r23
    37be:	f0 93 b6 00 	sts	0x00B6, r31
    37c2:	e0 93 b5 00 	sts	0x00B5, r30
	
	while(TOUCH_DOWN);
    37c6:	83 9b       	sbis	0x10, 3	; 16
    37c8:	fe cf       	rjmp	.-4      	; 0x37c6 <TOUCH_Calibrate+0x144>

	//////////////////////
	//
	// Write third point
	//
	LCD_Clear(BLACK);
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_Clear>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, 10, WHITE, false);
    37d2:	80 ea       	ldi	r24, 0xA0	; 160
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	68 ed       	ldi	r22, 0xD8	; 216
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	4a e0       	ldi	r20, 0x0A	; 10
    37dc:	50 e0       	ldi	r21, 0x00	; 0
    37de:	2f ef       	ldi	r18, 0xFF	; 255
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	00 e0       	ldi	r16, 0x00	; 0
    37e4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	LCD_DrawCircle(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, 5, WHITE, false);
    37e8:	80 ea       	ldi	r24, 0xA0	; 160
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	68 ed       	ldi	r22, 0xD8	; 216
    37ee:	70 e0       	ldi	r23, 0x00	; 0
    37f0:	45 e0       	ldi	r20, 0x05	; 5
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	2f ef       	ldi	r18, 0xFF	; 255
    37f6:	3f ef       	ldi	r19, 0xFF	; 255
    37f8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <LCD_DrawCircle>
	LCD_SetPoint(LCD_MAX_WIDTH/10*5, LCD_MAX_HEIGHT/10*9, WHITE);
    37fc:	80 ea       	ldi	r24, 0xA0	; 160
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	68 ed       	ldi	r22, 0xD8	; 216
    3802:	70 e0       	ldi	r23, 0x00	; 0
    3804:	4f ef       	ldi	r20, 0xFF	; 255
    3806:	5f ef       	ldi	r21, 0xFF	; 255
    3808:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <LCD_SetPoint>
	
	// Wait for TOUCH and Read it
	//
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
    380c:	83 99       	sbic	0x10, 3	; 16
    380e:	fe cf       	rjmp	.-4      	; 0x380c <TOUCH_Calibrate+0x18a>
	while(!TOUCH_MultipleRead(&x, &y));
    3810:	b3 e0       	ldi	r27, 0x03	; 3
    3812:	eb 2e       	mov	r14, r27
    3814:	f1 2c       	mov	r15, r1
    3816:	ec 0e       	add	r14, r28
    3818:	fd 1e       	adc	r15, r29
    381a:	8e 01       	movw	r16, r28
    381c:	0f 5f       	subi	r16, 0xFF	; 255
    381e:	1f 4f       	sbci	r17, 0xFF	; 255
    3820:	c8 01       	movw	r24, r16
    3822:	b7 01       	movw	r22, r14
    3824:	0e 94 09 1a 	call	0x3412	; 0x3412 <TOUCH_MultipleRead>
    3828:	88 23       	and	r24, r24
    382a:	d1 f3       	breq	.-12     	; 0x3820 <TOUCH_Calibrate+0x19e>
	
	y = (y - TC_y_0)/8;	// 10%
    382c:	e0 91 b9 00 	lds	r30, 0x00B9
    3830:	f0 91 ba 00 	lds	r31, 0x00BA
    3834:	8b 81       	ldd	r24, Y+3	; 0x03
    3836:	9c 81       	ldd	r25, Y+4	; 0x04
    3838:	8e 1b       	sub	r24, r30
    383a:	9f 0b       	sbc	r25, r31
    383c:	68 e0       	ldi	r22, 0x08	; 8
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__divmodhi4>
    3844:	ab 01       	movw	r20, r22
	TC_y_100 = y*10;		// 100%
    3846:	cb 01       	movw	r24, r22
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	9b 01       	movw	r18, r22
    384e:	73 e0       	ldi	r23, 0x03	; 3
    3850:	22 0f       	add	r18, r18
    3852:	33 1f       	adc	r19, r19
    3854:	7a 95       	dec	r23
    3856:	e1 f7       	brne	.-8      	; 0x3850 <TOUCH_Calibrate+0x1ce>
    3858:	82 0f       	add	r24, r18
    385a:	93 1f       	adc	r25, r19
    385c:	90 93 bc 00 	sts	0x00BC, r25
    3860:	80 93 bb 00 	sts	0x00BB, r24
	TC_y_0 -= y;			// 0%
    3864:	e4 1b       	sub	r30, r20
    3866:	f5 0b       	sbc	r31, r21
    3868:	f0 93 ba 00 	sts	0x00BA, r31
    386c:	e0 93 b9 00 	sts	0x00B9, r30
	
	while(TOUCH_DOWN);
    3870:	83 9b       	sbis	0x10, 3	; 16
    3872:	fe cf       	rjmp	.-4      	; 0x3870 <TOUCH_Calibrate+0x1ee>
	// Do multiple sampling for better result
	//
	while(!TOUCH_DOWN);
	while(!TOUCH_MultipleRead(&x, &y));
	
	y = (y - TC_y_0)/8;	// 10%
    3874:	5c 83       	std	Y+4, r21	; 0x04
    3876:	4b 83       	std	Y+3, r20	; 0x03
	TC_y_100 = y*10;		// 100%
	TC_y_0 -= y;			// 0%
	
	while(TOUCH_DOWN);
	LCD_Clear(BLACK);
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_Clear>

	char text[100];

	// Draw final calibration data
	//
	sprintf(text, "x... 0 %%: %d  100 %%: %d ", TC_x_0, TC_x_100);
    3880:	8d b7       	in	r24, 0x3d	; 61
    3882:	9e b7       	in	r25, 0x3e	; 62
    3884:	08 97       	sbiw	r24, 0x08	; 8
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	9e bf       	out	0x3e, r25	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	8d bf       	out	0x3d, r24	; 61
    3890:	ed b7       	in	r30, 0x3d	; 61
    3892:	fe b7       	in	r31, 0x3e	; 62
    3894:	31 96       	adiw	r30, 0x01	; 1
    3896:	65 e0       	ldi	r22, 0x05	; 5
    3898:	e6 2e       	mov	r14, r22
    389a:	f1 2c       	mov	r15, r1
    389c:	ec 0e       	add	r14, r28
    389e:	fd 1e       	adc	r15, r29
    38a0:	ad b7       	in	r26, 0x3d	; 61
    38a2:	be b7       	in	r27, 0x3e	; 62
    38a4:	12 96       	adiw	r26, 0x02	; 2
    38a6:	fc 92       	st	X, r15
    38a8:	ee 92       	st	-X, r14
    38aa:	11 97       	sbiw	r26, 0x01	; 1
    38ac:	8f e7       	ldi	r24, 0x7F	; 127
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	93 83       	std	Z+3, r25	; 0x03
    38b2:	82 83       	std	Z+2, r24	; 0x02
    38b4:	80 91 b5 00 	lds	r24, 0x00B5
    38b8:	90 91 b6 00 	lds	r25, 0x00B6
    38bc:	95 83       	std	Z+5, r25	; 0x05
    38be:	84 83       	std	Z+4, r24	; 0x04
    38c0:	80 91 b7 00 	lds	r24, 0x00B7
    38c4:	90 91 b8 00 	lds	r25, 0x00B8
    38c8:	97 83       	std	Z+7, r25	; 0x07
    38ca:	86 83       	std	Z+6, r24	; 0x06
    38cc:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <sprintf>
	LCD_WriteString(10,200, text, YELLOW, BLACK);
    38d0:	8d b7       	in	r24, 0x3d	; 61
    38d2:	9e b7       	in	r25, 0x3e	; 62
    38d4:	08 96       	adiw	r24, 0x08	; 8
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	f8 94       	cli
    38da:	9e bf       	out	0x3e, r25	; 62
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	8d bf       	out	0x3d, r24	; 61
    38e0:	8a e0       	ldi	r24, 0x0A	; 10
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	68 ec       	ldi	r22, 0xC8	; 200
    38e6:	70 e0       	ldi	r23, 0x00	; 0
    38e8:	a7 01       	movw	r20, r14
    38ea:	20 ee       	ldi	r18, 0xE0	; 224
    38ec:	3f ef       	ldi	r19, 0xFF	; 255
    38ee:	00 e0       	ldi	r16, 0x00	; 0
    38f0:	10 e0       	ldi	r17, 0x00	; 0
    38f2:	0e 94 89 07 	call	0xf12	; 0xf12 <LCD_WriteString>
	sprintf(text, "y... 0 %%: %d  100 %%: %d ", TC_y_0, TC_y_100);
    38f6:	ad b7       	in	r26, 0x3d	; 61
    38f8:	be b7       	in	r27, 0x3e	; 62
    38fa:	18 97       	sbiw	r26, 0x08	; 8
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	be bf       	out	0x3e, r27	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	ad bf       	out	0x3d, r26	; 61
    3906:	ed b7       	in	r30, 0x3d	; 61
    3908:	fe b7       	in	r31, 0x3e	; 62
    390a:	31 96       	adiw	r30, 0x01	; 1
    390c:	12 96       	adiw	r26, 0x02	; 2
    390e:	fc 92       	st	X, r15
    3910:	ee 92       	st	-X, r14
    3912:	11 97       	sbiw	r26, 0x01	; 1
    3914:	8a e9       	ldi	r24, 0x9A	; 154
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	93 83       	std	Z+3, r25	; 0x03
    391a:	82 83       	std	Z+2, r24	; 0x02
    391c:	80 91 b9 00 	lds	r24, 0x00B9
    3920:	90 91 ba 00 	lds	r25, 0x00BA
    3924:	95 83       	std	Z+5, r25	; 0x05
    3926:	84 83       	std	Z+4, r24	; 0x04
    3928:	80 91 bb 00 	lds	r24, 0x00BB
    392c:	90 91 bc 00 	lds	r25, 0x00BC
    3930:	97 83       	std	Z+7, r25	; 0x07
    3932:	86 83       	std	Z+6, r24	; 0x06
    3934:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <sprintf>
	LCD_WriteString(10,220, text, YELLOW, BLACK);
    3938:	8d b7       	in	r24, 0x3d	; 61
    393a:	9e b7       	in	r25, 0x3e	; 62
    393c:	08 96       	adiw	r24, 0x08	; 8
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	9e bf       	out	0x3e, r25	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	8d bf       	out	0x3d, r24	; 61
    3948:	8a e0       	ldi	r24, 0x0A	; 10
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	6c ed       	ldi	r22, 0xDC	; 220
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	a7 01       	movw	r20, r14
    3952:	20 ee       	ldi	r18, 0xE0	; 224
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	0e 94 89 07 	call	0xf12	; 0xf12 <LCD_WriteString>

#endif

	while(!TOUCH_DOWN);
    395a:	83 99       	sbic	0x10, 3	; 16
    395c:	fe cf       	rjmp	.-4      	; 0x395a <TOUCH_Calibrate+0x2d8>
}
    395e:	c8 59       	subi	r28, 0x98	; 152
    3960:	df 4f       	sbci	r29, 0xFF	; 255
    3962:	0f b6       	in	r0, 0x3f	; 63
    3964:	f8 94       	cli
    3966:	de bf       	out	0x3e, r29	; 62
    3968:	0f be       	out	0x3f, r0	; 63
    396a:	cd bf       	out	0x3d, r28	; 61
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	ff 90       	pop	r15
    3976:	ef 90       	pop	r14
    3978:	08 95       	ret

0000397a <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
    397a:	b8 9a       	sbi	0x17, 0	; 23
	sbi	DDR_DI		; DI: output
    397c:	ba 9a       	sbi	0x17, 2	; 23
	sbi	DDR_CK		; SCLK: output
    397e:	b9 9a       	sbi	0x17, 1	; 23
	sbi	PORT_DO		; DO: pull-up
    3980:	c3 9a       	sbi	0x18, 3	; 24
	ret
    3982:	08 95       	ret

00003984 <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(80)	/* Loop counter for 8mhz*/
    3984:	80 e5       	ldi	r24, 0x50	; 80
1:	sbiw	r30, 1		/* 10 clocks per loop */
    3986:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    3988:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    398a:	31 97       	sbiw	r30, 0x01	; 1
	nop
    398c:	00 00       	nop
	dec	r24
    398e:	8a 95       	dec	r24
	brne	1b
    3990:	d1 f7       	brne	.-12     	; 0x3986 <dly_100us+0x2>
	ret
    3992:	08 95       	ret

00003994 <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
    3994:	02 d0       	rcall	.+4      	; 0x399a <deselect>
	cbi	PORT_CS
    3996:	c0 98       	cbi	0x18, 0	; 24
	rjmp	rcv_spi
    3998:	01 c0       	rjmp	.+2      	; 0x399c <rcv_spi>

0000399a <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
    399a:	c0 9a       	sbi	0x18, 0	; 24

0000399c <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
    399c:	8f ef       	ldi	r24, 0xFF	; 255

0000399e <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
    399e:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
    39a0:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
    39a2:	c2 9a       	sbi	0x18, 2	; 24
	sbrs	r24, 7		; 
    39a4:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
    39a6:	c2 98       	cbi	0x18, 2	; 24
	lsl	r24		; Get DO from MMC
    39a8:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
    39aa:	b3 99       	sbic	0x16, 3	; 22
	inc	r24		; /
    39ac:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
    39ae:	c1 9a       	sbi	0x18, 1	; 24
	cbi	PORT_CK		; /
    39b0:	c1 98       	cbi	0x18, 1	; 24
	dec	r25		; Repeat 8 times
    39b2:	9a 95       	dec	r25
	brne	1b		; /
    39b4:	a9 f7       	brne	.-22     	; 0x39a0 <xmit_spi+0x2>
	ret
    39b6:	08 95       	ret

000039b8 <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
    39b8:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
    39ba:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCR), r24
    39bc:	80 93 57 00 	sts	0x0057, r24
	spm
    39c0:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    39c2:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    39c6:	80 fd       	sbrc	r24, 0
	rjmp	1b
    39c8:	fc cf       	rjmp	.-8      	; 0x39c2 <flash_erase+0xa>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    39ca:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    39cc:	80 93 57 00 	sts	0x0057, r24
	spm
    39d0:	e8 95       	spm

9:	ret
    39d2:	08 95       	ret

000039d4 <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
    39d4:	0f 92       	push	r0
	push	r1
    39d6:	1f 92       	push	r1
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Fill page buffer
	movw	ZL, r22
    39d8:	fb 01       	movw	r30, r22
	movw	XL, r20
    39da:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
    39dc:	90 e4       	ldi	r25, 0x40	; 64
1:	ld	r0, X+
    39de:	0d 90       	ld	r0, X+
	ld	r1, X+
    39e0:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
    39e2:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCR), r24
    39e4:	80 93 57 00 	sts	0x0057, r24
	spm
    39e8:	e8 95       	spm
	adiw	ZL, 2
    39ea:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
    39ec:	9a 95       	dec	r25
	brne	1b
    39ee:	b9 f7       	brne	.-18     	; 0x39de <flash_write+0xa>

	; Initiate write operation
	movw	ZL, r22
    39f0:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
    39f2:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCR), r24
    39f4:	80 93 57 00 	sts	0x0057, r24
	spm
    39f8:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    39fa:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    39fe:	80 fd       	sbrc	r24, 0
	rjmp	2b
    3a00:	fc cf       	rjmp	.-8      	; 0x39fa <flash_write+0x26>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    3a02:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    3a04:	80 93 57 00 	sts	0x0057, r24
	spm
    3a08:	e8 95       	spm

9:	pop	r1
    3a0a:	1f 90       	pop	r1
	pop	r0
    3a0c:	0f 90       	pop	r0
	ret
    3a0e:	08 95       	ret

00003a10 <__subsf3>:
    3a10:	50 58       	subi	r21, 0x80	; 128

00003a12 <__addsf3>:
    3a12:	bb 27       	eor	r27, r27
    3a14:	aa 27       	eor	r26, r26
    3a16:	0e d0       	rcall	.+28     	; 0x3a34 <__addsf3x>
    3a18:	4d c1       	rjmp	.+666    	; 0x3cb4 <__fp_round>
    3a1a:	3e d1       	rcall	.+636    	; 0x3c98 <__fp_pscA>
    3a1c:	30 f0       	brcs	.+12     	; 0x3a2a <__addsf3+0x18>
    3a1e:	43 d1       	rcall	.+646    	; 0x3ca6 <__fp_pscB>
    3a20:	20 f0       	brcs	.+8      	; 0x3a2a <__addsf3+0x18>
    3a22:	31 f4       	brne	.+12     	; 0x3a30 <__addsf3+0x1e>
    3a24:	9f 3f       	cpi	r25, 0xFF	; 255
    3a26:	11 f4       	brne	.+4      	; 0x3a2c <__addsf3+0x1a>
    3a28:	1e f4       	brtc	.+6      	; 0x3a30 <__addsf3+0x1e>
    3a2a:	33 c1       	rjmp	.+614    	; 0x3c92 <__fp_nan>
    3a2c:	0e f4       	brtc	.+2      	; 0x3a30 <__addsf3+0x1e>
    3a2e:	e0 95       	com	r30
    3a30:	e7 fb       	bst	r30, 7
    3a32:	29 c1       	rjmp	.+594    	; 0x3c86 <__fp_inf>

00003a34 <__addsf3x>:
    3a34:	e9 2f       	mov	r30, r25
    3a36:	4f d1       	rcall	.+670    	; 0x3cd6 <__fp_split3>
    3a38:	80 f3       	brcs	.-32     	; 0x3a1a <__addsf3+0x8>
    3a3a:	ba 17       	cp	r27, r26
    3a3c:	62 07       	cpc	r22, r18
    3a3e:	73 07       	cpc	r23, r19
    3a40:	84 07       	cpc	r24, r20
    3a42:	95 07       	cpc	r25, r21
    3a44:	18 f0       	brcs	.+6      	; 0x3a4c <__addsf3x+0x18>
    3a46:	71 f4       	brne	.+28     	; 0x3a64 <__addsf3x+0x30>
    3a48:	9e f5       	brtc	.+102    	; 0x3ab0 <__addsf3x+0x7c>
    3a4a:	67 c1       	rjmp	.+718    	; 0x3d1a <__fp_zero>
    3a4c:	0e f4       	brtc	.+2      	; 0x3a50 <__addsf3x+0x1c>
    3a4e:	e0 95       	com	r30
    3a50:	0b 2e       	mov	r0, r27
    3a52:	ba 2f       	mov	r27, r26
    3a54:	a0 2d       	mov	r26, r0
    3a56:	0b 01       	movw	r0, r22
    3a58:	b9 01       	movw	r22, r18
    3a5a:	90 01       	movw	r18, r0
    3a5c:	0c 01       	movw	r0, r24
    3a5e:	ca 01       	movw	r24, r20
    3a60:	a0 01       	movw	r20, r0
    3a62:	11 24       	eor	r1, r1
    3a64:	ff 27       	eor	r31, r31
    3a66:	59 1b       	sub	r21, r25
    3a68:	99 f0       	breq	.+38     	; 0x3a90 <__addsf3x+0x5c>
    3a6a:	59 3f       	cpi	r21, 0xF9	; 249
    3a6c:	50 f4       	brcc	.+20     	; 0x3a82 <__addsf3x+0x4e>
    3a6e:	50 3e       	cpi	r21, 0xE0	; 224
    3a70:	68 f1       	brcs	.+90     	; 0x3acc <__addsf3x+0x98>
    3a72:	1a 16       	cp	r1, r26
    3a74:	f0 40       	sbci	r31, 0x00	; 0
    3a76:	a2 2f       	mov	r26, r18
    3a78:	23 2f       	mov	r18, r19
    3a7a:	34 2f       	mov	r19, r20
    3a7c:	44 27       	eor	r20, r20
    3a7e:	58 5f       	subi	r21, 0xF8	; 248
    3a80:	f3 cf       	rjmp	.-26     	; 0x3a68 <__addsf3x+0x34>
    3a82:	46 95       	lsr	r20
    3a84:	37 95       	ror	r19
    3a86:	27 95       	ror	r18
    3a88:	a7 95       	ror	r26
    3a8a:	f0 40       	sbci	r31, 0x00	; 0
    3a8c:	53 95       	inc	r21
    3a8e:	c9 f7       	brne	.-14     	; 0x3a82 <__addsf3x+0x4e>
    3a90:	7e f4       	brtc	.+30     	; 0x3ab0 <__addsf3x+0x7c>
    3a92:	1f 16       	cp	r1, r31
    3a94:	ba 0b       	sbc	r27, r26
    3a96:	62 0b       	sbc	r22, r18
    3a98:	73 0b       	sbc	r23, r19
    3a9a:	84 0b       	sbc	r24, r20
    3a9c:	ba f0       	brmi	.+46     	; 0x3acc <__addsf3x+0x98>
    3a9e:	91 50       	subi	r25, 0x01	; 1
    3aa0:	a1 f0       	breq	.+40     	; 0x3aca <__addsf3x+0x96>
    3aa2:	ff 0f       	add	r31, r31
    3aa4:	bb 1f       	adc	r27, r27
    3aa6:	66 1f       	adc	r22, r22
    3aa8:	77 1f       	adc	r23, r23
    3aaa:	88 1f       	adc	r24, r24
    3aac:	c2 f7       	brpl	.-16     	; 0x3a9e <__addsf3x+0x6a>
    3aae:	0e c0       	rjmp	.+28     	; 0x3acc <__addsf3x+0x98>
    3ab0:	ba 0f       	add	r27, r26
    3ab2:	62 1f       	adc	r22, r18
    3ab4:	73 1f       	adc	r23, r19
    3ab6:	84 1f       	adc	r24, r20
    3ab8:	48 f4       	brcc	.+18     	; 0x3acc <__addsf3x+0x98>
    3aba:	87 95       	ror	r24
    3abc:	77 95       	ror	r23
    3abe:	67 95       	ror	r22
    3ac0:	b7 95       	ror	r27
    3ac2:	f7 95       	ror	r31
    3ac4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ac6:	08 f0       	brcs	.+2      	; 0x3aca <__addsf3x+0x96>
    3ac8:	b3 cf       	rjmp	.-154    	; 0x3a30 <__addsf3+0x1e>
    3aca:	93 95       	inc	r25
    3acc:	88 0f       	add	r24, r24
    3ace:	08 f0       	brcs	.+2      	; 0x3ad2 <__addsf3x+0x9e>
    3ad0:	99 27       	eor	r25, r25
    3ad2:	ee 0f       	add	r30, r30
    3ad4:	97 95       	ror	r25
    3ad6:	87 95       	ror	r24
    3ad8:	08 95       	ret

00003ada <__divsf3>:
    3ada:	0c d0       	rcall	.+24     	; 0x3af4 <__divsf3x>
    3adc:	eb c0       	rjmp	.+470    	; 0x3cb4 <__fp_round>
    3ade:	e3 d0       	rcall	.+454    	; 0x3ca6 <__fp_pscB>
    3ae0:	40 f0       	brcs	.+16     	; 0x3af2 <__divsf3+0x18>
    3ae2:	da d0       	rcall	.+436    	; 0x3c98 <__fp_pscA>
    3ae4:	30 f0       	brcs	.+12     	; 0x3af2 <__divsf3+0x18>
    3ae6:	21 f4       	brne	.+8      	; 0x3af0 <__divsf3+0x16>
    3ae8:	5f 3f       	cpi	r21, 0xFF	; 255
    3aea:	19 f0       	breq	.+6      	; 0x3af2 <__divsf3+0x18>
    3aec:	cc c0       	rjmp	.+408    	; 0x3c86 <__fp_inf>
    3aee:	51 11       	cpse	r21, r1
    3af0:	15 c1       	rjmp	.+554    	; 0x3d1c <__fp_szero>
    3af2:	cf c0       	rjmp	.+414    	; 0x3c92 <__fp_nan>

00003af4 <__divsf3x>:
    3af4:	f0 d0       	rcall	.+480    	; 0x3cd6 <__fp_split3>
    3af6:	98 f3       	brcs	.-26     	; 0x3ade <__divsf3+0x4>

00003af8 <__divsf3_pse>:
    3af8:	99 23       	and	r25, r25
    3afa:	c9 f3       	breq	.-14     	; 0x3aee <__divsf3+0x14>
    3afc:	55 23       	and	r21, r21
    3afe:	b1 f3       	breq	.-20     	; 0x3aec <__divsf3+0x12>
    3b00:	95 1b       	sub	r25, r21
    3b02:	55 0b       	sbc	r21, r21
    3b04:	bb 27       	eor	r27, r27
    3b06:	aa 27       	eor	r26, r26
    3b08:	62 17       	cp	r22, r18
    3b0a:	73 07       	cpc	r23, r19
    3b0c:	84 07       	cpc	r24, r20
    3b0e:	38 f0       	brcs	.+14     	; 0x3b1e <__divsf3_pse+0x26>
    3b10:	9f 5f       	subi	r25, 0xFF	; 255
    3b12:	5f 4f       	sbci	r21, 0xFF	; 255
    3b14:	22 0f       	add	r18, r18
    3b16:	33 1f       	adc	r19, r19
    3b18:	44 1f       	adc	r20, r20
    3b1a:	aa 1f       	adc	r26, r26
    3b1c:	a9 f3       	breq	.-22     	; 0x3b08 <__divsf3_pse+0x10>
    3b1e:	33 d0       	rcall	.+102    	; 0x3b86 <__divsf3_pse+0x8e>
    3b20:	0e 2e       	mov	r0, r30
    3b22:	3a f0       	brmi	.+14     	; 0x3b32 <__divsf3_pse+0x3a>
    3b24:	e0 e8       	ldi	r30, 0x80	; 128
    3b26:	30 d0       	rcall	.+96     	; 0x3b88 <__divsf3_pse+0x90>
    3b28:	91 50       	subi	r25, 0x01	; 1
    3b2a:	50 40       	sbci	r21, 0x00	; 0
    3b2c:	e6 95       	lsr	r30
    3b2e:	00 1c       	adc	r0, r0
    3b30:	ca f7       	brpl	.-14     	; 0x3b24 <__divsf3_pse+0x2c>
    3b32:	29 d0       	rcall	.+82     	; 0x3b86 <__divsf3_pse+0x8e>
    3b34:	fe 2f       	mov	r31, r30
    3b36:	27 d0       	rcall	.+78     	; 0x3b86 <__divsf3_pse+0x8e>
    3b38:	66 0f       	add	r22, r22
    3b3a:	77 1f       	adc	r23, r23
    3b3c:	88 1f       	adc	r24, r24
    3b3e:	bb 1f       	adc	r27, r27
    3b40:	26 17       	cp	r18, r22
    3b42:	37 07       	cpc	r19, r23
    3b44:	48 07       	cpc	r20, r24
    3b46:	ab 07       	cpc	r26, r27
    3b48:	b0 e8       	ldi	r27, 0x80	; 128
    3b4a:	09 f0       	breq	.+2      	; 0x3b4e <__divsf3_pse+0x56>
    3b4c:	bb 0b       	sbc	r27, r27
    3b4e:	80 2d       	mov	r24, r0
    3b50:	bf 01       	movw	r22, r30
    3b52:	ff 27       	eor	r31, r31
    3b54:	93 58       	subi	r25, 0x83	; 131
    3b56:	5f 4f       	sbci	r21, 0xFF	; 255
    3b58:	2a f0       	brmi	.+10     	; 0x3b64 <__divsf3_pse+0x6c>
    3b5a:	9e 3f       	cpi	r25, 0xFE	; 254
    3b5c:	51 05       	cpc	r21, r1
    3b5e:	68 f0       	brcs	.+26     	; 0x3b7a <__divsf3_pse+0x82>
    3b60:	92 c0       	rjmp	.+292    	; 0x3c86 <__fp_inf>
    3b62:	dc c0       	rjmp	.+440    	; 0x3d1c <__fp_szero>
    3b64:	5f 3f       	cpi	r21, 0xFF	; 255
    3b66:	ec f3       	brlt	.-6      	; 0x3b62 <__divsf3_pse+0x6a>
    3b68:	98 3e       	cpi	r25, 0xE8	; 232
    3b6a:	dc f3       	brlt	.-10     	; 0x3b62 <__divsf3_pse+0x6a>
    3b6c:	86 95       	lsr	r24
    3b6e:	77 95       	ror	r23
    3b70:	67 95       	ror	r22
    3b72:	b7 95       	ror	r27
    3b74:	f7 95       	ror	r31
    3b76:	9f 5f       	subi	r25, 0xFF	; 255
    3b78:	c9 f7       	brne	.-14     	; 0x3b6c <__divsf3_pse+0x74>
    3b7a:	88 0f       	add	r24, r24
    3b7c:	91 1d       	adc	r25, r1
    3b7e:	96 95       	lsr	r25
    3b80:	87 95       	ror	r24
    3b82:	97 f9       	bld	r25, 7
    3b84:	08 95       	ret
    3b86:	e1 e0       	ldi	r30, 0x01	; 1
    3b88:	66 0f       	add	r22, r22
    3b8a:	77 1f       	adc	r23, r23
    3b8c:	88 1f       	adc	r24, r24
    3b8e:	bb 1f       	adc	r27, r27
    3b90:	62 17       	cp	r22, r18
    3b92:	73 07       	cpc	r23, r19
    3b94:	84 07       	cpc	r24, r20
    3b96:	ba 07       	cpc	r27, r26
    3b98:	20 f0       	brcs	.+8      	; 0x3ba2 <__divsf3_pse+0xaa>
    3b9a:	62 1b       	sub	r22, r18
    3b9c:	73 0b       	sbc	r23, r19
    3b9e:	84 0b       	sbc	r24, r20
    3ba0:	ba 0b       	sbc	r27, r26
    3ba2:	ee 1f       	adc	r30, r30
    3ba4:	88 f7       	brcc	.-30     	; 0x3b88 <__divsf3_pse+0x90>
    3ba6:	e0 95       	com	r30
    3ba8:	08 95       	ret

00003baa <__fixsfsi>:
    3baa:	04 d0       	rcall	.+8      	; 0x3bb4 <__fixunssfsi>
    3bac:	68 94       	set
    3bae:	b1 11       	cpse	r27, r1
    3bb0:	b5 c0       	rjmp	.+362    	; 0x3d1c <__fp_szero>
    3bb2:	08 95       	ret

00003bb4 <__fixunssfsi>:
    3bb4:	98 d0       	rcall	.+304    	; 0x3ce6 <__fp_splitA>
    3bb6:	88 f0       	brcs	.+34     	; 0x3bda <__fixunssfsi+0x26>
    3bb8:	9f 57       	subi	r25, 0x7F	; 127
    3bba:	90 f0       	brcs	.+36     	; 0x3be0 <__fixunssfsi+0x2c>
    3bbc:	b9 2f       	mov	r27, r25
    3bbe:	99 27       	eor	r25, r25
    3bc0:	b7 51       	subi	r27, 0x17	; 23
    3bc2:	a0 f0       	brcs	.+40     	; 0x3bec <__fixunssfsi+0x38>
    3bc4:	d1 f0       	breq	.+52     	; 0x3bfa <__fixunssfsi+0x46>
    3bc6:	66 0f       	add	r22, r22
    3bc8:	77 1f       	adc	r23, r23
    3bca:	88 1f       	adc	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	1a f0       	brmi	.+6      	; 0x3bd6 <__fixunssfsi+0x22>
    3bd0:	ba 95       	dec	r27
    3bd2:	c9 f7       	brne	.-14     	; 0x3bc6 <__fixunssfsi+0x12>
    3bd4:	12 c0       	rjmp	.+36     	; 0x3bfa <__fixunssfsi+0x46>
    3bd6:	b1 30       	cpi	r27, 0x01	; 1
    3bd8:	81 f0       	breq	.+32     	; 0x3bfa <__fixunssfsi+0x46>
    3bda:	9f d0       	rcall	.+318    	; 0x3d1a <__fp_zero>
    3bdc:	b1 e0       	ldi	r27, 0x01	; 1
    3bde:	08 95       	ret
    3be0:	9c c0       	rjmp	.+312    	; 0x3d1a <__fp_zero>
    3be2:	67 2f       	mov	r22, r23
    3be4:	78 2f       	mov	r23, r24
    3be6:	88 27       	eor	r24, r24
    3be8:	b8 5f       	subi	r27, 0xF8	; 248
    3bea:	39 f0       	breq	.+14     	; 0x3bfa <__fixunssfsi+0x46>
    3bec:	b9 3f       	cpi	r27, 0xF9	; 249
    3bee:	cc f3       	brlt	.-14     	; 0x3be2 <__fixunssfsi+0x2e>
    3bf0:	86 95       	lsr	r24
    3bf2:	77 95       	ror	r23
    3bf4:	67 95       	ror	r22
    3bf6:	b3 95       	inc	r27
    3bf8:	d9 f7       	brne	.-10     	; 0x3bf0 <__fixunssfsi+0x3c>
    3bfa:	3e f4       	brtc	.+14     	; 0x3c0a <__fixunssfsi+0x56>
    3bfc:	90 95       	com	r25
    3bfe:	80 95       	com	r24
    3c00:	70 95       	com	r23
    3c02:	61 95       	neg	r22
    3c04:	7f 4f       	sbci	r23, 0xFF	; 255
    3c06:	8f 4f       	sbci	r24, 0xFF	; 255
    3c08:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0a:	08 95       	ret

00003c0c <__floatunsisf>:
    3c0c:	e8 94       	clt
    3c0e:	09 c0       	rjmp	.+18     	; 0x3c22 <__floatsisf+0x12>

00003c10 <__floatsisf>:
    3c10:	97 fb       	bst	r25, 7
    3c12:	3e f4       	brtc	.+14     	; 0x3c22 <__floatsisf+0x12>
    3c14:	90 95       	com	r25
    3c16:	80 95       	com	r24
    3c18:	70 95       	com	r23
    3c1a:	61 95       	neg	r22
    3c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c20:	9f 4f       	sbci	r25, 0xFF	; 255
    3c22:	99 23       	and	r25, r25
    3c24:	a9 f0       	breq	.+42     	; 0x3c50 <__floatsisf+0x40>
    3c26:	f9 2f       	mov	r31, r25
    3c28:	96 e9       	ldi	r25, 0x96	; 150
    3c2a:	bb 27       	eor	r27, r27
    3c2c:	93 95       	inc	r25
    3c2e:	f6 95       	lsr	r31
    3c30:	87 95       	ror	r24
    3c32:	77 95       	ror	r23
    3c34:	67 95       	ror	r22
    3c36:	b7 95       	ror	r27
    3c38:	f1 11       	cpse	r31, r1
    3c3a:	f8 cf       	rjmp	.-16     	; 0x3c2c <__floatsisf+0x1c>
    3c3c:	fa f4       	brpl	.+62     	; 0x3c7c <__floatsisf+0x6c>
    3c3e:	bb 0f       	add	r27, r27
    3c40:	11 f4       	brne	.+4      	; 0x3c46 <__floatsisf+0x36>
    3c42:	60 ff       	sbrs	r22, 0
    3c44:	1b c0       	rjmp	.+54     	; 0x3c7c <__floatsisf+0x6c>
    3c46:	6f 5f       	subi	r22, 0xFF	; 255
    3c48:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4e:	16 c0       	rjmp	.+44     	; 0x3c7c <__floatsisf+0x6c>
    3c50:	88 23       	and	r24, r24
    3c52:	11 f0       	breq	.+4      	; 0x3c58 <__floatsisf+0x48>
    3c54:	96 e9       	ldi	r25, 0x96	; 150
    3c56:	11 c0       	rjmp	.+34     	; 0x3c7a <__floatsisf+0x6a>
    3c58:	77 23       	and	r23, r23
    3c5a:	21 f0       	breq	.+8      	; 0x3c64 <__floatsisf+0x54>
    3c5c:	9e e8       	ldi	r25, 0x8E	; 142
    3c5e:	87 2f       	mov	r24, r23
    3c60:	76 2f       	mov	r23, r22
    3c62:	05 c0       	rjmp	.+10     	; 0x3c6e <__floatsisf+0x5e>
    3c64:	66 23       	and	r22, r22
    3c66:	71 f0       	breq	.+28     	; 0x3c84 <__floatsisf+0x74>
    3c68:	96 e8       	ldi	r25, 0x86	; 134
    3c6a:	86 2f       	mov	r24, r22
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	60 e0       	ldi	r22, 0x00	; 0
    3c70:	2a f0       	brmi	.+10     	; 0x3c7c <__floatsisf+0x6c>
    3c72:	9a 95       	dec	r25
    3c74:	66 0f       	add	r22, r22
    3c76:	77 1f       	adc	r23, r23
    3c78:	88 1f       	adc	r24, r24
    3c7a:	da f7       	brpl	.-10     	; 0x3c72 <__floatsisf+0x62>
    3c7c:	88 0f       	add	r24, r24
    3c7e:	96 95       	lsr	r25
    3c80:	87 95       	ror	r24
    3c82:	97 f9       	bld	r25, 7
    3c84:	08 95       	ret

00003c86 <__fp_inf>:
    3c86:	97 f9       	bld	r25, 7
    3c88:	9f 67       	ori	r25, 0x7F	; 127
    3c8a:	80 e8       	ldi	r24, 0x80	; 128
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	08 95       	ret

00003c92 <__fp_nan>:
    3c92:	9f ef       	ldi	r25, 0xFF	; 255
    3c94:	80 ec       	ldi	r24, 0xC0	; 192
    3c96:	08 95       	ret

00003c98 <__fp_pscA>:
    3c98:	00 24       	eor	r0, r0
    3c9a:	0a 94       	dec	r0
    3c9c:	16 16       	cp	r1, r22
    3c9e:	17 06       	cpc	r1, r23
    3ca0:	18 06       	cpc	r1, r24
    3ca2:	09 06       	cpc	r0, r25
    3ca4:	08 95       	ret

00003ca6 <__fp_pscB>:
    3ca6:	00 24       	eor	r0, r0
    3ca8:	0a 94       	dec	r0
    3caa:	12 16       	cp	r1, r18
    3cac:	13 06       	cpc	r1, r19
    3cae:	14 06       	cpc	r1, r20
    3cb0:	05 06       	cpc	r0, r21
    3cb2:	08 95       	ret

00003cb4 <__fp_round>:
    3cb4:	09 2e       	mov	r0, r25
    3cb6:	03 94       	inc	r0
    3cb8:	00 0c       	add	r0, r0
    3cba:	11 f4       	brne	.+4      	; 0x3cc0 <__fp_round+0xc>
    3cbc:	88 23       	and	r24, r24
    3cbe:	52 f0       	brmi	.+20     	; 0x3cd4 <__fp_round+0x20>
    3cc0:	bb 0f       	add	r27, r27
    3cc2:	40 f4       	brcc	.+16     	; 0x3cd4 <__fp_round+0x20>
    3cc4:	bf 2b       	or	r27, r31
    3cc6:	11 f4       	brne	.+4      	; 0x3ccc <__fp_round+0x18>
    3cc8:	60 ff       	sbrs	r22, 0
    3cca:	04 c0       	rjmp	.+8      	; 0x3cd4 <__fp_round+0x20>
    3ccc:	6f 5f       	subi	r22, 0xFF	; 255
    3cce:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd4:	08 95       	ret

00003cd6 <__fp_split3>:
    3cd6:	57 fd       	sbrc	r21, 7
    3cd8:	90 58       	subi	r25, 0x80	; 128
    3cda:	44 0f       	add	r20, r20
    3cdc:	55 1f       	adc	r21, r21
    3cde:	59 f0       	breq	.+22     	; 0x3cf6 <__fp_splitA+0x10>
    3ce0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce2:	71 f0       	breq	.+28     	; 0x3d00 <__fp_splitA+0x1a>
    3ce4:	47 95       	ror	r20

00003ce6 <__fp_splitA>:
    3ce6:	88 0f       	add	r24, r24
    3ce8:	97 fb       	bst	r25, 7
    3cea:	99 1f       	adc	r25, r25
    3cec:	61 f0       	breq	.+24     	; 0x3d06 <__fp_splitA+0x20>
    3cee:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf0:	79 f0       	breq	.+30     	; 0x3d10 <__fp_splitA+0x2a>
    3cf2:	87 95       	ror	r24
    3cf4:	08 95       	ret
    3cf6:	12 16       	cp	r1, r18
    3cf8:	13 06       	cpc	r1, r19
    3cfa:	14 06       	cpc	r1, r20
    3cfc:	55 1f       	adc	r21, r21
    3cfe:	f2 cf       	rjmp	.-28     	; 0x3ce4 <__fp_split3+0xe>
    3d00:	46 95       	lsr	r20
    3d02:	f1 df       	rcall	.-30     	; 0x3ce6 <__fp_splitA>
    3d04:	08 c0       	rjmp	.+16     	; 0x3d16 <__fp_splitA+0x30>
    3d06:	16 16       	cp	r1, r22
    3d08:	17 06       	cpc	r1, r23
    3d0a:	18 06       	cpc	r1, r24
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	f1 cf       	rjmp	.-30     	; 0x3cf2 <__fp_splitA+0xc>
    3d10:	86 95       	lsr	r24
    3d12:	71 05       	cpc	r23, r1
    3d14:	61 05       	cpc	r22, r1
    3d16:	08 94       	sec
    3d18:	08 95       	ret

00003d1a <__fp_zero>:
    3d1a:	e8 94       	clt

00003d1c <__fp_szero>:
    3d1c:	bb 27       	eor	r27, r27
    3d1e:	66 27       	eor	r22, r22
    3d20:	77 27       	eor	r23, r23
    3d22:	cb 01       	movw	r24, r22
    3d24:	97 f9       	bld	r25, 7
    3d26:	08 95       	ret

00003d28 <__mulsf3>:
    3d28:	0b d0       	rcall	.+22     	; 0x3d40 <__mulsf3x>
    3d2a:	c4 cf       	rjmp	.-120    	; 0x3cb4 <__fp_round>
    3d2c:	b5 df       	rcall	.-150    	; 0x3c98 <__fp_pscA>
    3d2e:	28 f0       	brcs	.+10     	; 0x3d3a <__mulsf3+0x12>
    3d30:	ba df       	rcall	.-140    	; 0x3ca6 <__fp_pscB>
    3d32:	18 f0       	brcs	.+6      	; 0x3d3a <__mulsf3+0x12>
    3d34:	95 23       	and	r25, r21
    3d36:	09 f0       	breq	.+2      	; 0x3d3a <__mulsf3+0x12>
    3d38:	a6 cf       	rjmp	.-180    	; 0x3c86 <__fp_inf>
    3d3a:	ab cf       	rjmp	.-170    	; 0x3c92 <__fp_nan>
    3d3c:	11 24       	eor	r1, r1
    3d3e:	ee cf       	rjmp	.-36     	; 0x3d1c <__fp_szero>

00003d40 <__mulsf3x>:
    3d40:	ca df       	rcall	.-108    	; 0x3cd6 <__fp_split3>
    3d42:	a0 f3       	brcs	.-24     	; 0x3d2c <__mulsf3+0x4>

00003d44 <__mulsf3_pse>:
    3d44:	95 9f       	mul	r25, r21
    3d46:	d1 f3       	breq	.-12     	; 0x3d3c <__mulsf3+0x14>
    3d48:	95 0f       	add	r25, r21
    3d4a:	50 e0       	ldi	r21, 0x00	; 0
    3d4c:	55 1f       	adc	r21, r21
    3d4e:	62 9f       	mul	r22, r18
    3d50:	f0 01       	movw	r30, r0
    3d52:	72 9f       	mul	r23, r18
    3d54:	bb 27       	eor	r27, r27
    3d56:	f0 0d       	add	r31, r0
    3d58:	b1 1d       	adc	r27, r1
    3d5a:	63 9f       	mul	r22, r19
    3d5c:	aa 27       	eor	r26, r26
    3d5e:	f0 0d       	add	r31, r0
    3d60:	b1 1d       	adc	r27, r1
    3d62:	aa 1f       	adc	r26, r26
    3d64:	64 9f       	mul	r22, r20
    3d66:	66 27       	eor	r22, r22
    3d68:	b0 0d       	add	r27, r0
    3d6a:	a1 1d       	adc	r26, r1
    3d6c:	66 1f       	adc	r22, r22
    3d6e:	82 9f       	mul	r24, r18
    3d70:	22 27       	eor	r18, r18
    3d72:	b0 0d       	add	r27, r0
    3d74:	a1 1d       	adc	r26, r1
    3d76:	62 1f       	adc	r22, r18
    3d78:	73 9f       	mul	r23, r19
    3d7a:	b0 0d       	add	r27, r0
    3d7c:	a1 1d       	adc	r26, r1
    3d7e:	62 1f       	adc	r22, r18
    3d80:	83 9f       	mul	r24, r19
    3d82:	a0 0d       	add	r26, r0
    3d84:	61 1d       	adc	r22, r1
    3d86:	22 1f       	adc	r18, r18
    3d88:	74 9f       	mul	r23, r20
    3d8a:	33 27       	eor	r19, r19
    3d8c:	a0 0d       	add	r26, r0
    3d8e:	61 1d       	adc	r22, r1
    3d90:	23 1f       	adc	r18, r19
    3d92:	84 9f       	mul	r24, r20
    3d94:	60 0d       	add	r22, r0
    3d96:	21 1d       	adc	r18, r1
    3d98:	82 2f       	mov	r24, r18
    3d9a:	76 2f       	mov	r23, r22
    3d9c:	6a 2f       	mov	r22, r26
    3d9e:	11 24       	eor	r1, r1
    3da0:	9f 57       	subi	r25, 0x7F	; 127
    3da2:	50 40       	sbci	r21, 0x00	; 0
    3da4:	8a f0       	brmi	.+34     	; 0x3dc8 <__mulsf3_pse+0x84>
    3da6:	e1 f0       	breq	.+56     	; 0x3de0 <__mulsf3_pse+0x9c>
    3da8:	88 23       	and	r24, r24
    3daa:	4a f0       	brmi	.+18     	; 0x3dbe <__mulsf3_pse+0x7a>
    3dac:	ee 0f       	add	r30, r30
    3dae:	ff 1f       	adc	r31, r31
    3db0:	bb 1f       	adc	r27, r27
    3db2:	66 1f       	adc	r22, r22
    3db4:	77 1f       	adc	r23, r23
    3db6:	88 1f       	adc	r24, r24
    3db8:	91 50       	subi	r25, 0x01	; 1
    3dba:	50 40       	sbci	r21, 0x00	; 0
    3dbc:	a9 f7       	brne	.-22     	; 0x3da8 <__mulsf3_pse+0x64>
    3dbe:	9e 3f       	cpi	r25, 0xFE	; 254
    3dc0:	51 05       	cpc	r21, r1
    3dc2:	70 f0       	brcs	.+28     	; 0x3de0 <__mulsf3_pse+0x9c>
    3dc4:	60 cf       	rjmp	.-320    	; 0x3c86 <__fp_inf>
    3dc6:	aa cf       	rjmp	.-172    	; 0x3d1c <__fp_szero>
    3dc8:	5f 3f       	cpi	r21, 0xFF	; 255
    3dca:	ec f3       	brlt	.-6      	; 0x3dc6 <__mulsf3_pse+0x82>
    3dcc:	98 3e       	cpi	r25, 0xE8	; 232
    3dce:	dc f3       	brlt	.-10     	; 0x3dc6 <__mulsf3_pse+0x82>
    3dd0:	86 95       	lsr	r24
    3dd2:	77 95       	ror	r23
    3dd4:	67 95       	ror	r22
    3dd6:	b7 95       	ror	r27
    3dd8:	f7 95       	ror	r31
    3dda:	e7 95       	ror	r30
    3ddc:	9f 5f       	subi	r25, 0xFF	; 255
    3dde:	c1 f7       	brne	.-16     	; 0x3dd0 <__mulsf3_pse+0x8c>
    3de0:	fe 2b       	or	r31, r30
    3de2:	88 0f       	add	r24, r24
    3de4:	91 1d       	adc	r25, r1
    3de6:	96 95       	lsr	r25
    3de8:	87 95       	ror	r24
    3dea:	97 f9       	bld	r25, 7
    3dec:	08 95       	ret

00003dee <__mulsi3>:
    3dee:	62 9f       	mul	r22, r18
    3df0:	d0 01       	movw	r26, r0
    3df2:	73 9f       	mul	r23, r19
    3df4:	f0 01       	movw	r30, r0
    3df6:	82 9f       	mul	r24, r18
    3df8:	e0 0d       	add	r30, r0
    3dfa:	f1 1d       	adc	r31, r1
    3dfc:	64 9f       	mul	r22, r20
    3dfe:	e0 0d       	add	r30, r0
    3e00:	f1 1d       	adc	r31, r1
    3e02:	92 9f       	mul	r25, r18
    3e04:	f0 0d       	add	r31, r0
    3e06:	83 9f       	mul	r24, r19
    3e08:	f0 0d       	add	r31, r0
    3e0a:	74 9f       	mul	r23, r20
    3e0c:	f0 0d       	add	r31, r0
    3e0e:	65 9f       	mul	r22, r21
    3e10:	f0 0d       	add	r31, r0
    3e12:	99 27       	eor	r25, r25
    3e14:	72 9f       	mul	r23, r18
    3e16:	b0 0d       	add	r27, r0
    3e18:	e1 1d       	adc	r30, r1
    3e1a:	f9 1f       	adc	r31, r25
    3e1c:	63 9f       	mul	r22, r19
    3e1e:	b0 0d       	add	r27, r0
    3e20:	e1 1d       	adc	r30, r1
    3e22:	f9 1f       	adc	r31, r25
    3e24:	bd 01       	movw	r22, r26
    3e26:	cf 01       	movw	r24, r30
    3e28:	11 24       	eor	r1, r1
    3e2a:	08 95       	ret

00003e2c <__divmodhi4>:
    3e2c:	97 fb       	bst	r25, 7
    3e2e:	09 2e       	mov	r0, r25
    3e30:	07 26       	eor	r0, r23
    3e32:	0a d0       	rcall	.+20     	; 0x3e48 <__divmodhi4_neg1>
    3e34:	77 fd       	sbrc	r23, 7
    3e36:	04 d0       	rcall	.+8      	; 0x3e40 <__divmodhi4_neg2>
    3e38:	49 d0       	rcall	.+146    	; 0x3ecc <__udivmodhi4>
    3e3a:	06 d0       	rcall	.+12     	; 0x3e48 <__divmodhi4_neg1>
    3e3c:	00 20       	and	r0, r0
    3e3e:	1a f4       	brpl	.+6      	; 0x3e46 <__divmodhi4_exit>

00003e40 <__divmodhi4_neg2>:
    3e40:	70 95       	com	r23
    3e42:	61 95       	neg	r22
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255

00003e46 <__divmodhi4_exit>:
    3e46:	08 95       	ret

00003e48 <__divmodhi4_neg1>:
    3e48:	f6 f7       	brtc	.-4      	; 0x3e46 <__divmodhi4_exit>
    3e4a:	90 95       	com	r25
    3e4c:	81 95       	neg	r24
    3e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e50:	08 95       	ret

00003e52 <__udivmodsi4>:
    3e52:	a1 e2       	ldi	r26, 0x21	; 33
    3e54:	1a 2e       	mov	r1, r26
    3e56:	aa 1b       	sub	r26, r26
    3e58:	bb 1b       	sub	r27, r27
    3e5a:	fd 01       	movw	r30, r26
    3e5c:	0d c0       	rjmp	.+26     	; 0x3e78 <__udivmodsi4_ep>

00003e5e <__udivmodsi4_loop>:
    3e5e:	aa 1f       	adc	r26, r26
    3e60:	bb 1f       	adc	r27, r27
    3e62:	ee 1f       	adc	r30, r30
    3e64:	ff 1f       	adc	r31, r31
    3e66:	a2 17       	cp	r26, r18
    3e68:	b3 07       	cpc	r27, r19
    3e6a:	e4 07       	cpc	r30, r20
    3e6c:	f5 07       	cpc	r31, r21
    3e6e:	20 f0       	brcs	.+8      	; 0x3e78 <__udivmodsi4_ep>
    3e70:	a2 1b       	sub	r26, r18
    3e72:	b3 0b       	sbc	r27, r19
    3e74:	e4 0b       	sbc	r30, r20
    3e76:	f5 0b       	sbc	r31, r21

00003e78 <__udivmodsi4_ep>:
    3e78:	66 1f       	adc	r22, r22
    3e7a:	77 1f       	adc	r23, r23
    3e7c:	88 1f       	adc	r24, r24
    3e7e:	99 1f       	adc	r25, r25
    3e80:	1a 94       	dec	r1
    3e82:	69 f7       	brne	.-38     	; 0x3e5e <__udivmodsi4_loop>
    3e84:	60 95       	com	r22
    3e86:	70 95       	com	r23
    3e88:	80 95       	com	r24
    3e8a:	90 95       	com	r25
    3e8c:	9b 01       	movw	r18, r22
    3e8e:	ac 01       	movw	r20, r24
    3e90:	bd 01       	movw	r22, r26
    3e92:	cf 01       	movw	r24, r30
    3e94:	08 95       	ret

00003e96 <__divmodsi4>:
    3e96:	97 fb       	bst	r25, 7
    3e98:	09 2e       	mov	r0, r25
    3e9a:	05 26       	eor	r0, r21
    3e9c:	0e d0       	rcall	.+28     	; 0x3eba <__divmodsi4_neg1>
    3e9e:	57 fd       	sbrc	r21, 7
    3ea0:	04 d0       	rcall	.+8      	; 0x3eaa <__divmodsi4_neg2>
    3ea2:	d7 df       	rcall	.-82     	; 0x3e52 <__udivmodsi4>
    3ea4:	0a d0       	rcall	.+20     	; 0x3eba <__divmodsi4_neg1>
    3ea6:	00 1c       	adc	r0, r0
    3ea8:	38 f4       	brcc	.+14     	; 0x3eb8 <__divmodsi4_exit>

00003eaa <__divmodsi4_neg2>:
    3eaa:	50 95       	com	r21
    3eac:	40 95       	com	r20
    3eae:	30 95       	com	r19
    3eb0:	21 95       	neg	r18
    3eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb4:	4f 4f       	sbci	r20, 0xFF	; 255
    3eb6:	5f 4f       	sbci	r21, 0xFF	; 255

00003eb8 <__divmodsi4_exit>:
    3eb8:	08 95       	ret

00003eba <__divmodsi4_neg1>:
    3eba:	f6 f7       	brtc	.-4      	; 0x3eb8 <__divmodsi4_exit>
    3ebc:	90 95       	com	r25
    3ebe:	80 95       	com	r24
    3ec0:	70 95       	com	r23
    3ec2:	61 95       	neg	r22
    3ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eca:	08 95       	ret

00003ecc <__udivmodhi4>:
    3ecc:	aa 1b       	sub	r26, r26
    3ece:	bb 1b       	sub	r27, r27
    3ed0:	51 e1       	ldi	r21, 0x11	; 17
    3ed2:	07 c0       	rjmp	.+14     	; 0x3ee2 <__udivmodhi4_ep>

00003ed4 <__udivmodhi4_loop>:
    3ed4:	aa 1f       	adc	r26, r26
    3ed6:	bb 1f       	adc	r27, r27
    3ed8:	a6 17       	cp	r26, r22
    3eda:	b7 07       	cpc	r27, r23
    3edc:	10 f0       	brcs	.+4      	; 0x3ee2 <__udivmodhi4_ep>
    3ede:	a6 1b       	sub	r26, r22
    3ee0:	b7 0b       	sbc	r27, r23

00003ee2 <__udivmodhi4_ep>:
    3ee2:	88 1f       	adc	r24, r24
    3ee4:	99 1f       	adc	r25, r25
    3ee6:	5a 95       	dec	r21
    3ee8:	a9 f7       	brne	.-22     	; 0x3ed4 <__udivmodhi4_loop>
    3eea:	80 95       	com	r24
    3eec:	90 95       	com	r25
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	08 95       	ret

00003ef4 <do_rand>:
    3ef4:	a0 e0       	ldi	r26, 0x00	; 0
    3ef6:	b0 e0       	ldi	r27, 0x00	; 0
    3ef8:	e0 e8       	ldi	r30, 0x80	; 128
    3efa:	ff e1       	ldi	r31, 0x1F	; 31
    3efc:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__prologue_saves__+0x10>
    3f00:	ec 01       	movw	r28, r24
    3f02:	a8 80       	ld	r10, Y
    3f04:	b9 80       	ldd	r11, Y+1	; 0x01
    3f06:	ca 80       	ldd	r12, Y+2	; 0x02
    3f08:	db 80       	ldd	r13, Y+3	; 0x03
    3f0a:	a1 14       	cp	r10, r1
    3f0c:	b1 04       	cpc	r11, r1
    3f0e:	c1 04       	cpc	r12, r1
    3f10:	d1 04       	cpc	r13, r1
    3f12:	41 f4       	brne	.+16     	; 0x3f24 <do_rand+0x30>
    3f14:	84 e2       	ldi	r24, 0x24	; 36
    3f16:	a8 2e       	mov	r10, r24
    3f18:	89 ed       	ldi	r24, 0xD9	; 217
    3f1a:	b8 2e       	mov	r11, r24
    3f1c:	8b e5       	ldi	r24, 0x5B	; 91
    3f1e:	c8 2e       	mov	r12, r24
    3f20:	87 e0       	ldi	r24, 0x07	; 7
    3f22:	d8 2e       	mov	r13, r24
    3f24:	c6 01       	movw	r24, r12
    3f26:	b5 01       	movw	r22, r10
    3f28:	2d e1       	ldi	r18, 0x1D	; 29
    3f2a:	33 ef       	ldi	r19, 0xF3	; 243
    3f2c:	41 e0       	ldi	r20, 0x01	; 1
    3f2e:	50 e0       	ldi	r21, 0x00	; 0
    3f30:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__divmodsi4>
    3f34:	27 ea       	ldi	r18, 0xA7	; 167
    3f36:	31 e4       	ldi	r19, 0x41	; 65
    3f38:	40 e0       	ldi	r20, 0x00	; 0
    3f3a:	50 e0       	ldi	r21, 0x00	; 0
    3f3c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    3f40:	7b 01       	movw	r14, r22
    3f42:	8c 01       	movw	r16, r24
    3f44:	c6 01       	movw	r24, r12
    3f46:	b5 01       	movw	r22, r10
    3f48:	2d e1       	ldi	r18, 0x1D	; 29
    3f4a:	33 ef       	ldi	r19, 0xF3	; 243
    3f4c:	41 e0       	ldi	r20, 0x01	; 1
    3f4e:	50 e0       	ldi	r21, 0x00	; 0
    3f50:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__divmodsi4>
    3f54:	ca 01       	movw	r24, r20
    3f56:	b9 01       	movw	r22, r18
    3f58:	2c ee       	ldi	r18, 0xEC	; 236
    3f5a:	34 ef       	ldi	r19, 0xF4	; 244
    3f5c:	4f ef       	ldi	r20, 0xFF	; 255
    3f5e:	5f ef       	ldi	r21, 0xFF	; 255
    3f60:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsi3>
    3f64:	6e 0d       	add	r22, r14
    3f66:	7f 1d       	adc	r23, r15
    3f68:	80 1f       	adc	r24, r16
    3f6a:	91 1f       	adc	r25, r17
    3f6c:	97 ff       	sbrs	r25, 7
    3f6e:	04 c0       	rjmp	.+8      	; 0x3f78 <do_rand+0x84>
    3f70:	61 50       	subi	r22, 0x01	; 1
    3f72:	70 40       	sbci	r23, 0x00	; 0
    3f74:	80 40       	sbci	r24, 0x00	; 0
    3f76:	90 48       	sbci	r25, 0x80	; 128
    3f78:	68 83       	st	Y, r22
    3f7a:	79 83       	std	Y+1, r23	; 0x01
    3f7c:	8a 83       	std	Y+2, r24	; 0x02
    3f7e:	9b 83       	std	Y+3, r25	; 0x03
    3f80:	9b 01       	movw	r18, r22
    3f82:	3f 77       	andi	r19, 0x7F	; 127
    3f84:	c9 01       	movw	r24, r18
    3f86:	cd b7       	in	r28, 0x3d	; 61
    3f88:	de b7       	in	r29, 0x3e	; 62
    3f8a:	ea e0       	ldi	r30, 0x0A	; 10
    3f8c:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__epilogue_restores__+0x10>

00003f90 <rand_r>:
    3f90:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <do_rand>
    3f94:	08 95       	ret

00003f96 <rand>:
    3f96:	8d eb       	ldi	r24, 0xBD	; 189
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <do_rand>
    3f9e:	08 95       	ret

00003fa0 <srand>:
    3fa0:	a0 e0       	ldi	r26, 0x00	; 0
    3fa2:	b0 e0       	ldi	r27, 0x00	; 0
    3fa4:	80 93 bd 00 	sts	0x00BD, r24
    3fa8:	90 93 be 00 	sts	0x00BE, r25
    3fac:	a0 93 bf 00 	sts	0x00BF, r26
    3fb0:	b0 93 c0 00 	sts	0x00C0, r27
    3fb4:	08 95       	ret

00003fb6 <strcpy>:
    3fb6:	fb 01       	movw	r30, r22
    3fb8:	dc 01       	movw	r26, r24
    3fba:	01 90       	ld	r0, Z+
    3fbc:	0d 92       	st	X+, r0
    3fbe:	00 20       	and	r0, r0
    3fc0:	e1 f7       	brne	.-8      	; 0x3fba <strcpy+0x4>
    3fc2:	08 95       	ret

00003fc4 <sprintf>:
    3fc4:	ae e0       	ldi	r26, 0x0E	; 14
    3fc6:	b0 e0       	ldi	r27, 0x00	; 0
    3fc8:	e8 ee       	ldi	r30, 0xE8	; 232
    3fca:	ff e1       	ldi	r31, 0x1F	; 31
    3fcc:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__prologue_saves__+0x1c>
    3fd0:	0d 89       	ldd	r16, Y+21	; 0x15
    3fd2:	1e 89       	ldd	r17, Y+22	; 0x16
    3fd4:	86 e0       	ldi	r24, 0x06	; 6
    3fd6:	8c 83       	std	Y+4, r24	; 0x04
    3fd8:	1a 83       	std	Y+2, r17	; 0x02
    3fda:	09 83       	std	Y+1, r16	; 0x01
    3fdc:	8f ef       	ldi	r24, 0xFF	; 255
    3fde:	9f e7       	ldi	r25, 0x7F	; 127
    3fe0:	9e 83       	std	Y+6, r25	; 0x06
    3fe2:	8d 83       	std	Y+5, r24	; 0x05
    3fe4:	9e 01       	movw	r18, r28
    3fe6:	27 5e       	subi	r18, 0xE7	; 231
    3fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fea:	ce 01       	movw	r24, r28
    3fec:	01 96       	adiw	r24, 0x01	; 1
    3fee:	6f 89       	ldd	r22, Y+23	; 0x17
    3ff0:	78 8d       	ldd	r23, Y+24	; 0x18
    3ff2:	a9 01       	movw	r20, r18
    3ff4:	0e 94 06 20 	call	0x400c	; 0x400c <vfprintf>
    3ff8:	2f 81       	ldd	r18, Y+7	; 0x07
    3ffa:	38 85       	ldd	r19, Y+8	; 0x08
    3ffc:	02 0f       	add	r16, r18
    3ffe:	13 1f       	adc	r17, r19
    4000:	f8 01       	movw	r30, r16
    4002:	10 82       	st	Z, r1
    4004:	2e 96       	adiw	r28, 0x0e	; 14
    4006:	e4 e0       	ldi	r30, 0x04	; 4
    4008:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__epilogue_restores__+0x1c>

0000400c <vfprintf>:
    400c:	ab e0       	ldi	r26, 0x0B	; 11
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	ec e0       	ldi	r30, 0x0C	; 12
    4012:	f0 e2       	ldi	r31, 0x20	; 32
    4014:	0c 94 83 22 	jmp	0x4506	; 0x4506 <__prologue_saves__>
    4018:	3c 01       	movw	r6, r24
    401a:	2b 01       	movw	r4, r22
    401c:	5a 01       	movw	r10, r20
    401e:	fc 01       	movw	r30, r24
    4020:	17 82       	std	Z+7, r1	; 0x07
    4022:	16 82       	std	Z+6, r1	; 0x06
    4024:	83 81       	ldd	r24, Z+3	; 0x03
    4026:	81 fd       	sbrc	r24, 1
    4028:	03 c0       	rjmp	.+6      	; 0x4030 <vfprintf+0x24>
    402a:	6f ef       	ldi	r22, 0xFF	; 255
    402c:	7f ef       	ldi	r23, 0xFF	; 255
    402e:	c6 c1       	rjmp	.+908    	; 0x43bc <vfprintf+0x3b0>
    4030:	9a e0       	ldi	r25, 0x0A	; 10
    4032:	89 2e       	mov	r8, r25
    4034:	1e 01       	movw	r2, r28
    4036:	08 94       	sec
    4038:	21 1c       	adc	r2, r1
    403a:	31 1c       	adc	r3, r1
    403c:	f3 01       	movw	r30, r6
    403e:	23 81       	ldd	r18, Z+3	; 0x03
    4040:	f2 01       	movw	r30, r4
    4042:	23 fd       	sbrc	r18, 3
    4044:	85 91       	lpm	r24, Z+
    4046:	23 ff       	sbrs	r18, 3
    4048:	81 91       	ld	r24, Z+
    404a:	2f 01       	movw	r4, r30
    404c:	88 23       	and	r24, r24
    404e:	09 f4       	brne	.+2      	; 0x4052 <vfprintf+0x46>
    4050:	b2 c1       	rjmp	.+868    	; 0x43b6 <vfprintf+0x3aa>
    4052:	85 32       	cpi	r24, 0x25	; 37
    4054:	39 f4       	brne	.+14     	; 0x4064 <vfprintf+0x58>
    4056:	23 fd       	sbrc	r18, 3
    4058:	85 91       	lpm	r24, Z+
    405a:	23 ff       	sbrs	r18, 3
    405c:	81 91       	ld	r24, Z+
    405e:	2f 01       	movw	r4, r30
    4060:	85 32       	cpi	r24, 0x25	; 37
    4062:	29 f4       	brne	.+10     	; 0x406e <vfprintf+0x62>
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	b3 01       	movw	r22, r6
    4068:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    406c:	e7 cf       	rjmp	.-50     	; 0x403c <vfprintf+0x30>
    406e:	98 2f       	mov	r25, r24
    4070:	ff 24       	eor	r15, r15
    4072:	ee 24       	eor	r14, r14
    4074:	99 24       	eor	r9, r9
    4076:	ff e1       	ldi	r31, 0x1F	; 31
    4078:	ff 15       	cp	r31, r15
    407a:	d0 f0       	brcs	.+52     	; 0x40b0 <vfprintf+0xa4>
    407c:	9b 32       	cpi	r25, 0x2B	; 43
    407e:	69 f0       	breq	.+26     	; 0x409a <vfprintf+0x8e>
    4080:	9c 32       	cpi	r25, 0x2C	; 44
    4082:	28 f4       	brcc	.+10     	; 0x408e <vfprintf+0x82>
    4084:	90 32       	cpi	r25, 0x20	; 32
    4086:	59 f0       	breq	.+22     	; 0x409e <vfprintf+0x92>
    4088:	93 32       	cpi	r25, 0x23	; 35
    408a:	91 f4       	brne	.+36     	; 0x40b0 <vfprintf+0xa4>
    408c:	0e c0       	rjmp	.+28     	; 0x40aa <vfprintf+0x9e>
    408e:	9d 32       	cpi	r25, 0x2D	; 45
    4090:	49 f0       	breq	.+18     	; 0x40a4 <vfprintf+0x98>
    4092:	90 33       	cpi	r25, 0x30	; 48
    4094:	69 f4       	brne	.+26     	; 0x40b0 <vfprintf+0xa4>
    4096:	41 e0       	ldi	r20, 0x01	; 1
    4098:	24 c0       	rjmp	.+72     	; 0x40e2 <vfprintf+0xd6>
    409a:	52 e0       	ldi	r21, 0x02	; 2
    409c:	f5 2a       	or	r15, r21
    409e:	84 e0       	ldi	r24, 0x04	; 4
    40a0:	f8 2a       	or	r15, r24
    40a2:	28 c0       	rjmp	.+80     	; 0x40f4 <vfprintf+0xe8>
    40a4:	98 e0       	ldi	r25, 0x08	; 8
    40a6:	f9 2a       	or	r15, r25
    40a8:	25 c0       	rjmp	.+74     	; 0x40f4 <vfprintf+0xe8>
    40aa:	e0 e1       	ldi	r30, 0x10	; 16
    40ac:	fe 2a       	or	r15, r30
    40ae:	22 c0       	rjmp	.+68     	; 0x40f4 <vfprintf+0xe8>
    40b0:	f7 fc       	sbrc	r15, 7
    40b2:	29 c0       	rjmp	.+82     	; 0x4106 <vfprintf+0xfa>
    40b4:	89 2f       	mov	r24, r25
    40b6:	80 53       	subi	r24, 0x30	; 48
    40b8:	8a 30       	cpi	r24, 0x0A	; 10
    40ba:	70 f4       	brcc	.+28     	; 0x40d8 <vfprintf+0xcc>
    40bc:	f6 fe       	sbrs	r15, 6
    40be:	05 c0       	rjmp	.+10     	; 0x40ca <vfprintf+0xbe>
    40c0:	98 9c       	mul	r9, r8
    40c2:	90 2c       	mov	r9, r0
    40c4:	11 24       	eor	r1, r1
    40c6:	98 0e       	add	r9, r24
    40c8:	15 c0       	rjmp	.+42     	; 0x40f4 <vfprintf+0xe8>
    40ca:	e8 9c       	mul	r14, r8
    40cc:	e0 2c       	mov	r14, r0
    40ce:	11 24       	eor	r1, r1
    40d0:	e8 0e       	add	r14, r24
    40d2:	f0 e2       	ldi	r31, 0x20	; 32
    40d4:	ff 2a       	or	r15, r31
    40d6:	0e c0       	rjmp	.+28     	; 0x40f4 <vfprintf+0xe8>
    40d8:	9e 32       	cpi	r25, 0x2E	; 46
    40da:	29 f4       	brne	.+10     	; 0x40e6 <vfprintf+0xda>
    40dc:	f6 fc       	sbrc	r15, 6
    40de:	6b c1       	rjmp	.+726    	; 0x43b6 <vfprintf+0x3aa>
    40e0:	40 e4       	ldi	r20, 0x40	; 64
    40e2:	f4 2a       	or	r15, r20
    40e4:	07 c0       	rjmp	.+14     	; 0x40f4 <vfprintf+0xe8>
    40e6:	9c 36       	cpi	r25, 0x6C	; 108
    40e8:	19 f4       	brne	.+6      	; 0x40f0 <vfprintf+0xe4>
    40ea:	50 e8       	ldi	r21, 0x80	; 128
    40ec:	f5 2a       	or	r15, r21
    40ee:	02 c0       	rjmp	.+4      	; 0x40f4 <vfprintf+0xe8>
    40f0:	98 36       	cpi	r25, 0x68	; 104
    40f2:	49 f4       	brne	.+18     	; 0x4106 <vfprintf+0xfa>
    40f4:	f2 01       	movw	r30, r4
    40f6:	23 fd       	sbrc	r18, 3
    40f8:	95 91       	lpm	r25, Z+
    40fa:	23 ff       	sbrs	r18, 3
    40fc:	91 91       	ld	r25, Z+
    40fe:	2f 01       	movw	r4, r30
    4100:	99 23       	and	r25, r25
    4102:	09 f0       	breq	.+2      	; 0x4106 <vfprintf+0xfa>
    4104:	b8 cf       	rjmp	.-144    	; 0x4076 <vfprintf+0x6a>
    4106:	89 2f       	mov	r24, r25
    4108:	85 54       	subi	r24, 0x45	; 69
    410a:	83 30       	cpi	r24, 0x03	; 3
    410c:	18 f0       	brcs	.+6      	; 0x4114 <vfprintf+0x108>
    410e:	80 52       	subi	r24, 0x20	; 32
    4110:	83 30       	cpi	r24, 0x03	; 3
    4112:	38 f4       	brcc	.+14     	; 0x4122 <vfprintf+0x116>
    4114:	44 e0       	ldi	r20, 0x04	; 4
    4116:	50 e0       	ldi	r21, 0x00	; 0
    4118:	a4 0e       	add	r10, r20
    411a:	b5 1e       	adc	r11, r21
    411c:	5f e3       	ldi	r21, 0x3F	; 63
    411e:	59 83       	std	Y+1, r21	; 0x01
    4120:	0f c0       	rjmp	.+30     	; 0x4140 <vfprintf+0x134>
    4122:	93 36       	cpi	r25, 0x63	; 99
    4124:	31 f0       	breq	.+12     	; 0x4132 <vfprintf+0x126>
    4126:	93 37       	cpi	r25, 0x73	; 115
    4128:	79 f0       	breq	.+30     	; 0x4148 <vfprintf+0x13c>
    412a:	93 35       	cpi	r25, 0x53	; 83
    412c:	09 f0       	breq	.+2      	; 0x4130 <vfprintf+0x124>
    412e:	56 c0       	rjmp	.+172    	; 0x41dc <vfprintf+0x1d0>
    4130:	20 c0       	rjmp	.+64     	; 0x4172 <vfprintf+0x166>
    4132:	f5 01       	movw	r30, r10
    4134:	80 81       	ld	r24, Z
    4136:	89 83       	std	Y+1, r24	; 0x01
    4138:	42 e0       	ldi	r20, 0x02	; 2
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	a4 0e       	add	r10, r20
    413e:	b5 1e       	adc	r11, r21
    4140:	61 01       	movw	r12, r2
    4142:	01 e0       	ldi	r16, 0x01	; 1
    4144:	10 e0       	ldi	r17, 0x00	; 0
    4146:	12 c0       	rjmp	.+36     	; 0x416c <vfprintf+0x160>
    4148:	f5 01       	movw	r30, r10
    414a:	c0 80       	ld	r12, Z
    414c:	d1 80       	ldd	r13, Z+1	; 0x01
    414e:	f6 fc       	sbrc	r15, 6
    4150:	03 c0       	rjmp	.+6      	; 0x4158 <vfprintf+0x14c>
    4152:	6f ef       	ldi	r22, 0xFF	; 255
    4154:	7f ef       	ldi	r23, 0xFF	; 255
    4156:	02 c0       	rjmp	.+4      	; 0x415c <vfprintf+0x150>
    4158:	69 2d       	mov	r22, r9
    415a:	70 e0       	ldi	r23, 0x00	; 0
    415c:	42 e0       	ldi	r20, 0x02	; 2
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	a4 0e       	add	r10, r20
    4162:	b5 1e       	adc	r11, r21
    4164:	c6 01       	movw	r24, r12
    4166:	0e 94 ee 21 	call	0x43dc	; 0x43dc <strnlen>
    416a:	8c 01       	movw	r16, r24
    416c:	5f e7       	ldi	r21, 0x7F	; 127
    416e:	f5 22       	and	r15, r21
    4170:	14 c0       	rjmp	.+40     	; 0x419a <vfprintf+0x18e>
    4172:	f5 01       	movw	r30, r10
    4174:	c0 80       	ld	r12, Z
    4176:	d1 80       	ldd	r13, Z+1	; 0x01
    4178:	f6 fc       	sbrc	r15, 6
    417a:	03 c0       	rjmp	.+6      	; 0x4182 <vfprintf+0x176>
    417c:	6f ef       	ldi	r22, 0xFF	; 255
    417e:	7f ef       	ldi	r23, 0xFF	; 255
    4180:	02 c0       	rjmp	.+4      	; 0x4186 <vfprintf+0x17a>
    4182:	69 2d       	mov	r22, r9
    4184:	70 e0       	ldi	r23, 0x00	; 0
    4186:	42 e0       	ldi	r20, 0x02	; 2
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	a4 0e       	add	r10, r20
    418c:	b5 1e       	adc	r11, r21
    418e:	c6 01       	movw	r24, r12
    4190:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <strnlen_P>
    4194:	8c 01       	movw	r16, r24
    4196:	50 e8       	ldi	r21, 0x80	; 128
    4198:	f5 2a       	or	r15, r21
    419a:	f3 fe       	sbrs	r15, 3
    419c:	07 c0       	rjmp	.+14     	; 0x41ac <vfprintf+0x1a0>
    419e:	1a c0       	rjmp	.+52     	; 0x41d4 <vfprintf+0x1c8>
    41a0:	80 e2       	ldi	r24, 0x20	; 32
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	b3 01       	movw	r22, r6
    41a6:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    41aa:	ea 94       	dec	r14
    41ac:	8e 2d       	mov	r24, r14
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	08 17       	cp	r16, r24
    41b2:	19 07       	cpc	r17, r25
    41b4:	a8 f3       	brcs	.-22     	; 0x41a0 <vfprintf+0x194>
    41b6:	0e c0       	rjmp	.+28     	; 0x41d4 <vfprintf+0x1c8>
    41b8:	f6 01       	movw	r30, r12
    41ba:	f7 fc       	sbrc	r15, 7
    41bc:	85 91       	lpm	r24, Z+
    41be:	f7 fe       	sbrs	r15, 7
    41c0:	81 91       	ld	r24, Z+
    41c2:	6f 01       	movw	r12, r30
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	b3 01       	movw	r22, r6
    41c8:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    41cc:	e1 10       	cpse	r14, r1
    41ce:	ea 94       	dec	r14
    41d0:	01 50       	subi	r16, 0x01	; 1
    41d2:	10 40       	sbci	r17, 0x00	; 0
    41d4:	01 15       	cp	r16, r1
    41d6:	11 05       	cpc	r17, r1
    41d8:	79 f7       	brne	.-34     	; 0x41b8 <vfprintf+0x1ac>
    41da:	ea c0       	rjmp	.+468    	; 0x43b0 <vfprintf+0x3a4>
    41dc:	94 36       	cpi	r25, 0x64	; 100
    41de:	11 f0       	breq	.+4      	; 0x41e4 <vfprintf+0x1d8>
    41e0:	99 36       	cpi	r25, 0x69	; 105
    41e2:	69 f5       	brne	.+90     	; 0x423e <vfprintf+0x232>
    41e4:	f7 fe       	sbrs	r15, 7
    41e6:	08 c0       	rjmp	.+16     	; 0x41f8 <vfprintf+0x1ec>
    41e8:	f5 01       	movw	r30, r10
    41ea:	20 81       	ld	r18, Z
    41ec:	31 81       	ldd	r19, Z+1	; 0x01
    41ee:	42 81       	ldd	r20, Z+2	; 0x02
    41f0:	53 81       	ldd	r21, Z+3	; 0x03
    41f2:	84 e0       	ldi	r24, 0x04	; 4
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	0a c0       	rjmp	.+20     	; 0x420c <vfprintf+0x200>
    41f8:	f5 01       	movw	r30, r10
    41fa:	80 81       	ld	r24, Z
    41fc:	91 81       	ldd	r25, Z+1	; 0x01
    41fe:	9c 01       	movw	r18, r24
    4200:	44 27       	eor	r20, r20
    4202:	37 fd       	sbrc	r19, 7
    4204:	40 95       	com	r20
    4206:	54 2f       	mov	r21, r20
    4208:	82 e0       	ldi	r24, 0x02	; 2
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	a8 0e       	add	r10, r24
    420e:	b9 1e       	adc	r11, r25
    4210:	9f e6       	ldi	r25, 0x6F	; 111
    4212:	f9 22       	and	r15, r25
    4214:	57 ff       	sbrs	r21, 7
    4216:	09 c0       	rjmp	.+18     	; 0x422a <vfprintf+0x21e>
    4218:	50 95       	com	r21
    421a:	40 95       	com	r20
    421c:	30 95       	com	r19
    421e:	21 95       	neg	r18
    4220:	3f 4f       	sbci	r19, 0xFF	; 255
    4222:	4f 4f       	sbci	r20, 0xFF	; 255
    4224:	5f 4f       	sbci	r21, 0xFF	; 255
    4226:	e0 e8       	ldi	r30, 0x80	; 128
    4228:	fe 2a       	or	r15, r30
    422a:	ca 01       	movw	r24, r20
    422c:	b9 01       	movw	r22, r18
    422e:	a1 01       	movw	r20, r2
    4230:	2a e0       	ldi	r18, 0x0A	; 10
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	0e 94 25 22 	call	0x444a	; 0x444a <__ultoa_invert>
    4238:	d8 2e       	mov	r13, r24
    423a:	d2 18       	sub	r13, r2
    423c:	40 c0       	rjmp	.+128    	; 0x42be <vfprintf+0x2b2>
    423e:	95 37       	cpi	r25, 0x75	; 117
    4240:	29 f4       	brne	.+10     	; 0x424c <vfprintf+0x240>
    4242:	1f 2d       	mov	r17, r15
    4244:	1f 7e       	andi	r17, 0xEF	; 239
    4246:	2a e0       	ldi	r18, 0x0A	; 10
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	1d c0       	rjmp	.+58     	; 0x4286 <vfprintf+0x27a>
    424c:	1f 2d       	mov	r17, r15
    424e:	19 7f       	andi	r17, 0xF9	; 249
    4250:	9f 36       	cpi	r25, 0x6F	; 111
    4252:	61 f0       	breq	.+24     	; 0x426c <vfprintf+0x260>
    4254:	90 37       	cpi	r25, 0x70	; 112
    4256:	20 f4       	brcc	.+8      	; 0x4260 <vfprintf+0x254>
    4258:	98 35       	cpi	r25, 0x58	; 88
    425a:	09 f0       	breq	.+2      	; 0x425e <vfprintf+0x252>
    425c:	ac c0       	rjmp	.+344    	; 0x43b6 <vfprintf+0x3aa>
    425e:	0f c0       	rjmp	.+30     	; 0x427e <vfprintf+0x272>
    4260:	90 37       	cpi	r25, 0x70	; 112
    4262:	39 f0       	breq	.+14     	; 0x4272 <vfprintf+0x266>
    4264:	98 37       	cpi	r25, 0x78	; 120
    4266:	09 f0       	breq	.+2      	; 0x426a <vfprintf+0x25e>
    4268:	a6 c0       	rjmp	.+332    	; 0x43b6 <vfprintf+0x3aa>
    426a:	04 c0       	rjmp	.+8      	; 0x4274 <vfprintf+0x268>
    426c:	28 e0       	ldi	r18, 0x08	; 8
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	0a c0       	rjmp	.+20     	; 0x4286 <vfprintf+0x27a>
    4272:	10 61       	ori	r17, 0x10	; 16
    4274:	14 fd       	sbrc	r17, 4
    4276:	14 60       	ori	r17, 0x04	; 4
    4278:	20 e1       	ldi	r18, 0x10	; 16
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	04 c0       	rjmp	.+8      	; 0x4286 <vfprintf+0x27a>
    427e:	14 fd       	sbrc	r17, 4
    4280:	16 60       	ori	r17, 0x06	; 6
    4282:	20 e1       	ldi	r18, 0x10	; 16
    4284:	32 e0       	ldi	r19, 0x02	; 2
    4286:	17 ff       	sbrs	r17, 7
    4288:	08 c0       	rjmp	.+16     	; 0x429a <vfprintf+0x28e>
    428a:	f5 01       	movw	r30, r10
    428c:	60 81       	ld	r22, Z
    428e:	71 81       	ldd	r23, Z+1	; 0x01
    4290:	82 81       	ldd	r24, Z+2	; 0x02
    4292:	93 81       	ldd	r25, Z+3	; 0x03
    4294:	44 e0       	ldi	r20, 0x04	; 4
    4296:	50 e0       	ldi	r21, 0x00	; 0
    4298:	08 c0       	rjmp	.+16     	; 0x42aa <vfprintf+0x29e>
    429a:	f5 01       	movw	r30, r10
    429c:	80 81       	ld	r24, Z
    429e:	91 81       	ldd	r25, Z+1	; 0x01
    42a0:	bc 01       	movw	r22, r24
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	42 e0       	ldi	r20, 0x02	; 2
    42a8:	50 e0       	ldi	r21, 0x00	; 0
    42aa:	a4 0e       	add	r10, r20
    42ac:	b5 1e       	adc	r11, r21
    42ae:	a1 01       	movw	r20, r2
    42b0:	0e 94 25 22 	call	0x444a	; 0x444a <__ultoa_invert>
    42b4:	d8 2e       	mov	r13, r24
    42b6:	d2 18       	sub	r13, r2
    42b8:	8f e7       	ldi	r24, 0x7F	; 127
    42ba:	f8 2e       	mov	r15, r24
    42bc:	f1 22       	and	r15, r17
    42be:	f6 fe       	sbrs	r15, 6
    42c0:	0b c0       	rjmp	.+22     	; 0x42d8 <vfprintf+0x2cc>
    42c2:	5e ef       	ldi	r21, 0xFE	; 254
    42c4:	f5 22       	and	r15, r21
    42c6:	d9 14       	cp	r13, r9
    42c8:	38 f4       	brcc	.+14     	; 0x42d8 <vfprintf+0x2cc>
    42ca:	f4 fe       	sbrs	r15, 4
    42cc:	07 c0       	rjmp	.+14     	; 0x42dc <vfprintf+0x2d0>
    42ce:	f2 fc       	sbrc	r15, 2
    42d0:	05 c0       	rjmp	.+10     	; 0x42dc <vfprintf+0x2d0>
    42d2:	8f ee       	ldi	r24, 0xEF	; 239
    42d4:	f8 22       	and	r15, r24
    42d6:	02 c0       	rjmp	.+4      	; 0x42dc <vfprintf+0x2d0>
    42d8:	1d 2d       	mov	r17, r13
    42da:	01 c0       	rjmp	.+2      	; 0x42de <vfprintf+0x2d2>
    42dc:	19 2d       	mov	r17, r9
    42de:	f4 fe       	sbrs	r15, 4
    42e0:	0d c0       	rjmp	.+26     	; 0x42fc <vfprintf+0x2f0>
    42e2:	fe 01       	movw	r30, r28
    42e4:	ed 0d       	add	r30, r13
    42e6:	f1 1d       	adc	r31, r1
    42e8:	80 81       	ld	r24, Z
    42ea:	80 33       	cpi	r24, 0x30	; 48
    42ec:	19 f4       	brne	.+6      	; 0x42f4 <vfprintf+0x2e8>
    42ee:	99 ee       	ldi	r25, 0xE9	; 233
    42f0:	f9 22       	and	r15, r25
    42f2:	08 c0       	rjmp	.+16     	; 0x4304 <vfprintf+0x2f8>
    42f4:	1f 5f       	subi	r17, 0xFF	; 255
    42f6:	f2 fe       	sbrs	r15, 2
    42f8:	05 c0       	rjmp	.+10     	; 0x4304 <vfprintf+0x2f8>
    42fa:	03 c0       	rjmp	.+6      	; 0x4302 <vfprintf+0x2f6>
    42fc:	8f 2d       	mov	r24, r15
    42fe:	86 78       	andi	r24, 0x86	; 134
    4300:	09 f0       	breq	.+2      	; 0x4304 <vfprintf+0x2f8>
    4302:	1f 5f       	subi	r17, 0xFF	; 255
    4304:	0f 2d       	mov	r16, r15
    4306:	f3 fc       	sbrc	r15, 3
    4308:	14 c0       	rjmp	.+40     	; 0x4332 <vfprintf+0x326>
    430a:	f0 fe       	sbrs	r15, 0
    430c:	0f c0       	rjmp	.+30     	; 0x432c <vfprintf+0x320>
    430e:	1e 15       	cp	r17, r14
    4310:	10 f0       	brcs	.+4      	; 0x4316 <vfprintf+0x30a>
    4312:	9d 2c       	mov	r9, r13
    4314:	0b c0       	rjmp	.+22     	; 0x432c <vfprintf+0x320>
    4316:	9d 2c       	mov	r9, r13
    4318:	9e 0c       	add	r9, r14
    431a:	91 1a       	sub	r9, r17
    431c:	1e 2d       	mov	r17, r14
    431e:	06 c0       	rjmp	.+12     	; 0x432c <vfprintf+0x320>
    4320:	80 e2       	ldi	r24, 0x20	; 32
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	b3 01       	movw	r22, r6
    4326:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    432a:	1f 5f       	subi	r17, 0xFF	; 255
    432c:	1e 15       	cp	r17, r14
    432e:	c0 f3       	brcs	.-16     	; 0x4320 <vfprintf+0x314>
    4330:	04 c0       	rjmp	.+8      	; 0x433a <vfprintf+0x32e>
    4332:	1e 15       	cp	r17, r14
    4334:	10 f4       	brcc	.+4      	; 0x433a <vfprintf+0x32e>
    4336:	e1 1a       	sub	r14, r17
    4338:	01 c0       	rjmp	.+2      	; 0x433c <vfprintf+0x330>
    433a:	ee 24       	eor	r14, r14
    433c:	04 ff       	sbrs	r16, 4
    433e:	0f c0       	rjmp	.+30     	; 0x435e <vfprintf+0x352>
    4340:	80 e3       	ldi	r24, 0x30	; 48
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	b3 01       	movw	r22, r6
    4346:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    434a:	02 ff       	sbrs	r16, 2
    434c:	1d c0       	rjmp	.+58     	; 0x4388 <vfprintf+0x37c>
    434e:	01 fd       	sbrc	r16, 1
    4350:	03 c0       	rjmp	.+6      	; 0x4358 <vfprintf+0x34c>
    4352:	88 e7       	ldi	r24, 0x78	; 120
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	0e c0       	rjmp	.+28     	; 0x4374 <vfprintf+0x368>
    4358:	88 e5       	ldi	r24, 0x58	; 88
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	0b c0       	rjmp	.+22     	; 0x4374 <vfprintf+0x368>
    435e:	80 2f       	mov	r24, r16
    4360:	86 78       	andi	r24, 0x86	; 134
    4362:	91 f0       	breq	.+36     	; 0x4388 <vfprintf+0x37c>
    4364:	01 ff       	sbrs	r16, 1
    4366:	02 c0       	rjmp	.+4      	; 0x436c <vfprintf+0x360>
    4368:	8b e2       	ldi	r24, 0x2B	; 43
    436a:	01 c0       	rjmp	.+2      	; 0x436e <vfprintf+0x362>
    436c:	80 e2       	ldi	r24, 0x20	; 32
    436e:	f7 fc       	sbrc	r15, 7
    4370:	8d e2       	ldi	r24, 0x2D	; 45
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	b3 01       	movw	r22, r6
    4376:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    437a:	06 c0       	rjmp	.+12     	; 0x4388 <vfprintf+0x37c>
    437c:	80 e3       	ldi	r24, 0x30	; 48
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	b3 01       	movw	r22, r6
    4382:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    4386:	9a 94       	dec	r9
    4388:	d9 14       	cp	r13, r9
    438a:	c0 f3       	brcs	.-16     	; 0x437c <vfprintf+0x370>
    438c:	da 94       	dec	r13
    438e:	f1 01       	movw	r30, r2
    4390:	ed 0d       	add	r30, r13
    4392:	f1 1d       	adc	r31, r1
    4394:	80 81       	ld	r24, Z
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	b3 01       	movw	r22, r6
    439a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    439e:	dd 20       	and	r13, r13
    43a0:	a9 f7       	brne	.-22     	; 0x438c <vfprintf+0x380>
    43a2:	06 c0       	rjmp	.+12     	; 0x43b0 <vfprintf+0x3a4>
    43a4:	80 e2       	ldi	r24, 0x20	; 32
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	b3 01       	movw	r22, r6
    43aa:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <fputc>
    43ae:	ea 94       	dec	r14
    43b0:	ee 20       	and	r14, r14
    43b2:	c1 f7       	brne	.-16     	; 0x43a4 <vfprintf+0x398>
    43b4:	43 ce       	rjmp	.-890    	; 0x403c <vfprintf+0x30>
    43b6:	f3 01       	movw	r30, r6
    43b8:	66 81       	ldd	r22, Z+6	; 0x06
    43ba:	77 81       	ldd	r23, Z+7	; 0x07
    43bc:	cb 01       	movw	r24, r22
    43be:	2b 96       	adiw	r28, 0x0b	; 11
    43c0:	e2 e1       	ldi	r30, 0x12	; 18
    43c2:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__epilogue_restores__>

000043c6 <strnlen_P>:
    43c6:	fc 01       	movw	r30, r24
    43c8:	05 90       	lpm	r0, Z+
    43ca:	61 50       	subi	r22, 0x01	; 1
    43cc:	70 40       	sbci	r23, 0x00	; 0
    43ce:	01 10       	cpse	r0, r1
    43d0:	d8 f7       	brcc	.-10     	; 0x43c8 <strnlen_P+0x2>
    43d2:	80 95       	com	r24
    43d4:	90 95       	com	r25
    43d6:	8e 0f       	add	r24, r30
    43d8:	9f 1f       	adc	r25, r31
    43da:	08 95       	ret

000043dc <strnlen>:
    43dc:	fc 01       	movw	r30, r24
    43de:	61 50       	subi	r22, 0x01	; 1
    43e0:	70 40       	sbci	r23, 0x00	; 0
    43e2:	01 90       	ld	r0, Z+
    43e4:	01 10       	cpse	r0, r1
    43e6:	d8 f7       	brcc	.-10     	; 0x43de <strnlen+0x2>
    43e8:	80 95       	com	r24
    43ea:	90 95       	com	r25
    43ec:	8e 0f       	add	r24, r30
    43ee:	9f 1f       	adc	r25, r31
    43f0:	08 95       	ret

000043f2 <fputc>:
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	cf 93       	push	r28
    43f8:	df 93       	push	r29
    43fa:	8c 01       	movw	r16, r24
    43fc:	eb 01       	movw	r28, r22
    43fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4400:	81 ff       	sbrs	r24, 1
    4402:	1b c0       	rjmp	.+54     	; 0x443a <fputc+0x48>
    4404:	82 ff       	sbrs	r24, 2
    4406:	0d c0       	rjmp	.+26     	; 0x4422 <fputc+0x30>
    4408:	2e 81       	ldd	r18, Y+6	; 0x06
    440a:	3f 81       	ldd	r19, Y+7	; 0x07
    440c:	8c 81       	ldd	r24, Y+4	; 0x04
    440e:	9d 81       	ldd	r25, Y+5	; 0x05
    4410:	28 17       	cp	r18, r24
    4412:	39 07       	cpc	r19, r25
    4414:	64 f4       	brge	.+24     	; 0x442e <fputc+0x3c>
    4416:	e8 81       	ld	r30, Y
    4418:	f9 81       	ldd	r31, Y+1	; 0x01
    441a:	01 93       	st	Z+, r16
    441c:	f9 83       	std	Y+1, r31	; 0x01
    441e:	e8 83       	st	Y, r30
    4420:	06 c0       	rjmp	.+12     	; 0x442e <fputc+0x3c>
    4422:	e8 85       	ldd	r30, Y+8	; 0x08
    4424:	f9 85       	ldd	r31, Y+9	; 0x09
    4426:	80 2f       	mov	r24, r16
    4428:	09 95       	icall
    442a:	89 2b       	or	r24, r25
    442c:	31 f4       	brne	.+12     	; 0x443a <fputc+0x48>
    442e:	8e 81       	ldd	r24, Y+6	; 0x06
    4430:	9f 81       	ldd	r25, Y+7	; 0x07
    4432:	01 96       	adiw	r24, 0x01	; 1
    4434:	9f 83       	std	Y+7, r25	; 0x07
    4436:	8e 83       	std	Y+6, r24	; 0x06
    4438:	02 c0       	rjmp	.+4      	; 0x443e <fputc+0x4c>
    443a:	0f ef       	ldi	r16, 0xFF	; 255
    443c:	1f ef       	ldi	r17, 0xFF	; 255
    443e:	c8 01       	movw	r24, r16
    4440:	df 91       	pop	r29
    4442:	cf 91       	pop	r28
    4444:	1f 91       	pop	r17
    4446:	0f 91       	pop	r16
    4448:	08 95       	ret

0000444a <__ultoa_invert>:
    444a:	fa 01       	movw	r30, r20
    444c:	aa 27       	eor	r26, r26
    444e:	28 30       	cpi	r18, 0x08	; 8
    4450:	51 f1       	breq	.+84     	; 0x44a6 <__ultoa_invert+0x5c>
    4452:	20 31       	cpi	r18, 0x10	; 16
    4454:	81 f1       	breq	.+96     	; 0x44b6 <__ultoa_invert+0x6c>
    4456:	e8 94       	clt
    4458:	6f 93       	push	r22
    445a:	6e 7f       	andi	r22, 0xFE	; 254
    445c:	6e 5f       	subi	r22, 0xFE	; 254
    445e:	7f 4f       	sbci	r23, 0xFF	; 255
    4460:	8f 4f       	sbci	r24, 0xFF	; 255
    4462:	9f 4f       	sbci	r25, 0xFF	; 255
    4464:	af 4f       	sbci	r26, 0xFF	; 255
    4466:	b1 e0       	ldi	r27, 0x01	; 1
    4468:	3e d0       	rcall	.+124    	; 0x44e6 <__ultoa_invert+0x9c>
    446a:	b4 e0       	ldi	r27, 0x04	; 4
    446c:	3c d0       	rcall	.+120    	; 0x44e6 <__ultoa_invert+0x9c>
    446e:	67 0f       	add	r22, r23
    4470:	78 1f       	adc	r23, r24
    4472:	89 1f       	adc	r24, r25
    4474:	9a 1f       	adc	r25, r26
    4476:	a1 1d       	adc	r26, r1
    4478:	68 0f       	add	r22, r24
    447a:	79 1f       	adc	r23, r25
    447c:	8a 1f       	adc	r24, r26
    447e:	91 1d       	adc	r25, r1
    4480:	a1 1d       	adc	r26, r1
    4482:	6a 0f       	add	r22, r26
    4484:	71 1d       	adc	r23, r1
    4486:	81 1d       	adc	r24, r1
    4488:	91 1d       	adc	r25, r1
    448a:	a1 1d       	adc	r26, r1
    448c:	20 d0       	rcall	.+64     	; 0x44ce <__ultoa_invert+0x84>
    448e:	09 f4       	brne	.+2      	; 0x4492 <__ultoa_invert+0x48>
    4490:	68 94       	set
    4492:	3f 91       	pop	r19
    4494:	2a e0       	ldi	r18, 0x0A	; 10
    4496:	26 9f       	mul	r18, r22
    4498:	11 24       	eor	r1, r1
    449a:	30 19       	sub	r19, r0
    449c:	30 5d       	subi	r19, 0xD0	; 208
    449e:	31 93       	st	Z+, r19
    44a0:	de f6       	brtc	.-74     	; 0x4458 <__ultoa_invert+0xe>
    44a2:	cf 01       	movw	r24, r30
    44a4:	08 95       	ret
    44a6:	46 2f       	mov	r20, r22
    44a8:	47 70       	andi	r20, 0x07	; 7
    44aa:	40 5d       	subi	r20, 0xD0	; 208
    44ac:	41 93       	st	Z+, r20
    44ae:	b3 e0       	ldi	r27, 0x03	; 3
    44b0:	0f d0       	rcall	.+30     	; 0x44d0 <__ultoa_invert+0x86>
    44b2:	c9 f7       	brne	.-14     	; 0x44a6 <__ultoa_invert+0x5c>
    44b4:	f6 cf       	rjmp	.-20     	; 0x44a2 <__ultoa_invert+0x58>
    44b6:	46 2f       	mov	r20, r22
    44b8:	4f 70       	andi	r20, 0x0F	; 15
    44ba:	40 5d       	subi	r20, 0xD0	; 208
    44bc:	4a 33       	cpi	r20, 0x3A	; 58
    44be:	18 f0       	brcs	.+6      	; 0x44c6 <__ultoa_invert+0x7c>
    44c0:	49 5d       	subi	r20, 0xD9	; 217
    44c2:	31 fd       	sbrc	r19, 1
    44c4:	40 52       	subi	r20, 0x20	; 32
    44c6:	41 93       	st	Z+, r20
    44c8:	02 d0       	rcall	.+4      	; 0x44ce <__ultoa_invert+0x84>
    44ca:	a9 f7       	brne	.-22     	; 0x44b6 <__ultoa_invert+0x6c>
    44cc:	ea cf       	rjmp	.-44     	; 0x44a2 <__ultoa_invert+0x58>
    44ce:	b4 e0       	ldi	r27, 0x04	; 4
    44d0:	a6 95       	lsr	r26
    44d2:	97 95       	ror	r25
    44d4:	87 95       	ror	r24
    44d6:	77 95       	ror	r23
    44d8:	67 95       	ror	r22
    44da:	ba 95       	dec	r27
    44dc:	c9 f7       	brne	.-14     	; 0x44d0 <__ultoa_invert+0x86>
    44de:	00 97       	sbiw	r24, 0x00	; 0
    44e0:	61 05       	cpc	r22, r1
    44e2:	71 05       	cpc	r23, r1
    44e4:	08 95       	ret
    44e6:	9b 01       	movw	r18, r22
    44e8:	ac 01       	movw	r20, r24
    44ea:	0a 2e       	mov	r0, r26
    44ec:	06 94       	lsr	r0
    44ee:	57 95       	ror	r21
    44f0:	47 95       	ror	r20
    44f2:	37 95       	ror	r19
    44f4:	27 95       	ror	r18
    44f6:	ba 95       	dec	r27
    44f8:	c9 f7       	brne	.-14     	; 0x44ec <__ultoa_invert+0xa2>
    44fa:	62 0f       	add	r22, r18
    44fc:	73 1f       	adc	r23, r19
    44fe:	84 1f       	adc	r24, r20
    4500:	95 1f       	adc	r25, r21
    4502:	a0 1d       	adc	r26, r0
    4504:	08 95       	ret

00004506 <__prologue_saves__>:
    4506:	2f 92       	push	r2
    4508:	3f 92       	push	r3
    450a:	4f 92       	push	r4
    450c:	5f 92       	push	r5
    450e:	6f 92       	push	r6
    4510:	7f 92       	push	r7
    4512:	8f 92       	push	r8
    4514:	9f 92       	push	r9
    4516:	af 92       	push	r10
    4518:	bf 92       	push	r11
    451a:	cf 92       	push	r12
    451c:	df 92       	push	r13
    451e:	ef 92       	push	r14
    4520:	ff 92       	push	r15
    4522:	0f 93       	push	r16
    4524:	1f 93       	push	r17
    4526:	cf 93       	push	r28
    4528:	df 93       	push	r29
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
    452e:	ca 1b       	sub	r28, r26
    4530:	db 0b       	sbc	r29, r27
    4532:	0f b6       	in	r0, 0x3f	; 63
    4534:	f8 94       	cli
    4536:	de bf       	out	0x3e, r29	; 62
    4538:	0f be       	out	0x3f, r0	; 63
    453a:	cd bf       	out	0x3d, r28	; 61
    453c:	09 94       	ijmp

0000453e <__epilogue_restores__>:
    453e:	2a 88       	ldd	r2, Y+18	; 0x12
    4540:	39 88       	ldd	r3, Y+17	; 0x11
    4542:	48 88       	ldd	r4, Y+16	; 0x10
    4544:	5f 84       	ldd	r5, Y+15	; 0x0f
    4546:	6e 84       	ldd	r6, Y+14	; 0x0e
    4548:	7d 84       	ldd	r7, Y+13	; 0x0d
    454a:	8c 84       	ldd	r8, Y+12	; 0x0c
    454c:	9b 84       	ldd	r9, Y+11	; 0x0b
    454e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4550:	b9 84       	ldd	r11, Y+9	; 0x09
    4552:	c8 84       	ldd	r12, Y+8	; 0x08
    4554:	df 80       	ldd	r13, Y+7	; 0x07
    4556:	ee 80       	ldd	r14, Y+6	; 0x06
    4558:	fd 80       	ldd	r15, Y+5	; 0x05
    455a:	0c 81       	ldd	r16, Y+4	; 0x04
    455c:	1b 81       	ldd	r17, Y+3	; 0x03
    455e:	aa 81       	ldd	r26, Y+2	; 0x02
    4560:	b9 81       	ldd	r27, Y+1	; 0x01
    4562:	ce 0f       	add	r28, r30
    4564:	d1 1d       	adc	r29, r1
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	f8 94       	cli
    456a:	de bf       	out	0x3e, r29	; 62
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	cd bf       	out	0x3d, r28	; 61
    4570:	ed 01       	movw	r28, r26
    4572:	08 95       	ret

00004574 <_exit>:
    4574:	f8 94       	cli

00004576 <__stop_program>:
    4576:	ff cf       	rjmp	.-2      	; 0x4576 <__stop_program>
