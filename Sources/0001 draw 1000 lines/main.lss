
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00002822  000028b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800064  00800064  000028ba  2**0
                  ALLOC
  3 .stab         00000420  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000ab  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00002d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001c2  00000000  00000000  00002e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001929  00000000  00000000  00002fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005d3  00000000  00000000  000048f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015e6  00000000  00000000  00004ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  000064ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004c0  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002044  00000000  00000000  00006b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  00008bd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 03 	jmp	0x644	; 0x644 <__ctors_end>
       4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
       c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      10:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      14:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      18:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      1c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      20:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      24:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      28:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      2c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      30:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      34:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      38:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      3c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      40:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      44:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      48:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      4c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>
      50:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt>

00000054 <font_8x16>:
	...
      68:	18 3c 3c 3c 18 18 00 18 18 00 00 00 00 00 00 00     .<<<............
      78:	66 66 66 00 00 00 00 00 00 00 00 00 00 00 00 00     fff.............
      88:	36 36 7f 36 36 36 7f 36 36 00 00 00 00 00 18 18     66.666.66.......
      98:	3c 66 60 30 18 0c 06 66 3c 18 18 00 00 00 00 70     <f`0...f<......p
      a8:	d8 da 76 0c 18 30 6e 5b 1b 0e 00 00 00 00 00 00     ..v..0n[........
      b8:	38 6c 6c 38 60 6f 66 66 3b 00 00 00 00 00 00 00     8ll8`off;.......
      c8:	18 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      d8:	0c 18 18 30 30 30 30 30 18 18 0c 00 00 00 00 00     ...00000........
      e8:	30 18 18 0c 0c 0c 0c 0c 18 18 30 00 00 00 00 00     0.........0.....
      f8:	00 00 36 1c 7f 1c 36 00 00 00 00 00 00 00 00 00     ..6...6.........
     108:	00 00 18 18 7e 18 18 00 00 00 00 00 00 00 00 00     ....~...........
     118:	00 00 00 00 00 00 1c 1c 0c 18 00 00 00 00 00 00     ................
     128:	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 00 00     ...~............
     138:	00 00 00 00 00 00 1c 1c 00 00 00 00 00 00 00 06     ................
     148:	06 0c 0c 18 18 30 30 60 60 00 00 00 00 00 00 1e     .....00``.......
     158:	33 37 37 33 3b 3b 33 1e 00 00 00 00 00 00 00 0c     3773;;3.........
     168:	1c 7c 0c 0c 0c 0c 0c 0c 00 00 00 00 00 00 00 3c     .|.............<
     178:	66 66 06 0c 18 30 60 7e 00 00 00 00 00 00 00 3c     ff...0`~.......<
     188:	66 66 06 1c 06 66 66 3c 00 00 00 00 00 00 00 30     ff...ff<.......0
     198:	30 36 36 36 66 7f 06 06 00 00 00 00 00 00 00 7e     0666f..........~
     1a8:	60 60 60 7c 06 06 0c 78 00 00 00 00 00 00 00 1c     ```|...x........
     1b8:	18 30 7c 66 66 66 66 3c 00 00 00 00 00 00 00 7e     .0|ffff<.......~
     1c8:	06 0c 0c 18 18 30 30 30 00 00 00 00 00 00 00 3c     .....000.......<
     1d8:	66 66 76 3c 6e 66 66 3c 00 00 00 00 00 00 00 3c     ffv<nff<.......<
     1e8:	66 66 66 66 3e 0c 18 38 00 00 00 00 00 00 00 00     ffff>..8........
     1f8:	00 1c 1c 00 00 00 1c 1c 00 00 00 00 00 00 00 00     ................
     208:	00 1c 1c 00 00 00 1c 1c 0c 18 00 00 00 00 00 06     ................
     218:	0c 18 30 60 30 18 0c 06 00 00 00 00 00 00 00 00     ..0`0...........
     228:	00 00 7e 00 7e 00 00 00 00 00 00 00 00 00 00 60     ..~.~..........`
     238:	30 18 0c 06 0c 18 30 60 00 00 00 00 00 00 00 3c     0.....0`.......<
     248:	66 66 0c 18 18 00 18 18 00 00 00 00 00 00 00 7e     ff.............~
     258:	c3 c3 cf db db cf c0 7f 00 00 00 00 00 00 00 18     ................
     268:	3c 66 66 66 7e 66 66 66 00 00 00 00 00 00 00 7c     <fff~fff.......|
     278:	66 66 66 7c 66 66 66 7c 00 00 00 00 00 00 00 3c     fff|fff|.......<
     288:	66 66 60 60 60 66 66 3c 00 00 00 00 00 00 00 78     ff```ff<.......x
     298:	6c 66 66 66 66 66 6c 78 00 00 00 00 00 00 00 7e     lffffflx.......~
     2a8:	60 60 60 7c 60 60 60 7e 00 00 00 00 00 00 00 7e     ```|```~.......~
     2b8:	60 60 60 7c 60 60 60 60 00 00 00 00 00 00 00 3c     ```|````.......<
     2c8:	66 66 60 60 6e 66 66 3e 00 00 00 00 00 00 00 66     ff``nff>.......f
     2d8:	66 66 66 7e 66 66 66 66 00 00 00 00 00 00 00 3c     fff~ffff.......<
     2e8:	18 18 18 18 18 18 18 3c 00 00 00 00 00 00 1e 0c     .......<........
     2f8:	0c 0c 0c 0c cc cc cc 78 00 00 00 00 00 00 00 66     .......x.......f
     308:	66 6c 6c 78 6c 6c 66 66 00 00 00 00 00 00 00 60     fllxllff.......`
     318:	60 60 60 60 60 60 60 7e 00 00 00 00 00 00 00 63     ```````~.......c
     328:	63 77 6b 6b 6b 63 63 63 00 00 00 00 00 00 00 63     cwkkkccc.......c
     338:	63 73 7b 6f 67 63 63 63 00 00 00 00 00 00 00 3c     cs{ogccc.......<
     348:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 7c     fffffff<.......|
     358:	66 66 66 7c 60 60 60 60 00 00 00 00 00 00 00 3c     fff|````.......<
     368:	66 66 66 66 66 66 66 3c 0c 06 00 00 00 00 00 7c     fffffff<.......|
     378:	66 66 66 7c 6c 66 66 66 00 00 00 00 00 00 00 3c     fff|lfff.......<
     388:	66 60 30 18 0c 06 66 3c 00 00 00 00 00 00 00 7e     f`0...f<.......~
     398:	18 18 18 18 18 18 18 18 00 00 00 00 00 00 00 66     ...............f
     3a8:	66 66 66 66 66 66 66 3c 00 00 00 00 00 00 00 66     fffffff<.......f
     3b8:	66 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 63     ffffff<........c
     3c8:	63 63 6b 6b 6b 36 36 36 00 00 00 00 00 00 00 66     cckkk666.......f
     3d8:	66 34 18 18 2c 66 66 66 00 00 00 00 00 00 00 66     f4..,fff.......f
     3e8:	66 66 66 3c 18 18 18 18 00 00 00 00 00 00 00 7e     fff<...........~
     3f8:	06 06 0c 18 30 60 60 7e 00 00 00 00 00 00 00 3c     ....0``~.......<
     408:	30 30 30 30 30 30 30 30 30 30 3c 00 00 00 00 60     0000000000<....`
     418:	60 30 30 18 18 0c 0c 06 06 00 00 00 00 00 00 3c     `00............<
     428:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 3c 00 00 18 3c 66     ..........<...<f
	...
     450:	00 00 ff 00 00 38 18 0c 00 00 00 00 00 00 00 00     .....8..........
	...
     468:	00 3c 06 06 3e 66 66 3e 00 00 00 00 00 00 00 60     .<..>ff>.......`
     478:	60 7c 66 66 66 66 66 7c 00 00 00 00 00 00 00 00     `|fffff|........
     488:	00 3c 66 60 60 60 66 3c 00 00 00 00 00 00 00 06     .<f```f<........
     498:	06 3e 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .>fffff>........
     4a8:	00 3c 66 66 7e 60 60 3c 00 00 00 00 00 00 00 1e     .<ff~``<........
     4b8:	30 30 30 7e 30 30 30 30 00 00 00 00 00 00 00 00     000~0000........
     4c8:	00 3e 66 66 66 66 66 3e 06 06 7c 00 00 00 00 60     .>fffff>..|....`
     4d8:	60 7c 66 66 66 66 66 66 00 00 00 00 00 00 18 18     `|ffffff........
     4e8:	00 78 18 18 18 18 18 7e 00 00 00 00 00 00 0c 0c     .x.....~........
     4f8:	00 3c 0c 0c 0c 0c 0c 0c 0c 0c 78 00 00 00 00 60     .<........x....`
     508:	60 66 66 6c 78 6c 66 66 00 00 00 00 00 00 00 78     `fflxlff.......x
     518:	18 18 18 18 18 18 18 7e 00 00 00 00 00 00 00 00     .......~........
     528:	00 7e 6b 6b 6b 6b 6b 63 00 00 00 00 00 00 00 00     .~kkkkkc........
     538:	00 7c 66 66 66 66 66 66 00 00 00 00 00 00 00 00     .|ffffff........
     548:	00 3c 66 66 66 66 66 3c 00 00 00 00 00 00 00 00     .<fffff<........
     558:	00 7c 66 66 66 66 66 7c 60 60 60 00 00 00 00 00     .|fffff|```.....
     568:	00 3e 66 66 66 66 66 3e 06 06 06 00 00 00 00 00     .>fffff>........
     578:	00 66 6e 70 60 60 60 60 00 00 00 00 00 00 00 00     .fnp````........
     588:	00 3e 60 60 3c 06 06 7c 00 00 00 00 00 00 00 30     .>``<..|.......0
     598:	30 7e 30 30 30 30 30 1e 00 00 00 00 00 00 00 00     0~00000.........
     5a8:	00 66 66 66 66 66 66 3e 00 00 00 00 00 00 00 00     .ffffff>........
     5b8:	00 66 66 66 66 66 3c 18 00 00 00 00 00 00 00 00     .fffff<.........
     5c8:	00 63 6b 6b 6b 6b 36 36 00 00 00 00 00 00 00 00     .ckkkk66........
     5d8:	00 66 66 3c 18 3c 66 66 00 00 00 00 00 00 00 00     .ff<.<ff........
     5e8:	00 66 66 66 66 66 66 3c 0c 18 f0 00 00 00 00 00     .ffffff<........
     5f8:	00 7e 06 0c 18 30 60 7e 00 00 00 00 00 00 00 0c     .~...0`~........
     608:	18 18 18 30 60 30 18 18 18 0c 00 00 00 00 00 18     ...0`0..........
     618:	18 18 18 18 18 18 18 18 18 18 18 00 00 00 00 30     ...............0
     628:	18 18 18 0c 06 0c 18 18 18 30 00 00 00 00 00 71     .........0.....q
     638:	db 8e 00 00 00 00 00 00 00 00 00 00                 ............

00000644 <__ctors_end>:
     644:	11 24       	eor	r1, r1
     646:	1f be       	out	0x3f, r1	; 63
     648:	cf e5       	ldi	r28, 0x5F	; 95
     64a:	d8 e0       	ldi	r29, 0x08	; 8
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	cd bf       	out	0x3d, r28	; 61

00000650 <__do_clear_bss>:
     650:	10 e0       	ldi	r17, 0x00	; 0
     652:	a4 e6       	ldi	r26, 0x64	; 100
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	01 c0       	rjmp	.+2      	; 0x65a <.do_clear_bss_start>

00000658 <.do_clear_bss_loop>:
     658:	1d 92       	st	X+, r1

0000065a <.do_clear_bss_start>:
     65a:	a9 36       	cpi	r26, 0x69	; 105
     65c:	b1 07       	cpc	r27, r17
     65e:	e1 f7       	brne	.-8      	; 0x658 <.do_clear_bss_loop>

00000660 <__do_copy_data>:
     660:	10 e0       	ldi	r17, 0x00	; 0
     662:	a0 e6       	ldi	r26, 0x60	; 96
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	e2 e2       	ldi	r30, 0x22	; 34
     668:	f8 e2       	ldi	r31, 0x28	; 40
     66a:	02 c0       	rjmp	.+4      	; 0x670 <.do_copy_data_start>

0000066c <.do_copy_data_loop>:
     66c:	05 90       	lpm	r0, Z+
     66e:	0d 92       	st	X+, r0

00000670 <.do_copy_data_start>:
     670:	a4 36       	cpi	r26, 0x64	; 100
     672:	b1 07       	cpc	r27, r17
     674:	d9 f7       	brne	.-10     	; 0x66c <.do_copy_data_loop>
     676:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
     67a:	0c 94 0f 14 	jmp	0x281e	; 0x281e <_exit>

0000067e <__bad_interrupt>:
     67e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000682 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     682:	20 ed       	ldi	r18, 0xD0	; 208
     684:	37 e0       	ldi	r19, 0x07	; 7
     686:	03 c0       	rjmp	.+6      	; 0x68e <delay_ms+0xc>
     688:	f9 01       	movw	r30, r18
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <delay_ms+0x8>

// my delay
//
void delay_ms (int ms) {
	
	while (ms--) _delay_ms(1);
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	4f ef       	ldi	r20, 0xFF	; 255
     692:	8f 3f       	cpi	r24, 0xFF	; 255
     694:	94 07       	cpc	r25, r20
     696:	c1 f7       	brne	.-16     	; 0x688 <delay_ms+0x6>
}
     698:	08 95       	ret

0000069a <main>:

/////////////////
//
// Main prorgam
//
int main(void) {
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29

	char pokus[100];

	// Data bridge and extern clock Camera to LCD initialization
	//
	HC245_INIT();
     6b6:	8e 9a       	sbi	0x11, 6	; 17
	EXCLK_INIT();
     6b8:	b8 9a       	sbi	0x17, 0	; 23
	//
	// and disable it both
	//
	HC245_DISABLE();
     6ba:	96 9a       	sbi	0x12, 6	; 18
	EXCLK_DISABLE();
     6bc:	c0 98       	cbi	0x18, 0	; 24
	
	// KEY switch init
	//
	KEY_SW_INIT();
     6be:	8d 98       	cbi	0x11, 5	; 17
     6c0:	95 9a       	sbi	0x12, 5	; 18

	// ADC initialization
	//
	ADC_INIT(0);
     6c2:	17 b8       	out	0x07, r1	; 7
     6c4:	80 ec       	ldi	r24, 0xC0	; 192
     6c6:	86 b9       	out	0x06, r24	; 6
     6c8:	d8 98       	cbi	0x1b, 0	; 27
     6ca:	d0 98       	cbi	0x1a, 0	; 26
	
	LCD_DATA_OUPUT();
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	84 bb       	out	0x14, r24	; 20
    LCD_Init();
     6d0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LCD_Init>

	if (KEY_SW) {
     6d4:	85 99       	sbic	0x10, 5	; 16
     6d6:	1a c0       	rjmp	.+52     	; 0x70c <main+0x72>
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	c0 ed       	ldi	r28, 0xD0	; 208
     6de:	d7 e0       	ldi	r29, 0x07	; 7
		
		int color = 0;
		
		while(true) {
			
			LCD_Clear(color);
     6e0:	c8 01       	movw	r24, r16
     6e2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_Clear>
			
			color = color ? 0 : 0xFFFF;
     6e6:	01 2b       	or	r16, r17
     6e8:	19 f4       	brne	.+6      	; 0x6f0 <main+0x56>
     6ea:	0f ef       	ldi	r16, 0xFF	; 255
     6ec:	1f ef       	ldi	r17, 0xFF	; 255
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <main+0x5a>
     6f0:	00 e0       	ldi	r16, 0x00	; 0
     6f2:	10 e0       	ldi	r17, 0x00	; 0
     6f4:	8c e2       	ldi	r24, 0x2C	; 44
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <main+0x66>
     6fa:	fe 01       	movw	r30, r28
     6fc:	31 97       	sbiw	r30, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <main+0x62>

// my delay
//
void delay_ms (int ms) {
	
	while (ms--) _delay_ms(1);
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	8f 3f       	cpi	r24, 0xFF	; 255
     706:	92 07       	cpc	r25, r18
     708:	c1 f7       	brne	.-16     	; 0x6fa <main+0x60>
     70a:	ea cf       	rjmp	.-44     	; 0x6e0 <main+0x46>
		
		int i = 0;
		
		while(true) {
			
			LCD_Clear(BLACK);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_Clear>
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
			
			for(i=0; i<1000; i++)
				LCD_DrawLine(rand()%319, rand()%239, rand()%319, rand()%239, rand()<<1);
     718:	0e 94 ad 13 	call	0x275a	; 0x275a <rand>
     71c:	7c 01       	movw	r14, r24
     71e:	0e 94 ad 13 	call	0x275a	; 0x275a <rand>
     722:	6c 01       	movw	r12, r24
     724:	0e 94 ad 13 	call	0x275a	; 0x275a <rand>
     728:	5c 01       	movw	r10, r24
     72a:	0e 94 ad 13 	call	0x275a	; 0x275a <rand>
     72e:	3c 01       	movw	r6, r24
     730:	0e 94 ad 13 	call	0x275a	; 0x275a <rand>
     734:	8c 01       	movw	r16, r24
     736:	c7 01       	movw	r24, r14
     738:	6f e3       	ldi	r22, 0x3F	; 63
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	0e 94 13 13 	call	0x2626	; 0x2626 <__divmodhi4>
     740:	4c 01       	movw	r8, r24
     742:	c6 01       	movw	r24, r12
     744:	6f ee       	ldi	r22, 0xEF	; 239
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	0e 94 13 13 	call	0x2626	; 0x2626 <__divmodhi4>
     74c:	7c 01       	movw	r14, r24
     74e:	c5 01       	movw	r24, r10
     750:	6f e3       	ldi	r22, 0x3F	; 63
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	0e 94 13 13 	call	0x2626	; 0x2626 <__divmodhi4>
     758:	fc 01       	movw	r30, r24
     75a:	c3 01       	movw	r24, r6
     75c:	6f ee       	ldi	r22, 0xEF	; 239
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0e 94 13 13 	call	0x2626	; 0x2626 <__divmodhi4>
     764:	9c 01       	movw	r18, r24
     766:	00 0f       	add	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	c4 01       	movw	r24, r8
     76c:	b7 01       	movw	r22, r14
     76e:	af 01       	movw	r20, r30
     770:	0e 94 b8 06 	call	0xd70	; 0xd70 <LCD_DrawLine>
		
		while(true) {
			
			LCD_Clear(BLACK);
			
			for(i=0; i<1000; i++)
     774:	21 96       	adiw	r28, 0x01	; 1
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	c8 3e       	cpi	r28, 0xE8	; 232
     77a:	d8 07       	cpc	r29, r24
     77c:	69 f6       	brne	.-102    	; 0x718 <main+0x7e>
     77e:	c6 cf       	rjmp	.-116    	; 0x70c <main+0x72>

00000780 <LCD_WR_DATA>:
//
// write data to LCD bus
//
void LCD_WR_DATA(unsigned int data) {

	LCD_RD_H();
     780:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     782:	de 9a       	sbi	0x1b, 6	; 27
    LCD_CS_L();  
     784:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     786:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data>>8;
     788:	95 bb       	out	0x15, r25	; 21
	
    LCD_WR_H();
     78a:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     78c:	c3 9a       	sbi	0x18, 3	; 24
	
    LCD_DATA_PORT = data&0XFF; 
     78e:	85 bb       	out	0x15, r24	; 21
	
    LCD_WR_H();
     790:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     792:	dd 9a       	sbi	0x1b, 5	; 27
}
     794:	08 95       	ret

00000796 <LCD_WR_INDEX>:
//
// Write register index
//
void LCD_WR_INDEX(unsigned int index) {

    LCD_RD_H();
     796:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_L();
     798:	de 98       	cbi	0x1b, 6	; 27
    LCD_CS_L();  
     79a:	dd 98       	cbi	0x1b, 5	; 27
    LCD_WR_L();
     79c:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index>>8; 
     79e:	95 bb       	out	0x15, r25	; 21

    LCD_WR_H();
     7a0:	c3 98       	cbi	0x18, 3	; 24
    LCD_WR_L();
     7a2:	c3 9a       	sbi	0x18, 3	; 24

    LCD_DATA_PORT = index&0XFF; 
     7a4:	85 bb       	out	0x15, r24	; 21

    LCD_WR_H();
     7a6:	c3 98       	cbi	0x18, 3	; 24
    LCD_CS_H();
     7a8:	dd 9a       	sbi	0x1b, 5	; 27
}
     7aa:	08 95       	ret

000007ac <LCD_WR_REGISTER>:

///////////////////
//
// Write register
//
void LCD_WR_REGISTER(unsigned int index,unsigned int data) {
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	8b 01       	movw	r16, r22

    LCD_WR_INDEX(index);
     7b2:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_WR_INDEX>
    LCD_WR_DATA(data);
     7b6:	c8 01       	movw	r24, r16
     7b8:	0e 94 c0 03 	call	0x780	; 0x780 <LCD_WR_DATA>
}
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <LCD_Scroll>:

///////////////////
//
// LCD_Scroll(y);
//
void LCD_Scroll(int y) {
     7c2:	bc 01       	movw	r22, r24
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <LCD_Scroll+0x8>

    while (y < 0)
        y += 320;
     7c6:	60 5c       	subi	r22, 0xC0	; 192
     7c8:	7e 4f       	sbci	r23, 0xFE	; 254
//
// LCD_Scroll(y);
//
void LCD_Scroll(int y) {

    while (y < 0)
     7ca:	77 fd       	sbrc	r23, 7
     7cc:	fc cf       	rjmp	.-8      	; 0x7c6 <LCD_Scroll+0x4>
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <LCD_Scroll+0x12>
        y += 320;
	
    while (y >= 320)
        y -= 320;
     7d0:	60 54       	subi	r22, 0x40	; 64
     7d2:	71 40       	sbci	r23, 0x01	; 1
void LCD_Scroll(int y) {

    while (y < 0)
        y += 320;
	
    while (y >= 320)
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	60 34       	cpi	r22, 0x40	; 64
     7d8:	78 07       	cpc	r23, r24
     7da:	d4 f7       	brge	.-12     	; 0x7d0 <LCD_Scroll+0xe>
        y -= 320;
	
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, y);
     7dc:	8a e6       	ldi	r24, 0x6A	; 106
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
}
     7e4:	08 95       	ret

000007e6 <LCD_SetBounds>:

////////////////////////////////////////
//
// LCD_SetBounds(x, y, width, height);
//
void LCD_SetBounds(unsigned int x, unsigned int y, unsigned int width, unsigned int height) {
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	7c 01       	movw	r14, r24
     7fc:	8b 01       	movw	r16, r22
     7fe:	4a 01       	movw	r8, r20
     800:	59 01       	movw	r10, r18

	// my Vertical
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     802:	8f ee       	ldi	r24, 0xEF	; 239
     804:	c8 2e       	mov	r12, r24
     806:	d1 2c       	mov	r13, r1
     808:	c6 1a       	sub	r12, r22
     80a:	d7 0a       	sbc	r13, r23
     80c:	80 e2       	ldi	r24, 0x20	; 32
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	b6 01       	movw	r22, r12
     812:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_START, LCD_MAX_HEIGHT -y -height);
     816:	10 95       	com	r17
     818:	01 95       	neg	r16
     81a:	1f 4f       	sbci	r17, 0xFF	; 255
     81c:	00 51       	subi	r16, 0x10	; 16
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	0a 19       	sub	r16, r10
     822:	1b 09       	sbc	r17, r11
     824:	80 e5       	ldi	r24, 0x50	; 80
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_HORIZONTAL_END, LCD_MAX_HEIGHT -y -1);
     82e:	81 e5       	ldi	r24, 0x51	; 81
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	b6 01       	movw	r22, r12
     834:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	
	// my Horizontal
	//
	LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);
     838:	81 e2       	ldi	r24, 0x21	; 33
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_START, x);
     842:	82 e5       	ldi	r24, 0x52	; 82
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	b7 01       	movw	r22, r14
     848:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_VERTICAL_END, x + width -1);
     84c:	08 94       	sec
     84e:	e1 08       	sbc	r14, r1
     850:	f1 08       	sbc	r15, r1
     852:	e8 0c       	add	r14, r8
     854:	f9 1c       	adc	r15, r9
     856:	83 e5       	ldi	r24, 0x53	; 83
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	b7 01       	movw	r22, r14
     85c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	
	// Set Read & Write data registrer
	//
	LCD_WR_GRAM;
     860:	82 e2       	ldi	r24, 0x22	; 34
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_WR_INDEX>
}
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	9f 90       	pop	r9
     87a:	8f 90       	pop	r8
     87c:	08 95       	ret

0000087e <LCD_WriteChar>:

///////////////////////////////////////////////
//
// LCD_WriteChar(x, y, ichar, color, bcolor);
//
void LCD_WriteChar(unsigned int x, unsigned int y, char ichar, unsigned int color, unsigned int bcolor) {
     87e:	af 92       	push	r10
     880:	bf 92       	push	r11
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	f4 2e       	mov	r15, r20
     892:	59 01       	movw	r10, r18
     894:	68 01       	movw	r12, r16

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
     896:	48 e0       	ldi	r20, 0x08	; 8
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	20 e1       	ldi	r18, 0x10	; 16
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_SetBounds>
     8a2:	cf 2d       	mov	r28, r15
     8a4:	d0 e0       	ldi	r29, 0x00	; 0
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	cc 0f       	add	r28, r28
     8aa:	dd 1f       	adc	r29, r29
     8ac:	9a 95       	dec	r25
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <LCD_WriteChar+0x2a>
     8b0:	cc 5a       	subi	r28, 0xAC	; 172
     8b2:	d1 40       	sbci	r29, 0x01	; 1
     8b4:	00 e0       	ldi	r16, 0x00	; 0
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
     8b6:	fe 01       	movw	r30, r28
     8b8:	f4 90       	lpm	r15, Z+
     8ba:	10 e0       	ldi	r17, 0x00	; 0
		
		for(column = 0; column < 8; column++) {
			
			if (data & 0x80)
     8bc:	f7 fe       	sbrs	r15, 7
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <LCD_WriteChar+0x46>
				
				LCD_WR_DATA(color);
     8c0:	c5 01       	movw	r24, r10
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <LCD_WriteChar+0x48>
			else
				LCD_WR_DATA(bcolor);
     8c4:	c6 01       	movw	r24, r12
     8c6:	0e 94 c0 03 	call	0x780	; 0x780 <LCD_WR_DATA>
  
	for(line = 0; line < 16; line++) {
		
		data = pgm_read_byte(&font_8x16[ichar-32][line]);
		
		for(column = 0; column < 8; column++) {
     8ca:	1f 5f       	subi	r17, 0xFF	; 255
     8cc:	18 30       	cpi	r17, 0x08	; 8
     8ce:	11 f0       	breq	.+4      	; 0x8d4 <LCD_WriteChar+0x56>
				
				LCD_WR_DATA(color);
			else
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
     8d0:	ff 0c       	add	r15, r15
     8d2:	f4 cf       	rjmp	.-24     	; 0x8bc <LCD_WriteChar+0x3e>

	unsigned char data, line, column;
	
	LCD_SetBounds(x, y, 8, 16);
  
	for(line = 0; line < 16; line++) {
     8d4:	0f 5f       	subi	r16, 0xFF	; 255
     8d6:	21 96       	adiw	r28, 0x01	; 1
     8d8:	00 31       	cpi	r16, 0x10	; 16
     8da:	69 f7       	brne	.-38     	; 0x8b6 <LCD_WriteChar+0x38>
				LCD_WR_DATA(bcolor);
			
			data <<= 1;
		}
	}
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	08 95       	ret

000008f0 <LCD_WriteString>:

//////////////////////////////////////////////////
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString(unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {
     8f0:	8f 92       	push	r8
     8f2:	9f 92       	push	r9
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	7c 01       	movw	r14, r24
     90a:	4b 01       	movw	r8, r22
     90c:	ea 01       	movw	r28, r20
     90e:	59 01       	movw	r10, r18
     910:	68 01       	movw	r12, r16
     912:	0b c0       	rjmp	.+22     	; 0x92a <LCD_WriteString+0x3a>

	while(*string) {
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
     914:	21 96       	adiw	r28, 0x01	; 1
     916:	c7 01       	movw	r24, r14
     918:	b4 01       	movw	r22, r8
     91a:	95 01       	movw	r18, r10
     91c:	86 01       	movw	r16, r12
     91e:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_WriteChar>
		x += 8;
     922:	88 e0       	ldi	r24, 0x08	; 8
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	e8 0e       	add	r14, r24
     928:	f9 1e       	adc	r15, r25
//
// LCD_WriteString(x, y, string, color, bcolor);
//
void LCD_WriteString(unsigned int x,unsigned int y,char *string,unsigned int color,unsigned int bcolor) {

	while(*string) {
     92a:	48 81       	ld	r20, Y
     92c:	44 23       	and	r20, r20
     92e:	91 f7       	brne	.-28     	; 0x914 <LCD_WriteString+0x24>
		
		LCD_WriteChar(x, y, *string++, color, bcolor);
		x += 8;
	}
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	08 95       	ret

0000094a <LCD_Fill>:
//
// LCD_Fill(x, y, width, height, color);
//
// color is RGB(5-6-5) format
//
void LCD_Fill(unsigned int x, unsigned int y, unsigned int width, unsigned int height, unsigned int color) {
     94a:	4f 92       	push	r4
     94c:	5f 92       	push	r5
     94e:	6f 92       	push	r6
     950:	7f 92       	push	r7
     952:	8f 92       	push	r8
     954:	9f 92       	push	r9
     956:	af 92       	push	r10
     958:	bf 92       	push	r11
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	5c 01       	movw	r10, r24
     968:	4b 01       	movw	r8, r22
     96a:	7a 01       	movw	r14, r20
     96c:	69 01       	movw	r12, r18

	unsigned long index = width;
     96e:	9a 01       	movw	r18, r20
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
	index *= height;
     974:	b6 01       	movw	r22, r12
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
     97e:	2b 01       	movw	r4, r22
     980:	3c 01       	movw	r6, r24
	
	LCD_SetBounds(x, y, width, height);
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	a7 01       	movw	r20, r14
     988:	96 01       	movw	r18, r12
     98a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_SetBounds>
  
	LCD_RD_H();
     98e:	df 9a       	sbi	0x1b, 7	; 27
	LCD_RS_H();
     990:	de 9a       	sbi	0x1b, 6	; 27
	LCD_CS_L();
     992:	dd 98       	cbi	0x1b, 5	; 27
     994:	0b c0       	rjmp	.+22     	; 0x9ac <LCD_Fill+0x62>
	
	while(index--) {
		
		LCD_WR_L();
     996:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color>>8; 
     998:	15 bb       	out	0x15, r17	; 21
		
		LCD_WR_H();
     99a:	c3 98       	cbi	0x18, 3	; 24
		LCD_WR_L();
     99c:	c3 9a       	sbi	0x18, 3	; 24
		
		LCD_DATA_PORT=color&0XFF; 
     99e:	05 bb       	out	0x15, r16	; 21
		
		LCD_WR_H();
     9a0:	c3 98       	cbi	0x18, 3	; 24
     9a2:	08 94       	sec
     9a4:	41 08       	sbc	r4, r1
     9a6:	51 08       	sbc	r5, r1
     9a8:	61 08       	sbc	r6, r1
     9aa:	71 08       	sbc	r7, r1
  
	LCD_RD_H();
	LCD_RS_H();
	LCD_CS_L();
	
	while(index--) {
     9ac:	41 14       	cp	r4, r1
     9ae:	51 04       	cpc	r5, r1
     9b0:	61 04       	cpc	r6, r1
     9b2:	71 04       	cpc	r7, r1
     9b4:	81 f7       	brne	.-32     	; 0x996 <LCD_Fill+0x4c>
		LCD_DATA_PORT=color&0XFF; 
		
		LCD_WR_H();
	}
 
	LCD_CS_H();
     9b6:	dd 9a       	sbi	0x1b, 5	; 27
}
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	bf 90       	pop	r11
     9c6:	af 90       	pop	r10
     9c8:	9f 90       	pop	r9
     9ca:	8f 90       	pop	r8
     9cc:	7f 90       	pop	r7
     9ce:	6f 90       	pop	r6
     9d0:	5f 90       	pop	r5
     9d2:	4f 90       	pop	r4
     9d4:	08 95       	ret

000009d6 <LCD_Clear>:
//
// LCD_Clear(color);
//
// color is RGB(5-6-5) format
//
void LCD_Clear(unsigned int color) {
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	8c 01       	movw	r16, r24

	LCD_Fill(0, 0, LCD_MAX_WIDTH, LCD_MAX_HEIGHT, color);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	40 e4       	ldi	r20, 0x40	; 64
     9e6:	51 e0       	ldi	r21, 0x01	; 1
     9e8:	20 ef       	ldi	r18, 0xF0	; 240
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	0e 94 a5 04 	call	0x94a	; 0x94a <LCD_Fill>
}
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <LCD_Init>:
//
// LCD initialization
//
void LCD_Init(void) {

	LCD_PORT_INI();
     9f6:	8f 9a       	sbi	0x11, 7	; 17
     9f8:	d5 9a       	sbi	0x1a, 5	; 26
     9fa:	d6 9a       	sbi	0x1a, 6	; 26
     9fc:	bb 9a       	sbi	0x17, 3	; 23
     9fe:	d7 9a       	sbi	0x1a, 7	; 26
     a00:	b9 9a       	sbi	0x17, 1	; 23
 
	// LCD Reset
	//
	LCD_RST_L();
     a02:	c1 98       	cbi	0x18, 1	; 24
     a04:	88 ee       	ldi	r24, 0xE8	; 232
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	28 ec       	ldi	r18, 0xC8	; 200
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	f9 01       	movw	r30, r18
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <LCD_Init+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a12:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a14:	d9 f7       	brne	.-10     	; 0xa0c <LCD_Init+0x16>
	_delay_ms(100);
	LCD_RST_H();
     a16:	c1 9a       	sbi	0x18, 1	; 24
     a18:	88 ee       	ldi	r24, 0xE8	; 232
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	28 ec       	ldi	r18, 0xC8	; 200
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	f9 01       	movw	r30, r18
     a22:	31 97       	sbiw	r30, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_Init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a28:	d9 f7       	brne	.-10     	; 0xa20 <LCD_Init+0x2a>
	_delay_ms(100); 
	
	// SET registers
	//
	LCD_WR_REGISTER(0x00E3,0x3008); 					// Set the internal timing;   
     a2a:	83 ee       	ldi	r24, 0xE3	; 227
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	68 e0       	ldi	r22, 0x08	; 8
     a30:	70 e3       	ldi	r23, 0x30	; 48
     a32:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00E7,0x0012); 					// Set the internal timing;   
     a36:	87 ee       	ldi	r24, 0xE7	; 231
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	62 e1       	ldi	r22, 0x12	; 18
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(0x00Ef,0x1231); 					// Set the internal timing;   
     a42:	8f ee       	ldi	r24, 0xEF	; 239
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	61 e3       	ldi	r22, 0x31	; 49
     a48:	72 e1       	ldi	r23, 0x12	; 18
     a4a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_START_OSC,0x0001);				// Start Oscilator
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
     a5a:	84 ef       	ldi	r24, 0xF4	; 244
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	28 ec       	ldi	r18, 0xC8	; 200
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	f9 01       	movw	r30, r18
     a64:	31 97       	sbiw	r30, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <LCD_Init+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <LCD_Init+0x6c>
	_delay_ms(50);

    LCD_WR_REGISTER(LCD_DRIVE_OUTPUT, 0x0000);			// Set standard drive mode
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_DRIVE_WAVE, 0x0700);			// Line inversion
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	77 e0       	ldi	r23, 0x07	; 7
     a80:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	
	// 16 bits System interface (65536 colors)
	//
	LCD_WR_REGISTER(LCD_ENTRY_MODE,0x1028); 			// [12]BRG mode, [5:4]display rotate and [3]Landscape
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	68 e2       	ldi	r22, 0x28	; 40
     a8a:	70 e1       	ldi	r23, 0x10	; 16
     a8c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_RESIZE_CTRL, 0x0000);			// No resize
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL2, 0x0202);			// Back & front porch = 2
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	72 e0       	ldi	r23, 0x02	; 2
     aa4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL3, 0x0000);			// Non-display area refresh cycle
     aa8:	89 e0       	ldi	r24, 0x09	; 9
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL4, 0x0000);			// FMARK function OFF
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
				
	// Select System interface
	//
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE1, 0x0000);	// 16-bit RGB interface, internal clock (Still pictures))
     ac0:	8c e0       	ldi	r24, 0x0C	; 12
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_FRM_MARKER_POS, 0x0000);		// Frame marker Position
     acc:	8d e0       	ldi	r24, 0x0D	; 13
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_DISPLAY_INTERFACE2, 0x0000);	// RGB interface polarity
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>

	// Power On sequence 
	//
	LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x0000);
     ae4:	80 e1       	ldi	r24, 0x10	; 16
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0007);			// Vci x1
     af0:	81 e1       	ldi	r24, 0x11	; 17
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	67 e0       	ldi	r22, 0x07	; 7
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x0000);
     afc:	82 e1       	ldi	r24, 0x12	; 18
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x0000);
     b08:	83 e1       	ldi	r24, 0x13	; 19
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
     b14:	80 ed       	ldi	r24, 0xD0	; 208
     b16:	97 e0       	ldi	r25, 0x07	; 7
     b18:	28 ec       	ldi	r18, 0xC8	; 200
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <LCD_Init+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b24:	d9 f7       	brne	.-10     	; 0xb1c <LCD_Init+0x126>
    _delay_ms(200);										// Dis-charge capacitor power voltage
    
    LCD_WR_REGISTER(LCD_POWER_CTRL1, 0x1590);			// Power supply startup, Source driver enable
     b26:	80 e1       	ldi	r24, 0x10	; 16
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	60 e9       	ldi	r22, 0x90	; 144
     b2c:	75 e1       	ldi	r23, 0x15	; 21
     b2e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL2, 0x0227);			// Step-up circuit1	Fosc/4, Step-up circuit2 Fosc/16
     b32:	81 e1       	ldi	r24, 0x11	; 17
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	67 e2       	ldi	r22, 0x27	; 39
     b38:	72 e0       	ldi	r23, 0x02	; 2
     b3a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
     b3e:	84 ef       	ldi	r24, 0xF4	; 244
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	28 ec       	ldi	r18, 0xC8	; 200
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <LCD_Init+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b4e:	d9 f7       	brne	.-10     	; 0xb46 <LCD_Init+0x150>
    _delay_ms(50);

	LCD_WR_REGISTER(LCD_POWER_CTRL3, 0x001e);			// Internal reference voltage= Vci;
     b50:	82 e1       	ldi	r24, 0x12	; 18
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	6e e1       	ldi	r22, 0x1E	; 30
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
     b5c:	84 ef       	ldi	r24, 0xF4	; 244
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	28 ec       	ldi	r18, 0xC8	; 200
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	f9 01       	movw	r30, r18
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <LCD_Init+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6c:	d9 f7       	brne	.-10     	; 0xb64 <LCD_Init+0x16e>
    _delay_ms(50);
	
    LCD_WR_REGISTER(LCD_POWER_CTRL4, 0x1500);			// VCOM amplitude x1.04
     b6e:	83 e1       	ldi	r24, 0x13	; 19
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	75 e1       	ldi	r23, 0x15	; 21
     b76:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_POWER_CTRL7, 0x0026);			// VCOMH x0.875
     b7a:	89 e2       	ldi	r24, 0x29	; 41
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	66 e2       	ldi	r22, 0x26	; 38
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
     b86:	84 ef       	ldi	r24, 0xF4	; 244
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	28 ec       	ldi	r18, 0xC8	; 200
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <LCD_Init+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b96:	d9 f7       	brne	.-10     	; 0xb8e <LCD_Init+0x198>
    _delay_ms(50);
    
	// Adjust the Gamma Curve
	//
	LCD_WR_REGISTER(LCD_GAMMA_CTRL1,0x0007);
     b98:	80 e3       	ldi	r24, 0x30	; 48
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	67 e0       	ldi	r22, 0x07	; 7
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL2,0x0707);
     ba4:	81 e3       	ldi	r24, 0x31	; 49
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	67 e0       	ldi	r22, 0x07	; 7
     baa:	77 e0       	ldi	r23, 0x07	; 7
     bac:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL3,0x0107);
     bb0:	82 e3       	ldi	r24, 0x32	; 50
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	67 e0       	ldi	r22, 0x07	; 7
     bb6:	71 e0       	ldi	r23, 0x01	; 1
     bb8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL4,0x0206);
     bbc:	85 e3       	ldi	r24, 0x35	; 53
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	66 e0       	ldi	r22, 0x06	; 6
     bc2:	72 e0       	ldi	r23, 0x02	; 2
     bc4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL5,0x0406);
     bc8:	86 e3       	ldi	r24, 0x36	; 54
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	66 e0       	ldi	r22, 0x06	; 6
     bce:	74 e0       	ldi	r23, 0x04	; 4
     bd0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL6,0x0101);
     bd4:	87 e3       	ldi	r24, 0x37	; 55
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL7,0x0101);
     be0:	88 e3       	ldi	r24, 0x38	; 56
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	71 e0       	ldi	r23, 0x01	; 1
     be8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL8,0x0207);
     bec:	89 e3       	ldi	r24, 0x39	; 57
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	67 e0       	ldi	r22, 0x07	; 7
     bf2:	72 e0       	ldi	r23, 0x02	; 2
     bf4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL9,0x0504);
     bf8:	8c e3       	ldi	r24, 0x3C	; 60
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	64 e0       	ldi	r22, 0x04	; 4
     bfe:	75 e0       	ldi	r23, 0x05	; 5
     c00:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_REGISTER(LCD_GAMMA_CTRL10,0x0806);
     c04:	8d e3       	ldi	r24, 0x3D	; 61
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	66 e0       	ldi	r22, 0x06	; 6
     c0a:	78 e0       	ldi	r23, 0x08	; 8
     c0c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	
	// Set frame rate ???????????????????????????????????????????????????????
	//																	???????
	LCD_WR_REGISTER(LCD_FRAME_RATE, 0x000F);	// Frame Rate			?????????
     c10:	8b e2       	ldi	r24, 0x2B	; 43
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	6f e0       	ldi	r22, 0x0F	; 15
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	//							zakazana hodnota						???????
	//???????????????????????????????????????????????????????????????????????
	
	// Set GRAM area
	//
	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS,0x0000);			// Horizontal GRAM address
     c1c:	80 e2       	ldi	r24, 0x20	; 32
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS,0x0000);			// Vertical GRAM address
     c28:	81 e2       	ldi	r24, 0x21	; 33
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_START, 0x0000);		// Horizontal GRAM Start Address
     c34:	80 e5       	ldi	r24, 0x50	; 80
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_HORIZONTAL_END, 0x00EF);		// Horizontal GRAM End Address
     c40:	81 e5       	ldi	r24, 0x51	; 81
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	6f ee       	ldi	r22, 0xEF	; 239
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_START, 0x0000);		// Vertical GRAM Start Address
     c4c:	82 e5       	ldi	r24, 0x52	; 82
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_VERTICAL_END, 0x013F);			// Vertical GRAM Start Address
     c58:	83 e5       	ldi	r24, 0x53	; 83
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	6f e3       	ldi	r22, 0x3F	; 63
     c5e:	71 e0       	ldi	r23, 0x01	; 1
     c60:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	
	// Gater scan control
	//
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL1, 0x2700);		// Gate Scan for 320 lines
     c64:	80 e6       	ldi	r24, 0x60	; 96
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	77 e2       	ldi	r23, 0x27	; 39
     c6c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL2, 0x0003);		// From G1 to G320, vertical scroll enable
     c70:	81 e6       	ldi	r24, 0x61	; 97
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	63 e0       	ldi	r22, 0x03	; 3
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GATE_SCAN_CTRL3, 0x0000);		// Set scrolling line to 0x00
     c7c:	8a e6       	ldi	r24, 0x6A	; 106
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	
	// Partial display control (not used for now)
	//
	LCD_WR_REGISTER(LCD_PART_IMG1_DISP_POS, 0x0000);
     c88:	80 e8       	ldi	r24, 0x80	; 128
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_START_AD, 0x0000);
     c94:	81 e8       	ldi	r24, 0x81	; 129
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG1_END_AD, 0x0000);
     ca0:	82 e8       	ldi	r24, 0x82	; 130
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_DISP_POS, 0x0000);
     cac:	83 e8       	ldi	r24, 0x83	; 131
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_START_AD, 0x0000);
     cb8:	84 e8       	ldi	r24, 0x84	; 132
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PART_IMG2_END_AD, 0x0000);
     cc4:	85 e8       	ldi	r24, 0x85	; 133
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>

	// Panel interface control
	//
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE1, 0x0010);		// 16 clocks per line
     cd0:	80 e9       	ldi	r24, 0x90	; 144
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	60 e1       	ldi	r22, 0x10	; 16
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE2, 0x0600);		// try 0x00 // gate output non-overlap 6 clocks period
     cdc:	82 e9       	ldi	r24, 0x92	; 146
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	76 e0       	ldi	r23, 0x06	; 6
     ce4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE3, 0x0003);		// ???
     ce8:	83 e9       	ldi	r24, 0x93	; 147
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	63 e0       	ldi	r22, 0x03	; 3
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE4, 0x0110);		// H1 - 16 clocks per line period, 4 DOTCLKS division ratio with RGB synchron
     cf4:	85 e9       	ldi	r24, 0x95	; 149
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	60 e1       	ldi	r22, 0x10	; 16
     cfa:	71 e0       	ldi	r23, 0x01	; 1
     cfc:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE5, 0x0000);		// ???
     d00:	87 e9       	ldi	r24, 0x97	; 151
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_PANEL_INTERFACE6, 0x0000);		// ???
     d0c:	88 e9       	ldi	r24, 0x98	; 152
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	
	// Display ON with 262K color, normal display follow
	//
    LCD_WR_REGISTER(LCD_DISPLAY_CTRL1, 0x0133); 
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	63 e3       	ldi	r22, 0x33	; 51
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_Clear(BLACK);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_Clear>
	
	// Set LCD backlight on
	//
	LCD_BL_H();	
     d2c:	97 9a       	sbi	0x12, 7	; 18

}
     d2e:	08 95       	ret

00000d30 <LCD_SetPoint>:

///////////////////////////////
//
// LCD_SetPoint(x, y, color);
//
void LCD_SetPoint(unsigned int x, unsigned int y,unsigned int color) {
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	8c 01       	movw	r16, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	7a 01       	movw	r14, r20

	LCD_WR_REGISTER(LCD_GRAM_H_ADDRESS, LCD_MAX_HEIGHT -y -1);
     d3e:	6f ee       	ldi	r22, 0xEF	; 239
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	68 1b       	sub	r22, r24
     d44:	79 0b       	sbc	r23, r25
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
    LCD_WR_REGISTER(LCD_GRAM_V_ADDRESS, x);   
     d4e:	81 e2       	ldi	r24, 0x21	; 33
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	b8 01       	movw	r22, r16
     d54:	0e 94 d6 03 	call	0x7ac	; 0x7ac <LCD_WR_REGISTER>
	LCD_WR_GRAM;
     d58:	82 e2       	ldi	r24, 0x22	; 34
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_WR_INDEX>
	LCD_WR_DATA(color);
     d60:	c7 01       	movw	r24, r14
     d62:	0e 94 c0 03 	call	0x780	; 0x780 <LCD_WR_DATA>
}
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <LCD_DrawLine>:

/////////////////////////////////////////
//
// LCD)DrawLine(x0, y0, x1, y1, color);
//
void LCD_DrawLine(unsigned int x, unsigned int y, unsigned int xx, unsigned int yy, unsigned int color) {
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	28 97       	sbiw	r28, 0x08	; 8
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	2b 01       	movw	r4, r22
     daa:	1c 83       	std	Y+4, r17	; 0x04
     dac:	0b 83       	std	Y+3, r16	; 0x03
    int t, distance;
    int xerr=0, yerr=0, delta_x, delta_y;
    int incx, incy;

    /* compute the distances in both directions */
    delta_x = xx - x;
     dae:	48 1b       	sub	r20, r24
     db0:	59 0b       	sbc	r21, r25
    delta_y = yy - y;
     db2:	26 1b       	sub	r18, r22
     db4:	37 0b       	sbc	r19, r23

    /* Compute the direction of the increment,
       an increment of 0 means either a horizontal or vertical
       line.
    */
    if(delta_x > 0) 
     db6:	14 16       	cp	r1, r20
     db8:	15 06       	cpc	r1, r21
     dba:	24 f4       	brge	.+8      	; 0xdc4 <LCD_DrawLine+0x54>
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	27 2e       	mov	r2, r23
     dc0:	31 2c       	mov	r3, r1
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <LCD_DrawLine+0x66>
		
		incx = 1;
    else 
	if(delta_x == 0) 
     dc4:	41 15       	cp	r20, r1
     dc6:	51 05       	cpc	r21, r1
     dc8:	21 f0       	breq	.+8      	; 0xdd2 <LCD_DrawLine+0x62>
     dca:	22 24       	eor	r2, r2
     dcc:	2a 94       	dec	r2
     dce:	32 2c       	mov	r3, r2
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <LCD_DrawLine+0x66>
     dd2:	22 24       	eor	r2, r2
     dd4:	33 24       	eor	r3, r3
		
		incx=0;
    else 
		incx = -1;

    if(delta_y > 0)
     dd6:	12 16       	cp	r1, r18
     dd8:	13 06       	cpc	r1, r19
     dda:	24 f4       	brge	.+8      	; 0xde4 <LCD_DrawLine+0x74>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	66 2e       	mov	r6, r22
     de0:	71 2c       	mov	r7, r1
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <LCD_DrawLine+0x86>
		
		incy = 1;
    else 
	if(delta_y == 0)
     de4:	21 15       	cp	r18, r1
     de6:	31 05       	cpc	r19, r1
     de8:	21 f0       	breq	.+8      	; 0xdf2 <LCD_DrawLine+0x82>
     dea:	66 24       	eor	r6, r6
     dec:	6a 94       	dec	r6
     dee:	76 2c       	mov	r7, r6
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <LCD_DrawLine+0x86>
     df2:	66 24       	eor	r6, r6
     df4:	77 24       	eor	r7, r7
		incy = 0;
    else 
		incy = -1;

    /* determine which distance is greater */
    delta_x = (delta_x < 0) ? delta_x*-1 : delta_x;
     df6:	5a 01       	movw	r10, r20
     df8:	57 ff       	sbrs	r21, 7
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <LCD_DrawLine+0x94>
     dfc:	b0 94       	com	r11
     dfe:	a1 94       	neg	r10
     e00:	b1 08       	sbc	r11, r1
     e02:	b3 94       	inc	r11
    delta_y = (delta_y < 0) ? delta_y*-1 : delta_y;
     e04:	69 01       	movw	r12, r18
     e06:	37 ff       	sbrs	r19, 7
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <LCD_DrawLine+0xa2>
     e0a:	d0 94       	com	r13
     e0c:	c1 94       	neg	r12
     e0e:	d1 08       	sbc	r13, r1
     e10:	d3 94       	inc	r13
     e12:	86 01       	movw	r16, r12
     e14:	ca 14       	cp	r12, r10
     e16:	db 04       	cpc	r13, r11
     e18:	0c f4       	brge	.+2      	; 0xe1c <LCD_DrawLine+0xac>
     e1a:	85 01       	movw	r16, r10
     e1c:	88 24       	eor	r8, r8
     e1e:	99 24       	eor	r9, r9
     e20:	ee 24       	eor	r14, r14
     e22:	ff 24       	eor	r15, r15
     e24:	18 86       	std	Y+8, r1	; 0x08
     e26:	1f 82       	std	Y+7, r1	; 0x07
		distance = delta_x;
    else
		distance = delta_y;

    /* draw the line */
    for(t=0; t <= distance+1; t++) {
     e28:	c8 01       	movw	r24, r16
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	28 c0       	rjmp	.+80     	; 0xe82 <LCD_DrawLine+0x112>
		
        LCD_SetPoint(x, y, color);
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	b2 01       	movw	r22, r4
     e38:	4b 81       	ldd	r20, Y+3	; 0x03
     e3a:	5c 81       	ldd	r21, Y+4	; 0x04
     e3c:	0e 94 98 06 	call	0xd30	; 0xd30 <LCD_SetPoint>
        
        xerr += delta_x;
     e40:	ea 0c       	add	r14, r10
     e42:	fb 1c       	adc	r15, r11
        yerr += delta_y;
     e44:	ef 81       	ldd	r30, Y+7	; 0x07
     e46:	f8 85       	ldd	r31, Y+8	; 0x08
     e48:	ec 0d       	add	r30, r12
     e4a:	fd 1d       	adc	r31, r13
     e4c:	f8 87       	std	Y+8, r31	; 0x08
     e4e:	ef 83       	std	Y+7, r30	; 0x07
		
        if(xerr > distance) {
     e50:	0e 15       	cp	r16, r14
     e52:	1f 05       	cpc	r17, r15
     e54:	44 f4       	brge	.+16     	; 0xe66 <LCD_DrawLine+0xf6>
			
            xerr -= distance;
     e56:	e0 1a       	sub	r14, r16
     e58:	f1 0a       	sbc	r15, r17
            x += incx;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	82 0d       	add	r24, r2
     e60:	93 1d       	adc	r25, r3
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
        }
		
        if(yerr > distance) {
     e66:	ef 81       	ldd	r30, Y+7	; 0x07
     e68:	f8 85       	ldd	r31, Y+8	; 0x08
     e6a:	0e 17       	cp	r16, r30
     e6c:	1f 07       	cpc	r17, r31
     e6e:	34 f4       	brge	.+12     	; 0xe7c <LCD_DrawLine+0x10c>
			
            yerr -= distance;
     e70:	e0 1b       	sub	r30, r16
     e72:	f1 0b       	sbc	r31, r17
     e74:	f8 87       	std	Y+8, r31	; 0x08
     e76:	ef 83       	std	Y+7, r30	; 0x07
            y += incy;
     e78:	46 0c       	add	r4, r6
     e7a:	57 1c       	adc	r5, r7
		distance = delta_x;
    else
		distance = delta_y;

    /* draw the line */
    for(t=0; t <= distance+1; t++) {
     e7c:	08 94       	sec
     e7e:	81 1c       	adc	r8, r1
     e80:	91 1c       	adc	r9, r1
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	88 15       	cp	r24, r8
     e88:	99 05       	cpc	r25, r9
     e8a:	9c f6       	brge	.-90     	; 0xe32 <LCD_DrawLine+0xc2>
			
            yerr -= distance;
            y += incy;
        }
    }
     e8c:	28 96       	adiw	r28, 0x08	; 8
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	4f 90       	pop	r4
     eb8:	3f 90       	pop	r3
     eba:	2f 90       	pop	r2
     ebc:	08 95       	ret

00000ebe <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	d8 2e       	mov	r13, r24
     eca:	7a 01       	movw	r14, r20
     ecc:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     ece:	87 ff       	sbrs	r24, 7
     ed0:	0b c0       	rjmp	.+22     	; 0xee8 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     ed2:	87 e7       	ldi	r24, 0x77	; 119
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
		if (res > 1) return res;
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	98 f5       	brcc	.+102    	; 0xf4a <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     ee4:	8f e7       	ldi	r24, 0x7F	; 127
     ee6:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
     ee8:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
     eea:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
	SELECT();
     eee:	c3 98       	cbi	0x18, 3	; 24
	rcv_spi();
     ef0:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
     ef4:	8d 2d       	mov	r24, r13
     ef6:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     efa:	81 2f       	mov	r24, r17
     efc:	99 27       	eor	r25, r25
     efe:	aa 27       	eor	r26, r26
     f00:	bb 27       	eor	r27, r27
     f02:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     f06:	c8 01       	movw	r24, r16
     f08:	aa 27       	eor	r26, r26
     f0a:	bb 27       	eor	r27, r27
     f0c:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     f10:	bb 27       	eor	r27, r27
     f12:	a1 2f       	mov	r26, r17
     f14:	90 2f       	mov	r25, r16
     f16:	8f 2d       	mov	r24, r15
     f18:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     f1c:	8e 2d       	mov	r24, r14
     f1e:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     f22:	80 e4       	ldi	r24, 0x40	; 64
     f24:	d8 16       	cp	r13, r24
     f26:	11 f4       	brne	.+4      	; 0xf2c <send_cmd+0x6e>
     f28:	85 e9       	ldi	r24, 0x95	; 149
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <send_cmd+0x7a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     f2c:	88 e4       	ldi	r24, 0x48	; 72
     f2e:	d8 16       	cp	r13, r24
     f30:	11 f4       	brne	.+4      	; 0xf36 <send_cmd+0x78>
     f32:	87 e8       	ldi	r24, 0x87	; 135
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <send_cmd+0x7a>
     f36:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
     f38:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
     f3c:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     f3e:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
	} while ((res & 0x80) && --n);
     f42:	87 ff       	sbrs	r24, 7
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <send_cmd+0x8c>
     f46:	11 50       	subi	r17, 0x01	; 1
     f48:	d1 f7       	brne	.-12     	; 0xf3e <send_cmd+0x80>

	return res;			/* Return with the response value */
}
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	08 95       	ret

00000f56 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     f56:	cf 92       	push	r12
     f58:	df 92       	push	r13
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	6c 01       	movw	r12, r24
     f68:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
     f6a:	80 91 66 00 	lds	r24, 0x0066
     f6e:	83 fd       	sbrc	r24, 3
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <disk_readp+0x2a>
     f72:	39 e0       	ldi	r19, 0x09	; 9
     f74:	44 0f       	add	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	66 1f       	adc	r22, r22
     f7a:	77 1f       	adc	r23, r23
     f7c:	3a 95       	dec	r19
     f7e:	d1 f7       	brne	.-12     	; 0xf74 <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
     f80:	81 e5       	ldi	r24, 0x51	; 81
     f82:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
     f86:	88 23       	and	r24, r24
     f88:	61 f5       	brne	.+88     	; 0xfe2 <disk_readp+0x8c>
     f8a:	c0 e4       	ldi	r28, 0x40	; 64
     f8c:	dc e9       	ldi	r29, 0x9C	; 156

		bc = 40000;
		do {							/* Wait for data packet */
			rc = rcv_spi();
     f8e:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
		} while (rc == 0xFF && --bc);
     f92:	8f 3f       	cpi	r24, 0xFF	; 255
     f94:	19 f4       	brne	.+6      	; 0xf9c <disk_readp+0x46>
     f96:	21 97       	sbiw	r28, 0x01	; 1
     f98:	d1 f7       	brne	.-12     	; 0xf8e <disk_readp+0x38>
     f9a:	23 c0       	rjmp	.+70     	; 0xfe2 <disk_readp+0x8c>

		if (rc == 0xFE) {				/* A data packet arrived */
     f9c:	8e 3f       	cpi	r24, 0xFE	; 254
     f9e:	09 f5       	brne	.+66     	; 0xfe2 <disk_readp+0x8c>
			bc = 514 - ofs - cnt;

			/* Skip leading bytes */
			if (ofs) {
     fa0:	e1 14       	cp	r14, r1
     fa2:	f1 04       	cpc	r15, r1
     fa4:	29 f0       	breq	.+10     	; 0xfb0 <disk_readp+0x5a>
     fa6:	e7 01       	movw	r28, r14
				do rcv_spi(); while (--ofs);
     fa8:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
     fac:	21 97       	sbiw	r28, 0x01	; 1
     fae:	e1 f7       	brne	.-8      	; 0xfa8 <disk_readp+0x52>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
     fb0:	c1 14       	cp	r12, r1
     fb2:	d1 04       	cpc	r13, r1
     fb4:	41 f0       	breq	.+16     	; 0xfc6 <disk_readp+0x70>
     fb6:	e8 01       	movw	r28, r16
				do {
					*buff++ = rcv_spi();
     fb8:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
     fbc:	f6 01       	movw	r30, r12
     fbe:	81 93       	st	Z+, r24
     fc0:	6f 01       	movw	r12, r30
				} while (--cnt);
     fc2:	21 97       	sbiw	r28, 0x01	; 1
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <disk_readp+0x62>
		do {							/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				/* A data packet arrived */
			bc = 514 - ofs - cnt;
     fc6:	cc 27       	eor	r28, r28
     fc8:	dd 27       	eor	r29, r29
     fca:	ce 19       	sub	r28, r14
     fcc:	df 09       	sbc	r29, r15
     fce:	ce 5f       	subi	r28, 0xFE	; 254
     fd0:	dd 4f       	sbci	r29, 0xFD	; 253
     fd2:	c0 1b       	sub	r28, r16
     fd4:	d1 0b       	sbc	r29, r17
					*buff++ = rcv_spi();
				} while (--cnt);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
     fd6:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
     fda:	21 97       	sbiw	r28, 0x01	; 1
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <disk_readp+0x80>
     fde:	10 e0       	ldi	r17, 0x00	; 0
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <disk_readp+0x8e>
     fe2:	11 e0       	ldi	r17, 0x01	; 1

			res = RES_OK;
		}
	}

	DESELECT();
     fe4:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
     fe6:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>

	return res;
}
     fea:	81 2f       	mov	r24, r17
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	08 95       	ret

00000ffe <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	8c 01       	movw	r16, r24
	WORD bc;
	static WORD wc;

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	d9 f0       	breq	.+54     	; 0x1042 <disk_writep+0x44>
		bc = (WORD)sa;
    100c:	ea 01       	movw	r28, r20
    100e:	0f c0       	rjmp	.+30     	; 0x102e <disk_writep+0x30>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1010:	f8 01       	movw	r30, r16
    1012:	81 91       	ld	r24, Z+
    1014:	8f 01       	movw	r16, r30
    1016:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
			wc--; bc--;
    101a:	80 91 64 00 	lds	r24, 0x0064
    101e:	90 91 65 00 	lds	r25, 0x0065
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	90 93 65 00 	sts	0x0065, r25
    1028:	80 93 64 00 	sts	0x0064, r24
    102c:	21 97       	sbiw	r28, 0x01	; 1

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    102e:	20 97       	sbiw	r28, 0x00	; 0
    1030:	09 f4       	brne	.+2      	; 0x1034 <disk_writep+0x36>
    1032:	52 c0       	rjmp	.+164    	; 0x10d8 <disk_writep+0xda>
    1034:	80 91 64 00 	lds	r24, 0x0064
    1038:	90 91 65 00 	lds	r25, 0x0065
    103c:	89 2b       	or	r24, r25
    103e:	41 f7       	brne	.-48     	; 0x1010 <disk_writep+0x12>
    1040:	4b c0       	rjmp	.+150    	; 0x10d8 <disk_writep+0xda>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1042:	41 15       	cp	r20, r1
    1044:	51 05       	cpc	r21, r1
    1046:	61 05       	cpc	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	f9 f0       	breq	.+62     	; 0x108a <disk_writep+0x8c>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    104c:	80 91 66 00 	lds	r24, 0x0066
    1050:	83 fd       	sbrc	r24, 3
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <disk_writep+0x64>
    1054:	e9 e0       	ldi	r30, 0x09	; 9
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	66 1f       	adc	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	ea 95       	dec	r30
    1060:	d1 f7       	brne	.-12     	; 0x1056 <disk_writep+0x58>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1062:	88 e5       	ldi	r24, 0x58	; 88
    1064:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    1068:	88 23       	and	r24, r24
    106a:	11 f0       	breq	.+4      	; 0x1070 <disk_writep+0x72>
    106c:	11 e0       	ldi	r17, 0x01	; 1
    106e:	35 c0       	rjmp	.+106    	; 0x10da <disk_writep+0xdc>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
    1076:	8e ef       	ldi	r24, 0xFE	; 254
    1078:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
				wc = 512;							/* Set byte counter */
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	90 93 65 00 	sts	0x0065, r25
    1084:	80 93 64 00 	sts	0x0064, r24
    1088:	27 c0       	rjmp	.+78     	; 0x10d8 <disk_writep+0xda>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    108a:	c0 91 64 00 	lds	r28, 0x0064
    108e:	d0 91 65 00 	lds	r29, 0x0065
    1092:	22 96       	adiw	r28, 0x02	; 2
    1094:	04 c0       	rjmp	.+8      	; 0x109e <disk_writep+0xa0>
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	0e 94 bb 12 	call	0x2576	; 0x2576 <xmit_spi>
    109c:	21 97       	sbiw	r28, 0x01	; 1
    109e:	20 97       	sbiw	r28, 0x00	; 0
    10a0:	d1 f7       	brne	.-12     	; 0x1096 <disk_writep+0x98>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
    10a2:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
    10a6:	8f 71       	andi	r24, 0x1F	; 31
    10a8:	85 30       	cpi	r24, 0x05	; 5
    10aa:	89 f4       	brne	.+34     	; 0x10ce <disk_writep+0xd0>
    10ac:	c8 e8       	ldi	r28, 0x88	; 136
    10ae:	d3 e1       	ldi	r29, 0x13	; 19
    10b0:	03 c0       	rjmp	.+6      	; 0x10b8 <disk_writep+0xba>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
    10b2:	0e 94 ae 12 	call	0x255c	; 0x255c <dly_100us>
    10b6:	21 97       	sbiw	r28, 0x01	; 1
    10b8:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
    10bc:	8f 3f       	cpi	r24, 0xFF	; 255
    10be:	19 f0       	breq	.+6      	; 0x10c6 <disk_writep+0xc8>
    10c0:	20 97       	sbiw	r28, 0x00	; 0
    10c2:	b9 f7       	brne	.-18     	; 0x10b2 <disk_writep+0xb4>
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <disk_writep+0xd0>
				if (bc) res = RES_OK;
    10c6:	cd 2b       	or	r28, r29
    10c8:	11 f0       	breq	.+4      	; 0x10ce <disk_writep+0xd0>
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <disk_writep+0xd2>
    10ce:	11 e0       	ldi	r17, 0x01	; 1
			}
			DESELECT();
    10d0:	c3 9a       	sbi	0x18, 3	; 24
			rcv_spi();
    10d2:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <disk_writep+0xdc>
    10d8:	10 e0       	ldi	r17, 0x00	; 0
		}
	}

	return res;
}
    10da:	81 2f       	mov	r24, r17
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	08 95       	ret

000010e6 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <disk_initialize+0x12>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <disk_initialize+0x14>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
    10fe:	80 91 66 00 	lds	r24, 0x0066
    1102:	88 23       	and	r24, r24
    1104:	51 f0       	breq	.+20     	; 0x111a <disk_initialize+0x34>
    1106:	c3 99       	sbic	0x18, 3	; 24
    1108:	08 c0       	rjmp	.+16     	; 0x111a <disk_initialize+0x34>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	0e 94 ff 07 	call	0xffe	; 0xffe <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
    111a:	0e 94 a9 12 	call	0x2552	; 0x2552 <init_spi>
	DESELECT();
    111e:	c3 9a       	sbi	0x18, 3	; 24
    1120:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
    1122:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
    1126:	11 50       	subi	r17, 0x01	; 1
    1128:	e1 f7       	brne	.-8      	; 0x1122 <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    112a:	80 e4       	ldi	r24, 0x40	; 64
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	09 f0       	breq	.+2      	; 0x113e <disk_initialize+0x58>
    113c:	69 c0       	rjmp	.+210    	; 0x1210 <disk_initialize+0x12a>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    113e:	88 e4       	ldi	r24, 0x48	; 72
    1140:	4a ea       	ldi	r20, 0xAA	; 170
    1142:	51 e0       	ldi	r21, 0x01	; 1
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	e1 f5       	brne	.+120    	; 0x11c8 <disk_initialize+0xe2>
    1150:	6e 01       	movw	r12, r28
    1152:	08 94       	sec
    1154:	c1 1c       	adc	r12, r1
    1156:	d1 1c       	adc	r13, r1
    1158:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    115a:	8e 01       	movw	r16, r28
    115c:	0b 5f       	subi	r16, 0xFB	; 251
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
    1164:	f7 01       	movw	r30, r14
    1166:	81 93       	st	Z+, r24
    1168:	7f 01       	movw	r14, r30
    116a:	e0 17       	cp	r30, r16
    116c:	f1 07       	cpc	r31, r17
    116e:	c1 f7       	brne	.-16     	; 0x1160 <disk_initialize+0x7a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	09 f0       	breq	.+2      	; 0x1178 <disk_initialize+0x92>
    1176:	4c c0       	rjmp	.+152    	; 0x1210 <disk_initialize+0x12a>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	8a 3a       	cpi	r24, 0xAA	; 170
    117c:	09 f0       	breq	.+2      	; 0x1180 <disk_initialize+0x9a>
    117e:	48 c0       	rjmp	.+144    	; 0x1210 <disk_initialize+0x12a>
    1180:	00 e1       	ldi	r16, 0x10	; 16
    1182:	17 e2       	ldi	r17, 0x27	; 39
    1184:	06 c0       	rjmp	.+12     	; 0x1192 <disk_initialize+0xac>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1186:	0e 94 ae 12 	call	0x255c	; 0x255c <dly_100us>
    118a:	01 50       	subi	r16, 0x01	; 1
    118c:	10 40       	sbci	r17, 0x00	; 0
    118e:	09 f4       	brne	.+2      	; 0x1192 <disk_initialize+0xac>
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <disk_initialize+0x12a>
    1192:	89 ee       	ldi	r24, 0xE9	; 233
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e4       	ldi	r23, 0x40	; 64
    119c:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    11a0:	88 23       	and	r24, r24
    11a2:	89 f7       	brne	.-30     	; 0x1186 <disk_initialize+0xa0>
    11a4:	4c c0       	rjmp	.+152    	; 0x123e <disk_initialize+0x158>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    11a6:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
    11aa:	f6 01       	movw	r30, r12
    11ac:	81 93       	st	Z+, r24
    11ae:	6f 01       	movw	r12, r30
    11b0:	ee 15       	cp	r30, r14
    11b2:	ff 05       	cpc	r31, r15
    11b4:	c1 f7       	brne	.-16     	; 0x11a6 <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	86 fd       	sbrc	r24, 6
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <disk_initialize+0xdc>
    11bc:	04 e0       	ldi	r16, 0x04	; 4
    11be:	f0 2e       	mov	r15, r16
    11c0:	28 c0       	rjmp	.+80     	; 0x1212 <disk_initialize+0x12c>
    11c2:	1c e0       	ldi	r17, 0x0C	; 12
    11c4:	f1 2e       	mov	r15, r17
    11c6:	25 c0       	rjmp	.+74     	; 0x1212 <disk_initialize+0x12c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    11c8:	89 ee       	ldi	r24, 0xE9	; 233
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	28 f0       	brcs	.+10     	; 0x11e4 <disk_initialize+0xfe>
    11da:	b1 e4       	ldi	r27, 0x41	; 65
    11dc:	eb 2e       	mov	r14, r27
    11de:	ff 24       	eor	r15, r15
    11e0:	f3 94       	inc	r15
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <disk_initialize+0x106>
    11e4:	a9 ee       	ldi	r26, 0xE9	; 233
    11e6:	ea 2e       	mov	r14, r26
    11e8:	f2 e0       	ldi	r31, 0x02	; 2
    11ea:	ff 2e       	mov	r15, r31
    11ec:	00 e1       	ldi	r16, 0x10	; 16
    11ee:	17 e2       	ldi	r17, 0x27	; 39
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    11f2:	0e 94 ae 12 	call	0x255c	; 0x255c <dly_100us>
    11f6:	01 50       	subi	r16, 0x01	; 1
    11f8:	10 40       	sbci	r17, 0x00	; 0
    11fa:	51 f0       	breq	.+20     	; 0x1210 <disk_initialize+0x12a>
    11fc:	8e 2d       	mov	r24, r14
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    120a:	88 23       	and	r24, r24
    120c:	91 f7       	brne	.-28     	; 0x11f2 <disk_initialize+0x10c>
    120e:	22 c0       	rjmp	.+68     	; 0x1254 <disk_initialize+0x16e>
    1210:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1212:	f0 92 66 00 	sts	0x0066, r15
	DESELECT();
    1216:	c3 9a       	sbi	0x18, 3	; 24
	rcv_spi();
    1218:	0e 94 ba 12 	call	0x2574	; 0x2574 <rcv_spi>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	ff 20       	and	r15, r15
    1220:	09 f4       	brne	.+2      	; 0x1224 <disk_initialize+0x13e>
    1222:	81 e0       	ldi	r24, 0x01	; 1

	return ty ? 0 : STA_NOINIT;
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	08 95       	ret
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    123e:	8a e7       	ldi	r24, 0x7A	; 122
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    124c:	88 23       	and	r24, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <disk_initialize+0x16c>
    1250:	aa cf       	rjmp	.-172    	; 0x11a6 <disk_initialize+0xc0>
    1252:	de cf       	rjmp	.-68     	; 0x1210 <disk_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1254:	80 e5       	ldi	r24, 0x50	; 80
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	52 e0       	ldi	r21, 0x02	; 2
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	0e 94 5f 07 	call	0xebe	; 0xebe <send_cmd>
    1262:	88 23       	and	r24, r24
    1264:	a9 f6       	brne	.-86     	; 0x1210 <disk_initialize+0x12a>
    1266:	d5 cf       	rjmp	.-86     	; 0x1212 <disk_initialize+0x12c>

00001268 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
    127a:	c0 91 67 00 	lds	r28, 0x0067
    127e:	d0 91 68 00 	lds	r29, 0x0068


	dj->index = 0;
    1282:	fc 01       	movw	r30, r24
    1284:	11 82       	std	Z+1, r1	; 0x01
    1286:	10 82       	st	Z, r1
	clst = dj->sclust;
    1288:	24 81       	ldd	r18, Z+4	; 0x04
    128a:	35 81       	ldd	r19, Z+5	; 0x05
    128c:	46 81       	ldd	r20, Z+6	; 0x06
    128e:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    1290:	21 30       	cpi	r18, 0x01	; 1
    1292:	31 05       	cpc	r19, r1
    1294:	41 05       	cpc	r20, r1
    1296:	51 05       	cpc	r21, r1
    1298:	09 f4       	brne	.+2      	; 0x129c <dir_rewind+0x34>
    129a:	5b c0       	rjmp	.+182    	; 0x1352 <dir_rewind+0xea>
    129c:	8e 81       	ldd	r24, Y+6	; 0x06
    129e:	9f 81       	ldd	r25, Y+7	; 0x07
    12a0:	a8 85       	ldd	r26, Y+8	; 0x08
    12a2:	b9 85       	ldd	r27, Y+9	; 0x09
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	4a 07       	cpc	r20, r26
    12aa:	5b 07       	cpc	r21, r27
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <dir_rewind+0x48>
    12ae:	51 c0       	rjmp	.+162    	; 0x1352 <dir_rewind+0xea>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    12b0:	21 15       	cp	r18, r1
    12b2:	31 05       	cpc	r19, r1
    12b4:	41 05       	cpc	r20, r1
    12b6:	51 05       	cpc	r21, r1
    12b8:	39 f4       	brne	.+14     	; 0x12c8 <dir_rewind+0x60>
    12ba:	88 81       	ld	r24, Y
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	21 f4       	brne	.+8      	; 0x12c8 <dir_rewind+0x60>
		clst = (CLUST)fs->dirbase;
    12c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    12c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    12c4:	48 89       	ldd	r20, Y+16	; 0x10
    12c6:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
    12c8:	f6 01       	movw	r30, r12
    12ca:	20 87       	std	Z+8, r18	; 0x08
    12cc:	31 87       	std	Z+9, r19	; 0x09
    12ce:	42 87       	std	Z+10, r20	; 0x0a
    12d0:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    12d2:	21 15       	cp	r18, r1
    12d4:	31 05       	cpc	r19, r1
    12d6:	41 05       	cpc	r20, r1
    12d8:	51 05       	cpc	r21, r1
    12da:	81 f1       	breq	.+96     	; 0x133c <dir_rewind+0xd4>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
    12dc:	8e ef       	ldi	r24, 0xFE	; 254
    12de:	e8 2e       	mov	r14, r24
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	f8 2e       	mov	r15, r24
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	08 2f       	mov	r16, r24
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	18 2f       	mov	r17, r24
    12ec:	e2 0e       	add	r14, r18
    12ee:	f3 1e       	adc	r15, r19
    12f0:	04 1f       	adc	r16, r20
    12f2:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	9f 81       	ldd	r25, Y+7	; 0x07
    12f8:	a8 85       	ldd	r26, Y+8	; 0x08
    12fa:	b9 85       	ldd	r27, Y+9	; 0x09
    12fc:	02 97       	sbiw	r24, 0x02	; 2
    12fe:	a1 09       	sbc	r26, r1
    1300:	b1 09       	sbc	r27, r1
    1302:	e8 16       	cp	r14, r24
    1304:	f9 06       	cpc	r15, r25
    1306:	0a 07       	cpc	r16, r26
    1308:	1b 07       	cpc	r17, r27
    130a:	28 f0       	brcs	.+10     	; 0x1316 <dir_rewind+0xae>
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	17 c0       	rjmp	.+46     	; 0x1344 <dir_rewind+0xdc>
	return (DWORD)clst * fs->csize + fs->database;
    1316:	2a 81       	ldd	r18, Y+2	; 0x02
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    1326:	9b 01       	movw	r18, r22
    1328:	ac 01       	movw	r20, r24
    132a:	8a 89       	ldd	r24, Y+18	; 0x12
    132c:	9b 89       	ldd	r25, Y+19	; 0x13
    132e:	ac 89       	ldd	r26, Y+20	; 0x14
    1330:	bd 89       	ldd	r27, Y+21	; 0x15
    1332:	28 0f       	add	r18, r24
    1334:	39 1f       	adc	r19, r25
    1336:	4a 1f       	adc	r20, r26
    1338:	5b 1f       	adc	r21, r27
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <dir_rewind+0xdc>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    133c:	2e 85       	ldd	r18, Y+14	; 0x0e
    133e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1340:	48 89       	ldd	r20, Y+16	; 0x10
    1342:	59 89       	ldd	r21, Y+17	; 0x11
    1344:	f6 01       	movw	r30, r12
    1346:	24 87       	std	Z+12, r18	; 0x0c
    1348:	35 87       	std	Z+13, r19	; 0x0d
    134a:	46 87       	std	Z+14, r20	; 0x0e
    134c:	57 87       	std	Z+15, r21	; 0x0f
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
    1352:	81 e0       	ldi	r24, 0x01	; 1
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	08 95       	ret

00001366 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    1366:	6f 92       	push	r6
    1368:	7f 92       	push	r7
    136a:	8f 92       	push	r8
    136c:	9f 92       	push	r9
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <get_fat+0x1e>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <get_fat+0x20>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	4b 01       	movw	r8, r22
    138c:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
    138e:	60 90 67 00 	lds	r6, 0x0067
    1392:	70 90 68 00 	lds	r7, 0x0068


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	88 16       	cp	r8, r24
    139a:	91 04       	cpc	r9, r1
    139c:	a1 04       	cpc	r10, r1
    139e:	b1 04       	cpc	r11, r1
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <get_fat+0x3e>
    13a2:	b4 c0       	rjmp	.+360    	; 0x150c <get_fat+0x1a6>
    13a4:	f3 01       	movw	r30, r6
    13a6:	86 81       	ldd	r24, Z+6	; 0x06
    13a8:	97 81       	ldd	r25, Z+7	; 0x07
    13aa:	a0 85       	ldd	r26, Z+8	; 0x08
    13ac:	b1 85       	ldd	r27, Z+9	; 0x09
    13ae:	88 16       	cp	r8, r24
    13b0:	99 06       	cpc	r9, r25
    13b2:	aa 06       	cpc	r10, r26
    13b4:	bb 06       	cpc	r11, r27
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <get_fat+0x54>
    13b8:	a9 c0       	rjmp	.+338    	; 0x150c <get_fat+0x1a6>
		return 1;

	switch (fs->fs_type) {
    13ba:	80 81       	ld	r24, Z
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	09 f4       	brne	.+2      	; 0x13c2 <get_fat+0x5c>
    13c0:	5f c0       	rjmp	.+190    	; 0x1480 <get_fat+0x11a>
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <get_fat+0x62>
    13c6:	7b c0       	rjmp	.+246    	; 0x14be <get_fat+0x158>
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <get_fat+0x68>
    13cc:	9f c0       	rjmp	.+318    	; 0x150c <get_fat+0x1a6>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
    13ce:	c4 01       	movw	r24, r8
    13d0:	96 95       	lsr	r25
    13d2:	87 95       	ror	r24
    13d4:	88 0d       	add	r24, r8
    13d6:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
    13d8:	9c 01       	movw	r18, r24
    13da:	31 70       	andi	r19, 0x01	; 1
    13dc:	89 2f       	mov	r24, r25
    13de:	99 27       	eor	r25, r25
    13e0:	86 95       	lsr	r24
    13e2:	6c 01       	movw	r12, r24
    13e4:	ee 24       	eor	r14, r14
    13e6:	ff 24       	eor	r15, r15
    13e8:	f3 01       	movw	r30, r6
    13ea:	42 85       	ldd	r20, Z+10	; 0x0a
    13ec:	53 85       	ldd	r21, Z+11	; 0x0b
    13ee:	64 85       	ldd	r22, Z+12	; 0x0c
    13f0:	75 85       	ldd	r23, Z+13	; 0x0d
    13f2:	ce 01       	movw	r24, r28
    13f4:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	2f 3f       	cpi	r18, 0xFF	; 255
    13fa:	3f 07       	cpc	r19, r31
    13fc:	49 f0       	breq	.+18     	; 0x1410 <get_fat+0xaa>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
    13fe:	c4 0e       	add	r12, r20
    1400:	d5 1e       	adc	r13, r21
    1402:	e6 1e       	adc	r14, r22
    1404:	f7 1e       	adc	r15, r23
    1406:	b7 01       	movw	r22, r14
    1408:	a6 01       	movw	r20, r12
    140a:	02 e0       	ldi	r16, 0x02	; 2
    140c:	10 e0       	ldi	r17, 0x00	; 0
    140e:	1e c0       	rjmp	.+60     	; 0x144c <get_fat+0xe6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
    1410:	4c 0d       	add	r20, r12
    1412:	5d 1d       	adc	r21, r13
    1414:	6e 1d       	adc	r22, r14
    1416:	7f 1d       	adc	r23, r15
    1418:	2f ef       	ldi	r18, 0xFF	; 255
    141a:	31 e0       	ldi	r19, 0x01	; 1
    141c:	01 e0       	ldi	r16, 0x01	; 1
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    1424:	88 23       	and	r24, r24
    1426:	09 f0       	breq	.+2      	; 0x142a <get_fat+0xc4>
    1428:	71 c0       	rjmp	.+226    	; 0x150c <get_fat+0x1a6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
    142a:	f3 01       	movw	r30, r6
    142c:	42 85       	ldd	r20, Z+10	; 0x0a
    142e:	53 85       	ldd	r21, Z+11	; 0x0b
    1430:	64 85       	ldd	r22, Z+12	; 0x0c
    1432:	75 85       	ldd	r23, Z+13	; 0x0d
    1434:	4f 5f       	subi	r20, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	6f 4f       	sbci	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	4c 0d       	add	r20, r12
    143e:	5d 1d       	adc	r21, r13
    1440:	6e 1d       	adc	r22, r14
    1442:	7f 1d       	adc	r23, r15
    1444:	ce 01       	movw	r24, r28
    1446:	02 96       	adiw	r24, 0x02	; 2
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    1450:	88 23       	and	r24, r24
    1452:	09 f0       	breq	.+2      	; 0x1456 <get_fat+0xf0>
    1454:	5b c0       	rjmp	.+182    	; 0x150c <get_fat+0x1a6>
		}
		wc = LD_WORD(buf);
    1456:	69 81       	ldd	r22, Y+1	; 0x01
    1458:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    145a:	c4 01       	movw	r24, r8
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	89 2b       	or	r24, r25
    1462:	39 f0       	breq	.+14     	; 0x1472 <get_fat+0x10c>
    1464:	a4 e0       	ldi	r26, 0x04	; 4
    1466:	76 95       	lsr	r23
    1468:	67 95       	ror	r22
    146a:	aa 95       	dec	r26
    146c:	e1 f7       	brne	.-8      	; 0x1466 <get_fat+0x100>
    146e:	9b 01       	movw	r18, r22
    1470:	23 c0       	rjmp	.+70     	; 0x14b8 <get_fat+0x152>
    1472:	9b 01       	movw	r18, r22
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	3f 70       	andi	r19, 0x0F	; 15
    147a:	40 70       	andi	r20, 0x00	; 0
    147c:	50 70       	andi	r21, 0x00	; 0
    147e:	4a c0       	rjmp	.+148    	; 0x1514 <get_fat+0x1ae>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
    1480:	77 27       	eor	r23, r23
    1482:	6b 2d       	mov	r22, r11
    1484:	5a 2d       	mov	r21, r10
    1486:	49 2d       	mov	r20, r9
    1488:	f3 01       	movw	r30, r6
    148a:	82 85       	ldd	r24, Z+10	; 0x0a
    148c:	93 85       	ldd	r25, Z+11	; 0x0b
    148e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1490:	b5 85       	ldd	r27, Z+13	; 0x0d
    1492:	48 0f       	add	r20, r24
    1494:	59 1f       	adc	r21, r25
    1496:	6a 1f       	adc	r22, r26
    1498:	7b 1f       	adc	r23, r27
    149a:	94 01       	movw	r18, r8
    149c:	30 70       	andi	r19, 0x00	; 0
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	ce 01       	movw	r24, r28
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	02 e0       	ldi	r16, 0x02	; 2
    14a8:	10 e0       	ldi	r17, 0x00	; 0
    14aa:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    14ae:	88 23       	and	r24, r24
    14b0:	69 f5       	brne	.+90     	; 0x150c <get_fat+0x1a6>
		return LD_WORD(buf);
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	9c 01       	movw	r18, r24
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	2b c0       	rjmp	.+86     	; 0x1514 <get_fat+0x1ae>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
    14be:	b5 01       	movw	r22, r10
    14c0:	a4 01       	movw	r20, r8
    14c2:	27 e0       	ldi	r18, 0x07	; 7
    14c4:	76 95       	lsr	r23
    14c6:	67 95       	ror	r22
    14c8:	57 95       	ror	r21
    14ca:	47 95       	ror	r20
    14cc:	2a 95       	dec	r18
    14ce:	d1 f7       	brne	.-12     	; 0x14c4 <get_fat+0x15e>
    14d0:	f3 01       	movw	r30, r6
    14d2:	82 85       	ldd	r24, Z+10	; 0x0a
    14d4:	93 85       	ldd	r25, Z+11	; 0x0b
    14d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    14d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    14da:	48 0f       	add	r20, r24
    14dc:	59 1f       	adc	r21, r25
    14de:	6a 1f       	adc	r22, r26
    14e0:	7b 1f       	adc	r23, r27
    14e2:	94 01       	movw	r18, r8
    14e4:	2f 77       	andi	r18, 0x7F	; 127
    14e6:	30 70       	andi	r19, 0x00	; 0
    14e8:	22 0f       	add	r18, r18
    14ea:	33 1f       	adc	r19, r19
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	04 e0       	ldi	r16, 0x04	; 4
    14f6:	10 e0       	ldi	r17, 0x00	; 0
    14f8:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    14fc:	88 23       	and	r24, r24
    14fe:	31 f4       	brne	.+12     	; 0x150c <get_fat+0x1a6>
		return LD_DWORD(buf) & 0x0FFFFFFF;
    1500:	29 81       	ldd	r18, Y+1	; 0x01
    1502:	3a 81       	ldd	r19, Y+2	; 0x02
    1504:	4b 81       	ldd	r20, Y+3	; 0x03
    1506:	5c 81       	ldd	r21, Y+4	; 0x04
    1508:	5f 70       	andi	r21, 0x0F	; 15
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <get_fat+0x1ae>
    150c:	21 e0       	ldi	r18, 0x01	; 1
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    1514:	b9 01       	movw	r22, r18
    1516:	ca 01       	movw	r24, r20
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	af 90       	pop	r10
    1534:	9f 90       	pop	r9
    1536:	8f 90       	pop	r8
    1538:	7f 90       	pop	r7
    153a:	6f 90       	pop	r6
    153c:	08 95       	ret

0000153e <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    153e:	af 92       	push	r10
    1540:	bf 92       	push	r11
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    1554:	c0 91 67 00 	lds	r28, 0x0067
    1558:	d0 91 68 00 	lds	r29, 0x0068


	i = dj->index + 1;
    155c:	fc 01       	movw	r30, r24
    155e:	c0 80       	ld	r12, Z
    1560:	d1 80       	ldd	r13, Z+1	; 0x01
    1562:	08 94       	sec
    1564:	c1 1c       	adc	r12, r1
    1566:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1568:	c1 14       	cp	r12, r1
    156a:	d1 04       	cpc	r13, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <dir_next+0x32>
    156e:	8f c0       	rjmp	.+286    	; 0x168e <dir_next+0x150>
    1570:	24 85       	ldd	r18, Z+12	; 0x0c
    1572:	35 85       	ldd	r19, Z+13	; 0x0d
    1574:	46 85       	ldd	r20, Z+14	; 0x0e
    1576:	57 85       	ldd	r21, Z+15	; 0x0f
    1578:	21 15       	cp	r18, r1
    157a:	31 05       	cpc	r19, r1
    157c:	41 05       	cpc	r20, r1
    157e:	51 05       	cpc	r21, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <dir_next+0x46>
    1582:	85 c0       	rjmp	.+266    	; 0x168e <dir_next+0x150>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    1584:	c6 01       	movw	r24, r12
    1586:	8f 70       	andi	r24, 0x0F	; 15
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	89 2b       	or	r24, r25
    158c:	09 f0       	breq	.+2      	; 0x1590 <dir_next+0x52>
    158e:	7a c0       	rjmp	.+244    	; 0x1684 <dir_next+0x146>
		dj->sect++;			/* Next sector */
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	4f 4f       	sbci	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	24 87       	std	Z+12, r18	; 0x0c
    159a:	35 87       	std	Z+13, r19	; 0x0d
    159c:	46 87       	std	Z+14, r20	; 0x0e
    159e:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    15a0:	40 85       	ldd	r20, Z+8	; 0x08
    15a2:	51 85       	ldd	r21, Z+9	; 0x09
    15a4:	62 85       	ldd	r22, Z+10	; 0x0a
    15a6:	73 85       	ldd	r23, Z+11	; 0x0b
    15a8:	41 15       	cp	r20, r1
    15aa:	51 05       	cpc	r21, r1
    15ac:	61 05       	cpc	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	39 f4       	brne	.+14     	; 0x15c0 <dir_next+0x82>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	c8 16       	cp	r12, r24
    15b8:	d9 06       	cpc	r13, r25
    15ba:	08 f4       	brcc	.+2      	; 0x15be <dir_next+0x80>
    15bc:	63 c0       	rjmp	.+198    	; 0x1684 <dir_next+0x146>
    15be:	67 c0       	rjmp	.+206    	; 0x168e <dir_next+0x150>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	96 01       	movw	r18, r12
    15c8:	e4 e0       	ldi	r30, 0x04	; 4
    15ca:	36 95       	lsr	r19
    15cc:	27 95       	ror	r18
    15ce:	ea 95       	dec	r30
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <dir_next+0x8c>
    15d2:	82 23       	and	r24, r18
    15d4:	93 23       	and	r25, r19
    15d6:	89 2b       	or	r24, r25
    15d8:	09 f0       	breq	.+2      	; 0x15dc <dir_next+0x9e>
    15da:	54 c0       	rjmp	.+168    	; 0x1684 <dir_next+0x146>
				clst = get_fat(dj->clust);		/* Get next cluster */
    15dc:	cb 01       	movw	r24, r22
    15de:	ba 01       	movw	r22, r20
    15e0:	0e 94 b3 09 	call	0x1366	; 0x1366 <get_fat>
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
    15e8:	62 30       	cpi	r22, 0x02	; 2
    15ea:	71 05       	cpc	r23, r1
    15ec:	81 05       	cpc	r24, r1
    15ee:	91 05       	cpc	r25, r1
    15f0:	10 f4       	brcc	.+4      	; 0x15f6 <dir_next+0xb8>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	4d c0       	rjmp	.+154    	; 0x1690 <dir_next+0x152>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    15f6:	8e 81       	ldd	r24, Y+6	; 0x06
    15f8:	9f 81       	ldd	r25, Y+7	; 0x07
    15fa:	a8 85       	ldd	r26, Y+8	; 0x08
    15fc:	b9 85       	ldd	r27, Y+9	; 0x09
    15fe:	28 17       	cp	r18, r24
    1600:	39 07       	cpc	r19, r25
    1602:	4a 07       	cpc	r20, r26
    1604:	5b 07       	cpc	r21, r27
    1606:	08 f0       	brcs	.+2      	; 0x160a <dir_next+0xcc>
    1608:	42 c0       	rjmp	.+132    	; 0x168e <dir_next+0x150>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    160a:	f5 01       	movw	r30, r10
    160c:	20 87       	std	Z+8, r18	; 0x08
    160e:	31 87       	std	Z+9, r19	; 0x09
    1610:	42 87       	std	Z+10, r20	; 0x0a
    1612:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1614:	c0 91 67 00 	lds	r28, 0x0067
    1618:	d0 91 68 00 	lds	r29, 0x0068


	clst -= 2;
    161c:	8e ef       	ldi	r24, 0xFE	; 254
    161e:	e8 2e       	mov	r14, r24
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	f8 2e       	mov	r15, r24
    1624:	8f ef       	ldi	r24, 0xFF	; 255
    1626:	08 2f       	mov	r16, r24
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	18 2f       	mov	r17, r24
    162c:	e2 0e       	add	r14, r18
    162e:	f3 1e       	adc	r15, r19
    1630:	04 1f       	adc	r16, r20
    1632:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1634:	8e 81       	ldd	r24, Y+6	; 0x06
    1636:	9f 81       	ldd	r25, Y+7	; 0x07
    1638:	a8 85       	ldd	r26, Y+8	; 0x08
    163a:	b9 85       	ldd	r27, Y+9	; 0x09
    163c:	02 97       	sbiw	r24, 0x02	; 2
    163e:	a1 09       	sbc	r26, r1
    1640:	b1 09       	sbc	r27, r1
    1642:	e8 16       	cp	r14, r24
    1644:	f9 06       	cpc	r15, r25
    1646:	0a 07       	cpc	r16, r26
    1648:	1b 07       	cpc	r17, r27
    164a:	28 f0       	brcs	.+10     	; 0x1656 <dir_next+0x118>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	12 c0       	rjmp	.+36     	; 0x167a <dir_next+0x13c>
	return (DWORD)clst * fs->csize + fs->database;
    1656:	2a 81       	ldd	r18, Y+2	; 0x02
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	c8 01       	movw	r24, r16
    1660:	b7 01       	movw	r22, r14
    1662:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	8a 89       	ldd	r24, Y+18	; 0x12
    166c:	9b 89       	ldd	r25, Y+19	; 0x13
    166e:	ac 89       	ldd	r26, Y+20	; 0x14
    1670:	bd 89       	ldd	r27, Y+21	; 0x15
    1672:	28 0f       	add	r18, r24
    1674:	39 1f       	adc	r19, r25
    1676:	4a 1f       	adc	r20, r26
    1678:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
    167a:	f5 01       	movw	r30, r10
    167c:	24 87       	std	Z+12, r18	; 0x0c
    167e:	35 87       	std	Z+13, r19	; 0x0d
    1680:	46 87       	std	Z+14, r20	; 0x0e
    1682:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
    1684:	f5 01       	movw	r30, r10
    1686:	d1 82       	std	Z+1, r13	; 0x01
    1688:	c0 82       	st	Z, r12
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <dir_next+0x152>

	return FR_OK;
    168e:	83 e0       	ldi	r24, 0x03	; 3
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	cf 90       	pop	r12
    16a0:	bf 90       	pop	r11
    16a2:	af 90       	pop	r10
    16a4:	08 95       	ret

000016a6 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    16a6:	2f 92       	push	r2
    16a8:	3f 92       	push	r3
    16aa:	4f 92       	push	r4
    16ac:	5f 92       	push	r5
    16ae:	6f 92       	push	r6
    16b0:	7f 92       	push	r7
    16b2:	8f 92       	push	r8
    16b4:	9f 92       	push	r9
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    16cc:	c0 91 67 00 	lds	r28, 0x0067
    16d0:	d0 91 68 00 	lds	r29, 0x0068


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    16d4:	20 97       	sbiw	r28, 0x00	; 0
    16d6:	11 f4       	brne	.+4      	; 0x16dc <pf_lseek+0x36>
    16d8:	86 e0       	ldi	r24, 0x06	; 6
    16da:	02 c1       	rjmp	.+516    	; 0x18e0 <pf_lseek+0x23a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	80 fd       	sbrc	r24, 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <pf_lseek+0x40>
    16e2:	85 e0       	ldi	r24, 0x05	; 5
    16e4:	fd c0       	rjmp	.+506    	; 0x18e0 <pf_lseek+0x23a>
    16e6:	ea 8c       	ldd	r14, Y+26	; 0x1a
    16e8:	fb 8c       	ldd	r15, Y+27	; 0x1b
    16ea:	0c 8d       	ldd	r16, Y+28	; 0x1c
    16ec:	1d 8d       	ldd	r17, Y+29	; 0x1d
    16ee:	4e 2f       	mov	r20, r30
    16f0:	59 2f       	mov	r21, r25
    16f2:	cb 01       	movw	r24, r22
    16f4:	da 01       	movw	r26, r20
    16f6:	3c 01       	movw	r6, r24
    16f8:	4d 01       	movw	r8, r26
    16fa:	e6 14       	cp	r14, r6
    16fc:	f7 04       	cpc	r15, r7
    16fe:	08 05       	cpc	r16, r8
    1700:	19 05       	cpc	r17, r9
    1702:	10 f4       	brcc	.+4      	; 0x1708 <pf_lseek+0x62>
    1704:	37 01       	movw	r6, r14
    1706:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
    1708:	ee 88       	ldd	r14, Y+22	; 0x16
    170a:	ff 88       	ldd	r15, Y+23	; 0x17
    170c:	08 8d       	ldd	r16, Y+24	; 0x18
    170e:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
    1710:	1e 8a       	std	Y+22, r1	; 0x16
    1712:	1f 8a       	std	Y+23, r1	; 0x17
    1714:	18 8e       	std	Y+24, r1	; 0x18
    1716:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
    1718:	61 14       	cp	r6, r1
    171a:	71 04       	cpc	r7, r1
    171c:	81 04       	cpc	r8, r1
    171e:	91 04       	cpc	r9, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <pf_lseek+0x7e>
    1722:	da c0       	rjmp	.+436    	; 0x18d8 <pf_lseek+0x232>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	a8 2e       	mov	r10, r24
    1728:	bb 24       	eor	r11, r11
    172a:	cc 24       	eor	r12, r12
    172c:	dd 24       	eor	r13, r13
    172e:	b9 e0       	ldi	r27, 0x09	; 9
    1730:	aa 0c       	add	r10, r10
    1732:	bb 1c       	adc	r11, r11
    1734:	cc 1c       	adc	r12, r12
    1736:	dd 1c       	adc	r13, r13
    1738:	ba 95       	dec	r27
    173a:	d1 f7       	brne	.-12     	; 0x1730 <pf_lseek+0x8a>
		if (ifptr > 0 &&
    173c:	e1 14       	cp	r14, r1
    173e:	f1 04       	cpc	r15, r1
    1740:	01 05       	cpc	r16, r1
    1742:	11 05       	cpc	r17, r1
    1744:	b1 f1       	breq	.+108    	; 0x17b2 <pf_lseek+0x10c>
    1746:	17 01       	movw	r2, r14
    1748:	28 01       	movw	r4, r16
    174a:	08 94       	sec
    174c:	21 08       	sbc	r2, r1
    174e:	31 08       	sbc	r3, r1
    1750:	41 08       	sbc	r4, r1
    1752:	51 08       	sbc	r5, r1
    1754:	c4 01       	movw	r24, r8
    1756:	b3 01       	movw	r22, r6
    1758:	61 50       	subi	r22, 0x01	; 1
    175a:	70 40       	sbci	r23, 0x00	; 0
    175c:	80 40       	sbci	r24, 0x00	; 0
    175e:	90 40       	sbci	r25, 0x00	; 0
    1760:	a6 01       	movw	r20, r12
    1762:	95 01       	movw	r18, r10
    1764:	0e 94 26 13 	call	0x264c	; 0x264c <__udivmodsi4>
    1768:	79 01       	movw	r14, r18
    176a:	8a 01       	movw	r16, r20
    176c:	c2 01       	movw	r24, r4
    176e:	b1 01       	movw	r22, r2
    1770:	a6 01       	movw	r20, r12
    1772:	95 01       	movw	r18, r10
    1774:	0e 94 26 13 	call	0x264c	; 0x264c <__udivmodsi4>
    1778:	e2 16       	cp	r14, r18
    177a:	f3 06       	cpc	r15, r19
    177c:	04 07       	cpc	r16, r20
    177e:	15 07       	cpc	r17, r21
    1780:	c0 f0       	brcs	.+48     	; 0x17b2 <pf_lseek+0x10c>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    1782:	88 27       	eor	r24, r24
    1784:	99 27       	eor	r25, r25
    1786:	dc 01       	movw	r26, r24
    1788:	8a 19       	sub	r24, r10
    178a:	9b 09       	sbc	r25, r11
    178c:	ac 09       	sbc	r26, r12
    178e:	bd 09       	sbc	r27, r13
    1790:	82 21       	and	r24, r2
    1792:	93 21       	and	r25, r3
    1794:	a4 21       	and	r26, r4
    1796:	b5 21       	and	r27, r5
    1798:	8e 8b       	std	Y+22, r24	; 0x16
    179a:	9f 8b       	std	Y+23, r25	; 0x17
    179c:	a8 8f       	std	Y+24, r26	; 0x18
    179e:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
    17a0:	68 1a       	sub	r6, r24
    17a2:	79 0a       	sbc	r7, r25
    17a4:	8a 0a       	sbc	r8, r26
    17a6:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
    17a8:	2a a1       	ldd	r18, Y+34	; 0x22
    17aa:	3b a1       	ldd	r19, Y+35	; 0x23
    17ac:	4c a1       	ldd	r20, Y+36	; 0x24
    17ae:	5d a1       	ldd	r21, Y+37	; 0x25
    17b0:	33 c0       	rjmp	.+102    	; 0x1818 <pf_lseek+0x172>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    17b2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    17b4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    17b6:	48 a1       	ldd	r20, Y+32	; 0x20
    17b8:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
    17ba:	2a a3       	std	Y+34, r18	; 0x22
    17bc:	3b a3       	std	Y+35, r19	; 0x23
    17be:	4c a3       	std	Y+36, r20	; 0x24
    17c0:	5d a3       	std	Y+37, r21	; 0x25
    17c2:	2a c0       	rjmp	.+84     	; 0x1818 <pf_lseek+0x172>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
    17c4:	ca 01       	movw	r24, r20
    17c6:	b9 01       	movw	r22, r18
    17c8:	0e 94 b3 09 	call	0x1366	; 0x1366 <get_fat>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    17d0:	62 30       	cpi	r22, 0x02	; 2
    17d2:	71 05       	cpc	r23, r1
    17d4:	81 05       	cpc	r24, r1
    17d6:	91 05       	cpc	r25, r1
    17d8:	08 f4       	brcc	.+2      	; 0x17dc <pf_lseek+0x136>
    17da:	80 c0       	rjmp	.+256    	; 0x18dc <pf_lseek+0x236>
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	9f 81       	ldd	r25, Y+7	; 0x07
    17e0:	a8 85       	ldd	r26, Y+8	; 0x08
    17e2:	b9 85       	ldd	r27, Y+9	; 0x09
    17e4:	28 17       	cp	r18, r24
    17e6:	39 07       	cpc	r19, r25
    17e8:	4a 07       	cpc	r20, r26
    17ea:	5b 07       	cpc	r21, r27
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <pf_lseek+0x14a>
    17ee:	76 c0       	rjmp	.+236    	; 0x18dc <pf_lseek+0x236>
			fs->curr_clust = clst;
    17f0:	2a a3       	std	Y+34, r18	; 0x22
    17f2:	3b a3       	std	Y+35, r19	; 0x23
    17f4:	4c a3       	std	Y+36, r20	; 0x24
    17f6:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
    17f8:	8e 89       	ldd	r24, Y+22	; 0x16
    17fa:	9f 89       	ldd	r25, Y+23	; 0x17
    17fc:	a8 8d       	ldd	r26, Y+24	; 0x18
    17fe:	b9 8d       	ldd	r27, Y+25	; 0x19
    1800:	8a 0d       	add	r24, r10
    1802:	9b 1d       	adc	r25, r11
    1804:	ac 1d       	adc	r26, r12
    1806:	bd 1d       	adc	r27, r13
    1808:	8e 8b       	std	Y+22, r24	; 0x16
    180a:	9f 8b       	std	Y+23, r25	; 0x17
    180c:	a8 8f       	std	Y+24, r26	; 0x18
    180e:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
    1810:	6a 18       	sub	r6, r10
    1812:	7b 08       	sbc	r7, r11
    1814:	8c 08       	sbc	r8, r12
    1816:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1818:	a6 14       	cp	r10, r6
    181a:	b7 04       	cpc	r11, r7
    181c:	c8 04       	cpc	r12, r8
    181e:	d9 04       	cpc	r13, r9
    1820:	88 f2       	brcs	.-94     	; 0x17c4 <pf_lseek+0x11e>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    1822:	ee 88       	ldd	r14, Y+22	; 0x16
    1824:	ff 88       	ldd	r15, Y+23	; 0x17
    1826:	08 8d       	ldd	r16, Y+24	; 0x18
    1828:	19 8d       	ldd	r17, Y+25	; 0x19
    182a:	e6 0c       	add	r14, r6
    182c:	f7 1c       	adc	r15, r7
    182e:	08 1d       	adc	r16, r8
    1830:	19 1d       	adc	r17, r9
    1832:	ee 8a       	std	Y+22, r14	; 0x16
    1834:	ff 8a       	std	Y+23, r15	; 0x17
    1836:	08 8f       	std	Y+24, r16	; 0x18
    1838:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    183a:	80 90 67 00 	lds	r8, 0x0067
    183e:	90 90 68 00 	lds	r9, 0x0068


	clst -= 2;
    1842:	ae ef       	ldi	r26, 0xFE	; 254
    1844:	aa 2e       	mov	r10, r26
    1846:	af ef       	ldi	r26, 0xFF	; 255
    1848:	ba 2e       	mov	r11, r26
    184a:	af ef       	ldi	r26, 0xFF	; 255
    184c:	ca 2e       	mov	r12, r26
    184e:	af ef       	ldi	r26, 0xFF	; 255
    1850:	da 2e       	mov	r13, r26
    1852:	a2 0e       	add	r10, r18
    1854:	b3 1e       	adc	r11, r19
    1856:	c4 1e       	adc	r12, r20
    1858:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    185a:	f4 01       	movw	r30, r8
    185c:	86 81       	ldd	r24, Z+6	; 0x06
    185e:	97 81       	ldd	r25, Z+7	; 0x07
    1860:	a0 85       	ldd	r26, Z+8	; 0x08
    1862:	b1 85       	ldd	r27, Z+9	; 0x09
    1864:	02 97       	sbiw	r24, 0x02	; 2
    1866:	a1 09       	sbc	r26, r1
    1868:	b1 09       	sbc	r27, r1
    186a:	a8 16       	cp	r10, r24
    186c:	b9 06       	cpc	r11, r25
    186e:	ca 06       	cpc	r12, r26
    1870:	db 06       	cpc	r13, r27
    1872:	a0 f5       	brcc	.+104    	; 0x18dc <pf_lseek+0x236>
	return (DWORD)clst * fs->csize + fs->database;
    1874:	22 81       	ldd	r18, Z+2	; 0x02
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	c6 01       	movw	r24, r12
    187e:	b5 01       	movw	r22, r10
    1880:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    1884:	9b 01       	movw	r18, r22
    1886:	ac 01       	movw	r20, r24
    1888:	f4 01       	movw	r30, r8
    188a:	82 89       	ldd	r24, Z+18	; 0x12
    188c:	93 89       	ldd	r25, Z+19	; 0x13
    188e:	a4 89       	ldd	r26, Z+20	; 0x14
    1890:	b5 89       	ldd	r27, Z+21	; 0x15
    1892:	28 0f       	add	r18, r24
    1894:	39 1f       	adc	r19, r25
    1896:	4a 1f       	adc	r20, r26
    1898:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
    189a:	21 15       	cp	r18, r1
    189c:	31 05       	cpc	r19, r1
    189e:	41 05       	cpc	r20, r1
    18a0:	51 05       	cpc	r21, r1
    18a2:	e1 f0       	breq	.+56     	; 0x18dc <pf_lseek+0x236>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    18a4:	f9 e0       	ldi	r31, 0x09	; 9
    18a6:	16 95       	lsr	r17
    18a8:	07 95       	ror	r16
    18aa:	f7 94       	ror	r15
    18ac:	e7 94       	ror	r14
    18ae:	fa 95       	dec	r31
    18b0:	d1 f7       	brne	.-12     	; 0x18a6 <pf_lseek+0x200>
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	aa 27       	eor	r26, r26
    18ba:	97 fd       	sbrc	r25, 7
    18bc:	a0 95       	com	r26
    18be:	ba 2f       	mov	r27, r26
    18c0:	e8 22       	and	r14, r24
    18c2:	f9 22       	and	r15, r25
    18c4:	0a 23       	and	r16, r26
    18c6:	1b 23       	and	r17, r27
    18c8:	2e 0d       	add	r18, r14
    18ca:	3f 1d       	adc	r19, r15
    18cc:	40 1f       	adc	r20, r16
    18ce:	51 1f       	adc	r21, r17
    18d0:	2e a3       	std	Y+38, r18	; 0x26
    18d2:	3f a3       	std	Y+39, r19	; 0x27
    18d4:	48 a7       	std	Y+40, r20	; 0x28
    18d6:	59 a7       	std	Y+41, r21	; 0x29
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <pf_lseek+0x23a>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	7f 90       	pop	r7
    18fa:	6f 90       	pop	r6
    18fc:	5f 90       	pop	r5
    18fe:	4f 90       	pop	r4
    1900:	3f 90       	pop	r3
    1902:	2f 90       	pop	r2
    1904:	08 95       	ret

00001906 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	ac 97       	sbiw	r28, 0x2c	; 44
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	7c 01       	movw	r14, r24
    192c:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    192e:	80 91 67 00 	lds	r24, 0x0067
    1932:	90 91 68 00 	lds	r25, 0x0068
    1936:	89 2b       	or	r24, r25
    1938:	11 f4       	brne	.+4      	; 0x193e <pf_readdir+0x38>
    193a:	86 e0       	ldi	r24, 0x06	; 6
    193c:	b0 c0       	rjmp	.+352    	; 0x1a9e <pf_readdir+0x198>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    193e:	ce 01       	movw	r24, r28
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	d7 01       	movw	r26, r14
    1944:	13 96       	adiw	r26, 0x03	; 3
    1946:	9c 93       	st	X, r25
    1948:	8e 93       	st	-X, r24
    194a:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
    194c:	61 15       	cp	r22, r1
    194e:	71 05       	cpc	r23, r1
    1950:	39 f0       	breq	.+14     	; 0x1960 <pf_readdir+0x5a>
    1952:	83 e0       	ldi	r24, 0x03	; 3
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1954:	0d e0       	ldi	r16, 0x0D	; 13
    1956:	a0 2e       	mov	r10, r16
    1958:	b1 2c       	mov	r11, r1
    195a:	ac 0e       	add	r10, r28
    195c:	bd 1e       	adc	r11, r29
    195e:	28 c0       	rjmp	.+80     	; 0x19b0 <pf_readdir+0xaa>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
    1960:	c7 01       	movw	r24, r14
    1962:	0e 94 34 09 	call	0x1268	; 0x1268 <dir_rewind>
    1966:	9b c0       	rjmp	.+310    	; 0x1a9e <pf_readdir+0x198>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1968:	f7 01       	movw	r30, r14
    196a:	20 81       	ld	r18, Z
    196c:	31 81       	ldd	r19, Z+1	; 0x01
    196e:	2f 70       	andi	r18, 0x0F	; 15
    1970:	30 70       	andi	r19, 0x00	; 0
    1972:	15 e0       	ldi	r17, 0x05	; 5
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	1a 95       	dec	r17
    197a:	e1 f7       	brne	.-8      	; 0x1974 <pf_readdir+0x6e>
    197c:	c5 01       	movw	r24, r10
    197e:	00 e2       	ldi	r16, 0x20	; 32
    1980:	10 e0       	ldi	r17, 0x00	; 0
    1982:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1986:	88 23       	and	r24, r24
    1988:	11 f0       	breq	.+4      	; 0x198e <pf_readdir+0x88>
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	1f c0       	rjmp	.+62     	; 0x19cc <pf_readdir+0xc6>
		c = dir[DIR_Name];
    198e:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1990:	99 23       	and	r25, r25
    1992:	09 f4       	brne	.+2      	; 0x1996 <pf_readdir+0x90>
    1994:	95 c0       	rjmp	.+298    	; 0x1ac0 <pf_readdir+0x1ba>
		a = dir[DIR_Attr] & AM_MASK;
    1996:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    1998:	95 3e       	cpi	r25, 0xE5	; 229
    199a:	29 f0       	breq	.+10     	; 0x19a6 <pf_readdir+0xa0>
    199c:	9e 32       	cpi	r25, 0x2E	; 46
    199e:	19 f0       	breq	.+6      	; 0x19a6 <pf_readdir+0xa0>
    19a0:	8f 73       	andi	r24, 0x3F	; 63
    19a2:	83 ff       	sbrs	r24, 3
    19a4:	1d c0       	rjmp	.+58     	; 0x19e0 <pf_readdir+0xda>
			break;
		res = dir_next(dj);			/* Next entry */
    19a6:	c7 01       	movw	r24, r14
    19a8:	0e 94 9f 0a 	call	0x153e	; 0x153e <dir_next>
		if (res != FR_OK) break;
    19ac:	88 23       	and	r24, r24
    19ae:	71 f4       	brne	.+28     	; 0x19cc <pf_readdir+0xc6>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    19b0:	d7 01       	movw	r26, r14
    19b2:	1c 96       	adiw	r26, 0x0c	; 12
    19b4:	4d 91       	ld	r20, X+
    19b6:	5d 91       	ld	r21, X+
    19b8:	6d 91       	ld	r22, X+
    19ba:	7c 91       	ld	r23, X
    19bc:	1f 97       	sbiw	r26, 0x0f	; 15
    19be:	41 15       	cp	r20, r1
    19c0:	51 05       	cpc	r21, r1
    19c2:	61 05       	cpc	r22, r1
    19c4:	71 05       	cpc	r23, r1
    19c6:	81 f6       	brne	.-96     	; 0x1968 <pf_readdir+0x62>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    19c8:	88 23       	and	r24, r24
    19ca:	51 f0       	breq	.+20     	; 0x19e0 <pf_readdir+0xda>
    19cc:	f7 01       	movw	r30, r14
    19ce:	14 86       	std	Z+12, r1	; 0x0c
    19d0:	15 86       	std	Z+13, r1	; 0x0d
    19d2:	16 86       	std	Z+14, r1	; 0x0e
    19d4:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    19d6:	83 30       	cpi	r24, 0x03	; 3
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <pf_readdir+0xda>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    19da:	88 23       	and	r24, r24
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <pf_readdir+0xda>
    19de:	5f c0       	rjmp	.+190    	; 0x1a9e <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    19e0:	96 01       	movw	r18, r12
    19e2:	27 5f       	subi	r18, 0xF7	; 247
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    19e6:	f7 01       	movw	r30, r14
    19e8:	84 85       	ldd	r24, Z+12	; 0x0c
    19ea:	95 85       	ldd	r25, Z+13	; 0x0d
    19ec:	a6 85       	ldd	r26, Z+14	; 0x0e
    19ee:	b7 85       	ldd	r27, Z+15	; 0x0f
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	a1 05       	cpc	r26, r1
    19f4:	b1 05       	cpc	r27, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <pf_readdir+0xf4>
    19f8:	43 c0       	rjmp	.+134    	; 0x1a80 <pf_readdir+0x17a>
    19fa:	fe 01       	movw	r30, r28
    19fc:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    19fe:	ae 01       	movw	r20, r28
    1a00:	4b 5e       	subi	r20, 0xEB	; 235
    1a02:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
    1a04:	80 81       	ld	r24, Z
			if (c == ' ') break;
    1a06:	80 32       	cpi	r24, 0x20	; 32
    1a08:	51 f0       	breq	.+20     	; 0x1a1e <pf_readdir+0x118>
			if (c == 0x05) c = 0xE5;
    1a0a:	85 30       	cpi	r24, 0x05	; 5
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <pf_readdir+0x10a>
    1a0e:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    1a10:	d9 01       	movw	r26, r18
    1a12:	8d 93       	st	X+, r24
    1a14:	9d 01       	movw	r18, r26
    1a16:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1a18:	e4 17       	cp	r30, r20
    1a1a:	f5 07       	cpc	r31, r21
    1a1c:	99 f7       	brne	.-26     	; 0x1a04 <pf_readdir+0xfe>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    1a1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1a20:	80 32       	cpi	r24, 0x20	; 32
    1a22:	99 f0       	breq	.+38     	; 0x1a4a <pf_readdir+0x144>
			*p++ = '.';
    1a24:	8e e2       	ldi	r24, 0x2E	; 46
    1a26:	f9 01       	movw	r30, r18
    1a28:	81 93       	st	Z+, r24
    1a2a:	9f 01       	movw	r18, r30
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
    1a30:	ae 01       	movw	r20, r28
    1a32:	48 5e       	subi	r20, 0xE8	; 232
    1a34:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
    1a36:	80 81       	ld	r24, Z
				if (c == ' ') break;
    1a38:	80 32       	cpi	r24, 0x20	; 32
    1a3a:	39 f0       	breq	.+14     	; 0x1a4a <pf_readdir+0x144>
				*p++ = c;
    1a3c:	d9 01       	movw	r26, r18
    1a3e:	8d 93       	st	X+, r24
    1a40:	9d 01       	movw	r18, r26
    1a42:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1a44:	e4 17       	cp	r30, r20
    1a46:	f5 07       	cpc	r31, r21
    1a48:	b1 f7       	brne	.-20     	; 0x1a36 <pf_readdir+0x130>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1a4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1a4c:	f6 01       	movw	r30, r12
    1a4e:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1a50:	fe 01       	movw	r30, r28
    1a52:	3d 96       	adiw	r30, 0x0d	; 13
    1a54:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a56:	55 8d       	ldd	r21, Z+29	; 0x1d
    1a58:	66 8d       	ldd	r22, Z+30	; 0x1e
    1a5a:	77 8d       	ldd	r23, Z+31	; 0x1f
    1a5c:	d6 01       	movw	r26, r12
    1a5e:	4d 93       	st	X+, r20
    1a60:	5d 93       	st	X+, r21
    1a62:	6d 93       	st	X+, r22
    1a64:	7c 93       	st	X, r23
    1a66:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1a68:	80 8d       	ldd	r24, Z+24	; 0x18
    1a6a:	91 8d       	ldd	r25, Z+25	; 0x19
    1a6c:	15 96       	adiw	r26, 0x05	; 5
    1a6e:	9c 93       	st	X, r25
    1a70:	8e 93       	st	-X, r24
    1a72:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1a74:	86 89       	ldd	r24, Z+22	; 0x16
    1a76:	97 89       	ldd	r25, Z+23	; 0x17
    1a78:	17 96       	adiw	r26, 0x07	; 7
    1a7a:	9c 93       	st	X, r25
    1a7c:	8e 93       	st	-X, r24
    1a7e:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
    1a80:	f9 01       	movw	r30, r18
    1a82:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1a84:	c7 01       	movw	r24, r14
    1a86:	0e 94 9f 0a 	call	0x153e	; 0x153e <dir_next>
				if (res == FR_NO_FILE) {
    1a8a:	83 30       	cpi	r24, 0x03	; 3
    1a8c:	41 f4       	brne	.+16     	; 0x1a9e <pf_readdir+0x198>
					dj->sect = 0;
    1a8e:	d7 01       	movw	r26, r14
    1a90:	1c 96       	adiw	r26, 0x0c	; 12
    1a92:	1d 92       	st	X+, r1
    1a94:	1d 92       	st	X+, r1
    1a96:	1d 92       	st	X+, r1
    1a98:	1c 92       	st	X, r1
    1a9a:	1f 97       	sbiw	r26, 0x0f	; 15
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}

	return res;
}
    1a9e:	ac 96       	adiw	r28, 0x2c	; 44
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	08 95       	ret
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	84 cf       	rjmp	.-248    	; 0x19cc <pf_readdir+0xc6>

00001ac4 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    1ac4:	6f 92       	push	r6
    1ac6:	7f 92       	push	r7
    1ac8:	8f 92       	push	r8
    1aca:	9f 92       	push	r9
    1acc:	af 92       	push	r10
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	ec 01       	movw	r28, r24
    1ae2:	6b 01       	movw	r12, r22
    1ae4:	7a 01       	movw	r14, r20
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <follow_path+0x2a>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    1ae8:	08 94       	sec
    1aea:	e1 1c       	adc	r14, r1
    1aec:	f1 1c       	adc	r15, r1
    1aee:	f7 01       	movw	r30, r14
    1af0:	80 81       	ld	r24, Z
    1af2:	80 32       	cpi	r24, 0x20	; 32
    1af4:	c9 f3       	breq	.-14     	; 0x1ae8 <follow_path+0x24>
	if (*path == '/') path++;			/* Strip heading separator */
    1af6:	8f 32       	cpi	r24, 0x2F	; 47
    1af8:	19 f4       	brne	.+6      	; 0x1b00 <follow_path+0x3c>
    1afa:	08 94       	sec
    1afc:	e1 1c       	adc	r14, r1
    1afe:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    1b00:	1c 82       	std	Y+4, r1	; 0x04
    1b02:	1d 82       	std	Y+5, r1	; 0x05
    1b04:	1e 82       	std	Y+6, r1	; 0x06
    1b06:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    1b08:	f7 01       	movw	r30, r14
    1b0a:	80 81       	ld	r24, Z
    1b0c:	81 32       	cpi	r24, 0x21	; 33
    1b0e:	38 f4       	brcc	.+14     	; 0x1b1e <follow_path+0x5a>
		res = dir_rewind(dj);
    1b10:	ce 01       	movw	r24, r28
    1b12:	0e 94 34 09 	call	0x1268	; 0x1268 <dir_rewind>
    1b16:	b8 2e       	mov	r11, r24
		dir[0] = 0;
    1b18:	f6 01       	movw	r30, r12
    1b1a:	10 82       	st	Z, r1
    1b1c:	a5 c0       	rjmp	.+330    	; 0x1c68 <follow_path+0x1a4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1b1e:	a0 e2       	ldi	r26, 0x20	; 32
    1b20:	6a 2e       	mov	r6, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1b22:	77 24       	eor	r7, r7
    1b24:	73 94       	inc	r7
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1b26:	fb e0       	ldi	r31, 0x0B	; 11
    1b28:	8f 2e       	mov	r8, r31
    1b2a:	91 2c       	mov	r9, r1
    1b2c:	8c 0c       	add	r8, r12
    1b2e:	9d 1c       	adc	r9, r13
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    1b30:	aa 81       	ldd	r26, Y+2	; 0x02
    1b32:	bb 81       	ldd	r27, Y+3	; 0x03
    1b34:	fd 01       	movw	r30, r26
    1b36:	8b e0       	ldi	r24, 0x0B	; 11
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <follow_path+0x7a>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    1b3c:	61 92       	st	Z+, r6
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	2f ef       	ldi	r18, 0xFF	; 255
    1b42:	8f 3f       	cpi	r24, 0xFF	; 255
    1b44:	92 07       	cpc	r25, r18
    1b46:	d1 f7       	brne	.-12     	; 0x1b3c <follow_path+0x78>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	aa 24       	eor	r10, r10
    1b4c:	38 e0       	ldi	r19, 0x08	; 8
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <follow_path+0x90>
    1b50:	28 e0       	ldi	r18, 0x08	; 8
    1b52:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    1b54:	f7 01       	movw	r30, r14
    1b56:	ea 0d       	add	r30, r10
    1b58:	f1 1d       	adc	r31, r1
    1b5a:	90 81       	ld	r25, Z
    1b5c:	a3 94       	inc	r10
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    1b5e:	91 32       	cpi	r25, 0x21	; 33
    1b60:	b0 f0       	brcs	.+44     	; 0x1b8e <follow_path+0xca>
    1b62:	9f 32       	cpi	r25, 0x2F	; 47
    1b64:	a1 f0       	breq	.+40     	; 0x1b8e <follow_path+0xca>
		if (c == '.' || i >= ni) {
    1b66:	9e 32       	cpi	r25, 0x2E	; 46
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <follow_path+0xaa>
    1b6a:	23 17       	cp	r18, r19
    1b6c:	28 f0       	brcs	.+10     	; 0x1b78 <follow_path+0xb4>
			if (ni != 8 || c != '.') break;
    1b6e:	38 30       	cpi	r19, 0x08	; 8
    1b70:	71 f4       	brne	.+28     	; 0x1b8e <follow_path+0xca>
    1b72:	9e 32       	cpi	r25, 0x2E	; 46
    1b74:	69 f3       	breq	.-38     	; 0x1b50 <follow_path+0x8c>
    1b76:	0b c0       	rjmp	.+22     	; 0x1b8e <follow_path+0xca>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1b78:	89 2f       	mov	r24, r25
    1b7a:	81 56       	subi	r24, 0x61	; 97
    1b7c:	8a 31       	cpi	r24, 0x1A	; 26
    1b7e:	08 f4       	brcc	.+2      	; 0x1b82 <follow_path+0xbe>
    1b80:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    1b82:	fd 01       	movw	r30, r26
    1b84:	e2 0f       	add	r30, r18
    1b86:	f1 1d       	adc	r31, r1
    1b88:	90 83       	st	Z, r25
    1b8a:	2f 5f       	subi	r18, 0xFF	; 255
    1b8c:	e3 cf       	rjmp	.-58     	; 0x1b54 <follow_path+0x90>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1b8e:	1b 96       	adiw	r26, 0x0b	; 11
    1b90:	1c 92       	st	X, r1
    1b92:	1b 97       	sbiw	r26, 0x0b	; 11
    1b94:	91 32       	cpi	r25, 0x21	; 33
    1b96:	10 f4       	brcc	.+4      	; 0x1b9c <follow_path+0xd8>
    1b98:	1b 96       	adiw	r26, 0x0b	; 11
    1b9a:	7c 92       	st	X, r7
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	0e 94 34 09 	call	0x1268	; 0x1268 <dir_rewind>
    1ba2:	b8 2e       	mov	r11, r24
	if (res != FR_OK) return res;
    1ba4:	88 23       	and	r24, r24
    1ba6:	d1 f5       	brne	.+116    	; 0x1c1c <follow_path+0x158>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1ba8:	4c 85       	ldd	r20, Y+12	; 0x0c
    1baa:	5d 85       	ldd	r21, Y+13	; 0x0d
    1bac:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bae:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bb0:	28 81       	ld	r18, Y
    1bb2:	39 81       	ldd	r19, Y+1	; 0x01
    1bb4:	2f 70       	andi	r18, 0x0F	; 15
    1bb6:	30 70       	andi	r19, 0x00	; 0
    1bb8:	e5 e0       	ldi	r30, 0x05	; 5
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	ea 95       	dec	r30
    1bc0:	e1 f7       	brne	.-8      	; 0x1bba <follow_path+0xf6>
    1bc2:	c6 01       	movw	r24, r12
    1bc4:	00 e2       	ldi	r16, 0x20	; 32
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1bcc:	88 23       	and	r24, r24
    1bce:	11 f0       	breq	.+4      	; 0x1bd4 <follow_path+0x110>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	23 c0       	rjmp	.+70     	; 0x1c1a <follow_path+0x156>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1bd4:	f6 01       	movw	r30, r12
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 23       	and	r24, r24
    1bda:	09 f4       	brne	.+2      	; 0x1bde <follow_path+0x11a>
    1bdc:	55 c0       	rjmp	.+170    	; 0x1c88 <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1bde:	f4 01       	movw	r30, r8
    1be0:	80 81       	ld	r24, Z
    1be2:	83 fd       	sbrc	r24, 3
    1be4:	15 c0       	rjmp	.+42     	; 0x1c10 <follow_path+0x14c>
    1be6:	d6 01       	movw	r26, r12
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	9b 81       	ldd	r25, Y+3	; 0x03
    1bec:	9c 01       	movw	r18, r24
    1bee:	f9 01       	movw	r30, r18
    1bf0:	2b e0       	ldi	r18, 0x0B	; 11
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1bf4:	21 50       	subi	r18, 0x01	; 1
    1bf6:	30 40       	sbci	r19, 0x00	; 0
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	2f 3f       	cpi	r18, 0xFF	; 255
    1bfc:	38 07       	cpc	r19, r24
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <follow_path+0x13e>
    1c00:	46 c0       	rjmp	.+140    	; 0x1c8e <follow_path+0x1ca>
    1c02:	9c 91       	ld	r25, X
    1c04:	80 81       	ld	r24, Z
    1c06:	98 17       	cp	r25, r24
    1c08:	19 f4       	brne	.+6      	; 0x1c10 <follow_path+0x14c>
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	31 96       	adiw	r30, 0x01	; 1
    1c0e:	f2 cf       	rjmp	.-28     	; 0x1bf4 <follow_path+0x130>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    1c10:	ce 01       	movw	r24, r28
    1c12:	0e 94 9f 0a 	call	0x153e	; 0x153e <dir_next>
	} while (res == FR_OK);
    1c16:	88 23       	and	r24, r24
    1c18:	39 f2       	breq	.-114    	; 0x1ba8 <follow_path+0xe4>
    1c1a:	b8 2e       	mov	r11, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    1c1c:	e3 e0       	ldi	r30, 0x03	; 3
    1c1e:	be 16       	cp	r11, r30
    1c20:	19 f5       	brne	.+70     	; 0x1c68 <follow_path+0x1a4>
    1c22:	ea 81       	ldd	r30, Y+2	; 0x02
    1c24:	fb 81       	ldd	r31, Y+3	; 0x03
    1c26:	83 85       	ldd	r24, Z+11	; 0x0b
    1c28:	88 23       	and	r24, r24
    1c2a:	e1 f0       	breq	.+56     	; 0x1c64 <follow_path+0x1a0>
    1c2c:	1d c0       	rjmp	.+58     	; 0x1c68 <follow_path+0x1a4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1c2e:	f4 01       	movw	r30, r8
    1c30:	80 81       	ld	r24, Z
    1c32:	84 ff       	sbrs	r24, 4
    1c34:	17 c0       	rjmp	.+46     	; 0x1c64 <follow_path+0x1a0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1c36:	ea 0c       	add	r14, r10
    1c38:	f1 1c       	adc	r15, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1c3a:	f6 01       	movw	r30, r12
    1c3c:	84 89       	ldd	r24, Z+20	; 0x14
    1c3e:	95 89       	ldd	r25, Z+21	; 0x15
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	dc 01       	movw	r26, r24
    1c46:	99 27       	eor	r25, r25
    1c48:	88 27       	eor	r24, r24
    1c4a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c4c:	33 8d       	ldd	r19, Z+27	; 0x1b
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	82 2b       	or	r24, r18
    1c54:	93 2b       	or	r25, r19
    1c56:	a4 2b       	or	r26, r20
    1c58:	b5 2b       	or	r27, r21
    1c5a:	8c 83       	std	Y+4, r24	; 0x04
    1c5c:	9d 83       	std	Y+5, r25	; 0x05
    1c5e:	ae 83       	std	Y+6, r26	; 0x06
    1c60:	bf 83       	std	Y+7, r27	; 0x07
    1c62:	66 cf       	rjmp	.-308    	; 0x1b30 <follow_path+0x6c>
		}
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	b9 2e       	mov	r11, r25
	}

	return res;
}
    1c68:	8b 2d       	mov	r24, r11
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	df 90       	pop	r13
    1c78:	cf 90       	pop	r12
    1c7a:	bf 90       	pop	r11
    1c7c:	af 90       	pop	r10
    1c7e:	9f 90       	pop	r9
    1c80:	8f 90       	pop	r8
    1c82:	7f 90       	pop	r7
    1c84:	6f 90       	pop	r6
    1c86:	08 95       	ret
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    1c88:	83 e0       	ldi	r24, 0x03	; 3
    1c8a:	b8 2e       	mov	r11, r24
    1c8c:	ca cf       	rjmp	.-108    	; 0x1c22 <follow_path+0x15e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    1c8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c90:	fb 81       	ldd	r31, Y+3	; 0x03
    1c92:	83 85       	ldd	r24, Z+11	; 0x0b
    1c94:	88 23       	and	r24, r24
    1c96:	59 f2       	breq	.-106    	; 0x1c2e <follow_path+0x16a>
    1c98:	e7 cf       	rjmp	.-50     	; 0x1c68 <follow_path+0x1a4>

00001c9a <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	ac 97       	sbiw	r28, 0x2c	; 44
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	8c 01       	movw	r16, r24
    1cb8:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1cba:	80 91 67 00 	lds	r24, 0x0067
    1cbe:	90 91 68 00 	lds	r25, 0x0068
    1cc2:	89 2b       	or	r24, r25
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <pf_opendir+0x30>
    1cc6:	86 e0       	ldi	r24, 0x06	; 6
    1cc8:	31 c0       	rjmp	.+98     	; 0x1d2c <pf_opendir+0x92>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1cca:	ce 01       	movw	r24, r28
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	f8 01       	movw	r30, r16
    1cd0:	93 83       	std	Z+3, r25	; 0x03
    1cd2:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    1cd4:	3d e0       	ldi	r19, 0x0D	; 13
    1cd6:	e3 2e       	mov	r14, r19
    1cd8:	f1 2c       	mov	r15, r1
    1cda:	ec 0e       	add	r14, r28
    1cdc:	fd 1e       	adc	r15, r29
    1cde:	c8 01       	movw	r24, r16
    1ce0:	b7 01       	movw	r22, r14
    1ce2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    1ce6:	88 23       	and	r24, r24
    1ce8:	f1 f4       	brne	.+60     	; 0x1d26 <pf_opendir+0x8c>
			if (dir[0]) {						/* It is not the root dir */
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	88 23       	and	r24, r24
    1cee:	c1 f0       	breq	.+48     	; 0x1d20 <pf_opendir+0x86>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    1cf0:	88 8d       	ldd	r24, Y+24	; 0x18
    1cf2:	84 ff       	sbrs	r24, 4
    1cf4:	1a c0       	rjmp	.+52     	; 0x1d2a <pf_opendir+0x90>
					dj->sclust = LD_CLUST(dir);
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	84 89       	ldd	r24, Z+20	; 0x14
    1cfa:	95 89       	ldd	r25, Z+21	; 0x15
    1cfc:	a0 e0       	ldi	r26, 0x00	; 0
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	dc 01       	movw	r26, r24
    1d02:	99 27       	eor	r25, r25
    1d04:	88 27       	eor	r24, r24
    1d06:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d08:	33 8d       	ldd	r19, Z+27	; 0x1b
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	82 2b       	or	r24, r18
    1d10:	93 2b       	or	r25, r19
    1d12:	a4 2b       	or	r26, r20
    1d14:	b5 2b       	or	r27, r21
    1d16:	f8 01       	movw	r30, r16
    1d18:	84 83       	std	Z+4, r24	; 0x04
    1d1a:	95 83       	std	Z+5, r25	; 0x05
    1d1c:	a6 83       	std	Z+6, r26	; 0x06
    1d1e:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    1d20:	c8 01       	movw	r24, r16
    1d22:	0e 94 34 09 	call	0x1268	; 0x1268 <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    1d26:	83 30       	cpi	r24, 0x03	; 3
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <pf_opendir+0x92>
    1d2a:	84 e0       	ldi	r24, 0x04	; 4
	}

	return res;
}
    1d2c:	ac 96       	adiw	r28, 0x2c	; 44
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	08 95       	ret

00001d46 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	ec 97       	sbiw	r28, 0x3c	; 60
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1d64:	00 91 67 00 	lds	r16, 0x0067
    1d68:	10 91 68 00 	lds	r17, 0x0068


	if (!fs)						/* Check file system */
    1d6c:	01 15       	cp	r16, r1
    1d6e:	11 05       	cpc	r17, r1
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <pf_open+0x30>
    1d72:	66 e0       	ldi	r22, 0x06	; 6
    1d74:	40 c0       	rjmp	.+128    	; 0x1df6 <pf_open+0xb0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    1d76:	f8 01       	movw	r30, r16
    1d78:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	98 8b       	std	Y+16, r25	; 0x10
    1d80:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    1d82:	6d e1       	ldi	r22, 0x1D	; 29
    1d84:	e6 2e       	mov	r14, r22
    1d86:	f1 2c       	mov	r15, r1
    1d88:	ec 0e       	add	r14, r28
    1d8a:	fd 1e       	adc	r15, r29
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	0d 96       	adiw	r24, 0x0d	; 13
    1d90:	b7 01       	movw	r22, r14
    1d92:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <follow_path>
    1d96:	68 2f       	mov	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    1d98:	88 23       	and	r24, r24
    1d9a:	69 f5       	brne	.+90     	; 0x1df6 <pf_open+0xb0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1d9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d9e:	88 23       	and	r24, r24
    1da0:	49 f1       	breq	.+82     	; 0x1df4 <pf_open+0xae>
    1da2:	88 a5       	ldd	r24, Y+40	; 0x28
    1da4:	84 fd       	sbrc	r24, 4
    1da6:	26 c0       	rjmp	.+76     	; 0x1df4 <pf_open+0xae>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    1da8:	f7 01       	movw	r30, r14
    1daa:	84 89       	ldd	r24, Z+20	; 0x14
    1dac:	95 89       	ldd	r25, Z+21	; 0x15
    1dae:	a0 e0       	ldi	r26, 0x00	; 0
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	dc 01       	movw	r26, r24
    1db4:	99 27       	eor	r25, r25
    1db6:	88 27       	eor	r24, r24
    1db8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dba:	33 8d       	ldd	r19, Z+27	; 0x1b
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	82 2b       	or	r24, r18
    1dc2:	93 2b       	or	r25, r19
    1dc4:	a4 2b       	or	r26, r20
    1dc6:	b5 2b       	or	r27, r21
    1dc8:	f8 01       	movw	r30, r16
    1dca:	86 8f       	std	Z+30, r24	; 0x1e
    1dcc:	97 8f       	std	Z+31, r25	; 0x1f
    1dce:	a0 a3       	std	Z+32, r26	; 0x20
    1dd0:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1dd2:	f7 01       	movw	r30, r14
    1dd4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dd6:	95 8d       	ldd	r25, Z+29	; 0x1d
    1dd8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1dda:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1ddc:	f8 01       	movw	r30, r16
    1dde:	82 8f       	std	Z+26, r24	; 0x1a
    1de0:	93 8f       	std	Z+27, r25	; 0x1b
    1de2:	a4 8f       	std	Z+28, r26	; 0x1c
    1de4:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    1de6:	16 8a       	std	Z+22, r1	; 0x16
    1de8:	17 8a       	std	Z+23, r1	; 0x17
    1dea:	10 8e       	std	Z+24, r1	; 0x18
    1dec:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	81 83       	std	Z+1, r24	; 0x01
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <pf_open+0xb0>

	return FR_OK;
    1df4:	63 e0       	ldi	r22, 0x03	; 3
}
    1df6:	86 2f       	mov	r24, r22
    1df8:	ec 96       	adiw	r28, 0x3c	; 60
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	08 95       	ret

00001e12 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    1e12:	4f 92       	push	r4
    1e14:	5f 92       	push	r5
    1e16:	6f 92       	push	r6
    1e18:	7f 92       	push	r7
    1e1a:	8f 92       	push	r8
    1e1c:	9f 92       	push	r9
    1e1e:	af 92       	push	r10
    1e20:	bf 92       	push	r11
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	3c 01       	movw	r6, r24
    1e34:	6b 01       	movw	r12, r22
    1e36:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    1e38:	c0 91 67 00 	lds	r28, 0x0067
    1e3c:	d0 91 68 00 	lds	r29, 0x0068


	*br = 0;
    1e40:	fa 01       	movw	r30, r20
    1e42:	11 82       	std	Z+1, r1	; 0x01
    1e44:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1e46:	20 97       	sbiw	r28, 0x00	; 0
    1e48:	11 f4       	brne	.+4      	; 0x1e4e <pf_read+0x3c>
    1e4a:	86 e0       	ldi	r24, 0x06	; 6
    1e4c:	ca c0       	rjmp	.+404    	; 0x1fe2 <pf_read+0x1d0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	80 fd       	sbrc	r24, 0
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <pf_read+0x46>
    1e54:	85 e0       	ldi	r24, 0x05	; 5
    1e56:	c5 c0       	rjmp	.+394    	; 0x1fe2 <pf_read+0x1d0>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    1e58:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1e5a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1e5c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1e5e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1e60:	8e 89       	ldd	r24, Y+22	; 0x16
    1e62:	9f 89       	ldd	r25, Y+23	; 0x17
    1e64:	a8 8d       	ldd	r26, Y+24	; 0x18
    1e66:	b9 8d       	ldd	r27, Y+25	; 0x19
    1e68:	28 1b       	sub	r18, r24
    1e6a:	39 0b       	sbc	r19, r25
    1e6c:	4a 0b       	sbc	r20, r26
    1e6e:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    1e70:	cb 01       	movw	r24, r22
    1e72:	a0 e0       	ldi	r26, 0x00	; 0
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	28 17       	cp	r18, r24
    1e78:	39 07       	cpc	r19, r25
    1e7a:	4a 07       	cpc	r20, r26
    1e7c:	5b 07       	cpc	r21, r27
    1e7e:	08 f4       	brcc	.+2      	; 0x1e82 <pf_read+0x70>
    1e80:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    1e82:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1e84:	41 2c       	mov	r4, r1
    1e86:	e2 e0       	ldi	r30, 0x02	; 2
    1e88:	5e 2e       	mov	r5, r30
    1e8a:	a3 c0       	rjmp	.+326    	; 0x1fd2 <pf_read+0x1c0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1e8c:	2e 89       	ldd	r18, Y+22	; 0x16
    1e8e:	3f 89       	ldd	r19, Y+23	; 0x17
    1e90:	48 8d       	ldd	r20, Y+24	; 0x18
    1e92:	59 8d       	ldd	r21, Y+25	; 0x19
    1e94:	da 01       	movw	r26, r20
    1e96:	c9 01       	movw	r24, r18
    1e98:	91 70       	andi	r25, 0x01	; 1
    1e9a:	a0 70       	andi	r26, 0x00	; 0
    1e9c:	b0 70       	andi	r27, 0x00	; 0
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	a1 05       	cpc	r26, r1
    1ea2:	b1 05       	cpc	r27, r1
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <pf_read+0x96>
    1ea6:	60 c0       	rjmp	.+192    	; 0x1f68 <pf_read+0x156>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1ea8:	da 01       	movw	r26, r20
    1eaa:	c9 01       	movw	r24, r18
    1eac:	79 e0       	ldi	r23, 0x09	; 9
    1eae:	b6 95       	lsr	r27
    1eb0:	a7 95       	ror	r26
    1eb2:	97 95       	ror	r25
    1eb4:	87 95       	ror	r24
    1eb6:	7a 95       	dec	r23
    1eb8:	d1 f7       	brne	.-12     	; 0x1eae <pf_read+0x9c>
    1eba:	fa 80       	ldd	r15, Y+2	; 0x02
    1ebc:	fa 94       	dec	r15
    1ebe:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    1ec0:	d1 f4       	brne	.+52     	; 0x1ef6 <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1ec2:	21 15       	cp	r18, r1
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	41 05       	cpc	r20, r1
    1ec8:	51 05       	cpc	r21, r1
    1eca:	29 f4       	brne	.+10     	; 0x1ed6 <pf_read+0xc4>
    1ecc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1ece:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1ed0:	88 a1       	ldd	r24, Y+32	; 0x20
    1ed2:	99 a1       	ldd	r25, Y+33	; 0x21
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <pf_read+0xd0>
    1ed6:	6a a1       	ldd	r22, Y+34	; 0x22
    1ed8:	7b a1       	ldd	r23, Y+35	; 0x23
    1eda:	8c a1       	ldd	r24, Y+36	; 0x24
    1edc:	9d a1       	ldd	r25, Y+37	; 0x25
    1ede:	0e 94 b3 09 	call	0x1366	; 0x1366 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    1ee2:	62 30       	cpi	r22, 0x02	; 2
    1ee4:	71 05       	cpc	r23, r1
    1ee6:	81 05       	cpc	r24, r1
    1ee8:	91 05       	cpc	r25, r1
    1eea:	08 f4       	brcc	.+2      	; 0x1eee <pf_read+0xdc>
    1eec:	78 c0       	rjmp	.+240    	; 0x1fde <pf_read+0x1cc>
				fs->curr_clust = clst;				/* Update current cluster */
    1eee:	6a a3       	std	Y+34, r22	; 0x22
    1ef0:	7b a3       	std	Y+35, r23	; 0x23
    1ef2:	8c a3       	std	Y+36, r24	; 0x24
    1ef4:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1ef6:	00 91 67 00 	lds	r16, 0x0067
    1efa:	10 91 68 00 	lds	r17, 0x0068


	clst -= 2;
    1efe:	2a a1       	ldd	r18, Y+34	; 0x22
    1f00:	3b a1       	ldd	r19, Y+35	; 0x23
    1f02:	4c a1       	ldd	r20, Y+36	; 0x24
    1f04:	5d a1       	ldd	r21, Y+37	; 0x25
    1f06:	22 50       	subi	r18, 0x02	; 2
    1f08:	30 40       	sbci	r19, 0x00	; 0
    1f0a:	40 40       	sbci	r20, 0x00	; 0
    1f0c:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1f0e:	f8 01       	movw	r30, r16
    1f10:	86 81       	ldd	r24, Z+6	; 0x06
    1f12:	97 81       	ldd	r25, Z+7	; 0x07
    1f14:	a0 85       	ldd	r26, Z+8	; 0x08
    1f16:	b1 85       	ldd	r27, Z+9	; 0x09
    1f18:	02 97       	sbiw	r24, 0x02	; 2
    1f1a:	a1 09       	sbc	r26, r1
    1f1c:	b1 09       	sbc	r27, r1
    1f1e:	28 17       	cp	r18, r24
    1f20:	39 07       	cpc	r19, r25
    1f22:	4a 07       	cpc	r20, r26
    1f24:	5b 07       	cpc	r21, r27
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <pf_read+0x118>
    1f28:	5a c0       	rjmp	.+180    	; 0x1fde <pf_read+0x1cc>
	return (DWORD)clst * fs->csize + fs->database;
    1f2a:	62 81       	ldd	r22, Z+2	; 0x02
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    1f36:	9b 01       	movw	r18, r22
    1f38:	ac 01       	movw	r20, r24
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	82 89       	ldd	r24, Z+18	; 0x12
    1f3e:	93 89       	ldd	r25, Z+19	; 0x13
    1f40:	a4 89       	ldd	r26, Z+20	; 0x14
    1f42:	b5 89       	ldd	r27, Z+21	; 0x15
    1f44:	28 0f       	add	r18, r24
    1f46:	39 1f       	adc	r19, r25
    1f48:	4a 1f       	adc	r20, r26
    1f4a:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    1f4c:	21 15       	cp	r18, r1
    1f4e:	31 05       	cpc	r19, r1
    1f50:	41 05       	cpc	r20, r1
    1f52:	51 05       	cpc	r21, r1
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <pf_read+0x146>
    1f56:	43 c0       	rjmp	.+134    	; 0x1fde <pf_read+0x1cc>
			fs->dsect = sect + cs;
    1f58:	2f 0d       	add	r18, r15
    1f5a:	31 1d       	adc	r19, r1
    1f5c:	41 1d       	adc	r20, r1
    1f5e:	51 1d       	adc	r21, r1
    1f60:	2e a3       	std	Y+38, r18	; 0x26
    1f62:	3f a3       	std	Y+39, r19	; 0x27
    1f64:	48 a7       	std	Y+40, r20	; 0x28
    1f66:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1f68:	2e 89       	ldd	r18, Y+22	; 0x16
    1f6a:	3f 89       	ldd	r19, Y+23	; 0x17
    1f6c:	31 70       	andi	r19, 0x01	; 1
    1f6e:	c2 01       	movw	r24, r4
    1f70:	82 1b       	sub	r24, r18
    1f72:	93 0b       	sbc	r25, r19
    1f74:	76 01       	movw	r14, r12
    1f76:	8c 15       	cp	r24, r12
    1f78:	9d 05       	cpc	r25, r13
    1f7a:	08 f4       	brcc	.+2      	; 0x1f7e <pf_read+0x16c>
    1f7c:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    1f7e:	61 14       	cp	r6, r1
    1f80:	71 04       	cpc	r7, r1
    1f82:	19 f4       	brne	.+6      	; 0x1f8a <pf_read+0x178>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	01 c0       	rjmp	.+2      	; 0x1f8c <pf_read+0x17a>
    1f8a:	c5 01       	movw	r24, r10
    1f8c:	4e a1       	ldd	r20, Y+38	; 0x26
    1f8e:	5f a1       	ldd	r21, Y+39	; 0x27
    1f90:	68 a5       	ldd	r22, Y+40	; 0x28
    1f92:	79 a5       	ldd	r23, Y+41	; 0x29
    1f94:	87 01       	movw	r16, r14
    1f96:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
		if (dr) goto fr_abort;
    1f9a:	88 23       	and	r24, r24
    1f9c:	01 f5       	brne	.+64     	; 0x1fde <pf_read+0x1cc>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    1f9e:	c7 01       	movw	r24, r14
    1fa0:	a0 e0       	ldi	r26, 0x00	; 0
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	2e 89       	ldd	r18, Y+22	; 0x16
    1fa6:	3f 89       	ldd	r19, Y+23	; 0x17
    1fa8:	48 8d       	ldd	r20, Y+24	; 0x18
    1faa:	59 8d       	ldd	r21, Y+25	; 0x19
    1fac:	28 0f       	add	r18, r24
    1fae:	39 1f       	adc	r19, r25
    1fb0:	4a 1f       	adc	r20, r26
    1fb2:	5b 1f       	adc	r21, r27
    1fb4:	2e 8b       	std	Y+22, r18	; 0x16
    1fb6:	3f 8b       	std	Y+23, r19	; 0x17
    1fb8:	48 8f       	std	Y+24, r20	; 0x18
    1fba:	59 8f       	std	Y+25, r21	; 0x19
    1fbc:	ae 0c       	add	r10, r14
    1fbe:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1fc0:	ce 18       	sub	r12, r14
    1fc2:	df 08       	sbc	r13, r15
    1fc4:	f4 01       	movw	r30, r8
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	8e 0d       	add	r24, r14
    1fcc:	9f 1d       	adc	r25, r15
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1fd2:	c1 14       	cp	r12, r1
    1fd4:	d1 04       	cpc	r13, r1
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <pf_read+0x1c8>
    1fd8:	59 cf       	rjmp	.-334    	; 0x1e8c <pf_read+0x7a>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <pf_read+0x1d0>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    1fde:	19 82       	std	Y+1, r1	; 0x01
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	9f 90       	pop	r9
    1ff8:	8f 90       	pop	r8
    1ffa:	7f 90       	pop	r7
    1ffc:	6f 90       	pop	r6
    1ffe:	5f 90       	pop	r5
    2000:	4f 90       	pop	r4
    2002:	08 95       	ret

00002004 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	b8 2e       	mov	r11, r24
    201a:	a9 2e       	mov	r10, r25
    201c:	6a 01       	movw	r12, r20
    201e:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    2020:	2e ef       	ldi	r18, 0xFE	; 254
    2022:	31 e0       	ldi	r19, 0x01	; 1
    2024:	02 e0       	ldi	r16, 0x02	; 2
    2026:	10 e0       	ldi	r17, 0x00	; 0
    2028:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    202c:	88 23       	and	r24, r24
    202e:	11 f0       	breq	.+4      	; 0x2034 <check_fs+0x30>
    2030:	23 e0       	ldi	r18, 0x03	; 3
    2032:	33 c0       	rjmp	.+102    	; 0x209a <check_fs+0x96>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    2034:	cb 2d       	mov	r28, r11
    2036:	da 2d       	mov	r29, r10
    2038:	88 81       	ld	r24, Y
    203a:	99 81       	ldd	r25, Y+1	; 0x01
    203c:	85 55       	subi	r24, 0x55	; 85
    203e:	9a 4a       	sbci	r25, 0xAA	; 170
    2040:	11 f0       	breq	.+4      	; 0x2046 <check_fs+0x42>
    2042:	22 e0       	ldi	r18, 0x02	; 2
    2044:	2a c0       	rjmp	.+84     	; 0x209a <check_fs+0x96>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    2046:	8b 2d       	mov	r24, r11
    2048:	9a 2d       	mov	r25, r10
    204a:	b7 01       	movw	r22, r14
    204c:	a6 01       	movw	r20, r12
    204e:	26 e3       	ldi	r18, 0x36	; 54
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	02 e0       	ldi	r16, 0x02	; 2
    2054:	10 e0       	ldi	r17, 0x00	; 0
    2056:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    205a:	88 23       	and	r24, r24
    205c:	39 f4       	brne	.+14     	; 0x206c <check_fs+0x68>
    205e:	88 81       	ld	r24, Y
    2060:	99 81       	ldd	r25, Y+1	; 0x01
    2062:	86 54       	subi	r24, 0x46	; 70
    2064:	91 44       	sbci	r25, 0x41	; 65
    2066:	11 f4       	brne	.+4      	; 0x206c <check_fs+0x68>
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	17 c0       	rjmp	.+46     	; 0x209a <check_fs+0x96>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    206c:	8b 2d       	mov	r24, r11
    206e:	9a 2d       	mov	r25, r10
    2070:	b7 01       	movw	r22, r14
    2072:	a6 01       	movw	r20, r12
    2074:	22 e5       	ldi	r18, 0x52	; 82
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	02 e0       	ldi	r16, 0x02	; 2
    207a:	10 e0       	ldi	r17, 0x00	; 0
    207c:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    2080:	88 23       	and	r24, r24
    2082:	11 f0       	breq	.+4      	; 0x2088 <check_fs+0x84>
    2084:	21 e0       	ldi	r18, 0x01	; 1
    2086:	09 c0       	rjmp	.+18     	; 0x209a <check_fs+0x96>
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	88 81       	ld	r24, Y
    208c:	99 81       	ldd	r25, Y+1	; 0x01
    208e:	86 54       	subi	r24, 0x46	; 70
    2090:	91 44       	sbci	r25, 0x41	; 65
    2092:	09 f4       	brne	.+2      	; 0x2096 <check_fs+0x92>
    2094:	21 e0       	ldi	r18, 0x01	; 1
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    209a:	82 2f       	mov	r24, r18
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	df 90       	pop	r13
    20aa:	cf 90       	pop	r12
    20ac:	bf 90       	pop	r11
    20ae:	af 90       	pop	r10
    20b0:	08 95       	ret

000020b2 <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    20b2:	4f 92       	push	r4
    20b4:	5f 92       	push	r5
    20b6:	6f 92       	push	r6
    20b8:	7f 92       	push	r7
    20ba:	8f 92       	push	r8
    20bc:	9f 92       	push	r9
    20be:	af 92       	push	r10
    20c0:	bf 92       	push	r11
    20c2:	cf 92       	push	r12
    20c4:	df 92       	push	r13
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	fc 01       	movw	r30, r24
    20d4:	5b 01       	movw	r10, r22
    20d6:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    20d8:	c0 91 67 00 	lds	r28, 0x0067
    20dc:	d0 91 68 00 	lds	r29, 0x0068


	*bw = 0;
    20e0:	da 01       	movw	r26, r20
    20e2:	1d 92       	st	X+, r1
    20e4:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    20e6:	20 97       	sbiw	r28, 0x00	; 0
    20e8:	11 f4       	brne	.+4      	; 0x20ee <pf_write+0x3c>
    20ea:	86 e0       	ldi	r24, 0x06	; 6
    20ec:	fd c0       	rjmp	.+506    	; 0x22e8 <pf_write+0x236>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	80 fd       	sbrc	r24, 0
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <pf_write+0x48>
    20f6:	85 e0       	ldi	r24, 0x05	; 5
    20f8:	f7 c0       	rjmp	.+494    	; 0x22e8 <pf_write+0x236>
    20fa:	80 74       	andi	r24, 0x40	; 64
    20fc:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    20fe:	61 15       	cp	r22, r1
    2100:	71 05       	cpc	r23, r1
    2102:	89 f4       	brne	.+34     	; 0x2126 <pf_write+0x74>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    2104:	89 2b       	or	r24, r25
    2106:	59 f0       	breq	.+22     	; 0x211e <pf_write+0x6c>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	0e 94 ff 07 	call	0xffe	; 0xffe <disk_writep>
    2118:	88 23       	and	r24, r24
    211a:	09 f0       	breq	.+2      	; 0x211e <pf_write+0x6c>
    211c:	e3 c0       	rjmp	.+454    	; 0x22e4 <pf_write+0x232>
		fs->flag &= ~FA__WIP;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	8f 7b       	andi	r24, 0xBF	; 191
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	dd c0       	rjmp	.+442    	; 0x22e0 <pf_write+0x22e>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    2126:	89 2b       	or	r24, r25
    2128:	51 f4       	brne	.+20     	; 0x213e <pf_write+0x8c>
			fs->fptr &= 0xFFFFFE00;
    212a:	8e 89       	ldd	r24, Y+22	; 0x16
    212c:	9f 89       	ldd	r25, Y+23	; 0x17
    212e:	a8 8d       	ldd	r26, Y+24	; 0x18
    2130:	b9 8d       	ldd	r27, Y+25	; 0x19
    2132:	80 70       	andi	r24, 0x00	; 0
    2134:	9e 7f       	andi	r25, 0xFE	; 254
    2136:	8e 8b       	std	Y+22, r24	; 0x16
    2138:	9f 8b       	std	Y+23, r25	; 0x17
    213a:	a8 8f       	std	Y+24, r26	; 0x18
    213c:	b9 8f       	std	Y+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    213e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2140:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2142:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2144:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2146:	8e 89       	ldd	r24, Y+22	; 0x16
    2148:	9f 89       	ldd	r25, Y+23	; 0x17
    214a:	a8 8d       	ldd	r26, Y+24	; 0x18
    214c:	b9 8d       	ldd	r27, Y+25	; 0x19
    214e:	28 1b       	sub	r18, r24
    2150:	39 0b       	sbc	r19, r25
    2152:	4a 0b       	sbc	r20, r26
    2154:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    2156:	c5 01       	movw	r24, r10
    2158:	a0 e0       	ldi	r26, 0x00	; 0
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	28 17       	cp	r18, r24
    215e:	39 07       	cpc	r19, r25
    2160:	4a 07       	cpc	r20, r26
    2162:	5b 07       	cpc	r21, r27
    2164:	08 f4       	brcc	.+2      	; 0x2168 <pf_write+0xb6>
    2166:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    2168:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    216a:	41 2c       	mov	r4, r1
    216c:	a2 e0       	ldi	r26, 0x02	; 2
    216e:	5a 2e       	mov	r5, r26
    2170:	b3 c0       	rjmp	.+358    	; 0x22d8 <pf_write+0x226>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    2172:	2e 89       	ldd	r18, Y+22	; 0x16
    2174:	3f 89       	ldd	r19, Y+23	; 0x17
    2176:	48 8d       	ldd	r20, Y+24	; 0x18
    2178:	59 8d       	ldd	r21, Y+25	; 0x19
    217a:	c9 01       	movw	r24, r18
    217c:	91 70       	andi	r25, 0x01	; 1
    217e:	89 2b       	or	r24, r25
    2180:	09 f0       	breq	.+2      	; 0x2184 <pf_write+0xd2>
    2182:	6c c0       	rjmp	.+216    	; 0x225c <pf_write+0x1aa>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    2184:	da 01       	movw	r26, r20
    2186:	c9 01       	movw	r24, r18
    2188:	f9 e0       	ldi	r31, 0x09	; 9
    218a:	b6 95       	lsr	r27
    218c:	a7 95       	ror	r26
    218e:	97 95       	ror	r25
    2190:	87 95       	ror	r24
    2192:	fa 95       	dec	r31
    2194:	d1 f7       	brne	.-12     	; 0x218a <pf_write+0xd8>
    2196:	fa 80       	ldd	r15, Y+2	; 0x02
    2198:	fa 94       	dec	r15
    219a:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    219c:	d1 f4       	brne	.+52     	; 0x21d2 <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    219e:	21 15       	cp	r18, r1
    21a0:	31 05       	cpc	r19, r1
    21a2:	41 05       	cpc	r20, r1
    21a4:	51 05       	cpc	r21, r1
    21a6:	29 f4       	brne	.+10     	; 0x21b2 <pf_write+0x100>
    21a8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    21aa:	7f 8d       	ldd	r23, Y+31	; 0x1f
    21ac:	88 a1       	ldd	r24, Y+32	; 0x20
    21ae:	99 a1       	ldd	r25, Y+33	; 0x21
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <pf_write+0x10c>
    21b2:	6a a1       	ldd	r22, Y+34	; 0x22
    21b4:	7b a1       	ldd	r23, Y+35	; 0x23
    21b6:	8c a1       	ldd	r24, Y+36	; 0x24
    21b8:	9d a1       	ldd	r25, Y+37	; 0x25
    21ba:	0e 94 b3 09 	call	0x1366	; 0x1366 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    21be:	62 30       	cpi	r22, 0x02	; 2
    21c0:	71 05       	cpc	r23, r1
    21c2:	81 05       	cpc	r24, r1
    21c4:	91 05       	cpc	r25, r1
    21c6:	08 f4       	brcc	.+2      	; 0x21ca <pf_write+0x118>
    21c8:	8d c0       	rjmp	.+282    	; 0x22e4 <pf_write+0x232>
				fs->curr_clust = clst;				/* Update current cluster */
    21ca:	6a a3       	std	Y+34, r22	; 0x22
    21cc:	7b a3       	std	Y+35, r23	; 0x23
    21ce:	8c a3       	std	Y+36, r24	; 0x24
    21d0:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    21d2:	00 91 67 00 	lds	r16, 0x0067
    21d6:	10 91 68 00 	lds	r17, 0x0068


	clst -= 2;
    21da:	2a a1       	ldd	r18, Y+34	; 0x22
    21dc:	3b a1       	ldd	r19, Y+35	; 0x23
    21de:	4c a1       	ldd	r20, Y+36	; 0x24
    21e0:	5d a1       	ldd	r21, Y+37	; 0x25
    21e2:	22 50       	subi	r18, 0x02	; 2
    21e4:	30 40       	sbci	r19, 0x00	; 0
    21e6:	40 40       	sbci	r20, 0x00	; 0
    21e8:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    21ea:	f8 01       	movw	r30, r16
    21ec:	86 81       	ldd	r24, Z+6	; 0x06
    21ee:	97 81       	ldd	r25, Z+7	; 0x07
    21f0:	a0 85       	ldd	r26, Z+8	; 0x08
    21f2:	b1 85       	ldd	r27, Z+9	; 0x09
    21f4:	02 97       	sbiw	r24, 0x02	; 2
    21f6:	a1 09       	sbc	r26, r1
    21f8:	b1 09       	sbc	r27, r1
    21fa:	28 17       	cp	r18, r24
    21fc:	39 07       	cpc	r19, r25
    21fe:	4a 07       	cpc	r20, r26
    2200:	5b 07       	cpc	r21, r27
    2202:	08 f0       	brcs	.+2      	; 0x2206 <pf_write+0x154>
    2204:	6f c0       	rjmp	.+222    	; 0x22e4 <pf_write+0x232>
	return (DWORD)clst * fs->csize + fs->database;
    2206:	62 81       	ldd	r22, Z+2	; 0x02
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	f8 01       	movw	r30, r16
    2218:	82 89       	ldd	r24, Z+18	; 0x12
    221a:	93 89       	ldd	r25, Z+19	; 0x13
    221c:	a4 89       	ldd	r26, Z+20	; 0x14
    221e:	b5 89       	ldd	r27, Z+21	; 0x15
    2220:	28 0f       	add	r18, r24
    2222:	39 1f       	adc	r19, r25
    2224:	4a 1f       	adc	r20, r26
    2226:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    2228:	21 15       	cp	r18, r1
    222a:	31 05       	cpc	r19, r1
    222c:	41 05       	cpc	r20, r1
    222e:	51 05       	cpc	r21, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <pf_write+0x182>
    2232:	58 c0       	rjmp	.+176    	; 0x22e4 <pf_write+0x232>
			fs->dsect = sect + cs;
    2234:	ba 01       	movw	r22, r20
    2236:	a9 01       	movw	r20, r18
    2238:	4f 0d       	add	r20, r15
    223a:	51 1d       	adc	r21, r1
    223c:	61 1d       	adc	r22, r1
    223e:	71 1d       	adc	r23, r1
    2240:	4e a3       	std	Y+38, r20	; 0x26
    2242:	5f a3       	std	Y+39, r21	; 0x27
    2244:	68 a7       	std	Y+40, r22	; 0x28
    2246:	79 a7       	std	Y+41, r23	; 0x29
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 ff 07 	call	0xffe	; 0xffe <disk_writep>
    2250:	88 23       	and	r24, r24
    2252:	09 f0       	breq	.+2      	; 0x2256 <pf_write+0x1a4>
    2254:	47 c0       	rjmp	.+142    	; 0x22e4 <pf_write+0x232>
			fs->flag |= FA__WIP;
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	80 64       	ori	r24, 0x40	; 64
    225a:	89 83       	std	Y+1, r24	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    225c:	8e 89       	ldd	r24, Y+22	; 0x16
    225e:	9f 89       	ldd	r25, Y+23	; 0x17
    2260:	91 70       	andi	r25, 0x01	; 1
    2262:	92 01       	movw	r18, r4
    2264:	28 1b       	sub	r18, r24
    2266:	39 0b       	sbc	r19, r25
    2268:	65 01       	movw	r12, r10
    226a:	2a 15       	cp	r18, r10
    226c:	3b 05       	cpc	r19, r11
    226e:	08 f4       	brcc	.+2      	; 0x2272 <pf_write+0x1c0>
    2270:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    2272:	76 01       	movw	r14, r12
    2274:	00 e0       	ldi	r16, 0x00	; 0
    2276:	10 e0       	ldi	r17, 0x00	; 0
    2278:	c4 01       	movw	r24, r8
    227a:	b8 01       	movw	r22, r16
    227c:	a7 01       	movw	r20, r14
    227e:	0e 94 ff 07 	call	0xffe	; 0xffe <disk_writep>
    2282:	88 23       	and	r24, r24
    2284:	79 f5       	brne	.+94     	; 0x22e4 <pf_write+0x232>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    2286:	8e 89       	ldd	r24, Y+22	; 0x16
    2288:	9f 89       	ldd	r25, Y+23	; 0x17
    228a:	a8 8d       	ldd	r26, Y+24	; 0x18
    228c:	b9 8d       	ldd	r27, Y+25	; 0x19
    228e:	8e 0d       	add	r24, r14
    2290:	9f 1d       	adc	r25, r15
    2292:	a0 1f       	adc	r26, r16
    2294:	b1 1f       	adc	r27, r17
    2296:	9c 01       	movw	r18, r24
    2298:	8e 8b       	std	Y+22, r24	; 0x16
    229a:	9f 8b       	std	Y+23, r25	; 0x17
    229c:	a8 8f       	std	Y+24, r26	; 0x18
    229e:	b9 8f       	std	Y+25, r27	; 0x19
		btw -= wcnt; *bw += wcnt;
    22a0:	d3 01       	movw	r26, r6
    22a2:	8d 91       	ld	r24, X+
    22a4:	9c 91       	ld	r25, X
    22a6:	11 97       	sbiw	r26, 0x01	; 1
    22a8:	8c 0d       	add	r24, r12
    22aa:	9d 1d       	adc	r25, r13
    22ac:	8d 93       	st	X+, r24
    22ae:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    22b0:	31 70       	andi	r19, 0x01	; 1
    22b2:	23 2b       	or	r18, r19
    22b4:	69 f4       	brne	.+26     	; 0x22d0 <pf_write+0x21e>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	0e 94 ff 07 	call	0xffe	; 0xffe <disk_writep>
    22c6:	88 23       	and	r24, r24
    22c8:	69 f4       	brne	.+26     	; 0x22e4 <pf_write+0x232>
			fs->flag &= ~FA__WIP;
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	8f 7b       	andi	r24, 0xBF	; 191
    22ce:	89 83       	std	Y+1, r24	; 0x01
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    22d0:	8c 0c       	add	r8, r12
    22d2:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    22d4:	ac 18       	sub	r10, r12
    22d6:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    22d8:	a1 14       	cp	r10, r1
    22da:	b1 04       	cpc	r11, r1
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <pf_write+0x22e>
    22de:	49 cf       	rjmp	.-366    	; 0x2172 <pf_write+0xc0>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <pf_write+0x236>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    22e4:	19 82       	std	Y+1, r1	; 0x01
    22e6:	81 e0       	ldi	r24, 0x01	; 1
	return FR_DISK_ERR;
}
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	bf 90       	pop	r11
    22fa:	af 90       	pop	r10
    22fc:	9f 90       	pop	r9
    22fe:	8f 90       	pop	r8
    2300:	7f 90       	pop	r7
    2302:	6f 90       	pop	r6
    2304:	5f 90       	pop	r5
    2306:	4f 90       	pop	r4
    2308:	08 95       	ret

0000230a <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    230a:	6f 92       	push	r6
    230c:	7f 92       	push	r7
    230e:	8f 92       	push	r8
    2310:	9f 92       	push	r9
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	a4 97       	sbiw	r28, 0x24	; 36
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    2338:	10 92 68 00 	sts	0x0068, r1
    233c:	10 92 67 00 	sts	0x0067, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	09 f4       	brne	.+2      	; 0x2346 <pf_mount+0x3c>
    2344:	ec c0       	rjmp	.+472    	; 0x251e <pf_mount+0x214>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    2346:	0e 94 73 08 	call	0x10e6	; 0x10e6 <disk_initialize>
    234a:	80 ff       	sbrs	r24, 0
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <pf_mount+0x48>
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	eb c0       	rjmp	.+470    	; 0x2528 <pf_mount+0x21e>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    2352:	4e 01       	movw	r8, r28
    2354:	08 94       	sec
    2356:	81 1c       	adc	r8, r1
    2358:	91 1c       	adc	r9, r1
    235a:	c4 01       	movw	r24, r8
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	0e 94 02 10 	call	0x2004	; 0x2004 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	21 f0       	breq	.+8      	; 0x2374 <pf_mount+0x6a>
    236c:	cc 24       	eor	r12, r12
    236e:	dd 24       	eor	r13, r13
    2370:	76 01       	movw	r14, r12
    2372:	1b c0       	rjmp	.+54     	; 0x23aa <pf_mount+0xa0>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    2374:	c4 01       	movw	r24, r8
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	2e eb       	ldi	r18, 0xBE	; 190
    2380:	31 e0       	ldi	r19, 0x01	; 1
    2382:	00 e1       	ldi	r16, 0x10	; 16
    2384:	10 e0       	ldi	r17, 0x00	; 0
    2386:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    238a:	88 23       	and	r24, r24
    238c:	09 f0       	breq	.+2      	; 0x2390 <pf_mount+0x86>
    238e:	c9 c0       	rjmp	.+402    	; 0x2522 <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	88 23       	and	r24, r24
    2394:	09 f4       	brne	.+2      	; 0x2398 <pf_mount+0x8e>
    2396:	c7 c0       	rjmp	.+398    	; 0x2526 <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    2398:	c9 84       	ldd	r12, Y+9	; 0x09
    239a:	da 84       	ldd	r13, Y+10	; 0x0a
    239c:	eb 84       	ldd	r14, Y+11	; 0x0b
    239e:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    23a0:	c4 01       	movw	r24, r8
    23a2:	b7 01       	movw	r22, r14
    23a4:	a6 01       	movw	r20, r12
    23a6:	0e 94 02 10 	call	0x2004	; 0x2004 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    23aa:	83 30       	cpi	r24, 0x03	; 3
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <pf_mount+0xa6>
    23ae:	b9 c0       	rjmp	.+370    	; 0x2522 <pf_mount+0x218>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    23b0:	88 23       	and	r24, r24
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <pf_mount+0xac>
    23b4:	b8 c0       	rjmp	.+368    	; 0x2526 <pf_mount+0x21c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    23b6:	ce 01       	movw	r24, r28
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	b7 01       	movw	r22, r14
    23bc:	a6 01       	movw	r20, r12
    23be:	2d e0       	ldi	r18, 0x0D	; 13
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	04 e2       	ldi	r16, 0x24	; 36
    23c4:	10 e0       	ldi	r17, 0x00	; 0
    23c6:	0e 94 ab 07 	call	0xf56	; 0xf56 <disk_readp>
    23ca:	88 23       	and	r24, r24
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <pf_mount+0xc6>
    23ce:	a9 c0       	rjmp	.+338    	; 0x2522 <pf_mount+0x218>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    23d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d4:	bc 01       	movw	r22, r24
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    23da:	61 15       	cp	r22, r1
    23dc:	71 05       	cpc	r23, r1
    23de:	81 05       	cpc	r24, r1
    23e0:	91 05       	cpc	r25, r1
    23e2:	21 f4       	brne	.+8      	; 0x23ec <pf_mount+0xe2>
    23e4:	68 8d       	ldd	r22, Y+24	; 0x18
    23e6:	79 8d       	ldd	r23, Y+25	; 0x19
    23e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23ea:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    23ec:	2c 81       	ldd	r18, Y+4	; 0x04
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    23f8:	3b 01       	movw	r6, r22
    23fa:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	c8 0e       	add	r12, r24
    2406:	d9 1e       	adc	r13, r25
    2408:	ea 1e       	adc	r14, r26
    240a:	fb 1e       	adc	r15, r27
    240c:	f5 01       	movw	r30, r10
    240e:	c2 86       	std	Z+10, r12	; 0x0a
    2410:	d3 86       	std	Z+11, r13	; 0x0b
    2412:	e4 86       	std	Z+12, r14	; 0x0c
    2414:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    241a:	2d 81       	ldd	r18, Y+5	; 0x05
    241c:	3e 81       	ldd	r19, Y+6	; 0x06
    241e:	35 83       	std	Z+5, r19	; 0x05
    2420:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    2422:	8f 81       	ldd	r24, Y+7	; 0x07
    2424:	98 85       	ldd	r25, Y+8	; 0x08
    2426:	7c 01       	movw	r14, r24
    2428:	00 e0       	ldi	r16, 0x00	; 0
    242a:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    242c:	e1 14       	cp	r14, r1
    242e:	f1 04       	cpc	r15, r1
    2430:	01 05       	cpc	r16, r1
    2432:	11 05       	cpc	r17, r1
    2434:	21 f4       	brne	.+8      	; 0x243e <pf_mount+0x134>
    2436:	ec 88       	ldd	r14, Y+20	; 0x14
    2438:	fd 88       	ldd	r15, Y+21	; 0x15
    243a:	0e 89       	ldd	r16, Y+22	; 0x16
    243c:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	9b 81       	ldd	r25, Y+3	; 0x03
    2442:	a0 e0       	ldi	r26, 0x00	; 0
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e8 1a       	sub	r14, r24
    2448:	f9 0a       	sbc	r15, r25
    244a:	0a 0b       	sbc	r16, r26
    244c:	1b 0b       	sbc	r17, r27
    244e:	e6 18       	sub	r14, r6
    2450:	f7 08       	sbc	r15, r7
    2452:	08 09       	sbc	r16, r8
    2454:	19 09       	sbc	r17, r9
    2456:	84 e0       	ldi	r24, 0x04	; 4
    2458:	36 95       	lsr	r19
    245a:	27 95       	ror	r18
    245c:	8a 95       	dec	r24
    245e:	e1 f7       	brne	.-8      	; 0x2458 <pf_mount+0x14e>
    2460:	c9 01       	movw	r24, r18
    2462:	a0 e0       	ldi	r26, 0x00	; 0
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e8 1a       	sub	r14, r24
    2468:	f9 0a       	sbc	r15, r25
    246a:	0a 0b       	sbc	r16, r26
    246c:	1b 0b       	sbc	r17, r27
    246e:	f5 01       	movw	r30, r10
    2470:	22 81       	ldd	r18, Z+2	; 0x02
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	c8 01       	movw	r24, r16
    247a:	b7 01       	movw	r22, r14
    247c:	0e 94 26 13 	call	0x264c	; 0x264c <__udivmodsi4>
    2480:	2e 5f       	subi	r18, 0xFE	; 254
    2482:	3f 4f       	sbci	r19, 0xFF	; 255
    2484:	4f 4f       	sbci	r20, 0xFF	; 255
    2486:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    2488:	f5 01       	movw	r30, r10
    248a:	26 83       	std	Z+6, r18	; 0x06
    248c:	37 83       	std	Z+7, r19	; 0x07
    248e:	40 87       	std	Z+8, r20	; 0x08
    2490:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    2492:	27 3f       	cpi	r18, 0xF7	; 247
    2494:	ff e0       	ldi	r31, 0x0F	; 15
    2496:	3f 07       	cpc	r19, r31
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	4f 07       	cpc	r20, r31
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	5f 07       	cpc	r21, r31
    24a0:	10 f4       	brcc	.+4      	; 0x24a6 <pf_mount+0x19c>
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <pf_mount+0x19e>
    24a6:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    24a8:	27 5f       	subi	r18, 0xF7	; 247
    24aa:	3f 4f       	sbci	r19, 0xFF	; 255
    24ac:	40 40       	sbci	r20, 0x00	; 0
    24ae:	50 40       	sbci	r21, 0x00	; 0
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <pf_mount+0x1aa>
    24b2:	83 e0       	ldi	r24, 0x03	; 3
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    24b4:	f5 01       	movw	r30, r10
    24b6:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	29 f4       	brne	.+10     	; 0x24c6 <pf_mount+0x1bc>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    24bc:	88 a1       	ldd	r24, Y+32	; 0x20
    24be:	99 a1       	ldd	r25, Y+33	; 0x21
    24c0:	aa a1       	ldd	r26, Y+34	; 0x22
    24c2:	bb a1       	ldd	r27, Y+35	; 0x23
    24c4:	09 c0       	rjmp	.+18     	; 0x24d8 <pf_mount+0x1ce>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    24c6:	f5 01       	movw	r30, r10
    24c8:	82 85       	ldd	r24, Z+10	; 0x0a
    24ca:	93 85       	ldd	r25, Z+11	; 0x0b
    24cc:	a4 85       	ldd	r26, Z+12	; 0x0c
    24ce:	b5 85       	ldd	r27, Z+13	; 0x0d
    24d0:	86 0d       	add	r24, r6
    24d2:	97 1d       	adc	r25, r7
    24d4:	a8 1d       	adc	r26, r8
    24d6:	b9 1d       	adc	r27, r9
    24d8:	86 87       	std	Z+14, r24	; 0x0e
    24da:	97 87       	std	Z+15, r25	; 0x0f
    24dc:	a0 8b       	std	Z+16, r26	; 0x10
    24de:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    24e0:	f5 01       	movw	r30, r10
    24e2:	84 81       	ldd	r24, Z+4	; 0x04
    24e4:	95 81       	ldd	r25, Z+5	; 0x05
    24e6:	b4 e0       	ldi	r27, 0x04	; 4
    24e8:	96 95       	lsr	r25
    24ea:	87 95       	ror	r24
    24ec:	ba 95       	dec	r27
    24ee:	e1 f7       	brne	.-8      	; 0x24e8 <pf_mount+0x1de>
    24f0:	a0 e0       	ldi	r26, 0x00	; 0
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	22 85       	ldd	r18, Z+10	; 0x0a
    24f6:	33 85       	ldd	r19, Z+11	; 0x0b
    24f8:	44 85       	ldd	r20, Z+12	; 0x0c
    24fa:	55 85       	ldd	r21, Z+13	; 0x0d
    24fc:	82 0f       	add	r24, r18
    24fe:	93 1f       	adc	r25, r19
    2500:	a4 1f       	adc	r26, r20
    2502:	b5 1f       	adc	r27, r21
    2504:	86 0d       	add	r24, r6
    2506:	97 1d       	adc	r25, r7
    2508:	a8 1d       	adc	r26, r8
    250a:	b9 1d       	adc	r27, r9
    250c:	82 8b       	std	Z+18, r24	; 0x12
    250e:	93 8b       	std	Z+19, r25	; 0x13
    2510:	a4 8b       	std	Z+20, r26	; 0x14
    2512:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    2514:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    2516:	b0 92 68 00 	sts	0x0068, r11
    251a:	a0 92 67 00 	sts	0x0067, r10
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <pf_mount+0x21e>

	return FR_OK;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <pf_mount+0x21e>
    2526:	87 e0       	ldi	r24, 0x07	; 7
}
    2528:	a4 96       	adiw	r28, 0x24	; 36
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	ff 90       	pop	r15
    253e:	ef 90       	pop	r14
    2540:	df 90       	pop	r13
    2542:	cf 90       	pop	r12
    2544:	bf 90       	pop	r11
    2546:	af 90       	pop	r10
    2548:	9f 90       	pop	r9
    254a:	8f 90       	pop	r8
    254c:	7f 90       	pop	r7
    254e:	6f 90       	pop	r6
    2550:	08 95       	ret

00002552 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	sbi	DDR_CS		; CS: output
    2552:	b8 9a       	sbi	0x17, 0	; 23
	sbi	DDR_DI		; DI: output
    2554:	ba 9a       	sbi	0x17, 2	; 23
	sbi	DDR_CK		; SCLK: output
    2556:	b9 9a       	sbi	0x17, 1	; 23
	sbi	PORT_DO		; DO: pull-up
    2558:	c3 9a       	sbi	0x18, 3	; 24
	ret
    255a:	08 95       	ret

0000255c <dly_100us>:
; void dly_us (UINT n);

.global dly_100us
.func dly_100us
dly_100us:
	ldi	r24, lo8(80)	/* Loop counter for 8mhz*/
    255c:	80 e5       	ldi	r24, 0x50	; 80
1:	sbiw	r30, 1		/* 10 clocks per loop */
    255e:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    2560:	31 97       	sbiw	r30, 0x01	; 1
	sbiw	r30, 1
    2562:	31 97       	sbiw	r30, 0x01	; 1
	nop
    2564:	00 00       	nop
	dec	r24
    2566:	8a 95       	dec	r24
	brne	1b
    2568:	d1 f7       	brne	.-12     	; 0x255e <dly_100us+0x2>
	ret
    256a:	08 95       	ret

0000256c <select>:
; void select (void);

.global select
.func select
select:
	rcall	deselect
    256c:	02 d0       	rcall	.+4      	; 0x2572 <deselect>
	cbi	PORT_CS
    256e:	c0 98       	cbi	0x18, 0	; 24
	rjmp	rcv_spi
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <rcv_spi>

00002572 <deselect>:
; void deselect (void);

.global deselect
.func deselect
deselect:
	sbi	PORT_CS
    2572:	c0 9a       	sbi	0x18, 0	; 24

00002574 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0xFF	; Send 0xFF to receive data
    2574:	8f ef       	ldi	r24, 0xFF	; 255

00002576 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 8
    2576:	98 e0       	ldi	r25, 0x08	; 8
1:	sbrc	r24, 7		; DI = Bit to sent
    2578:	87 fd       	sbrc	r24, 7
	sbi	PORT_DI		; 
    257a:	c2 9a       	sbi	0x18, 2	; 24
	sbrs	r24, 7		; 
    257c:	87 ff       	sbrs	r24, 7
	cbi	PORT_DI		; /
    257e:	c2 98       	cbi	0x18, 2	; 24
	lsl	r24		; Get DO from MMC
    2580:	88 0f       	add	r24, r24
	sbic	PIN_DO		; 
    2582:	b3 99       	sbic	0x16, 3	; 22
	inc	r24		; /
    2584:	83 95       	inc	r24
	sbi	PORT_CK		; A positive pulse to SCLK
    2586:	c1 9a       	sbi	0x18, 1	; 24
	cbi	PORT_CK		; /
    2588:	c1 98       	cbi	0x18, 1	; 24
	dec	r25		; Repeat 8 times
    258a:	9a 95       	dec	r25
	brne	1b		; /
    258c:	a9 f7       	brne	.-22     	; 0x2578 <xmit_spi+0x2>
	ret
    258e:	08 95       	ret

00002590 <flash_erase>:

.global flash_erase
.func flash_erase
flash_erase:

	movw	ZL, r22
    2590:	fb 01       	movw	r30, r22
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Initiate erase operation
	ldi	r24, 0b00000011
    2592:	83 e0       	ldi	r24, 0x03	; 3
	sts	_SFR_MEM_ADDR(SPMCR), r24
    2594:	80 93 57 00 	sts	0x0057, r24
	spm
    2598:	e8 95       	spm

	; Wait for end of erase operation
1:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    259a:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    259e:	80 fd       	sbrc	r24, 0
	rjmp	1b
    25a0:	fc cf       	rjmp	.-8      	; 0x259a <flash_erase+0xa>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    25a2:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    25a4:	80 93 57 00 	sts	0x0057, r24
	spm
    25a8:	e8 95       	spm

9:	ret
    25aa:	08 95       	ret

000025ac <flash_write>:
; void flash_write (DWORD flash_addr, const BYTE* data);

.global flash_write
.func flash_write
flash_write:
	push	r0
    25ac:	0f 92       	push	r0
	push	r1
    25ae:	1f 92       	push	r1
#if FLASHEND >= 0x10000
	out	_SFR_IO_ADDR(RAMPZ), r24
#endif

	; Fill page buffer
	movw	ZL, r22
    25b0:	fb 01       	movw	r30, r22
	movw	XL, r20
    25b2:	da 01       	movw	r26, r20
	ldi	r25, lo8(SPM_PAGESIZE/2)
    25b4:	90 e4       	ldi	r25, 0x40	; 64
1:	ld	r0, X+
    25b6:	0d 90       	ld	r0, X+
	ld	r1, X+
    25b8:	1d 90       	ld	r1, X+
	ldi	r24, 0b00000001
    25ba:	81 e0       	ldi	r24, 0x01	; 1
	sts	_SFR_MEM_ADDR(SPMCR), r24
    25bc:	80 93 57 00 	sts	0x0057, r24
	spm
    25c0:	e8 95       	spm
	adiw	ZL, 2
    25c2:	32 96       	adiw	r30, 0x02	; 2
	dec	r25
    25c4:	9a 95       	dec	r25
	brne	1b
    25c6:	b9 f7       	brne	.-18     	; 0x25b6 <flash_write+0xa>

	; Initiate write operation
	movw	ZL, r22
    25c8:	fb 01       	movw	r30, r22
	ldi	r24, 0b00000101
    25ca:	85 e0       	ldi	r24, 0x05	; 5
	sts	_SFR_MEM_ADDR(SPMCR), r24
    25cc:	80 93 57 00 	sts	0x0057, r24
	spm
    25d0:	e8 95       	spm

	; Wait for end of write operation
2:	lds	r24, _SFR_MEM_ADDR(SPMCR)
    25d2:	80 91 57 00 	lds	r24, 0x0057
	sbrc	r24, 0
    25d6:	80 fd       	sbrc	r24, 0
	rjmp	2b
    25d8:	fc cf       	rjmp	.-8      	; 0x25d2 <flash_write+0x26>

	; Re-enable read access to the flash
	ldi	r24, 0b00010001
    25da:	81 e1       	ldi	r24, 0x11	; 17
	sts	_SFR_MEM_ADDR(SPMCR), r24
    25dc:	80 93 57 00 	sts	0x0057, r24
	spm
    25e0:	e8 95       	spm

9:	pop	r1
    25e2:	1f 90       	pop	r1
	pop	r0
    25e4:	0f 90       	pop	r0
	ret
    25e6:	08 95       	ret

000025e8 <__mulsi3>:
    25e8:	62 9f       	mul	r22, r18
    25ea:	d0 01       	movw	r26, r0
    25ec:	73 9f       	mul	r23, r19
    25ee:	f0 01       	movw	r30, r0
    25f0:	82 9f       	mul	r24, r18
    25f2:	e0 0d       	add	r30, r0
    25f4:	f1 1d       	adc	r31, r1
    25f6:	64 9f       	mul	r22, r20
    25f8:	e0 0d       	add	r30, r0
    25fa:	f1 1d       	adc	r31, r1
    25fc:	92 9f       	mul	r25, r18
    25fe:	f0 0d       	add	r31, r0
    2600:	83 9f       	mul	r24, r19
    2602:	f0 0d       	add	r31, r0
    2604:	74 9f       	mul	r23, r20
    2606:	f0 0d       	add	r31, r0
    2608:	65 9f       	mul	r22, r21
    260a:	f0 0d       	add	r31, r0
    260c:	99 27       	eor	r25, r25
    260e:	72 9f       	mul	r23, r18
    2610:	b0 0d       	add	r27, r0
    2612:	e1 1d       	adc	r30, r1
    2614:	f9 1f       	adc	r31, r25
    2616:	63 9f       	mul	r22, r19
    2618:	b0 0d       	add	r27, r0
    261a:	e1 1d       	adc	r30, r1
    261c:	f9 1f       	adc	r31, r25
    261e:	bd 01       	movw	r22, r26
    2620:	cf 01       	movw	r24, r30
    2622:	11 24       	eor	r1, r1
    2624:	08 95       	ret

00002626 <__divmodhi4>:
    2626:	97 fb       	bst	r25, 7
    2628:	09 2e       	mov	r0, r25
    262a:	07 26       	eor	r0, r23
    262c:	0a d0       	rcall	.+20     	; 0x2642 <__divmodhi4_neg1>
    262e:	77 fd       	sbrc	r23, 7
    2630:	04 d0       	rcall	.+8      	; 0x263a <__divmodhi4_neg2>
    2632:	2e d0       	rcall	.+92     	; 0x2690 <__udivmodhi4>
    2634:	06 d0       	rcall	.+12     	; 0x2642 <__divmodhi4_neg1>
    2636:	00 20       	and	r0, r0
    2638:	1a f4       	brpl	.+6      	; 0x2640 <__divmodhi4_exit>

0000263a <__divmodhi4_neg2>:
    263a:	70 95       	com	r23
    263c:	61 95       	neg	r22
    263e:	7f 4f       	sbci	r23, 0xFF	; 255

00002640 <__divmodhi4_exit>:
    2640:	08 95       	ret

00002642 <__divmodhi4_neg1>:
    2642:	f6 f7       	brtc	.-4      	; 0x2640 <__divmodhi4_exit>
    2644:	90 95       	com	r25
    2646:	81 95       	neg	r24
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	08 95       	ret

0000264c <__udivmodsi4>:
    264c:	a1 e2       	ldi	r26, 0x21	; 33
    264e:	1a 2e       	mov	r1, r26
    2650:	aa 1b       	sub	r26, r26
    2652:	bb 1b       	sub	r27, r27
    2654:	fd 01       	movw	r30, r26
    2656:	0d c0       	rjmp	.+26     	; 0x2672 <__udivmodsi4_ep>

00002658 <__udivmodsi4_loop>:
    2658:	aa 1f       	adc	r26, r26
    265a:	bb 1f       	adc	r27, r27
    265c:	ee 1f       	adc	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	a2 17       	cp	r26, r18
    2662:	b3 07       	cpc	r27, r19
    2664:	e4 07       	cpc	r30, r20
    2666:	f5 07       	cpc	r31, r21
    2668:	20 f0       	brcs	.+8      	; 0x2672 <__udivmodsi4_ep>
    266a:	a2 1b       	sub	r26, r18
    266c:	b3 0b       	sbc	r27, r19
    266e:	e4 0b       	sbc	r30, r20
    2670:	f5 0b       	sbc	r31, r21

00002672 <__udivmodsi4_ep>:
    2672:	66 1f       	adc	r22, r22
    2674:	77 1f       	adc	r23, r23
    2676:	88 1f       	adc	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	1a 94       	dec	r1
    267c:	69 f7       	brne	.-38     	; 0x2658 <__udivmodsi4_loop>
    267e:	60 95       	com	r22
    2680:	70 95       	com	r23
    2682:	80 95       	com	r24
    2684:	90 95       	com	r25
    2686:	9b 01       	movw	r18, r22
    2688:	ac 01       	movw	r20, r24
    268a:	bd 01       	movw	r22, r26
    268c:	cf 01       	movw	r24, r30
    268e:	08 95       	ret

00002690 <__udivmodhi4>:
    2690:	aa 1b       	sub	r26, r26
    2692:	bb 1b       	sub	r27, r27
    2694:	51 e1       	ldi	r21, 0x11	; 17
    2696:	07 c0       	rjmp	.+14     	; 0x26a6 <__udivmodhi4_ep>

00002698 <__udivmodhi4_loop>:
    2698:	aa 1f       	adc	r26, r26
    269a:	bb 1f       	adc	r27, r27
    269c:	a6 17       	cp	r26, r22
    269e:	b7 07       	cpc	r27, r23
    26a0:	10 f0       	brcs	.+4      	; 0x26a6 <__udivmodhi4_ep>
    26a2:	a6 1b       	sub	r26, r22
    26a4:	b7 0b       	sbc	r27, r23

000026a6 <__udivmodhi4_ep>:
    26a6:	88 1f       	adc	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	5a 95       	dec	r21
    26ac:	a9 f7       	brne	.-22     	; 0x2698 <__udivmodhi4_loop>
    26ae:	80 95       	com	r24
    26b0:	90 95       	com	r25
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	08 95       	ret

000026b8 <do_rand>:
    26b8:	a0 e0       	ldi	r26, 0x00	; 0
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e2 e6       	ldi	r30, 0x62	; 98
    26be:	f3 e1       	ldi	r31, 0x13	; 19
    26c0:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__prologue_saves__+0x10>
    26c4:	ec 01       	movw	r28, r24
    26c6:	a8 80       	ld	r10, Y
    26c8:	b9 80       	ldd	r11, Y+1	; 0x01
    26ca:	ca 80       	ldd	r12, Y+2	; 0x02
    26cc:	db 80       	ldd	r13, Y+3	; 0x03
    26ce:	a1 14       	cp	r10, r1
    26d0:	b1 04       	cpc	r11, r1
    26d2:	c1 04       	cpc	r12, r1
    26d4:	d1 04       	cpc	r13, r1
    26d6:	41 f4       	brne	.+16     	; 0x26e8 <do_rand+0x30>
    26d8:	84 e2       	ldi	r24, 0x24	; 36
    26da:	a8 2e       	mov	r10, r24
    26dc:	89 ed       	ldi	r24, 0xD9	; 217
    26de:	b8 2e       	mov	r11, r24
    26e0:	8b e5       	ldi	r24, 0x5B	; 91
    26e2:	c8 2e       	mov	r12, r24
    26e4:	87 e0       	ldi	r24, 0x07	; 7
    26e6:	d8 2e       	mov	r13, r24
    26e8:	c6 01       	movw	r24, r12
    26ea:	b5 01       	movw	r22, r10
    26ec:	2d e1       	ldi	r18, 0x1D	; 29
    26ee:	33 ef       	ldi	r19, 0xF3	; 243
    26f0:	41 e0       	ldi	r20, 0x01	; 1
    26f2:	50 e0       	ldi	r21, 0x00	; 0
    26f4:	0e 94 bd 13 	call	0x277a	; 0x277a <__divmodsi4>
    26f8:	27 ea       	ldi	r18, 0xA7	; 167
    26fa:	31 e4       	ldi	r19, 0x41	; 65
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    2704:	7b 01       	movw	r14, r22
    2706:	8c 01       	movw	r16, r24
    2708:	c6 01       	movw	r24, r12
    270a:	b5 01       	movw	r22, r10
    270c:	2d e1       	ldi	r18, 0x1D	; 29
    270e:	33 ef       	ldi	r19, 0xF3	; 243
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	0e 94 bd 13 	call	0x277a	; 0x277a <__divmodsi4>
    2718:	ca 01       	movw	r24, r20
    271a:	b9 01       	movw	r22, r18
    271c:	2c ee       	ldi	r18, 0xEC	; 236
    271e:	34 ef       	ldi	r19, 0xF4	; 244
    2720:	4f ef       	ldi	r20, 0xFF	; 255
    2722:	5f ef       	ldi	r21, 0xFF	; 255
    2724:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__mulsi3>
    2728:	6e 0d       	add	r22, r14
    272a:	7f 1d       	adc	r23, r15
    272c:	80 1f       	adc	r24, r16
    272e:	91 1f       	adc	r25, r17
    2730:	97 ff       	sbrs	r25, 7
    2732:	04 c0       	rjmp	.+8      	; 0x273c <do_rand+0x84>
    2734:	61 50       	subi	r22, 0x01	; 1
    2736:	70 40       	sbci	r23, 0x00	; 0
    2738:	80 40       	sbci	r24, 0x00	; 0
    273a:	90 48       	sbci	r25, 0x80	; 128
    273c:	68 83       	st	Y, r22
    273e:	79 83       	std	Y+1, r23	; 0x01
    2740:	8a 83       	std	Y+2, r24	; 0x02
    2742:	9b 83       	std	Y+3, r25	; 0x03
    2744:	9b 01       	movw	r18, r22
    2746:	3f 77       	andi	r19, 0x7F	; 127
    2748:	c9 01       	movw	r24, r18
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	ea e0       	ldi	r30, 0x0A	; 10
    2750:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__epilogue_restores__+0x10>

00002754 <rand_r>:
    2754:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <do_rand>
    2758:	08 95       	ret

0000275a <rand>:
    275a:	80 e6       	ldi	r24, 0x60	; 96
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <do_rand>
    2762:	08 95       	ret

00002764 <srand>:
    2764:	a0 e0       	ldi	r26, 0x00	; 0
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	80 93 60 00 	sts	0x0060, r24
    276c:	90 93 61 00 	sts	0x0061, r25
    2770:	a0 93 62 00 	sts	0x0062, r26
    2774:	b0 93 63 00 	sts	0x0063, r27
    2778:	08 95       	ret

0000277a <__divmodsi4>:
    277a:	97 fb       	bst	r25, 7
    277c:	09 2e       	mov	r0, r25
    277e:	05 26       	eor	r0, r21
    2780:	0e d0       	rcall	.+28     	; 0x279e <__divmodsi4_neg1>
    2782:	57 fd       	sbrc	r21, 7
    2784:	04 d0       	rcall	.+8      	; 0x278e <__divmodsi4_neg2>
    2786:	62 df       	rcall	.-316    	; 0x264c <__udivmodsi4>
    2788:	0a d0       	rcall	.+20     	; 0x279e <__divmodsi4_neg1>
    278a:	00 1c       	adc	r0, r0
    278c:	38 f4       	brcc	.+14     	; 0x279c <__divmodsi4_exit>

0000278e <__divmodsi4_neg2>:
    278e:	50 95       	com	r21
    2790:	40 95       	com	r20
    2792:	30 95       	com	r19
    2794:	21 95       	neg	r18
    2796:	3f 4f       	sbci	r19, 0xFF	; 255
    2798:	4f 4f       	sbci	r20, 0xFF	; 255
    279a:	5f 4f       	sbci	r21, 0xFF	; 255

0000279c <__divmodsi4_exit>:
    279c:	08 95       	ret

0000279e <__divmodsi4_neg1>:
    279e:	f6 f7       	brtc	.-4      	; 0x279c <__divmodsi4_exit>
    27a0:	90 95       	com	r25
    27a2:	80 95       	com	r24
    27a4:	70 95       	com	r23
    27a6:	61 95       	neg	r22
    27a8:	7f 4f       	sbci	r23, 0xFF	; 255
    27aa:	8f 4f       	sbci	r24, 0xFF	; 255
    27ac:	9f 4f       	sbci	r25, 0xFF	; 255
    27ae:	08 95       	ret

000027b0 <__prologue_saves__>:
    27b0:	2f 92       	push	r2
    27b2:	3f 92       	push	r3
    27b4:	4f 92       	push	r4
    27b6:	5f 92       	push	r5
    27b8:	6f 92       	push	r6
    27ba:	7f 92       	push	r7
    27bc:	8f 92       	push	r8
    27be:	9f 92       	push	r9
    27c0:	af 92       	push	r10
    27c2:	bf 92       	push	r11
    27c4:	cf 92       	push	r12
    27c6:	df 92       	push	r13
    27c8:	ef 92       	push	r14
    27ca:	ff 92       	push	r15
    27cc:	0f 93       	push	r16
    27ce:	1f 93       	push	r17
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	ca 1b       	sub	r28, r26
    27da:	db 0b       	sbc	r29, r27
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	09 94       	ijmp

000027e8 <__epilogue_restores__>:
    27e8:	2a 88       	ldd	r2, Y+18	; 0x12
    27ea:	39 88       	ldd	r3, Y+17	; 0x11
    27ec:	48 88       	ldd	r4, Y+16	; 0x10
    27ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    27f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    27fa:	b9 84       	ldd	r11, Y+9	; 0x09
    27fc:	c8 84       	ldd	r12, Y+8	; 0x08
    27fe:	df 80       	ldd	r13, Y+7	; 0x07
    2800:	ee 80       	ldd	r14, Y+6	; 0x06
    2802:	fd 80       	ldd	r15, Y+5	; 0x05
    2804:	0c 81       	ldd	r16, Y+4	; 0x04
    2806:	1b 81       	ldd	r17, Y+3	; 0x03
    2808:	aa 81       	ldd	r26, Y+2	; 0x02
    280a:	b9 81       	ldd	r27, Y+1	; 0x01
    280c:	ce 0f       	add	r28, r30
    280e:	d1 1d       	adc	r29, r1
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	ed 01       	movw	r28, r26
    281c:	08 95       	ret

0000281e <_exit>:
    281e:	f8 94       	cli

00002820 <__stop_program>:
    2820:	ff cf       	rjmp	.-2      	; 0x2820 <__stop_program>
